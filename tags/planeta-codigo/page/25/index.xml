<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <updated>2022-05-05T19:00:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/</id>
        <title>Iniciar un stack de servicios en un cluster de Docker Swarm</title>
        <updated>2017-04-02T12:00:00+02:00</updated>
        <published>2017-04-02T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los <em>stacks</em> en Docker Swarm son definiciones en un archivo de texto en formato YAML de múltiples servicios además de volúmenes, redes de software y secretos. Esta definición de un <em>stack</em> ejecutado en un <em>cluster</em> de nodos Docker Swarm permite iniciar múltiples contenedores además de los otros elementos que necesiten para su funcionamiento. Los <em>stacks</em> son el equivalente para Docker Swarm de los archivos multicontenedor de Docker Compose, y el formato de ambos muy similar.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>Con <a href="https://docs.docker.com/compose/">Docker Compose</a> se pueden <a href="https://picodotdev.github.io/blog-bitix/2015/07/aplicaciones-multicontenedor-con-docker-compose/">definir en un único archivo un conjunto de contenedores</a> que forma un servicio o aplicación y que se lanzan como una unidad. En vez de ejecutar los comandos individuales que inician cada contenedor el archivo en formato <a href="https://www.yaml.org/">yaml</a> de Docker Compose define varios contenedores y al ser un archivo de texto es añadible a un sistema de control de versiones para registrar los cambios. La información del archivo de Docker Compose es la misma que se indicaría en el comando para iniciar un contenedor individual.</p>
<p>En versiones más recientes se ha modificado ligeramente el formato del archivo de Docker Compose para añadirle las características necesarias que necesita <a href="https://docs.docker.com/swarm/">Docker Swarm</a>, la <a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/">herramienta integrada en Docker que permite crear <em>clusters</em> de nodos</a> que ejecuten contenedores <a href="https://www.docker.com/">Docker</a>. A estos archivos ahora se les denomina como <em>stacks</em>. Así hay nuevas secciones como <em>services</em>, <em>networks</em>, <em>volumes</em> y <em>secrets</em> entre otras para soportar algunas funcionalidades adicionales. La sección <em>services</em> es similar a la que usábamos en Docker Compose y define los contenedores. Por ejemplo, para definir que el servicio se componga de un contenedor con un servidor web <a href="https://nginx.org/">nginx</a> usaríamos el siguiente archivo. El parámetro <em>version</em> es muy importante ya que indica las opciones soportadas en el archivo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.1&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:stable-alpine</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">deploy</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-nginx.yml</span>
    </div>
</div>
<p>A destacar las opciones <em>deploy</em> y <em>replicas</em> ya que indican cuantas instancias o contenedores de ese servicio habrá en el <em>cluster</em>. Al igual que con los comandos de Docker Swarm era posible crear redes por software a las cuales conectar los contenedores para que se puedan comunicar entre sí en la sección <em>networks</em> de cada servicio se indica las redes a las que conectarlo y en la sección a nivel raíz del archivo las redes a crear.</p>
<p>También hay una sección propia para definir los volúmenes que dependiendo del <em>driver</em> se integra con diferentes plataformas de computación como <a href="https://aws.amazon.com/es/ec2/">Amazon EC2</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a>, <a href="https://www.virtualbox.org/">VirtualBox</a> con <a href="https://rexray.readthedocs.io/en/v0.3.3/">REX-Ray</a>, &hellip;. Los volúmenes proporcionan persistencia a los efímeros contenedores, por un lado almacenar datos que deban sobrevivir a la vida de un contenedor en su sistema de archivos es inadecuado ya que sus datos no son compartidos si se inicia otra instancia del contenedor y son eliminados cuando el contenedor desaparece, por otro lado en un <em>cluster</em> de contenedores Docker si un contenedor de un servicio finaliza inexperadamente Docker Swarm puede decidir reiniciarlo en cualquier otro nodo del <em>cluster</em> para mantener el estado del servicio por lo que los archivos compartidos no pueden estar tampoco en el <em>host</em> que hospeda los contenedores. Por estos motivos Docker Swarm necesita de un sistema de persistencia, que en este caso son los volúmenes definidos en la sección del mismo nombre <em>volumes</em>.</p>
<p>Para mayor seguridad se ha incorporado la sección <em>secrets</em> en la que se especifican elementos de datos como archivos que en el contenedor se montan en el directorio <em>/run/secrets/</em>. Algunos elementos sensibles como usuarios y contraseñas al proporcionarse como parámetros o variables de entorno aparecen haciendo un listado de procesos del sistema con sus respectivos comandos de lanzamiento y parámetros, lo que es un problema de seguridad. Hay otros elementos sensibles como claves SSH, claves privadas o certificados que ahora con los <em>secrets</em> no es necesario incluirlos en la propia imagen del contenedor.</p>
<p>La forma de iniciar y eliminar un <em>stack</em> en un <em>cluster</em> de nodos Docker Swarm es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker stack deploy -c docker-compose-stack-nginx.yml nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 30s&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Cluster services&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ls&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx_nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">echo</span> -e <span class="s2">&#34;\n# Node </span><span class="nv">$i</span><span class="s2"> containers&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;docker ps&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">echo</span> -e <span class="s2">&#34;\n# Node </span><span class="nv">$i</span><span class="s2"> request&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nv">NODE_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;curl http://<span class="nv">$NODE_IP</span>/&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-docker-compose-stack-deploy-nginx.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker stack rm nginx</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-remove-nginx.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/images/nginx-service_huaf72f50b5fc5509540108f173383460a_97355_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/images/nginx-service_huaf72f50b5fc5509540108f173383460a_97355_300x200_fit_box_3.png" width="281" height="200"  class="lozad "></a></p>
<figcaption>Cluster de nodos de Docker Swarm con servicio de nginx replicado con 2 instancias</figcaption>
</figure>
</div>
<p>En la captura de la terminal se aprecia como estando el <em>cluster</em> formado por tres nodos y el servicio estando replicado con dos instancias Docker Swarm ha decidido iniciar una instancia de contenedor nginx en el <em>nodo-01</em> y otra en el <em>nodo-03</em> pero perfectamente podría haber iniciado una de ellas en el <em>nodo-02</em>. Gracias a las capacidades de <em>networking</em> de Docker Swarm con <a href="https://docs.docker.com/engine/swarm/ingress/">Routing Mesh</a> al cualquier nodo que se le haga una petición al puerto 80 del servicio de nginx devolverá una respuesta, incluso si se hace en el ejemplo la petición al <em>nodo-02</em> la respuesta será devuelta aunque en ese nodo no tenga una instancia de contenedor ejecutándose, realmente redirigirá la petición de forma transparente para el cliente la petición a un nodo que si tenga una instancia de nginx. También, al estar el servicio replicado con dos instancias Docker Swarm realizará automáticamente un <a href="https://docs.docker.com/docker-cloud/getting-started/deploy-app/9_load-balance_the_service/">balanceo de carga</a> <em>round-robin</em> repartiendo las peticiones entre cada una de las instancias de nginx.</p>
<p>De los <em>volumes</em> y <em>secrets</em> en posteriores entregas de esta <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie de artículos sobre Docker</a> las comentaré de forma específica. El <em>stack</em> de servicios mostrado en este ejemplo es muy sencillo. Aunque también sencillo en el mismo código fuente del ejemplo incluyo otro <em>stack</em> formado por un servicio de nginx y una aplicación Java con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> que hace uso de <em>secrets</em> y <em>volumes</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.1&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:stable-alpine</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">proxy</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">nginx.conf</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">localhost.pem</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">localhost.key</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">sh -c &#34;exec nginx -c /run/secrets/nginx.conf -g &#39;daemon off;&#39;&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">app</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:5000/spring-boot-app:1.0</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;8080:8080&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">proxy</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">app:/data</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">message.txt</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">proxy</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">app</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">rexray</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx.conf</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./nginx.conf</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">localhost.pem</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./localhost.pem</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">localhost.key</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./localhost.key</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">message.txt</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./message.txt</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-app.yml</span>
    </div>
</div>
<p>Un libro que me ha gustado mucho y que recomiendo leer sobre Docker Swarm es <a href="https://amzn.to/2mIirti">The Devops 2.1 Toolkit</a> que lo explica detalladamente y todo el libro está orientado a como usarlo en un entorno de producción. Un libro más introductorio que también he leído y que está bastante bien es <a href="https://amzn.to/2mF3Xtj">Docker in Action</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1492036730&amp;linkId=666d0aff3a2629cd87c205370bc5ae87" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=9d344246cd59cd65a952305379c2556a" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=2101ae950cfcfe9e69b6cc1210e4bf2c" title="Amazon" class="lozad"></iframe>
</div>
<p>Docker Swarm es una opción simple y que está integrada en Docker pero no ofrece todas las funcionalidades de algunas otras opciones que el algunos casos de uso algo más avanzados son necesarias o convenientes. <a href="https://www.nomadproject.io/">Nomad</a> es otra opción simple para gestionar un conjunto de aplicaciones o servicios pero con algunas funcionalidades adicionales que no posee Docker Swarm como escribo en <a href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/">Introducción a Nomad para gestionar aplicaciones y microservicios</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.docker.com/engine/swarm/stack-deploy/">Deploy a stack to a swarm</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/">Compose file reference</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/</id>
        <title>Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java</title>
        <updated>2017-04-02T10:15:00+02:00</updated>
        <published>2017-03-31T19:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>El <em>kit</em> de iniciación a la electrónica para la Raspberry Pi tiene un sensor para la temperatura y humedad, el modelo DHT11. Obtener la información requiere restricciones de tiempo, este es un caso de uso justificado para usar lenguaje C y JNI para integrarlo con Java. En el ejemplo el código C llama a un método de una clase Java con dos valores enteros o lanza una excepción en caso de que al realizar la lectura haya habido algún error en la transmisión de los bits.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Entre los varios sensores incluídos en el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación para la Raspberry Pi</a> está el sensor de temperatura y humedad con el modelo DHT11. El DHT11 es un sensor muy básico pero suficiente y válido si el objetivo es trastear un poco con hardware.</p>
<p>En la <a href="http://www.micropik.com/PDF/dht11.pdf">especificación del sensor DHT11</a> está descrita su funcionamiento y forma de comunicación. Utiliza 3 cables, uno para la corriente de 3.3V, otro para tierra y finalmente uno de datos que se conecta a cualquier <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> de la Raspberry Pi. Según la especificación el sensor proporciona sus datos en unos 4 ms cuando se le emite un pulso bajo durante unos pocos microsegundos y a continuación uno alto durante otros pocos microsegundos, momento a partir del cual el sensor emite 40 bits de información empezando por un pulso bajo de inicio y a continuación el propio bit con un pulso alto, según sea la duración del pulso alto el bit se considera un 0 si es menor de unos 27μs y un 1 si dura más de ese tiempo hasta unos 80μs momento en el que se emite el siguiente bit de información. Los primeros 8 bits corresponden a la parte entera de la humedad, los siguientes 8 bits a la parte decimal de la humedad, el tercer grupo de 8 bits a la parte entera de la temperatura y 8 bits más para la parte decimal. El último grupo de 8 bits hasta completar los 40 bits son de <em>checksum</em> para detectar errores en la transmisión. El porcentaje de errores en la transmisión significativo en este sensor y quizá haya que realizar varias lecturas del sensor para obtener una correcta.</p>
<p>Dada las restricciones de tiempo que utiliza el sensor en el ejemplo usaré el lenguaje C para obtener los valores de temperatura y humedad y <abbr title="Java Native Interface">JNI</abbr> para acceder a ellos desde Java. Aún usando C se producen errores en la obtención de los valores ya que el método usado por el sensor y transmitir los datos basados en tiempo de microsegundos no es muy fiable. Usando Java la situación sería peor por las restricciones que impone la máquina virtual con sus paradas para la recolección de basura por ejemplo. Así que el ejemplo consistirá en una combinación de C y Java con JNI un poco más avanzado que el <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/">Ejemplo de JNI, usar código en C desde Java</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-1_huf15bd8a2768efd9c6ad1887c2eb98f8b_135926_2560x1440_fit_q90_box.jpg" data-gallery="" title="Sensor DHT11"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-1_huf15bd8a2768efd9c6ad1887c2eb98f8b_135926_300x200_fit_q90_box.jpg" width="300" height="118" alt="Sensor DHT11" title="Sensor DHT11"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-2_huc8d787f20ca8a7e91a1094d8f98d55f1_124881_2560x1440_fit_q90_box.jpg" data-gallery="" title="Sensor DHT11"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-2_huc8d787f20ca8a7e91a1094d8f98d55f1_124881_300x200_fit_q90_box.jpg" width="300" height="129" alt="Sensor DHT11" title="Sensor DHT11"  class="lozad "></a></p>
<figcaption>Sensor DHT11</figcaption>
</figure>
</div>
<p>Lo primero que deberemos hacer para acceder a la información del sensor desde Java es crear una clase que contenga un método nativo que realizará la lectura de la información en C. Con la utilidad <em>javah</em> obtendremos el archivo de cabecera que implementará el programa en C. Finalmente, siguiendo la especificación se escribe el código C que realice la lectura que en este caso usará la librería <a href="http://wiringpi.com/">wiringPi</a> para la interacción con los <em>pines</em> GPIO de la Raspberry Pi.</p>
<p>El código en C invocará el método <em>setTemperatureHumidity</em> pasando como parámetros los datos de temperatura y humedad leídos del sensor, el método nativo <em>read</em> es utilizado por el código Java que controla el sensor para realizar la lectura en el código C.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.StandardCopyOption</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dht11</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">architecture</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;os.arch&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">library</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;/libdht11-%s.so&#34;</span><span class="o">,</span> <span class="n">architecture</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">Dht11</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">library</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">&#34;libdht11&#34;</span><span class="o">,</span> <span class="s">&#34;so&#34;</span><span class="o">).</span><span class="na">toPath</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">int</span> <span class="n">gpio</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">temperature</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">humidity</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Dht11</span><span class="o">(</span><span class="kt">int</span> <span class="n">gpio</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">gpio</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">init</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">(</span><span class="kt">int</span> <span class="n">gpio</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">5</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">read</span><span class="o">(</span><span class="n">gpio</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">break</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getTemperature</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">temperature</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getHumidity</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">humidity</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="nf">getDate</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTemperatureHumidity</span><span class="o">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">humidity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">temperature</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">humidity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Dht11</span> <span class="n">sensor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dht11</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sensor</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Temperature (C): %f, Humidity: %f%n&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;No temperature/humidity&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/* Header for class io_github_picodotdev_blogbitix_javaraspberrypi_Dht11 */</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifndef _Included_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#define _Included_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/*&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;init&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Signature: ()V&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="n">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_init</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cm">/*&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;read&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Signature: (I)V&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_read</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jint</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.h</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;wiringPi.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  &#10;</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io_github_picodotdev_blogbitix_javaraspberrypi_Dht11.h&#34;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#define MAXTIMINGS 85&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_init</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">wiringPiSetup</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_read</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">gpio</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">uint8_t</span> <span class="n">state</span>	<span class="o">=</span> <span class="n">HIGH</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">counter</span>	<span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">j</span>		<span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">pinMode</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">digitalWrite</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">delay</span><span class="p">(</span><span class="mi">18</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">digitalWrite</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">pinMode</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAXTIMINGS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">gpio</span><span class="p">)</span> <span class="o">==</span> <span class="n">state</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">counter</span><span class="o">++</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">255</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">break</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">state</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">gpio</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">255</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">break</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">dht11_dat</span><span class="p">[</span><span class="n">j</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">&gt;</span> <span class="mi">16</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">dht11_dat</span><span class="p">[</span><span class="n">j</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">j</span><span class="o">++</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">40</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">dht11_dat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="p">((</span><span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)))</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jmethodID</span> <span class="n">method</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&#34;setTemperatureHumidity&#34;</span><span class="p">,</span> <span class="s">&#34;(II)V&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;java/io/IOException&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&#34;Failed read&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.c</span>
    </div>
</div>
<p>El código en C del sensor hay que compilarlo en la Raspberry Pi con el compilador <a href="https://gcc.gnu.org/">gcc</a> obteniendo una librería con código nativo que Java y JNI cargará y enlazará de forma dinámica en el programa Java. Ya que el código C usa la librería wiringPi ha de instalarse previamente junto con el compilador gcc. Obtenida la librería la copiamos mediante FTP o SSH de la Raspberry Pi a nuestro equipo de desarrollo. El código C realiza la lectura usando la librería wiringPi siguiendo la especificación de como se transmiten los datos por el sensor, realizada una lectura correcta usa varias de las funciones de la estructura <a href="http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html">JNIEnv</a> para obtener la referencia a un método de la clase DHT11 e invocarlo con los valores obtenidos del sensor o lanza una excepción si la lectura ha sido errónea.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># pacman -S wiringpi gcc</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>install-packages.sh</span>
    </div>
</div>
<p>El comando para compilar la librería de código nativo a partir del código en C y el archivo de cabecera generado con <em>javah</em> es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include&#34;</span> -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span> -shared -fPIC -L/usr/lib -lwiringPi -o libdht11-arm.so Dht11.c&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>compile.sh</span>
    </div>
</div>
<p>Para facilitar la ejecución la librería la proporcionó ya compilada y ubicada en el directorio <em>src/main/resources</em> de modo que será incluida en el archivo <em>jar</em> generado por <a href="https://gradle.org/">Gradle</a> en el ejemplo y que la clase DHT11 extraerá al directorio temporal del sistema y cargará para su uso.</p>
<p>La clase Java del ejemplo que hace uso del sensor realiza una lectura cada 3 segundos e imprime en la terminal y en el <em>display</em> 1602 el último valor obtenido correctamente de la temperatura y humedad.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.I2CLcd</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.api.I2CConstants</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.ByteOrder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ScheduledExecutorService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TemperatureHumidity</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Dht11</span> <span class="n">sensor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dht11</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ScheduledExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">I2CLcd</span> <span class="n">lcd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">I2CLcd</span><span class="o">(</span><span class="n">I2CConstants</span><span class="o">.</span><span class="na">BUS_0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">DEFAULT_DEVICE_ADDRESS</span><span class="o">,</span> <span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="n">2</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Runnable</span> <span class="n">monitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sensor</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Temperature: %dºC, Humidity: %d%%, Date: %s%n&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">get</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_DATE_TIME</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;T: %dC, H: %d%% &#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">get</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;HH:mm:ss&#34;</span><span class="o">))));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;No data&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">service</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">monitor</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">60000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TemperatureHumidity.java</span>
    </div>
</div>
<p>Este es el esquema de conexiones que he utilizado para el ejemplo y una foto del cableado real, he usado del <em>pin</em> GPIO número 2 según la nomenclatura de wiringPi para el cable de datos del sensor DHT11 que se corresponde con pin número 13 según la nomenclatura del <em>header</em> de la Raspberry Pi. Para ver el cableado del <em>display</em> 1602 más detalladamente y la activación del bus de comunicación I2C que necesita consulta el artículo <a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/">Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/cableado_hu0d8a80d75f578f66ed41ed680a8be94b_791258_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado sensor DHT11 y display 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/cableado_hu0d8a80d75f578f66ed41ed680a8be94b_791258_300x200_fit_q90_box.jpg" width="263" height="200" alt="Cableado sensor DHT11 y display 1602" title="Cableado sensor DHT11 y display 1602"  class="lozad "></a></p>
<figcaption>Cableado sensor DHT11 y display 1602</figcaption>
</figure>
</div>
<p>Ejecutando el programa del ejemplo y usando el display 1602 (16 columnas y 2 filas) se muestra la temperatura y humedad obtenida del sensor.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/temperature-humidity_hu134d612f6f9e28cd0b81ff333d54b875_1380733_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado ejemplo y funcionando"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/temperature-humidity_hu134d612f6f9e28cd0b81ff333d54b875_1380733_300x200_fit_q90_box.jpg" width="294" height="200" alt="Cableado ejemplo y funcionando" title="Cableado ejemplo y funcionando"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/display_hu1f1e292a1d4cb70e5c9f82a94dd9173b_251674_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado ejemplo y funcionando"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/display_hu1f1e292a1d4cb70e5c9f82a94dd9173b_251674_300x200_fit_q90_box.jpg" width="300" height="162" alt="Cableado ejemplo y funcionando" title="Cableado ejemplo y funcionando"  class="lozad "></a></p>
<figcaption>Cableado ejemplo y funcionando</figcaption>
</figure>
</div>
<p>En el kernel de Linux hay un módulo que proporciona también los valores del sensor, sin embargo, no he conseguido obtener la temperatura y humedad usándolo. Lo he probado con el kernel 4.4 de Arch Linux ARM y en la versión 4.9 veo que hay cambios en este módulo que quizá lo hagan funcionar. Para usar el módulo del kernel hay que añadir un poco de configuración para el inicio de la Raspberry Pi. En los archivos <em>/sys/devices/platform/dht11@0/iio:device0/in_temp_input</em> y <em>/sys/devices/platform/dht11@0/iio:device0/in_temp_input</em> estarán la temperatura y humedad respectivamente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">dtoverlay=dht11,gpiopin=2&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>kernel-module-config.txt</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat /sys/bus/iio/devices/iio:device0/in_temp_input&#10;</span></span><span class="line"><span class="cl">$ cat /sys/devices/platform/dht11@0/iio:device0/in_temp_input&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>cat.sh</span>
    </div>
</div>
<p>Para ejecutar el ejemplo con ya todo instalado uso uno de los siguientes dos comandos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.TemperatureHumidity&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ ./gradlew executeTemperatureHumidity</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeTemperatureHumidity</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html">Java programming with JNI</a></li>
<li><a href="http://hirt.se/blog/?p=493">Accessing 1-wire Protocol Devices from Java</a></li>
<li><a href="http://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-the-raspberry-pi/">How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi</a></li>
<li><a href="http://www.prometec.net/sensores-dht11/">Sensores de temperatura DHT11</a></li>
<li><a href="https://github.com/Hexalyse/RPi-weather-log/blob/master/dht11.c">dht11.c</a></li>
<li><a href="http://www.uugear.com/portfolio/read-dht1122-temperature-humidity-sensor-from-raspberry-pi/">Read DHT11/22 Temperature &amp; Humidity Sensor from Raspberry Pi</a></li>
<li><a href="https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor">Digital output temperature and humidity sensor DHT11 - DHT22</a></li>
<li><a href="http://playground.arduino.cc/Main/DHT11Lib">A DHT11 Class for Arduino</a></li>
<li><a href="https://github.com/torvalds/linux/blob/master/drivers/iio/humidity/dht11.c">torvalds/linux/blob/master/drivers/iio/humidity/dht11.c</a></li>
<li><a href="http://www.tortosaforum.com/raspberrypi/dht11driver.htm">RaspberryPi DHT11 temperature and humidity sensor driver</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/</id>
        <title>Ejemplo de JNI, usar código en C desde Java</title>
        <updated>2017-03-25T10:05:00+01:00</updated>
        <published>2017-03-25T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Para tareas muy específicas que requieran alto rendimiento, baja latencia, tiempo real o haya restricciones de tiempo el lenguaje Java y la JVM pueden mostrar algunas limitaciones obligando a escribir alguna sección crítica de un programa en un lenguaje nativo como C o C++. Para hacer posible la integración entre Java y C existe en Java la API JNI. En este artículo mostraré como realizar un programa Java que emite el mensaje Hola Mundo desde una biblioteca compartida en C y usando JNI.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Nunca hasta ahora había tenido necesidad de crear un programa que no estuviese completamente escrito en el lenguaje Java. La <a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">API de Java</a> ofrece multitud de clases para cualquier funcionalidad que necesitemos desde estructuras de datos hasta algoritmos de búsqueda o criptografía. También porque el rendimiento de un programa en Java es suficiente y similar a un programa equivalente escrito en C o C++ gracias a las optimizaciones que implementa la máquina virtual de Java o <abbr title="Java Virtual Machine">JVM</abbr> aún siendo los programas Java compilados a una representación intermedia de <em>bytecode</em> independiente de la arquitectura de procesador y sistema operativo en archivos de extensión <em>class</em> y posteriormente interpretados y traducidos a la arquitectura de ejecución, lo que le proporciona a Java la conocida frase <em>&ldquo;Write once, run anywhere&rdquo;</em>.</p>
<p>Sin embargo, en casos que se necesita un alto rendimiento para tareas muy específicas o evitar las imposiciones de la máquina virtual como las paradas que realiza para el recolector de basura una solución es escribir esa funcionalidad crítica en lenguaje C, C++ e incluso en <a href="https://golang.org/">Go</a>. El caso de necesidad que me he encontrado es acceder a un sensor de temperatura DHT11 del <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a> para leer de él la temperatura y humedad. La forma que tiene el sensor DHT11 de proporcionar los datos tiene restricciones de tiempo, cuando se le requieren los valores envía 80 bits de datos donde un pulso de 27μs significa un 0 y un pulso de más de ese tiempo hasta 70μs significa un 1. Estas restricciones de tiempo del sensor y el hecho de que es en una modesta en potencia <a href="https://www.raspberrypi.org/">Raspberry Pi</a> 1 donde lo usaré hace que Java no sea capaz de leer correctamente los valores del sensor.</p>
<p>Acceder desde Java a código nativo en C requiere usar <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface o por sus siglas JNI</a>. Lo primero que hay que realizar es crear una clase que declare los métodos que serán implementados de forma nativa declarando estos métodos usando la palabra reservada <em>native</em> y que serán enlazados por la JVM cargando una librería compartida con <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#loadLibrary-java.lang.String-">System.loadLibrary()</a>. Creada la clase Java se ha de generar el archivo de cabecera <em>.h</em> propia del lenguaje C con el programa de utilidad del JDK <em>javah</em>. Con el archivo de cabecera se implementa la función y se crea una librería compartida en <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> usando el <a href="https://gcc.gnu.org/">compilador gcc</a>. Con la librería compartida se puede iniciar el programa Java. Si la biblioteca compartida no se encuentra se lanzará una excepción del tipo <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/UnsatisfiedLinkError.html">UnsatisfiedLinkError</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/UnsatisfiedLinkError_huafbea2a660c5da4daa8f678c6e8bc0ac_46763_2560x1440_fit_box_3.png" data-gallery="" title="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/UnsatisfiedLinkError_huafbea2a660c5da4daa8f678c6e8bc0ac_46763_300x200_fit_box_3.png" width="300" height="193" alt="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo" title="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo"  class="lozad "></a></p>
<figcaption>Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo</figcaption>
</figure>
</div>
<p>Algunas otras necesidades para hacer uso de JNI son:</p>
<ul>
<li>Acceder a características dependientes de la plataforma necesitadas por la aplicación que no están soportadas en la librería estándar de Java.</li>
<li>Ya hay una librería escrita en otro lenguaje y se quiere hacer accesible a código Java a través de JNI.</li>
<li>Se quiere implementar una pequeña parte de código crítico en un lenguaje de bajo nivel como ensamblador.</li>
</ul>
<p>Desde los métodos de código nativo se puede:</p>
<ul>
<li>Crear, inspeccionar y actualizar objetos Java (incluyendo arrays y strings).</li>
<li>Llamar a métodos Java.</li>
<li>Capturar y lanzar excepciones.</li>
<li>Cargar y obtener información de clases.</li>
<li>Realizar validación de tipos en tiempo de ejecución.</li>
</ul>
<p>Los comandos para generar el archivo de cabecera de C y compilarlo con el código nativo en una librería compartida con gcc son:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ javah -d src/main/c -classpath buil/classes/main io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#10;</span></span><span class="line"><span class="cl">$ gcc -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include&#34;</span> -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span> -shared -fPIC -L/usr/lib -o src/main/resources/libjnihelloworld-amd64.so src/main/c/JniHelloWorld.c&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">javah1</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s2">&#34;javah&#34;</span><span class="o">,</span> <span class="s2">&#34;-d&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/c&#34;</span><span class="o">,</span> <span class="s2">&#34;-classpath&#34;</span><span class="o">,</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span><span class="o">,</span> <span class="s2">&#34;io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">javah</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;javah1&#39;</span><span class="o">,</span> <span class="s1">&#39;javah2&#39;</span><span class="o">]){</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">gcc1</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;javah&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s2">&#34;gcc&#34;</span><span class="o">,</span> <span class="s2">&#34;-shared&#34;</span><span class="o">,</span> <span class="s2">&#34;-fPIC&#34;</span><span class="o">,</span> <span class="s2">&#34;-I/usr/lib/jvm/java-8-openjdk/include&#34;</span><span class="o">,</span> <span class="s2">&#34;-I/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span><span class="o">,</span> <span class="s2">&#34;-o&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/resources/libjnihelloworld-amd64.so&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/c/JniHelloWorld.c&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">gcc</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;gcc1&#39;</span><span class="o">]){</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">executeJniHelloWorldLocal</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;build&#39;</span><span class="o">,</span> <span class="s1">&#39;gcc&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La cabecera usa varias definiciones de tipos definidas en los archivos <em>jni.h</em> y el archivo que variará según el sistema operativo <em>jni_md.h</em>. En la <a href="http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html">estructura JNIEnv</a> con múltiples funciones de integración en C y Java, también varias definiciones de los tipos Java para usarlos en C como <em>jobject</em>, <em>jstring</em>, <em>jint</em>, <em>jboolean</em>, <em>jlong</em>, <em>jdouble</em>, <em>jchar</em>, etc.</p>
<p>El programa que emite el mensaje <em>Hello World!</em> desde código nativo en C debe cargar y enlazar la librería de código nativo con el código de la clase Java. Esto se muestra en el bloque de inicialización <em>static</em> de la clase, en este caso usándo el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#load-java.lang.String-">System.load()</a>, la librería de código nativo de extensión <em>.so</em> en GNU/Linux como en este caso al construirse el proyecto se incluye en el archivo <em>.jar</em> del artefacto resultante se extráe al directorio temporal y se carga desde esa ubicación temporal. En el programa se llama al método <em>print</em> implementado en código nativo y en el código C se usa la función <em>printf</em> de la librería <em>stdio</em> para emitir el mensaje:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.StandardCopyOption</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JniHelloWorld</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">architecture</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;os.arch&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">library</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;/libjnihelloworld-%s.so&#34;</span><span class="o">,</span> <span class="n">architecture</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">JniHelloWorld</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">library</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">&#34;libjnihelloworld&#34;</span><span class="o">,</span> <span class="s">&#34;so&#34;</span><span class="o">).</span><span class="na">toPath</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">JniHelloWorld</span><span class="o">().</span><span class="na">print</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld.h&#34;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld_print</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.c</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/* Header for class io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld */</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifndef _Included_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#define _Included_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/*&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;print&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Signature: ()V&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="n">Java_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld_print</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.h</span>
    </div>
</div>
<p>La librería compartida para un sistema <em>amd64</em> la he compilado en mi equipo de escritorio y para la versión <em>arm</em> en la Raspberry Pi e incluido en el directorio <em>src/main/resources</em> de código fuente del ejemplo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew build&#10;</span></span><span class="line"><span class="cl">$ java -classpath build/classes/main:build/resources/main io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-amd64_hub2b4c641f5fe198f142e57637f8a6ec4_27206_2560x1440_fit_box_3.png" data-gallery="" title="Mensaje en la terminal emitido desde código nativo (amd64)"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-amd64_hub2b4c641f5fe198f142e57637f8a6ec4_27206_300x200_fit_box_3.png" width="300" height="193" alt="Mensaje en la terminal emitido desde código nativo (amd64)" title="Mensaje en la terminal emitido desde código nativo (amd64)"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-arm_hu6c56be07a094fe8914ade92188032253_34069_2560x1440_fit_box_3.png" data-gallery="" title="Mensaje en la terminal emitido desde código nativo (ARM)"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-arm_hu6c56be07a094fe8914ade92188032253_34069_300x200_fit_box_3.png" width="300" height="193" alt="Mensaje en la terminal emitido desde código nativo (ARM)" title="Mensaje en la terminal emitido desde código nativo (ARM)"  class="lozad "></a></p>
<figcaption>Mensaje en la terminal emitido desde código nativo en un sistema amd64 y ARM</figcaption>
</figure>
</div>
<p>Ente ejemplo usa Java 8 y requiere instalar el compilador gcc para compilar la librería con código nativo. <a href="https://gradle.org/">Gradle</a> ofrece soporte para <a href="https://docs.gradle.org/3.4.1/userguide/native_software.html">compilar código nativo con su plugin</a>, sin embargo, he preferido usar y conocer los comandos javah y gcc sin usar Gradle. En el siguiente artículo mostraré el ejemplo del sensor DHT11 usando JNI y código nativo en C llamando a métodos de un objeto Java desde código C.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeJniHelloWorldLocal</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://blog.dogan.io/2015/08/15/java-jni-jnr-go/">GO: Call me maybe, Java!</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</a></li>
<li><a href="http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html">Java Programming Tutorial, Java Native Interface (JNI)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/</id>
        <title>Introducción y ejemplo de cluster de contenedores con Docker Swarm</title>
        <updated>2017-03-19T12:00:00+01:00</updated>
        <published>2017-03-19T12:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Las funcionalidades de Docker Swarm están incorporadas en Docker para gestionar <em>clusters</em> de nodos con contenedores de los servicios que deseemos. En artículo comentaré algunas de las propiedades de <em>networkning</em> distribuido incorporado en Docker, como crear un <em>cluster</em> de nodos Docker usando VirtualBox con máquinas virtuales para simular múltiples máquinas junto con como lanzar un servicio en el <em>cluster</em> que en este caso consistirá en un servidor web nginx.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>En <a href="https://picodotdev.github.io/blog-bitix/series/docker/">artículos anteriores de la serie sobre Docker</a> comentaba varias de las herramientas de <a href="https://www.docker.com/">Docker</a> como <a href="https://docs.docker.com/compose/">Docker Compose</a>, Dockerfile o <a href="https://docs.docker.com/machine/">Docker Machine</a> con ejemplos de como usarlo en local. Una de las herramientas que me quedaba por investigar era <a href="https://docs.docker.com/swarm/">Docker Swarm</a> para crear <em>clusters</em> de nodos para contenedores Docker en un entorno de producción. A partir de la versión 1.12 de Docker se han incorporado varias características a Docker para usar contenedores de forma distribuida y que a pesar de la complejidad subyacente que debe haber es realmente simple usarlo.</p>
<p>Una de las características es el <em>networking</em> que hace transparente la comunicación en red distribuida que se hace entre los nodos y los contenedores de esos nodos. Además permite crear redes por software para que los contenedores conectados a esas redes se comuniquen de forma privada. Otra característica interesante de Docker Swarm es que se encarga de monitorizar el estado de los servicios recreando contenedores si alguno deja de funcionar. También a través del denominado <em>routing mesh</em> da igual al nodo del <em>cluster</em> por el que se acceda y da igual en que nodo esté el contenedor que Docker Swarm con esta propiedad se encargará de hacer llegar la petición al contenedor. Además, a lo que en Docker Swarm se denomina servicio se realiza balanceo de carga entre la instancias del mismo que haya en el <em>cluster</em> y al servicio se le asigna un DNS y dirección IP por el que puede ser accedido por otros servicios.</p>
<p>En el siguiente ejemplo para crear el <em>cluster</em> de nodos Docker usaré Docker Machine para crear las máquinas de los nodos en máquinas virtuales de <a href="https://www.virtualbox.org/">VirtualBox</a> aunque su funcionamiento es similar si usásemos la nube de <a href="https://aws.amazon.com/es/ec2/">Amazon EC2</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a> u otros.</p>
<p>El siguiente <em>script</em> crea primeramente varios nodos cada uno en una máquina virtual, luego establece el nodo 01 como <em>manager</em> y los nodos 02 y 03 como <em>workers</em> usando un <em>token</em> para unirlos al <em>cluster</em> según su rol. Los nodos <em>manager</em> se encargan de mantener el estado del <em>cluster</em> y los que a través de ellos los comandos de los servicios deben ser lanzados, en un entorno de producción posiblemente tendríamos 3 nodos <em>manager</em> para soportar tolerancia a fallos. Finalmente, se obtiene lista los nodos del <em>cluster</em>. El comando <code>docker-machine env node-01</code> permite establecer el entorno contra el que el comando <code>docker</code> lanzará las operaciones como si de la máquina local se tratase.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine create -d virtualbox node-<span class="nv">$i</span>&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">MANAGER_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker swarm init --advertise-addr <span class="nv">$MANAGER_IP</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">MANAGER_TOKEN</span><span class="o">=</span><span class="k">$(</span>docker swarm join-token -q manager<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">WORKER_TOKEN</span><span class="o">=</span><span class="k">$(</span>docker swarm join-token -q worker<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span><span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nv">WORKER_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	docker swarm join --token <span class="nv">$WORKER_TOKEN</span> --advertise-addr <span class="nv">$WORKER_IP</span> <span class="nv">$MANAGER_IP</span>:2377&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker-machine ls&#10;</span></span><span class="line"><span class="cl">docker node ls</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>01-cluster-create.sh</span>
    </div>
</div>
<p>Una vez creado los nodos es cuando podemos empezar a crear servicios en el <em>cluster</em>. Los servicios son una definición de los contenedores de Docker que queremos que el <em>cluster</em> ejecute. En el ejemplo definiré el servicio de un servidor web <a href="https://nginx.org/">nginx</a>, primeramente crearé una red por software en el <em>cluster</em> a la que los servicios pueden conectarse que en el ejemplo (aunque para este no es necesario) utilizaré para hacer una consulta DNS con la herramienta <a href="https://linux.die.net/man/1/drill">drill</a> para ver el nombre de dominio y dirección IP que asigna Docker Swarm al servicio del servidor web. Con <em>docker service create</em> se crean los servicios, algunos de los parámetros del comando son el nombre del servicio que queremos asignarle, los puertos que expone en este caso el 80 y 443 en el <em>host</em> para que sea accesible desde fuera del <em>cluster</em>, la redes a las que está conectado y finalmente la imagen del contenedor del servicio que en este caso será la versión de <a href="https://hub.docker.com/_/nginx/">nginx con Alpine para Docker</a>. Se pueden listar los servicios que contiene el <em>cluster</em> con <em>docker service ls</em> y los procesos de cada nodo donde podemos ver en que nodos se está ejecutando los contenedores con <em>docker ps</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker network create --driver overlay nginx&#10;</span></span><span class="line"><span class="cl">docker network ls -f <span class="s2">&#34;driver=overlay&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service create --name nginx -p 80:80 -p 443:443 --network nginx nginx:stable-alpine&#10;</span></span><span class="line"><span class="cl">sleep 1m&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service create --name util --network nginx --mode global alpine sleep <span class="m">1000000000</span>&#10;</span></span><span class="line"><span class="cl">sleep 1m&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service ls&#10;</span></span><span class="line"><span class="cl">docker service ps nginx&#10;</span></span><span class="line"><span class="cl">docker service ps util&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">UTIL_CONTAINER_ID</span><span class="o">=</span><span class="k">$(</span>docker ps -q --filter <span class="nv">label</span><span class="o">=</span>com.docker.swarm.service.name<span class="o">=</span>util<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it <span class="nv">$UTIL_CONTAINER_ID</span> apk add --update drill&#10;</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it <span class="nv">$UTIL_CONTAINER_ID</span> drill nginx&#10;</span></span><span class="line"><span class="cl">docker service rm util&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 5s&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">	docker ps&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nv">NODE_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;curl http://<span class="nv">$NODE_IP</span>/&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-nginx-create.sh</span>
    </div>
</div>
<p>Una de las propiedades interesantes del <em>networking</em> de Docker Swarm es que ofrece incorporado balanceo de carga, esto es, si el servicio de nginx del ejemplo estuviese formado por dos instancias las peticiones se distribuirían entre las instancias usando el método <em>round-robin</em>. Otra característica interesante si se observa el ejemplo con detalle es que da igual el nodo al que hagamos la petición que la respuesta se obtendrá igualmente, esto es, aunque la petición se haga al nodo 01 y realmente el contenedor del servidor nginx se esté ejecutando en el nodo 02 la petición se realizará correctamente gracias al <em>routing mesh</em> del <em>networking</em> de Docker Swarm, esto es gracias a que cada servicio tiene asignada una dirección IP, como se ha visto anteriormente en la salida del comando <code>drill</code>.</p>
<p>En este vídeo de <a href="https://asciinema.org/">asciinema</a> se ve en funcionamiento todos los anteriores comandos. Y en la aplicación de VirtualBox estarán las máquinas virtuales de cada uno de los nodos que crea el ejemplo. En el vídeo se aprecia que el servicio de nginx se está ejecutando en el nodo 02 cuando se listan los procesos de Docker de cada nodo con <em>docker ps</em>, nótese sin embargo que al hacer un petición HTTP a cualquiera de los nodos se devuelve la página de inicio de nginx ya que gracias al <em>routing mesh</em> de Docker Swarm la petición se redirige de forma transparente para el cliente y el servicio al nodo donde realmente se está ejecutando el contenedor de nginx.</p>
<div class="media">
<script type="text/javascript" src="https://asciinema.org/a/107868.js" id="asciicast-107868" async></script>
<noscript><a href="https://asciinema.org/a/107868" target="_blank"><img src="https://asciinema.org/a/107868.png" width="650" height="450"></a></noscript>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/images/maquinas-virtuales-cluster_huf8538b90e28f6002b8467479e07fb214_130650_2560x1440_fit_box_3.png" data-gallery="" title="Máquinas virtuales de los nodos del _cluster_ de Docker Swarm"><img src="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/images/maquinas-virtuales-cluster_huf8538b90e28f6002b8467479e07fb214_130650_300x200_fit_box_3.png" width="288" height="200" alt="Máquinas virtuales de los nodos del _cluster_ de Docker Swarm" title="Máquinas virtuales de los nodos del _cluster_ de Docker Swarm"  class="lozad "></a></p>
<figcaption>Máquinas virtuales de los nodos del cluster de Docker Swarm</figcaption>
</figure>
</div>
<p>Los comandos para eliminar un servicio del <em>cluster</em> y eliminar completamente el <em>cluster</em> son los siguientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service rm nginx&#10;</span></span><span class="line"><span class="cl">docker network rm nginx&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>nginx-remove.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine rm -f node-<span class="nv">$i</span>&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>cluster-remove.sh</span>
    </div>
</div>
<p>Un libro que me ha gustado mucho y que recomiendo leer sobre Docker Swarm es <a href="https://amzn.to/2mIirti">The Devops 2.1 Toolkit</a> que lo explica detalladamente y todo el libro está orientado a como usarlo en un entorno de producción. Un libro más introductorio que también he leído y que está bastante bien es <a href="https://amzn.to/2mF3Xtj">Docker in Action</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1492036730&amp;linkId=666d0aff3a2629cd87c205370bc5ae87" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=9d344246cd59cd65a952305379c2556a" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=2101ae950cfcfe9e69b6cc1210e4bf2c" title="Amazon" class="lozad"></iframe>
</div>
<p>Finalmente, quizás si estás usando GNU/Linux y VirtualBox como yo al crear los nodos con el comando <code>docker-machine</code> te produzca el siguiente error (quizá se corrija en futuras versiones de Docker o VirtualBox).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Setting Docker configuration on the remote daemon...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">This machine has been allocated an IP address, but Docker Machine could not&#10;</span></span><span class="line"><span class="cl">reach it successfully.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">SSH for the machine should still work, but connecting to exposed ports, such as&#10;</span></span><span class="line"><span class="cl">the Docker daemon port (usually &lt;ip&gt;:2376), may not work properly.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">You may need to add the route manually, or use another related workaround.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">This could be due to a VPN, proxy, or host file configuration issue.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">You also might want to clear any VirtualBox host only interfaces you are not using.&#10;</span></span><span class="line"><span class="cl">Checking connection to Docker...&#10;</span></span><span class="line"><span class="cl">Error creating machine: Error checking the host: Error checking and/or regenerating the certs: There was an error validating certificates for host &#34;192.168.99.100:2376&#34;: dial tcp 192.168.99.100:2376: i/o timeout&#10;</span></span><span class="line"><span class="cl">You can attempt to regenerate them using &#39;docker-machine regenerate-certs [name]&#39;.&#10;</span></span><span class="line"><span class="cl">Be advised that this will trigger a Docker daemon restart which might stop running containers.</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>vboxnet0-error.out</span>
    </div>
</div>
<p>La solución que he encontrado para que funcione es asignar una dirección IP al adaptador puente solo-anfitrión y levantar la interfaz que usa Docker para comunicarse con las máquinas virtuales previamente a crear el nodo. En <a href="https://www.archlinux.org/">Arch Linux</a> con los siguientes comandos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl">sudo ip addr add 192.168.99.1/24 dev vboxnet0&#10;</span></span><span class="line"><span class="cl">sudo ip link <span class="nb">set</span> dev vboxnet0 up</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>01-vboxnet0-configure.sh</span>
    </div>
</div>
<p>Se puede definir un conjunto de servicios como una unidad en un archivo en <em>stacks</em> de forma similar a como es posible hacer con Docker Compose cosa que mostraré en otro artículo.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</title>
        <updated>2017-03-19T02:00:00+01:00</updated>
        <published>2017-03-18T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Uno de los motivos por los que compré el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a>, además de cacharrear un poco, era en concreto controlar el <em>display</em> LCD de 16 columnas y 2 filas. En el <em>kit</em> el <em>display</em> viene con un adaptador con el bus de comunicación I2C. El <em>display</em> se puede usar sin este bus pero requiere utilizar muchos más <em>pines</em> GPIO de datos de los limitados 17 que ofrece la Raspberry Pi 1 y los 26 de las Raspberry Pi B+, 2  y 3. Controlar el <em>display</em> con I2C requiere únicamente 2 pines, por contra sin usar I2C requiere un número significativamente mayor 4 u 8 pines.</p>
<p>El <em>display</em> 1602 con su adaptador para el bus I2C que viene con el <em>kit</em> ya incorporado en la parte trasera es el siguiente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/display-lcd-1602_hudec7d325162bd5734a4764f0f652bdc1_213977_2560x1440_fit_q90_box.jpg" data-gallery="" title="Display LCD 16 columnas y 2 filas"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/display-lcd-1602_hudec7d325162bd5734a4764f0f652bdc1_213977_300x200_fit_q90_box.jpg" width="300" height="141" alt="Display LCD 16 columnas y 2 filas" title="Display LCD 16 columnas y 2 filas"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/adaptador-bus-i2c-1602_hu088a2091b37df42dbf508d1cbdc80ce3_242376_2560x1440_fit_q90_box.jpg" data-gallery="" title="Adaptador bus I2C para display 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/adaptador-bus-i2c-1602_hu088a2091b37df42dbf508d1cbdc80ce3_242376_300x200_fit_q90_box.jpg" width="300" height="134" alt="Adaptador bus I2C para display 1602" title="Adaptador bus I2C para display 1602"  class="lozad "></a></p>
<figcaption>Display LCD 1602 y adaptador bus I2C</figcaption>
</figure>
</div>
<p>El esquema de conexionado para controlar el <em>display</em> requiere usar los <em>pines</em> de la Raspberry Pi <em>SDA</em> y <em>SDL</em> además de un <em>pin</em> para proporcionar un voltaje de 5V y otro <em>pin</em> para la tierra. El <em>pin</em> <em>SDA</em> es el número 2 según la numeración de <em>pines</em> de la Raspberry Pi y el <em>SDL</em> es el 5. El <em>pin</em> <em>SDA</em> es utilizado en el bus I2C para transmitir los datos y el <em>SDL</em> para la señal de reloj o sincronización. Utilizando la placa de extensión wiringPi de 26 <em>pines</em> los <em>pines</em> <em>SDA</em> y <em>SDL</em> se encuentran identificados por su nombre y el de la placa de extensión de 40 <em>pines</em> que viene con el <em>kit</em> de iniciación también, deberemos identificar estos <em>pines</em> y realizar las conexiones adecuadamente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/breadboard-cableado_hu9efc39f5b6a5663511ff278421cfc4fc_554266_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado en la breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/breadboard-cableado_hu9efc39f5b6a5663511ff278421cfc4fc_554266_300x200_fit_q90_box.jpg" width="164" height="200" alt="Cableado en la breadboard" title="Cableado en la breadboard"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/esquema-cableado_hu78b02982f519ac875b343bc71e481476_96429_2560x1440_fit_box_3.png" data-gallery="" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/esquema-cableado_hu78b02982f519ac875b343bc71e481476_96429_300x200_fit_box_3.png" width="300" height="143" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Cableado en la breadboard</figcaption>
</figure>
</div>
<p>Hay que emplear varios cables macho-macho y hembra-hembra para conectar a los <em>pines</em> del adaptador I2C del <em>display</em>  a los <em>pines</em> del voltaje de 5V, tierra, <em>SDA</em> y <em>SDL</em> de la placa de pruebas sin soldadura.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/cables-macho-macho-hembra-hembra_hu5bd502ece26df8c90c0240f7b6e4e0af_344589_2560x1440_fit_q90_box.jpg" data-gallery="" title="Unión cables macho-macho y hembra-hembra"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/cables-macho-macho-hembra-hembra_hu5bd502ece26df8c90c0240f7b6e4e0af_344589_300x200_fit_q90_box.jpg" width="252" height="200" alt="Unión cables macho-macho y hembra-hembra" title="Unión cables macho-macho y hembra-hembra"  class="lozad "></a></p>
<figcaption>Unión cables macho-hembra</figcaption>
</figure>
</div>
<p>El siguiente paso será activar el bus I2C en la Raspberry Pi que por defecto está desactivado. Esto requiere añadir unos parámetros en la configuración de arranque y cargar unos módulos del kernel que finalmente crearán un dispositivo tal que en <em>/dev/i2c-0</em> o <em>/dev/i2c-0</em>. Si instalamos el paquete <em>i2c-tools</em> podremos detectar el <em>display</em> en el bus I2C, en la captura de pantalla en la dirección 27 que hay que usar al construir la instancia del controlador del <em>display</em>. Estos cambios en la configuración de inicio requieren reiniciar la Raspberry Pi. En un sistema con la distribución <a href="https://archlinuxarm.org/">Arch Linux ARM</a> los cambios son los siguientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl"># /boot/config.txt&#10;</span></span><span class="line"><span class="cl">device_tree_param=i2c_arm=on&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"># sudo vim /boot/cmdline.txt&#10;</span></span><span class="line"><span class="cl">bcm2708.vc_i2c_override=1&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ sudo systemctl reboot&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ sudo modprobe i2c-bcm2708&#10;</span></span><span class="line"><span class="cl">$ sudo modprobe i2c-dev&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ sudo pacman -S i2c-tools&#10;</span></span><span class="line"><span class="cl">$ sudo i2cdetect -y 0</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>configuration.txt</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/i2cdetect_huf6262b8283cadf398a1aab0f9279ada0_22811_2560x1440_fit_box_3.png" data-gallery="" title="Detección del display 1602 en el bus I2C"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/i2cdetect_huf6262b8283cadf398a1aab0f9279ada0_22811_300x200_fit_box_3.png" width="300" height="187" alt="Detección del display 1602 en el bus I2C" title="Detección del display 1602 en el bus I2C"  class="lozad "></a></p>
<figcaption>Detección del display 1602 en el bus I2C</figcaption>
</figure>
</div>
<p>Según la <a href="https://www.sparkfun.com/datasheets/LCD/HD44780.pdf">especificación del <em>display</em> 1602</a> este componente soporta varios comandos para controlarlo, algunos son para limpiar el texto, cambiar la dirección de escritura, añadir caracteres personalizados y emitir texto en la línea o posición del <em>display</em> que queramos. No es simple el controlar el <em>display</em> a bajo nivel ya que hay que trabajar en momentos con binario y usar bytes, por ello para el ejemplo usaré la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> que ya trae una implementación de controlador con funciones de alto nivel <em>I2CLcd</em> que en versiones más recientes de la librería ha sido renombrada a <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html">HD44780Lcd</a> mucho más cómoda que enviar <em>bytes</em> a bajo nivel al bus I2C, el <a href="https://github.com/mattjlewis/diozero/blob/master/diozero-core/src/main/java/com/diozero/HD44780Lcd.java">código fuente de la clase HD44780Lcd</a> está disponible y podemos verlo si hay curiosidad.</p>
<p>En mi caso con la Raspberry Pi 1 he tenido que utilizar la versión 0.9 de la librería diozero porque la 0.8 me generaba un <em>stacktrace</em> de una excepción <em>java.lang.UnsupportedOperationException</em>. Obtener esta versión de la librería como aún era de desarrollo y no estaba publicada en <a href="https://search.maven.org/">Maven Central</a> la he descargado de un <a href="https://drive.google.com/drive/u/0/folders/0B2Kd_bs3CEYaZ3NiRkd4OXhYd3c">google drive que ha creado el autor</a> y usado en <a href="https://gradle.org/">Gradle</a> como una dependencia del sistema de ficheros. Como librería subyacente de diozero para controlar los <em>pines</em> GPIO he usado <a href="http://abyz.co.uk/rpi/pigpio/">pigpio</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Caused by: java.lang.UnsupportedOperationException&#10;</span></span><span class="line"><span class="cl">	at java.util.AbstractList.add(AbstractList.java:148)&#10;</span></span><span class="line"><span class="cl">	at java.util.AbstractList.add(AbstractList.java:108)&#10;</span></span><span class="line"><span class="cl">	at com.diozero.internal.board.raspberrypi.RaspberryPiBoardInfoProvider$PiBRev1BoardInfo.&lt;clinit&gt;(RaspberryPiBoardInfoProvider.java:281)&#10;</span></span><span class="line"><span class="cl">	... 14 more</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>java.lang.UnsupportedOperationException</span>
    </div>
</div>
<p>En el ejemplo mostraré un texto en cada una de las lineas del <em>display</em> y usaré una de las funciones del para mostrar caracteres personalizados con los que es posible crear <em>emojis</em> o caracteres nuevos. El controlador de diozero ya contiene una buena colección de caracteres personalizados que definen el patrón de 5x8 puntos que siguen, los nombres de estos caracteres personalizados están en la clase interna <em>Characters</em> de <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html">HD44780Lcd</a> aunque también podemos definir nuevos. El ejemplo es el siguiente donde se muestra el uso de los métodos <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setText-int-java.lang.String-">setText</a> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-">setCharacter</a>, también el constructor donde hay que indicar la dirección asignada al dispositivo en el bus I2C que siendo la 27 corresponde con el valor definido en una constante. Pero también hay otros métodos como <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#clear--">clear</a>, <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOff--">cursorOff</a> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOn--">cursorOn</a> para apagar y encender el cursor, <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOff--">displayOff</a>
<a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOn--">displayOn</a> para apgar y encender el <em>display</em> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#createChar-int-byte:A-">createChar</a> para crear nuevos caracteres definidos como una <em>array</em> de 8 posiciones donde cada <em>byte</em> indica los pixeles encendidos de cada fila del caracter de 5x8 y con <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-">setCharacter</a> para emitir uno de los 8 posibles que se pueden usar al mismo tiempo. Además de estos también hay otros pocos métodos más relacionados con el cursor.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.I2CLcd</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.api.I2CConstants</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.ByteOrder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lcd</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">I2CLcd</span> <span class="n">lcd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">I2CLcd</span><span class="o">(</span><span class="n">I2CConstants</span><span class="o">.</span><span class="na">BUS_0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">DEFAULT_DEVICE_ADDRESS</span><span class="o">,</span> <span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="n">2</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;heart&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;smilie&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;space_invader&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="n">13</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="n">14</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">1</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="n">15</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span> <span class="n">messager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="s">&#34; powered by Java&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">)).</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd HH:mm&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">messager</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">messager</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Lcd.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/diozero-core-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/diozero-provider-pigpio-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/pigpioj-java-1.0.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/commons-math3-3.6.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/tinylog-1.1.jar&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">copyDependencies</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">into</span> <span class="s2">&#34;$buildDir/libs&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">runtime</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">jar</span> <span class="o">{</span> <span class="n">dependsOn</span> <span class="n">copyDependencies</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">upload</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;jar&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;rsync&#39;</span><span class="o">,</span> <span class="s1">&#39;-arPL&#39;</span><span class="o">,</span> <span class="s1">&#39;--delete&#39;</span><span class="o">,</span> <span class="s1">&#39;-e&#39;</span><span class="o">,</span> <span class="s1">&#39;ssh&#39;</span><span class="o">,</span> <span class="s1">&#39;build/libs/&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi@192.168.1.101:/home/raspberrypi/scripts/javaraspberrypi/&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">executeLcd</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;upload&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;ansible&#39;</span><span class="o">,</span> <span class="s1">&#39;-i&#39;</span><span class="o">,</span> <span class="s1">&#39;hosts&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi&#39;</span><span class="o">,</span> <span class="s1">&#39;--sudo&#39;</span><span class="o">,</span> <span class="s1">&#39;--ask-sudo-pass&#39;</span><span class="o">,</span> <span class="s1">&#39;-m&#39;</span><span class="o">,</span> <span class="s1">&#39;command&#39;</span><span class="o">,</span> <span class="s1">&#39;-a&#39;</span><span class="o">,</span> <span class="s1">&#39;chdir=/home/raspberrypi/scripts/javaraspberrypi java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Lcd&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">standardInput</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Lcd&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew executeLcd&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/mensaje-lcd-1602_hu62a298306b4eecc0b9f527b7686a5a47_205348_2560x1440_fit_q90_box.jpg" data-gallery="" title="Mensaje en LCD 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/mensaje-lcd-1602_hu62a298306b4eecc0b9f527b7686a5a47_205348_300x200_fit_q90_box.jpg" width="300" height="140" alt="Mensaje en LCD 1602" title="Mensaje en LCD 1602"  class="lozad "></a></p>
<figcaption>Mensaje en LCD 1602</figcaption>
</figure>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/V6msjQNDPuU" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>Pudiendo mostrar mensajes en <em>display</em> es posible mostrar cualquier información que un programa sea capaz de capturar como temperatura y humedad del correspondiente sensor en el mismo <em>kit</em>, estado de un pulsador, espacio disponible en el disco del sistema, y memoria libre, <em>uptime</em> del sistema, fecha y hora, &hellip; cualquier cosa que se nos ocurra.</p>
<p>El ejemplo parece simple, y el programa Java lo es, pero requiere conocer varias cosas que en internet está dispersas como activar el bus I2C o conocer la librería diozero para controlar el <em>display</em> que simplifica enormemente el código y nos evita comunicarnos a más bajo nivel con el <em>display</em>, realizar las conexiones eléctricas también requiere algo de conocimiento. Averiguar todo esto me costó una buena cantidad de tiempo.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeLcd</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/</id>
        <title>Ejemplo encender y apagar diodo LED con la Raspberry Pi en Java</title>
        <updated>2017-03-12T00:15:00+01:00</updated>
        <published>2017-03-11T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El primer ejemplo que haré de un programa Java que usa los <em>pines</em> GPIO para realizar algo con el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de inicialización a la electrónica con la Raspberry Pi</a> consiste en un pequeño programa Java que hace parpadear un diodo LED. La librería <a href="http://rtd.diozero.com/en/latest/">Diozero</a> ofrece a los programas Java el acceso a los <em>pines</em> GPIO de la diferentes versiones de la Raspberry Pi desde la 1 (rev 1 y rev 2) pasando por los modelos B+, 2 y 3. Otra librería que se puede usar con el lenguaje de programación Java es <a href="https://pi4j.com/">Pi4J</a> aunque personalmente Diozero me ha gustado más por ser de más alto nivel.</p>
<p>Algunas de las características que ofrece la librería Diozero son:</p>
<ul>
<li>Soporta dispositivos GPIO / I2C / SPI (LEDs, botones, sensores, motores, pantallas, etc).</li>
<li>Soporta todos los modelos de las placas Raspberry Pi, Odroid C2, BeagleBone Black, C.H.I.P y Asus Tinker.</li>
<li>Usa caracterśiticas de Java como <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">gestión automática de recursos</a>, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">expresiones lambda</a> y <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">referencias a métodos</a> que simplifican el desarrollo y mejoran la legibilidad.</li>
<li><a href="http://rtd.diozero.com/en/latest/#devices">Lista de deipositivos</a>.</li>
<li>Soporta varios proveedores para el acceso al los dispositivos con <a href="http://rtd.diozero.com/en/latest/#performance">diferentes grados de rendimiento</a>.</li>
</ul>
<p>Una de las primeras cosas a conocer es como se numeran los <em>pines</em> en la Raspberry Pi ya que hay varias nomenclaturas (<em>header</em>, wiringPi y Broadcom) y que nomenclatura utiliza la librería Diozero. También deberemos tener en cuenta el modelo de la Raspberry Pi que poseamos ya que según el modelo hay pequeñas diferencias en algunos <em>pines</em>. Además si usamos una placa de extensión para pruebas sin soldadura como la <a href="http://wiringpi.com/">wiringPi</a> deberemos identificarlos por su nombre. Yo que poseo una de las primeras Raspberry Pi (la 1, rev1) el correspondiente su <a href="https://www.raspberrypi.org/documentation/usage/gpio/">esquema de <em>pines</em> Raspberry Pi 1 (rev. 1)</a> es el del enlace. En ese esquema se define que el <em>pin</em> número 12 según el conteo del <em>header</em> corresponde a GPIO 18 según la nomenclatura Broadcom y la librería Diozero y al GPIO 1 en la librería Pi4J y en la placa de extensión wiringPi.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_300x200_fit_q90_box.jpg" width="268" height="200" alt="Raspberry Pi 1 B" title="Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_300x200_fit_q90_box.jpg" width="287" height="200" alt="Raspberry Pi 3 B" title="Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Placas modelos Raspberry Pi 1 B y 3 B</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/breadboard-cableado_hu4408ad1d84b4f4d48570a363c8652fed_871766_2560x1440_fit_q90_box.jpg" data-gallery="" title="Breadboard y placa extensión GPIO wiringPi de 26 pines"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/breadboard-cableado_hu4408ad1d84b4f4d48570a363c8652fed_871766_300x200_fit_q90_box.jpg" width="267" height="200" alt="Breadboard y placa extensión GPIO wiringPi de 26 pines" title="Breadboard y placa extensión GPIO wiringPi de 26 pines"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/gpio-extension-40-pines-board_hua16e258eafc6d06cef89d52014497ddd_604238_2560x1440_fit_q90_box.jpg" data-gallery="" title="Placa extensión GPIO de 40 pines"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/gpio-extension-40-pines-board_hua16e258eafc6d06cef89d52014497ddd_604238_300x200_fit_q90_box.jpg" width="150" height="200" alt="Placa extensión GPIO de 40 pines" title="Placa extensión GPIO de 40 pines"  class="lozad "></a></p>
<figcaption>Breadboard y placa extesión GPIO wiringPi de 26 _pines_ y 40 pines</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/esquema-cableado_hu198f1be709c561ea99bf0746642b0382_216071_2560x1440_fit_box_3.png" data-gallery="" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/esquema-cableado_hu198f1be709c561ea99bf0746642b0382_216071_300x200_fit_box_3.png" width="300" height="129" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Esquema del cableado</figcaption>
</figure>
</div>
<p>Como uso la placa de extensión wiringPi para conectar los <em>pines</em> de la Raspberry Pi a otra placa para hacer pruebas sin soldadura también conocidas como <em>breadboard</em>  resultará que en el programa Java al usar Diozero uso la nomenclatura Broadcom para identificar los <em>pines</em> pero al conectar los cables en la placa de pruebas uso la nomenclatura de wiringPi.</p>
<p>Para el ejemplo utilizaré la placa de extensión sin soldadura, una resistencia de 200 ohmios (dadas sus bandas de colores rojo, negro, marrón y dorado) y un diodo LED además de un par de cables macho-macho para realizar las conexiones electrónicas entre el GPIO 18 (según la nomenclatura de la librería Diozero y Broadcom, 12 según la nomenclatura del <em>header</em> y 1 según la de wiringPi) y la resistencia además de entre el diodo y la línea de tierra. Los diodos LED poseen una orientación y hay que conectar la resistencia con el polo positivo del diodo LED, el polo positivo del diodo LED identifica porque es la patita larga y el negativo con tierra es la patita corta. Si realizamos la conexión al revés solo pasará que el diodo no se enciende pero no lo estropeará, la resistencia si es necesaria para no hacer que pase por el diodo una intensidad que lo estropee como se explica en
<a href="http://www.educachip.com/resistencia-led/">¿Qué resistencia ooner a un LED?</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/diodo-resistencia_hub20135d37a090410847a8b3a8f4a3210_619557_2560x1440_fit_q90_box.jpg" data-gallery="" title="Diodo blanco y resistencia de 200 ohmios"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/diodo-resistencia_hub20135d37a090410847a8b3a8f4a3210_619557_300x200_fit_q90_box.jpg" width="182" height="200" alt="Diodo blanco y resistencia de 200 ohmios" title="Diodo blanco y resistencia de 200 ohmios"  class="lozad "></a></p>
<figcaption>Diodo blanco y resistencia de 200 ohmios</figcaption>
</figure>
</div>
<p>Las resistencias poseen cuatro bandas de colores que indican el valor en ohmios de esa resistencia, la tabla de colores es el siguiente:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_2560x1440_fit_q90_box.jpg" data-gallery="" title="Código de colores de las resistencias"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_300x200_fit_q90_box.jpg" width="237" height="200" alt="Código de colores de las resistencias" title="Código de colores de las resistencias"  class="lozad "></a></p>
<figcaption>Código de colores de las resistencias</figcaption>
</figure>
</div>
<p>El programa Java para hacer parpadear el diodo LED con la librería Diozero con el proveedor <a href="http://abyz.co.uk/rpi/pigpio/">pigpio</a>. El ejemplo consiste en activar y apagar el <em>pin</em> sucesivamente en un bucle y usar el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-">Thread.sleep</a> para que pase unos segundos entre uno y otro y nos de tiempo a ver el encendido y apagado. El nada complejo programa Java para controlar el diodo y un vídeo de su funcionamiento están a continuación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PinBlink</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="n">18</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PinBlink.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.PinBlink&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew executePinBlink&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/NX5tBxWuzFA" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>En un artículo anterior comento <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/">como disponer de un entorno para desarrollar, desplegar las librerías <em>jar</em> en la Raspberry Pi</a> y como ejecutar los ejemplos desde la línea de comandos usando una combinación de herramientas de <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="https://rsync.samba.org/">rsync</a> y <a href="https://www.ansible.com/">Ansible</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executePinBlink</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/</id>
        <title>Ejemplo Hello World con Java en la Raspberry Pi</title>
        <updated>2017-03-04T23:00:00+01:00</updated>
        <published>2017-03-04T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Este artículo es introductorio a los siguientes que escribiré y publicaré sobre el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a>. Antes de empezar a cacharrear con los sensores y dispositivos de entrada y salida, con los <em>pines</em> GPIO y para hacerlo de forma cómoda crearé un entorno de desarrollo y despliegue en la <a href="https://www.raspberrypi.org/">Raspberry Pi</a> usando <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="https://rsync.samba.org/">rsync</a> para copiar los artefactos del equipo de desarrollo a la RPi y <a href="https://www.ansible.com/">Ansible</a> usándolo desde <a href="https://gradle.org/">Gradle</a> para lanzar comandos y ejecutar los ejemplos de forma remota aunque si no se quiere usar Ansible se pueden lanzar los comandos mediante SSH.</p>
<p>En la Raspberry Pi deberemos instalar por supuesto <a href="https://www.oracle.com/technetwork/java/index.html">Java</a> (es posible usar Java 8) junto con SSH y rsync, configurar el servidor SSH en la RPi modificando el archivo <em>/etc/ssh/sshd_config</em>, habilitar el servidor SSH, copiar nuestra <a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">clave pública ssh generada previamente</a> al archivo <em>~/.ssh/authorized_keys</em> del usuario e instalar <a href="https://www.python.org/">Python</a> como requerimiento de Ansible. Los programas Java los escribiremos en un equipo más potente que la Raspberry Pi ya sea un portátil o un equipo de sobremesa con un IDE ya sea <a href="https://www.jetbrains.com/idea/">IntelliJ</a>, <a href="https://eclipse.org">eclipse</a> u otro, también deberemos instalar Gradle, Ansible y rsync. En Arch Linux con los siguientes comandos del gestor de paquetes:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># pacman -S jdk8-openjdk python rsync</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1"># vim /etc/ssh/sshd\_config</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1"># systemctl enable sshd.service</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1"># systemctl start sshd.service</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1"># vim .ssh/authorized_keys</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pacman-raspberrypi.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQDHK4xOEPe+8/C7+BmSQOjrMJRcjqTCg0HMWIsgOxas0mvjv7feCzW1kB5QPkQDuTSauRDvbAhHakNfa8tE7l2y6QtnuPwQUP6ml79Zzqiwo5Dkjv0ig09U5QPUs6dDbAvYc+EWeSVvIBll+zpxjSM/AtQrPy3YWuDxTcsUdmrZm5M7miQZ+XI18ICc/ehgewOTUAkMdpEJGXXEFiWYK1iazTrT6fo8y3JZmS3mFTQ9QAifkPvk47XbCWktc4VTVZXzPR8dy+cxMb4SMuxCvLA72qUANvsaHCdei9e4dtvWOGL2v2jC7vFQU+gEaZ77ezxrNzGzt2MdPUcoAAfk2T3KFbnE6L5NBZ+8kVTtOIK6rDJsZaFPZN75orqFa5GG9WMRtpQTldvMkCvoIYttGSDW00ojLbKDY0qYLlEYjBC9hOnQsBN8sYD8sVBwjOLkvvNnetzYqtVu1ij3eB59NEKV3MhPwFRLomk+TGSfHKEhhS5cHntvlm/syJ0/KKuTCBA0kOMH8eJ4MQTV3dqy2vhUBo9sBYo728kHv0JwWBD/CJWdNgoG9lfkZbmqJ9ZSJ89vsDHqJi9m59i6rqWnahhtuTdIzya2asDMjCTozRonBNFC6Eo5mX2ydL6OFOaC2mrdIAHYjJGugWmqBCkhfIh6nh1XJjnsysTgGxtjW79d6o/9WEPYeIF8F2EH77oehjVmJNQeuIgvmZSdhW+dlAgan6WjZT7jBNBDwJH4kH31dNDB8LEVijS7E6J//d4aYfMmUzQUgd0PjyabNZJaCmcWGsv22ggGlCKz3D6putzO0nJrsATWoLCt8wG+zidCSQ/PaZ4uEW0Cbkfhb76jGfSRfywCmyhe7OmCgyvuhE8IZbeaYfjYsHYYto0rd6MQmx5m0d6+ylUfYmCxst2uu/BQPVE/tj/hmNeUvDh1O9qslTFk/tdDY2MRbEWBoNrX56YXIksargth2DCvlPltzKeK8cL46md9P6hC6DXxGR9GcqiPnf7puGIu7BLWK8yQCp2dgnqugye9f1uGrnP3w5MB28MWRCPi7lCjACiIva1U5wPmMwD2HEaIIVNAkX5VTO7xp2JtymA4wWnTreSXBMfvQP9yR6Ao9Zx9Hu8NywRHOJfUalyY868/ISag9tR/9qHxRsyfnv5XtDUJ/+sFgYzn+OYsvSW6na/sRVO1seX5I0Gf+d0xF8LZfeB6DMRUwy5BTJbv8KlTGFEh3vG1+jYLGwX65d9f7LGRSlSXHR+NI6MEezT7CV+UD7YM1T2ki9ezkpiZLRvZ+UUh46j/+xM9ed3LVxUbj1tfgDP42tyiHIfDf+SiHtOsZX3Avedy4SbV96K3lCyH2HcJHqpW7+YT pico.dev@gmail.com&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>authorized_keys</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># pacman intellij-idea-community-edition jdk8-openjdk ansible rsync gradle</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pacman.sh</span>
    </div>
</div>
<p>Con la ayuda de unas tareas para la herramienta de construcción Gradle haremos el despliegue y la ejecución de la librería <em>jar</em> del proyecto de los ejemplos y de las dependencias que necesiten. El archivo de construcción de Gradle sería el siguiente en el que la tarea <em>copyDependencies</em> copia las dependencias al directorio <em>build/libs</em>. La tarea <em>upload</em> ejecutan el comando <code>rsync</code> para subir el archivo <em>jar</em> y las dependencias del proyecto a la Raspberry Pi. Finalmente, una tarea como <em>executeHelloWorld</em> ejecutará el comando en la Raspberry Pi para lanzar el programa Java. Con SSH también se puede lanzar el comando de forma remota cambiando la dirección IP de la Raspberry Pi por la que tenga asignada.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/diozero-core-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/diozero-provider-pigpio-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/pigpioj-java-1.0.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/commons-math3-3.6.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/tinylog-1.1.jar&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">copyDependencies</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">into</span> <span class="s2">&#34;$buildDir/libs&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">runtime</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">jar</span> <span class="o">{</span> <span class="n">dependsOn</span> <span class="n">copyDependencies</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">upload</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;jar&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;rsync&#39;</span><span class="o">,</span> <span class="s1">&#39;-arPL&#39;</span><span class="o">,</span> <span class="s1">&#39;--delete&#39;</span><span class="o">,</span> <span class="s1">&#39;-e&#39;</span><span class="o">,</span> <span class="s1">&#39;ssh&#39;</span><span class="o">,</span> <span class="s1">&#39;build/libs/&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi@192.168.1.101:/home/raspberrypi/scripts/javaraspberrypi/&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">executeHelloWorld</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;upload&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;ansible&#39;</span><span class="o">,</span> <span class="s1">&#39;-i&#39;</span><span class="o">,</span> <span class="s1">&#39;hosts&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi&#39;</span><span class="o">,</span> <span class="s1">&#39;-m&#39;</span><span class="o">,</span> <span class="s1">&#39;command&#39;</span><span class="o">,</span> <span class="s1">&#39;-a&#39;</span><span class="o">,</span> <span class="s1">&#39;chdir=/home/raspberrypi/scripts/javaraspberrypi java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.HelloWorld&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.HelloWorld&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew executeHelloWorld&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<p>El programa de ejemplo es universal gracias a la idea <em>«Write once, run anywhere»</em> posibilitado por la máquina virtual o <abbr title="Java Virtual Machine"><a href="https://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java">JVM</a></abbr> y el <em>bytecode</em>, está compilado en un sistema con arquitectura x64 (el de mi equipo) y ejecutado en un sistema con arquitectura arm (el de la RPi). No se diferencia en nada al que usaríamos para lo mismo en cualquier otro sistema distinto de la Raspberry Pi.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorld.java</span>
    </div>
</div>
<p>El resultado de este ejemplo es un mensaje en la terminal que es emitido por un programa Java ejecutado en la Raspberry Pi y lanzado de forma remota.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/images/java-raspberrypi-hello-world_hu585c23adafa45cad29f054ba5093037a_44814_2560x1440_fit_box_3.png" data-gallery="" title="Ejemplo Hello World con Java en la Raspberry Pi"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/images/java-raspberrypi-hello-world_hu585c23adafa45cad29f054ba5093037a_44814_300x200_fit_box_3.png" width="300" height="165" alt="Ejemplo Hello World con Java en la Raspberry Pi" title="Ejemplo Hello World con Java en la Raspberry Pi"  class="lozad "></a></p>
<figcaption>Ejemplo Hello World con Java en la Raspberry Pi</figcaption>
</figure>
</div>
<p>En los siguientes artículos de la serie mostraré ya como usar diferentes elementos de salida como diodos LED, zumbador, <em>display</em> LCD 1602 o de entrada como un pulsador.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeHelloWorld</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/</id>
        <title>Servidores Cloud VPS de Clouding.io para hospedar blogs y páginas web</title>
        <updated>2017-11-06T20:00:00+01:00</updated>
        <published>2017-02-28T22:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Al escribir este artículo patrocinado sobre Clouding.io he podido probar de primera mano el crear un servidor virtual basado en la computación en la nube. Después de probarlo me parece una opción sencilla y sin complicaciones, adecuada y más que suficiente desde el rango de proyectos más pequeños de presencia en internet, blogs o servicios web y con capacidad suficiente hasta los proyectos más grandes y exigentes de cualquier empresa. Además, con la característica diferenciadora de ofrecer soporte en español en caso de necesitar algún tipo de asistencia o ayuda.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/clouding.svg" width="300" height="222" alt="Clouding.io" title="Clouding.io"  class=""></p>
</div>
<p>Toda página web, blog y servicio que está accesible en internet ha de ser hospedado en algún servidor. Por motivos de fiabilidad, también coste y flexibilidad se suele contratar un servicio de hospedaje de los muchos que hay en internet. Desde no hace tanto tiempo ha surgido una modalidad de hospedaje que permite mayor flexibilidad, la llamada <a href="https://en.wikipedia.org/wiki/Cloud_computing">cloud computing</a> o computación en la nube, cuya características diferenciadoras son permitir variar de forma elástica, aumentando o reduciendo, los recursos de computación utilizados ya sea de procesador, memoria, almacenamiento o transferencia de datos. Otra característica de la computación en la nube es que es inmediata (en cuestión de minutos) sin necesidad de trámites administrativos o tiempos de espera, los servicios de computación en la nube incluyen paneles de administración para los servidores accesibles a través de un navegador con aplicaciones sencillas o incluso interfaces basadas en linea de comandos de modo que es posible automatizar las tareas de sistemas con <a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a>.</p>
<p>Hay múltiples opciones de computación en la nube algunas con más servicios y funcionalidades pero también más complejas y no necesarias para proyectos sencillos y no muy grandes. Una de las opciones de computación en la nube sencilla pero suficiente en muchos casos es <a href="https://clouding.io/">Clouding.io</a> que en la opción más básica ofrece un servidor con <strong>1/2 núcleo de CPU, 1 GiB de memoria, 5 GiB de almacenamiento persistente de estado sólido o SSD y 2 TiB de datos de transferencia a un precio de 3 € + IVA al mes</strong> (unos 3.5 € con IVA incluido), precio incluso más económica que otras opciones de servidores en la nube.</p>
<p>Para un página web con archivos estáticos de presencia en internet o un blog como Blog Bitix que solo utiliza recursos estáticos (HTML, CSS, JavaScript e imágenes) lo más básico ya sería suficiente y para un blog con <a href="https://wordpress.org/">Wordpress</a> utilizando 2 GiB y un precio de 9 € al mes también debería ser más que suficiente para un tráfico respetable en cantidad.</p>
<p>Una de las ventajas del <em>cloud computing</em> es la elasticidad que permite cambiar en cualquier momento los recursos reservados según las necesidades como la cantidad de memoria, núcleos de procesador o espacio en disco, tanto para reservar más recursos o para disminuir los recursos utilizados y también el coste. En la página de Clouding.io está la simple política de precios según los recursos reservados. <strong>Desde 1 GiB hasta 192 GiB de memoria, desde 1 hasta 48 cores de CPU y desde 5 GiB hasta 1900 GiB de almacenamiento SSD</strong> por servidor cubriendo las necesidades hasta de las aplicaciones más exigentes.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-web_hu6d459e25f76ec896873005b1fc0287df_217640_2560x1440_fit_box_3.png" data-gallery="" title="Página web de Clouding.io"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-web_hu6d459e25f76ec896873005b1fc0287df_217640_650x450_fit_box_3.png" width="650" height="442" alt="Página web de Clouding.io" title="Página web de Clouding.io"  class="lozad "></a></p>
<figcaption>Página web de Clouding.io</figcaption>
</figure>
</div>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="infraestructura-_cloud_-de-clouding">Infraestructura <em>cloud</em> de Clouding</h3>
<p>Algunas de las características de Clouding.io algo más detalladas en su página web es que ofrecen soporte en español y discos SSD rápidos para el almacenamiento además de las siguientes:</p>
<ul>
<li>Potente: procesadores de última generación, redes de alta velocidad y baja latencia, almacenamiento redundante, virtualización de alto rendimiento con KVM, cache inteligente y discos SSD.</li>
<li>Estable: Triple Réplica, Auto Reparación, Datacenter Tier 4, Calidad Empresarial, Protección de Red, Hosting DNS.</li>
<li>Flexible: Cloud Hosting por Horas, Windows Cloud, Linux Cloud, Configuración a medida, Ampliaciones temporales, Activación inmediata.</li>
<li>Fácil: Soporte de Calidad, Cloud Pros, Teclado y Monitor Remoto, Como y cuando quieras, DIY: Hazlo tú mismo, Comunidad.</li>
</ul>
<p>En el blog de Clouding.io hay artículos interesantes y tiene una comunidad con una base de conocimiento y una sección de preguntas y respuestas para resolver cualquier duda que nos surja, todo en español. Las imágenes de sistemas operativos que ofrecen son las siguientes en las que se incluyen la opción de <a href="https://www.microsoft.com/es-es/windows/">Windows</a> aunque siendo este un blog más afín al software libre recomiendo una de las versiones de <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a>, una ventaja es que el precio es más barato. De <a href="https://www.ubuntu.com/">Ubuntu</a> hay múltiples versiones aunque siendo el propósito prestar un servicio durante periodos de tiempo largos lo recomendable es utilizar una versión <abbr title="Long Term Support">LTS</abbr> o de soporte prolongado. También es posible otras distribuciones populares como sistema operativo como <a href="https://www.debian.org/">Debian</a> y <a href="https://www.centos.org/">CentOS</a>.</p>
<p>Clouding ofrece una infraestructura de alta disponibilidad, con servicios de copias de seguridad para preservar datos y restauración, toma de instantáneas como medida de seguridad y recuperación, archivado de servidores para ahorrar costes, redimensionado de servidores gracias a la computación <em>cloud</em>, configuración de red privada para mayor seguridad. En el panel de administración de los servidores también se ofrecen detalles para la monitorización y observabilidad con los que comprobar el buen estado de funcionamiento del servidor.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-1_hu47cae0a478570364adf19f84fbfbe4d4_94578_2560x1440_fit_box_3.png" data-gallery="" title="Características de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-1_hu47cae0a478570364adf19f84fbfbe4d4_94578_200x150_fit_box_3.png" width="200" height="115" alt="Características de Clouding" title="Características de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-2_hud8f3f8d7341ef400d32f1a50a52163e9_95722_2560x1440_fit_box_3.png" data-gallery="" title="Características de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-2_hud8f3f8d7341ef400d32f1a50a52163e9_95722_200x150_fit_box_3.png" width="200" height="114" alt="Características de Clouding" title="Características de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-3_hu5696f2a73e44764296c3694618fa04a5_92878_2560x1440_fit_box_3.png" data-gallery="" title="Características de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-3_hu5696f2a73e44764296c3694618fa04a5_92878_200x150_fit_box_3.png" width="200" height="114" alt="Características de Clouding" title="Características de Clouding"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-4_hu141d7784ad9fac9f3ec5f057f7862247_99197_2560x1440_fit_box_3.png" data-gallery="" title="Características de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-4_hu141d7784ad9fac9f3ec5f057f7862247_99197_200x150_fit_box_3.png" width="200" height="115" alt="Características de Clouding" title="Características de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-5_hu36c7e1637319c262e9aab10087164207_92561_2560x1440_fit_box_3.png" data-gallery="" title="Características de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-5_hu36c7e1637319c262e9aab10087164207_92561_200x150_fit_box_3.png" width="200" height="118" alt="Características de Clouding" title="Características de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-6_hua7694af4fd912997d20e00b13a1244ee_90902_2560x1440_fit_box_3.png" data-gallery="" title="Características de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-caracteristicas-6_hua7694af4fd912997d20e00b13a1244ee_90902_200x150_fit_box_3.png" width="200" height="117" alt="Características de Clouding" title="Características de Clouding"  class="lozad "></a></p>
<figcaption>Características de Clouding</figcaption>
</figure>
</div>
<p>Para garantizar un buen servicio utilizan una infraestructura moderna y de alto rendimiento, redundante y tolerante a fallos compuesta por hardware, software, red, imágenes y centros de datos. Almacenamiento con discos SSD NVMe de alta velocidad, RAM con corrección de errores ECC, consola de emergencia y monitorización, red de alto rendimiento baja velocidad con protecciones frente ataques DDOS y con dirección IP pública, imágenes para servidores basados en Linux o Windows, paneles de control y aplicaciones preinstaladas, finalmente sus centros de datos ubicados en España son redundantes y con energía 100% renovable.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-1_hua0b71a493c7e0f9a963194c3eecb131d_129895_2560x1440_fit_box_3.png" data-gallery="" title="Infraestructura de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-1_hua0b71a493c7e0f9a963194c3eecb131d_129895_200x150_fit_box_3.png" width="161" height="150" alt="Infraestructura de Clouding" title="Infraestructura de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-2_hu26a10119971413dd8558a72c1e104fed_135238_2560x1440_fit_box_3.png" data-gallery="" title="Infraestructura de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-2_hu26a10119971413dd8558a72c1e104fed_135238_200x150_fit_box_3.png" width="160" height="150" alt="Infraestructura de Clouding" title="Infraestructura de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-3_huee52e53912c36303bac457dd7e3703da_127867_2560x1440_fit_box_3.png" data-gallery="" title="Infraestructura de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-3_huee52e53912c36303bac457dd7e3703da_127867_200x150_fit_box_3.png" width="158" height="150" alt="Infraestructura de Clouding" title="Infraestructura de Clouding"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-4_hu5cd5cc7fdf3eed52fa514d1d014559e6_123773_2560x1440_fit_box_3.png" data-gallery="" title="Infraestructura de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-4_hu5cd5cc7fdf3eed52fa514d1d014559e6_123773_200x150_fit_box_3.png" width="159" height="150" alt="Infraestructura de Clouding" title="Infraestructura de Clouding"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-5_hu407ad9e63341590400f3617a98a4b99b_124760_2560x1440_fit_box_3.png" data-gallery="" title="Infraestructura de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-infraestructura-5_hu407ad9e63341590400f3617a98a4b99b_124760_200x150_fit_box_3.png" width="158" height="150" alt="Infraestructura de Clouding" title="Infraestructura de Clouding"  class="lozad "></a></p>
<figcaption>Infraestructura de Clouding</figcaption>
</figure>
</div>
<p>Son muchas las empresas que confían en Clouding como proveedor de servicios para sus necesidades tecnológicas. Dado el tamaño de estas empresas es garantía de que el servicio de Clouding está a la altura para tenerlos como clientes.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-clientes_hub824dfca607c3f0a0eb0c96ed75b2a20_126653_2560x1440_fit_box_3.png" data-gallery="" title="Clientes de Clouding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/clouding-clientes_hub824dfca607c3f0a0eb0c96ed75b2a20_126653_200x150_fit_box_3.png" width="188" height="150" alt="Clientes de Clouding" title="Clientes de Clouding"  class="lozad "></a></p>
<figcaption>Clientes de Clouding</figcaption>
</figure>
</div>
<h3 id="crear-un-servidor-_cloud_-en-clouding">Crear un servidor <em>cloud</em> en Clouding</h3>
<p>Para probar su servicio ofrecen un cupón de 5 €, que con la opción más básica son unos 45 días de uso continuado en su configuración más básica para evaluar su servicio sin compromiso. El registro requiere validar una cuenta de correo electrónico, móvil y tarjeta de crédito. Requerir el móvil y la tarjeta de crédito para probar el servicio es algo excesivo pero quizá necesario para evitar <em>spam</em> y usos no deseados. Realizado el registro ya está disponible el acceso al panel de administración desde el que crear nuevos servidores, arrancarlos, modificarlos, pararlos o eliminarlos.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/registro_huae5c4934c92475d27870cebea28f77ff_60890_2560x1440_fit_box_3.png" data-gallery="" title="Pasos de verificación del registro"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/registro_huae5c4934c92475d27870cebea28f77ff_60890_300x200_fit_box_3.png" width="300" height="143" alt="Pasos de verificación del registro" title="Pasos de verificación del registro"  class="lozad "></a></p>
<figcaption>Registro</figcaption>
</figure>
</div>
<p>Completado el registro accediendo al panel de administración en la sección servidores podremos crear las instancias y con que cantidad de recursos reservados, para ajustar el precio y dada la elasticidad de los servidores se puede empezar por las opciones mínimas e ir subiendo hasta que los recursos sean suficientes para el correcto funcionamiento de servidor según los recursos necesarios.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/panel-administracion_hua8cc9f49dd164b7b495598d82a88e5ea_30889_2560x1440_fit_box_3.png" data-gallery="" title="Panel de administración"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/panel-administracion_hua8cc9f49dd164b7b495598d82a88e5ea_30889_300x200_fit_box_3.png" width="300" height="143" alt="Panel de administración" title="Panel de administración"  class="lozad "></a></p>
<figcaption>Panel de administración</figcaption>
</figure>
</div>
<p>Como utilidad Clouding.io ofrece un panel donde gestionar los registros DNS del dominio que contratemos y conocer los nombre de <em>host</em> y direcciones IP de los servidores de DNS de Clouding.io. Casi seguro que la entidad registradora del dominio que le asignemos al servicio para su acceso también tenga la opción de administrar los registros DNS, usar el de Clouding.io es más por unificar en un solo sitio toda la administración del servidor. En las opciones avanzadas se pueden administrar multitud de tipos de registro DNS.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/dns_hu41e10548ff765daddec6c6cb902f451b_53127_2560x1440_fit_box_3.png" data-gallery="" title="Administración DNS"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/dns_hu41e10548ff765daddec6c6cb902f451b_53127_300x200_fit_box_3.png" width="300" height="143" alt="Administración DNS" title="Administración DNS"  class="lozad "></a></p>
<figcaption>Administración DNS</figcaption>
</figure>
</div>
<p>La sección principal es la de <em>Servidores</em> donde hay tres pestañas: una para los servidores, otra para las reglas de <em>firewall</em> para controlar el tráfico entrante y saliente de cada servidor y otra para las <em>llaves SSH</em> que usaremos para conectarnos desde nuestro equipo de forma segura. Seleccionado las características del servidor (memoria, procesadores y espacio en disco) al cabo de unos momentos el servidor se iniciará y estará disponible para que nos conectemos mediante SSH o desde la terminal con interfaz web ofrecida. Desde el listado de servidores podremos pararlo, reiniciarlo, redimensionarlo o eliminarlo. En la pestaña <em>Acceso</em> obtendremos el nombre de <em>host</em> asignado y la dirección IP privada y pública asignada, así como la contraseña del usuario <em>root</em>. En la pestaña <em>Estadísticas</em> monitorizaremos el estado del servidor y conoceremos si es necesario redimiensionarlo en algún parámetro.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/servidor_hu3131f9c01206c90471248ec20a9654a7_37137_2560x1440_fit_box_3.png" data-gallery="" title="Parámetros de acceso de un servidor"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/servidor_hu3131f9c01206c90471248ec20a9654a7_37137_300x200_fit_box_3.png" width="300" height="143" alt="Parámetros de acceso de un servidor" title="Parámetros de acceso de un servidor"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/acceso_huc8456af10ea1e5396a7fdc1b23cabe2c_91973_2560x1440_fit_box_3.png" data-gallery="" title="Parámetros de acceso de un servidor"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/acceso_huc8456af10ea1e5396a7fdc1b23cabe2c_91973_300x200_fit_box_3.png" width="255" height="200" alt="Parámetros de acceso de un servidor" title="Parámetros de acceso de un servidor"  class="lozad "></a></p>
<figcaption>Un servidor y sus parámetros de acceso</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/nuevo-servidor_hu6fae8938a73c88b555c9f18a38a80ffa_82256_2560x1440_fit_box_3.png" data-gallery="" title="Nuevo servidor"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/nuevo-servidor_hu6fae8938a73c88b555c9f18a38a80ffa_82256_300x200_fit_box_3.png" width="290" height="200" alt="Nuevo servidor" title="Nuevo servidor"  class="lozad "></a></p>
<figcaption>Nuevo servidor</figcaption>
</figure>
</div>
<p>Las reglas del <em>firewall</em> por defecto son demasiado permisivas, si solo necesitamos que el puerto 80, el del servidor web, esté abierto el resto de reglas para otros puertos se pueden eliminar para evitar posibles agujeros de seguridad. Una cosa buena es que se pueden crear múltiples reglas de seguridad y aplicar a cada servidor la más conveniente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/firewall_hu9d750e187604d5487e9e11027a30a400_116554_2560x1440_fit_box_3.png" data-gallery="" title="Reglas de firewall"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/firewall_hu9d750e187604d5487e9e11027a30a400_116554_300x200_fit_box_3.png" width="210" height="200" alt="Reglas de firewall" title="Reglas de firewall"  class="lozad "></a></p>
<figcaption>Reglas de firewall</figcaption>
</figure>
</div>
<h3 id="conexión-mediante-línea-de-comandos-con-ssh">Conexión mediante línea de comandos con SSH</h3>
<p>Las llaves SSH son necesarias para conectarnos al servidor y lanzar comandos desde la terminal. Generada una llave SSH desde el apartado <em>Llaves SSH</em> descargaremos la clave privada, la añadiremos al directorio <em>~/.ssh</em> y configuraremos el archivo <em>~/.ssh/config</em> para acceder al servidor.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/llaves-ssh_huea62ffdec855ca869e85cc274ad4d7d3_30472_2560x1440_fit_box_3.png" data-gallery="" title="Claves SSH"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/llaves-ssh_huea62ffdec855ca869e85cc274ad4d7d3_30472_300x200_fit_box_3.png" width="300" height="143" alt="Claves SSH" title="Claves SSH"  class="lozad "></a></p>
<figcaption>Claves SSH</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Host 6ff66804-d8f0-4b4e-a176-1e30a40a0672.clouding.host&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;HostName 6ff66804-d8f0-4b4e-a176-1e30a40a0672.clouding.host&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;User root&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;IdentityFile ~/.ssh/clouding.pem</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>config</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----&#10;</span></span><span class="line"><span class="cl">MIIEpQIBAAKCAQEA2kXDUI1E8VcfPUf6YLju2bBPAjy3Y8+GTJMHmDikpPt+uTp4&#10;</span></span><span class="line"><span class="cl">gt5miCFYnZYJB4g3/o/sUPLHBqnQN23jlXn4s0xe/20hKc6iDPSoJEjurqCrpRPj&#10;</span></span><span class="line"><span class="cl">eYwfnes3xdPXJujgAUXodTtPhoQMfmKHvw9mgEwHA6QKRyU83/ZXKldywBDet3Vh&#10;</span></span><span class="line"><span class="cl">NcNayFEzBsLWR1niI0/SKu903XLszS2l93tsB+hhQzD44G57AKJgpQZ+wPkXD4yB&#10;</span></span><span class="line"><span class="cl">KWVUjLodOGSLm00S5EqyQDPZb1QosFu/eFGnriOlA1CY2+Ef+EkQ6ydBRGrS6kY7&#10;</span></span><span class="line"><span class="cl">uharn+9wZNUAXc+542iUlW7GNfVijd1sAZVxfQIDAQABAoIBAFkVuA2cWtMVd86P&#10;</span></span><span class="line"><span class="cl">HgVz9Sgr6VNEbKT0AiAmsibSl4AulR4MWzsugjJ1SbGnlq/YTOI843p2W/zAOhcl&#10;</span></span><span class="line"><span class="cl">ZomPao3jUbJ2W96wUztub2G/0oq7UNLjNyhYpF7TrcO0Hk/nI+XhHmsade603lSG&#10;</span></span><span class="line"><span class="cl">6lh0dKVQYlx+CyPWcu4FoLXLUy5H80+s40oAbGi4Cd/Ldozcno7ael3CmmAfqc3N&#10;</span></span><span class="line"><span class="cl">r2xSxZregTEbBtl4vV3a0T4YONgsj6qW9rXj3asC6lu9ndXhzOlTt/yc+uU4/VND&#10;</span></span><span class="line"><span class="cl">f5oxT/oariimRlH+YAE0hJHcfltsvDAn/XBhndbBb3aIThcoreWHEYeq/TiCR+KO&#10;</span></span><span class="line"><span class="cl">hPOYEAECgYEA9CRLr3uT1VbOAtjrcnziitI2iJMMqo4W/PXZMBUeWOccBp+bQUQc&#10;</span></span><span class="line"><span class="cl">vR7gYy605iIh413ytDIbZE8rvR4XVi+DU9S38GO1Wa1NorTUym3LqA2GhzCeaY5F&#10;</span></span><span class="line"><span class="cl">eeb085SwK7cqha1ye4h+1eHh1jTJcn+6oCcnl0oeUeBvvlCtiQ8s0QECgYEA5N/N&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>clouding.pem</span>
    </div>
</div>
<p>En los ajustes veremos el saldo disponible que se irá descontando según los recursos consumidos durante el periodo de tiempo utilizados. Una cosa importante es que aunque el servidor esté apagado seguirá contabilizándose en la facturación. Podemos elegir recibir notificaciones cuando el saldo de la cuenta sea bajo para realizar una recarga.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/ajustes_hu3abe75b398785d9c4d59314317679cd1_110183_2560x1440_fit_box_3.png" data-gallery="" title="Ajustes, facturación e informes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/ajustes_hu3abe75b398785d9c4d59314317679cd1_110183_300x200_fit_box_3.png" width="217" height="200" alt="Ajustes, facturación e informes" title="Ajustes, facturación e informes"  class="lozad "></a></p>
<figcaption>Ajustes, facturación e informes</figcaption>
</figure>
</div>
<p>Una de las primeras cosas aconsejables realizar es tener acceso mediante SSH descargando la clave privada desde le apartado <em>Llaves SSH</em>, con GNU/Linux no se necesita mucho más para conectarse al servidor, en Windows se puede utilizar un programa como <a href="https://www.putty.org/">PuTTY</a>. En cualquier caso siempre está disponible el acceso vía web. Otra de las cosas que a realizar es acceder al servidor SSH mediante un dominio propio que también con anterioridad hay que registrar. Y también es recomendable actualizar todos los paquetes o actualizaciones de seguridad del sistema.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/ssh_hu496b30201e505a3438bf4a6b41205b72_78898_2560x1440_fit_box_3.png" data-gallery="" title="Acceso mediante SSH"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/ssh_hu496b30201e505a3438bf4a6b41205b72_78898_300x200_fit_box_3.png" width="300" height="164" alt="Acceso mediante SSH" title="Acceso mediante SSH"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/consola-vnc_hu7a23f71cd1c51143e57e920da827f002_49236_2560x1440_fit_box_3.png" data-gallery="" title="Acceso mediante consola VNC"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/consola-vnc_hu7a23f71cd1c51143e57e920da827f002_49236_300x200_fit_box_3.png" width="300" height="143" alt="Acceso mediante consola VNC" title="Acceso mediante consola VNC"  class="lozad "></a></p>
<figcaption>Acceso mediante SSH y consola VNC</figcaption>
</figure>
</div>
<p>Con acceso vía SSH al servidor ya es posible administrarlo con una herramienta como <a href="https://www.ansible.com/">Ansible</a> instalando paquetes, actualizar el servidor y configurar servicios como los servidores web <a href="https://nginx.org/">nginx</a> o <a href="https://httpd.apache.org/">Apache</a>, <a href="https://www.docker.com/">Docker</a> y otra multitud de tareas que permite esta herramienta. En el artículo <a href="https://picodotdev.github.io/blog-bitix/2021/12/aprovisionar-un-servidor-en-la-infraestructura-cloud-de-clouding-con-ubuntu-y-nginx-usando-ansible-y-protocolo-seguro-https-con-lets-encrypt/">Aprovisionar un servidor en la infraestructura cloud de Clouding con Ubuntu y Nginx usando Ansible y protocolo seguro HTTPS con Let&rsquo;s Encrypt</a> muestro como aprovisionar de forma automatizada un servidor <em>cloud</em> de Clouding.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/nginx_hua6e3fe23dbf811bd6c8adc84847a8465_43808_2560x1440_fit_box_3.png" data-gallery="" title="Servidor NGINX"><img src="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/images/nginx_hua6e3fe23dbf811bd6c8adc84847a8465_43808_300x200_fit_box_3.png" width="300" height="143" alt="Servidor NGINX" title="Servidor NGINX"  class="lozad "></a></p>
<figcaption>Servidor NGINX</figcaption>
</figure>
</div>
<p>He encontrado en su blog algunos artículos interesantes y base de conocimiento. Otros artículos de interés son los que escribí en la <a href="https://picodotdev.github.io/blog-bitix/series/web/">serie web</a> en la que comentaba aspectos como HTTP/2, HTTPS, redirecciones o GZIP.</p>
<p>En definitiva Clouding.io es una opción de computación en la nube sencilla, con una política de precios simple y adecuada para proyectos desde pequeños de páginas web y presencia en internet hasta medianos que requieren una base de datos y tenga un tráfico ya notable, con soporte en español y que se puede probar sin compromiso. Al ser computación en la nube ofrece gran flexibilidad y ajustar el precio a los recursos consumidos, al usar discos SSD el buen rendimiento ya lo he notado al probar su servicio cuando he actualizado los paquetes del servidor e instalado el de nginx. Según las características anunciadas de redundancia la fiabilidad es destacable para que no haya caídas de servicio.</p>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="patrocinado"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/</id>
        <title>Desempaquetado del kit de iniciación a la electrónica para la Raspberry Pi</title>
        <updated>2017-02-25T23:30:00+01:00</updated>
        <published>2017-02-25T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<p>En el año 2012 compré una de las primeras Raspberry Pi que estuvieron disponibles a la venta, una placa modelo B de 256 MiB. La Raspberry Pi es un pequeño computador en una placa del tamaño de una tarjeta de crédito a un precio que aún se sigue manteniendo en las nuevas versiones de unos 40 € a los que hay que sumar algunos complementos necesarios como una tarjeta SD o microSD y un cargador con conector miniUSB. Las versiones iniciales que es la que tengo se componían de:</p>
<ul>
<li>CPU 700 Mhz, un núcleo ARM11 de 32 bits</li>
<li>Memoria de 256 MiB</li>
<li>Ethernet 100 MB</li>
<li>Lector tarjeta SD</li>
<li>2 x USB 2.0</li>
<li>HDMI</li>
<li>26 pines, 17 de propósito general o GPIO</li>
<li>Salida de audio</li>
<li>Salida de vídeo</li>
</ul>
<p>Después de unos años se han lanzado versiones notablemente mejoradas, hasta la fecha la última es la <a href="https://amzn.to/2MXH57Q">Raspberry Pi 4</a> de esta placa que multiplica por 4 la cantidad de memoria RAM hasta 1 GiB y con una CPU de 4 núcleos a una frecuencia de 1.2 Ghz basados en los procesadores ARM Cortex-A53 de 64 bits, incluyendo WIFI N y Bluetooth 4.1, 4 conectores USB, lector microSD y 26 <em>pines</em> GPIO. Aunque la finalidad original de este computador es el aprendizaje de programación y electrónica el uso principal que le he dado hasta ahora ha sido para hacer descargas P2P via torrent. Esta placa es muy popular debido a su bajo coste aunque hay que sumarle posteriormente el precio de una tarjeta microSD y el cargador para proporcionarle energía, su éxito no solo es debido a su coste ya que hay opciones aún más potentes en algunos aspectos a precio similar que no son tan populares, el valor diferenciador de la Raspberry Pi es el apoyo y soporte de la comunidad.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_300x200_fit_q90_box.jpg" width="268" height="200" alt="Raspberry Pi 1 B" title="Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_300x200_fit_q90_box.jpg" width="287" height="200" alt="Raspberry Pi 3 B" title="Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Placas modelos Raspberry Pi 1 B y 3 B</figcaption>
</figure>
</div>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0899VXM8F&amp;linkId=d5f0684371c6b5b8fa5cbd472b276ba4" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VD5L1VY&amp;linkId=f7a5d402571fb5dd48fa2311dc169469" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01566WOAG&amp;linkId=1c7d89fa46e38c81f0e35cb1518e80ea" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07CXXBTST&amp;linkId=aee5521403e014f5b256191d116ac4b3" title="Amazon" class="lozad"></iframe>
</div>
<p>Hace unas semanas compré un <a href="https://amzn.to/30Fpsle">kit de electrónica básico para la Raspberry Pi</a> pero que incluye una buena cantidad de sensores y elementos de electrónica y sirve para cualquier placa con <em>pines</em> GPIO. Como el <em>kit</em> es para la Raspberry Pi 3 y viene con un cable de extensión de 40 <em>pines</em> (cantidad de <em>pines</em> que tiene la Raspberry Pi 3) y yo tengo la 1 debí comprar también un <a href="https://amzn.to/2lSYiDF">cable de extensión de 26 pines</a> (los que tiene la Raspberry Pi 1) para la matriz de puntos con la que hacer pruebas sin soldar los elementos. El precio del <em>kit</em> no es muy caro, de unos 30 € y el barómetro no venía soldado con sus <em>pines</em> por lo que si queremos usarlo deberemos hacer la soldadura primero con un <a href="https://amzn.to/3fk9AsE">soldador de electrónica</a> y <a href="https://amzn.to/30FRYmQ">estaño</a>.</p>
<p>El contenido del <em>kit</em> es el siguiente que viene en una estupenda caja de plástico para guardar todos los componentes de forma ordenada:</p>
<ul>
<li>1 x GPIO to breadboard 40-pin breakout interface</li>
<li>1 x solderless prototype breadboard</li>
<li>40 x pin jumper wires (male to male 15cm)</li>
<li>2 x 8 pin Jumper Wires (female to female 20cm)</li>
<li>24 x LED (6 x Bright White, 6 x Red, 6 x Yellow, 6 x Green)</li>
<li>65 x resistors (200ohm x 20pcs, 1Kohm x 20pcs, 10Kohm x 20pcs, 1Mohm x 5pcs)</li>
<li>3 x photoresistor (light sensor)</li>
<li>5 x push buttons</li>
<li>3 x potentiometer (10kilohm adjustable resistor)</li>
<li>1 x A/D converter</li>
<li>1 x DHT11 Temperature/Humidity sensor</li>
<li>1 x motion sensor</li>
<li>1 x mercury tilt switch sensor</li>
<li>1 x I2C 1602 alphanumeric LCD</li>
<li>1 x servo motor</li>
<li>1 x piezo Buzzer</li>
<li>1 x BMP180 Pressure/Temperature Sensor</li>
<li>1 x relay</li>
<li>1 x Infrared Remote Controller and Receiver(VS1838B)</li>
<li>1 x Raspberry Pi/Arduino 8-Channel TTL Logic Level Converter</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/caja_hu3596c9084db953561c34d5fa63f96852_745001_2560x1440_fit_q90_box.jpg" data-gallery="" title="Caja"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/caja_hu3596c9084db953561c34d5fa63f96852_745001_300x200_fit_q90_box.jpg" width="286" height="200" alt="Caja" title="Caja"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/componentes-1_huc75081f4ac371f81b28997cd203d4953_427646_2560x1440_fit_q90_box.jpg" data-gallery="" title="Componentes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/componentes-1_huc75081f4ac371f81b28997cd203d4953_427646_300x200_fit_q90_box.jpg" width="206" height="200" alt="Componentes" title="Componentes"  class="lozad "></a></p>
<figcaption>Caja, componentes y sensores</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-1_hub14ff8c81187c5e145ddf11e239b8231_309863_2560x1440_fit_q90_box.jpg" data-gallery="" title="Display 16x02"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-1_hub14ff8c81187c5e145ddf11e239b8231_309863_300x200_fit_q90_box.jpg" width="300" height="144" alt="Display 16x02" title="Display 16x02"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-2_hue4cfea05d9f7f4252160536822ad491e_383854_2560x1440_fit_q90_box.jpg" data-gallery="" title="Display 16x02 con adaptador I2C"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-2_hue4cfea05d9f7f4252160536822ad491e_383854_300x200_fit_q90_box.jpg" width="300" height="149" alt="Display 16x02 con adaptador I2C" title="Display 16x02 con adaptador I2C"  class="lozad "></a></p>
<figcaption>Display 16x02 y adaptador I2C</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-1_hu3efe8567a7b416d531d261a80a1cc85e_514695_2560x1440_fit_q90_box.jpg" data-gallery="" title="Breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-1_hu3efe8567a7b416d531d261a80a1cc85e_514695_300x200_fit_q90_box.jpg" width="133" height="200" alt="Breadboard" title="Breadboard"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-2_hu3d91c2bbfeab24926d5ec279b5098550_627608_2560x1440_fit_q90_box.jpg" data-gallery="" title="Breadboard y adaptador"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-2_hu3d91c2bbfeab24926d5ec279b5098550_627608_300x200_fit_q90_box.jpg" width="150" height="200" alt="Breadboard y adaptador" title="Breadboard y adaptador"  class="lozad "></a></p>
<figcaption>Breadboard y adaptador</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/adaptador-breadboard_hud45c01438163af7fa5a93b416fbb20ed_528914_2560x1440_fit_q90_box.jpg" data-gallery="" title="Breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/adaptador-breadboard_hud45c01438163af7fa5a93b416fbb20ed_528914_300x200_fit_q90_box.jpg" width="239" height="200" alt="Breadboard" title="Breadboard"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/diodos-resistencias_hua1bf1745946a4e4e0815cd1c7cbcd39b_290583_2560x1440_fit_q90_box.jpg" data-gallery="" title="Diodos, botones, resistencias y fotorresistores"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/diodos-resistencias_hua1bf1745946a4e4e0815cd1c7cbcd39b_290583_300x200_fit_q90_box.jpg" width="203" height="200" alt="Diodos, botones, resistencias y fotorresistores" title="Diodos, botones, resistencias y fotorresistores"  class="lozad "></a></p>
<figcaption>Adaptador breadboard, diodos, botones, resistencias y fotorresistores</figcaption>
</figure>
</div>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06VTH7L28&amp;linkId=415695f2e7f3ef590a8f4c93b8bda126" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06W54L7B5&amp;linkId=37e721eaa0be8ec062eef5ee18a5eae8" title="Amazon" class="lozad"></iframe>
</div>
<p>La matriz de conexiones o <em>breadboard</em> es una forma cómoda de hacer pruebas sin tener que hacer soldaduras, los puntos en vertical de la mitad superior e inferior están conectados entre si de modo que con los cables macho-macho podamos poner y quitar conexiones. La matriz está numerada horizontalmente con números y verticalmente con letras de forma que cada punto sea identificable individualmente. Las dos filas de puntos superiores suelen usarse para proporcionar un voltaje de 5V y la conexión de tierra, las dos filas de puntos inferiores para proporcionar un voltaje de 3.3V y tierra. La placa está dividida en dos mitades verticalmente de las letras A-D y E-F formando columnas verticales de puntos conectadas en grupos de 5.</p>
<p>Mi intención para este <em>kit</em> es hacer unos pequeños ejemplos usando en cada uno de ellos uno o varios elementos y con el lenguaje de programación Java y la librería <a href="http://rtd.diozero.com/en/latest/">Diozero</a>. Entre los ejemplos estará encender y apagar un LED, usar el <em>display</em> de 16x2 caracteres, el sensor de temperatura y humedad, el sensor de infrarrojos, el motor, los pulsadores, el sensor de movimiento, los detectores de luz, el detector de golpes, etc&hellip;</p>
<p>En la página del fabricante o distribuidor mayorista <a href="http://osoyoo.com/">Osoyoo</a> hay colgados varios ejemplos usando varios de estos elementos. También deberemos hacernos con las referencias de los <em>pines</em> para saber las conexiones que debemos hacer con los cables junto con la tabla de referencia de colores de las resistencias. Para usar las tablas de referencia debemos saber que hay varias formas de numerar los pines. Está la del <em>header</em> del 1 al 26 o del 1 al 40 secuencialmente según la disposición en el <em>header</em>, la que utiliza la librería <a href="http://wiringpi.com/">wiringPi</a> y <a href="https://pi4j.com/">Pi4J</a> para numerar los <em>pines</em> GPIO y la de Broadcom que utiliza la librería Diozero. Estas tablas de referencia de nomenclatura son importantes porque cada una numera los <em>pines</em> de forma diferente, por ejemplo, según la numeración de wiringPi el pin número 3 corresponde al GPIO 8 cuando según la nomenclatura de Broadcom el mismo pin corresponde al GPIO 0 en el modelo RPi 1 modelo B rev1 y al GPIO 2 en la RPi 3.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_2560x1440_fit_box_3.png" data-gallery="" title="Header de _pines_ Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_300x200_fit_box_3.png" width="152" height="200" alt="Header de _pines_ Raspberry Pi 1 B" title="Header de _pines_ Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_2560x1440_fit_box_3.png" data-gallery="" title="Header de _pines_ Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_300x200_fit_box_3.png" width="110" height="200" alt="Header de _pines_ Raspberry Pi 3 B" title="Header de _pines_ Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Header de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_2560x1440_fit_box_3.png" data-gallery="" title="Header de _pines_ Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_300x200_fit_box_3.png" width="94" height="200" alt="Header de _pines_ Raspberry Pi 1 B" title="Header de _pines_ Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_2560x1440_fit_box_3.png" data-gallery="" title="Header de _pines_ Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_300x200_fit_box_3.png" width="67" height="200" alt="Header de _pines_ Raspberry Pi 3 B" title="Header de _pines_ Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Headers de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_2560x1440_fit_q90_box.jpg" data-gallery="" title="Código de colores de las resistencias"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_300x200_fit_q90_box.jpg" width="237" height="200" alt="Código de colores de las resistencias" title="Código de colores de las resistencias"  class="lozad "></a></p>
<figcaption>Código de colores de las resistencias</figcaption>
</figure>
</div>
<p>Un ejemplo básico sin necesidad de programar nada es encender un diodo LED. Los elementos a usar son el diodo LED, una resistencia, los cables macho-macho, el cable de extensión y la matriz de puntos. Para ello conectamos el cable de extensión a la matriz de puntos donde con los cables macho-macho haremos las conexiones en los agujeros de la matriz de puntos. Usaremos la conexión de voltaje de 3.3V y una resistencia de 200 ohmios para que el LED no reciba demasiada intensidad. Los diodos LED tienen dos patitas, una más corta que la otra que indican la polaridad, la corta es el polo negativo y se conecta a tierra, la larga es el polo positivo que se conecta a uno de los extremos de la resistencia y el otro extremo de esta la voltaje de 3.3V.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/hola-mundo-led_hu1a2dd2235c9bd66a08fd5a9332b95cbf_497151_2560x1440_fit_q90_box.jpg" data-gallery="" title="Ejemplo conexión LEDs"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/hola-mundo-led_hu1a2dd2235c9bd66a08fd5a9332b95cbf_497151_300x200_fit_q90_box.jpg" width="300" height="104" alt="Ejemplo conexión LEDs" title="Ejemplo conexión LEDs"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi_hu18596dc28606271666dd08645efbd69d_1293386_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi_hu18596dc28606271666dd08645efbd69d_1293386_300x200_fit_q90_box.jpg" width="141" height="200" alt="Raspberry Pi" title="Raspberry Pi"  class="lozad "></a></p>
<figcaption>Ejemplo conexión LEDs y Raspberry Pi</figcaption>
</figure>
</div>
<p>Con el programa <a href="http://fritzing.org/home/">Fritzing</a> podremos prototipar y documentar el esquema de  conexiones que realicemos de los proyectos. Posee numerosos modelos, elementos electrónicos y dispositivos de entrada y salida aunque no he encontrado el correspondiente la placa de extensión de wiringPi.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/fritzing_huaedcbe26e3518db7a04119b9abf364f3_228766_2560x1440_fit_box_3.png" data-gallery="" title="Fritzing"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/fritzing_huaedcbe26e3518db7a04119b9abf364f3_228766_300x200_fit_box_3.png" width="300" height="164" alt="Fritzing" title="Fritzing"  class="lozad "></a></p>
<figcaption>Fritzing</figcaption>
</figure>
</div>
<p>En el siguiente artículo explicaré como crear un programa Java para encender y apagar varias veces un diodo LED con la librería Doizero. Además explicaré como con <a href="https://gradle.org/">Gradle</a>, <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a> y <a href="https://www.ansible.com/">Ansible</a> hacerlo de forma cómoda desde nuestra máquina de desarrollo y no directamente desde la más lenta Raspberry Pi.</p>
<p><em>Software. Hardware. Complete.</em></p>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/</id>
        <title>Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</title>
        <updated>2017-02-18T10:00:00+01:00</updated>
        <published>2017-02-18T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Entre las ventajas de integrar dos aplicaciones mediante el envío de mensajes están que evita que estén acopladas y la comunicación es asíncrona. Con RabbitMQ también podremos implementar cada uno de ellas con el lenguaje de programación que prefiramos de entre las varias posibilidades para las que ofrece clientes y por esto último podemos preferir usarlo en vez de las especificación JMS propia de Java EE que nos obligaría a usar un servidor de aplicaciones que lo implemente, posiblemente JBoss/Wildfly o Weblogic en vez de Tomcat o Jetty. En el artículo incluyo un ejemplo para el lenguaje Java mostrando el envío y recepción de mensajes junto con la aplicación de administración que nos proporcionará información útil.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/rabbitmq.svg" width="200" height="211" alt="RabbitMQ" title="RabbitMQ"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Las aplicaciones que se integran mediante el envío y recepción de mensajes evitan el acoplamiento y sincronía junto con la posibilidad de implementar cada una de ellas con diferentes lenguajes o plataformas. Entre las especificaciones que componen Java EE está &lt;abbr title=”Java Message Service”&gt;JMS</abbr> pero tanto la aplicación que envía como la que recibe mensajes deben estar programadas en el lenguaje Java, a menos que incluyamos un adaptador que permita a la aplicación no Java interactuar con JMS.</p>
<p><a href="https://www.rabbitmq.com/">RabbitMQ</a> es un software de servidor que actúa como intermediario o <em>broker</em> de mensajería entre dos o más aplicaciones que se comunican o envían notificaciones con mensajes, proporciona una funcionalidad similar a JMS pero con la ventaja que ofrece soporte para los lenguajes más populares incluido <a href="https://www.oracle.com/technetwork/java/index.html">Java</a> y <a href="https://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java"><abbr title="Java Virtual Machine">JVM</abbr></a>, <a href="https://www.ruby-lang.org/es/">Ruby</a>, <a href="https://www.python.org/">Python</a>, <a href="https://www.microsoft.com/net">.NET</a>, <a href="https://secure.php.net/">PHP</a>, <a href="https://nodejs.org/en/">Node.js</a>, <a href="https://golang.org/">Go</a> y varios más. Usa varios conceptos similares a los presentes en JMS como que el emisor envía los mensajes a una cola y el receptor los lee.</p>
<p>La comunicación con mensajes entre aplicaciones es útil porque ni el emisor ni receptor se conocen directamente ni han de estar funcionando simultáneamente para comunicarse consiguiendo de este modo el desacoplamiento entre las aplicaciones. Además la comunicación puede ser de uno a varios, los mensajes son leídos de las colas con la posibilidad de que cada mensaje sea recibido por un único receptor o por cada uno de ellos.</p>
<p>Realmente en RabbitMQ los mensajes no son enviados directamente por el emisor a las colas sino que se envían a un <em>exchange</em> que finalmente lo enruta y encola en la cola destino. Los <em>exchanges</em> pueden ser directos basando su lógica de encolado según el valor del <em>binding key</em> enviada junto con el mensaje y un <em>routing key</em> asociada con la cola o basados en temas en los que se usa una cadena formada por una lista de palabras separada por puntos, la lógica de enrutado se toma según si el <em>binding key</em> cumple el patrón del <em>routing key</em> que puede contener sustituidores de palabras, siendo un <em>*</em> una palabra exacta y <em>#</em> varias palabras contiguas.</p>
<p>En la <a href="http://www.rabbitmq.com/documentation.html">documentación de RabbitMQ</a> hay 6 tutoriales en diferentes lenguajes para el envío y recepción de mensajes.</p>
<ul>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-one-java.html">Tutorial 1, Hello World</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-two-java.html">Tutorial 2, Work Queues</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-three-java.html">Tutorial  3, Publish/Subscribe</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-four-java.html">Tutorial 4, Routing</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-five-java.html">Tutorial 5, Topics</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-six-java.html">Tutorial 6, Remote procedure call (RPC)</a></li>
</ul>
<p>Basándome en estos ejemplos he creado un proyecto uno muy similar al Tutorial 1, ejecutable más fácilmente con <a href="https://www.docker.com/">Docker</a> y <a href="https://gradle.org/">Gradle</a>.</p>
<p>Tanto en el emisor como en el receptor deberemos declarar las colas que van a usar (si una no existe se creará y si existe se usará), a la cola se le asigna un nombre y el receptor define un manejador para recibir los mensajes según se envían.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.holamundorabbitmq</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.rabbitmq.client.Channel</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.rabbitmq.client.Connection</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.rabbitmq.client.ConnectionFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Send</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello World at %s&#34;</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_DATE_TIME</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">basicPublish</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Sent «%s»&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1500</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Send.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.holamundorabbitmq</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.rabbitmq.client.*</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Receive</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34; [*] Waiting for messages. To exit press CTRL+C&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Consumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleDelivery</span><span class="o">(</span><span class="n">String</span> <span class="n">consumerTag</span><span class="o">,</span> <span class="n">Envelope</span> <span class="n">envelope</span><span class="o">,</span> <span class="n">AMQP</span><span class="o">.</span><span class="na">BasicProperties</span> <span class="n">properties</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">body</span><span class="o">,</span> <span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Received  «%s»&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">basicConsume</span><span class="o">(</span><span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">20000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Receive.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;HolaMundoRabbitMQ&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.1&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;com.rabbitmq:amqp-client:4.0.2&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">receive</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.holamundorabbitmq.Receive&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">send</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.holamundorabbitmq.Send&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Para ejecutar el ejemplo usaré el <a href="https://hub.docker.com/_/rabbitmq/">contenedor de Docker para RabbitMQ</a> iniciándolo con <a href="https://docs.docker.com/compose/">Docker Compose</a> y el siguiente archivo descriptor. Puedes consultar la <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie de artículos sobre Docker</a> que escribí para conocer cómo usarlo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">rabbitmq:management-alpine</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">data:/var/lib/rabbitmq</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;5672:5672&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;15672:15672&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">environment</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">RABBITMQ_NODENAME=rabbitmq</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w">&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose up&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-run.sh</span>
    </div>
</div>
<p>Una vez iniciado el contenedor y con el código fuente del ejemplo, iniciamos en cualquier orden la parte receptora de los mensajes y la parte emisora de mensajes con los comandos <code>./gradlew receive</code> y <code>./gradlew send</code> respectivamente, momento en el cual veremos que en la consola salen las notificaciones de recepción y envío.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/send_huf8ebe18827887e014241fb82fa202cfd_68838_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación de ejemplo enviando mensajes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/send_huf8ebe18827887e014241fb82fa202cfd_68838_300x200_fit_box_3.png" width="300" height="165" alt="Aplicación de ejemplo enviando mensajes" title="Aplicación de ejemplo enviando mensajes"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/receive_hu74d142a9c5988e8761ef4d64b6fedb89_70279_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación de ejemplo recibiendo mensajes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/receive_hu74d142a9c5988e8761ef4d64b6fedb89_70279_300x200_fit_box_3.png" width="300" height="165" alt="Aplicación de ejemplo recibiendo mensajes" title="Aplicación de ejemplo recibiendo mensajes"  class="lozad "></a></p>
</figure>
</div>
<p>En la comunicación con RabbitMQ se puede usar <a href="http://www.rabbitmq.com/ssl.html">TLS/SSL</a> así como mecanismos de <a href="http://www.rabbitmq.com/authentication.html">autenticación</a> y <a href="http://www.rabbitmq.com/access-control.html">autorización</a> para mayor seguridad. Usando confirmaciones si el receptor falla en el procesado el mensaje no se pierde ya que no se habrá declarado como <em>acknowledge</em> aún así si RabbitMQ falla los mensajes se perderán a menos que las colas se declaren como persistentes las cuales se guardarán en disco perdurando a una catástrofe.</p>
<p>RabbitMQ posee un <a href="https://www.rabbitmq.com/management.html"><em>plugin</em> para la administración</a> con el que podemos administrar permisos, tener una vista global, ver ratios de mensajes, estadísticas, colas, <em>exchanges</em> y más información, nos da información muy interesante sobre el estado del procesamiento de mensajes. Es accesible mediante el navegador y la URL <em>http://localhost:15672/</em>. En la captura del estado de la cola <em>hello</em> hay 10 mensajes encolados pendientes de entregar a algún receptor.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-management_huec6c3e7834fb461d5accc97854c9ff68_101295_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación web de administración de RabbitMQ"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-management_huec6c3e7834fb461d5accc97854c9ff68_101295_300x200_fit_box_3.png" width="300" height="164" alt="Aplicación web de administración de RabbitMQ" title="Aplicación web de administración de RabbitMQ"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-queue_hu4e54c3cb2be4db8f762ad98e132b349b_66191_2560x1440_fit_box_3.png" data-gallery="" title="Información de estado de una cola"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-queue_hu4e54c3cb2be4db8f762ad98e132b349b_66191_300x200_fit_box_3.png" width="274" height="200" alt="Información de estado de una cola" title="Información de estado de una cola"  class="lozad "></a></p>
</figure>
</div>
<p>Para profundizar más en las aplicaciones basadas en mensajes con RabbitMQ dos buenos libros son <a href="https://amzn.to/2lTGMQc">Learning RabbitMQ</a> y <a href="https://amzn.to/2lW9qwF">Matering RabbitMQ</a> cubriendo temas más avanzados como <em>clustering</em>, alta disponibilidad, arquitectura, patrones de diseño, seguridad y rendimiento.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=9bb0705e8a34f246d5530b141b0a690e" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=e87eebb622314cdf0c2c14fc32940264" title="Amazon" class="lozad"></iframe>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoRabbitMQ">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>docker-compose up, ./gradlew receive, ./gradle send</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a></li>
<li><a href="http://www.rabbitmq.com/documentation.html">Documentación RabbitMQ</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/series/docker/">Serie de artículos sobre Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/">Introducción y ejemplo sencillo de Java Message Service (JMS)</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/publicacion-y-suscripcion-de-eventos-con-guava-eventbus-en-una-aplicacion-java/">Publicación y suscripción de eventos con Guava EventBus en una aplicación Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/como-crear-un-servicio-de-systemd-para-una-aplicacion-con-spring-boot/</id>
        <title>Cómo crear un servicio de systemd para una aplicación con Spring Boot</title>
        <updated>2017-02-11T10:00:00+01:00</updated>
        <published>2017-02-11T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/como-crear-un-servicio-de-systemd-para-una-aplicacion-con-spring-boot/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>La mayoría de distribuciones Linux ya usan systemd como gestor y supervisor de los servicios del sistema.  Creando un descriptor podremos gestionar un servicio propio con los mismos comandos de systemd que usamos para cualquier otro servicio del sistema.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Habiendo creado una aplicación o microservicio, por ejemplo con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a>, necesitaremos que se inicie con el sistema y una forma de gestionarlo para detenerlo, reiniciarlo y que se reinicie en caso de salida abrupta.</p>
<p><a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> es el gestor de servicios que han adoptado la mayoría de distribuciones importantes como <a href="https://www.debian.org/">Debian</a>, <a href="https://www.centos.org/">CentOS</a>, <a href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux">RHEL</a>, <a href="https://www.opensuse.org/">openSUSE</a>, incluso <a href="https://www.ubuntu.com/">Ubuntu</a> después de abandonar su propio gestor de servicios <a href="https://es.wikipedia.org/wiki/Upstart">Upstart</a>. Podemos usar systemd para que gestione como servicio una aplicación propia. Para ello deberemos crear un archivo <em>unit</em> que describa el servicio y sus dependencias con otros servicios para que se inicie correctamente, él y sus dependencias.</p>
<p>Los servicios se definen en archivos de texto denominados <em>unit</em> que tienen un formato similar a los archivos <em>.desktop</em> que a su vez están inspirados en los archivos <em>.ini</em> de Windows. En la <a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html">documentación de los archivos <em>unit</em> de systemd</a> se detalla con amplitud los archivos <em>unit</em> de systemd, tienen tres secciones:</p>
<ul>
<li>[Unit]: contiene información genérica independiente del tipo de servicio como descripción, requerimientos, deseos o orden de inicio.</li>
<li>[Service]: define el tipo de servicio, los comandos de preinicio, inicio, postinicio, parada, postparada, condiciones reinicio y más parámetros comentados en la <a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html">documentación de los sevicios de systemd</a>.</li>
<li>[Install]: esta sección es usada al habilitar o deshabilitar un servicio en el sistema con el comando <code>systemctl</code>, pudiendo por ejemplo que se inicie este servicio cuando otro se inicie siendo otra forma de declarar dependencias. De este modo se puede indicar que un servicio tiene otros como dependencia pero también se puede indicar que un servicio se inicie cuando otro lo haga.</li>
</ul>
<p>Usando la aplicación del <a href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/">Ejemplo de API REST en Java con JAX-RS y Spring Boot</a>, crearé un archivo <em>unit</em> de systemd para que se inicie con el sistema y se reinicie en caso de fallo. Primeramente deberemos crear los archivos que definen el servicio para systemd y sus dependencias si las tienen. En los siguientes ejemplos <em>spring-boot-jaxrs.service</em> es una aplicación de <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> con una interfaz REST que simplemente devuelve el mensaje indicado por parámetro con la fecha en la dirección <em>http://localhost:8080/message?message=Hola</em>. <em>spring-boot-jaxrs-postgres.service</em> es el mismo servicio pero que tiene una dependencia sobre un contenedor de <a href="https://www.docker.com/">Docker</a> con una base <a href="https://www.postgresql.org/">PostgreSQL</a>, aunque la aplicación Spring Boot no hace uso de la base de datos PostgreSQL sirve para observar que si se inicia el servicio de la aplicación Java también se inicia el servicio de la base de datos si no estuviera ya en ejecución. <em>postgres.service</em> es el servicio de la base de datos PostgreSQL en un contenedor de Docker y que tiene como dependencia el servicio de Docker.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-systemd" data-lang="systemd"><span class="line"><span class="cl"><span class="k">[Unit]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">Spring Boot application</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">[Service]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Restart</span><span class="o">=</span><span class="s">always</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/bin/java -jar /var/apps/SpringBootJaxrs-0.0.1-SNAPSHOT.jar</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">SuccessExitStatus</span><span class="o">=</span><span class="s">143</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>spring-boot-jaxrs.service</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-systemd" data-lang="systemd"><span class="line"><span class="cl"><span class="k">[Unit]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">Spring Boot application</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Requires</span><span class="o">=</span><span class="s">postgres.service</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">After</span><span class="o">=</span><span class="s">postgres.service</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">[Service]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Restart</span><span class="o">=</span><span class="s">always</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/bin/java -jar /var/apps/SpringBootJaxrs-0.0.1-SNAPSHOT.jar</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">SuccessExitStatus</span><span class="o">=</span><span class="s">143</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>spring-boot-jaxrs-postgres.service</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-systemd" data-lang="systemd"><span class="line"><span class="cl"><span class="k">[Unit]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">PostgreSQL container</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Requires</span><span class="o">=</span><span class="s">docker.service</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">After</span><span class="o">=</span><span class="s">docker.service</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">[Service]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">Restart</span><span class="o">=</span><span class="s">always</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/bin/docker start -a postgres</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">ExecStop</span><span class="o">=</span><span class="s">/usr/bin/docker stop -t 5 postgres</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>&#10;</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>postgres.service</span>
    </div>
</div>
<div class="media">
<script type="text/javascript" src="https://asciinema.org/a/102785.js" id="asciicast-102785" async></script>
<noscript><a href="https://asciinema.org/a/102785" target="_blank"><img src="https://asciinema.org/a/102785.png" width="650" height="450"></a></noscript>
</div>
<p>La instalación de la aplicación y de los servicios de systemd en el sistema se realizan copiando archivos, cambiando algunos permisos y usando los comandos de systemd para gestionar los servicios. Los mensajes de salida que emite el servicio se obtienen con el comando <code>journalctl -u spring-boot-jaxrs.service</code>.</p>
<p>Los archivos <em>unit</em> propios deben ser ubicados en el directorio <em>/etc/systemd/system/</em>, siendo el directorio <em>/usr/lib/systemd/system/</em> donde se ubican los instalados por los paquetes del sistema. Iniciado el servicio con el comando <code>sudo systemctl start spring-boot-jaxrs.service</code>, si queremos habilitarlo con el inicio del sistema usamos el comando <code>sudo systemctl enable spring-boot-jaxrs.service</code>. Para ver el estado del servicio usamos el comando <code>sudo systemctl status spring-boot-jaxrs.service</code>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./gradlew build&#10;</span></span><span class="line"><span class="cl">sudo mkdir /var/apps&#10;</span></span><span class="line"><span class="cl">sudo cp build/libs/SpringBootJaxrs-0.0.1-SNAPSHOT.jar /var/apps&#10;</span></span><span class="line"><span class="cl">sudo cp misc/spring-boot-jaxrs.service /etc/systemd/system&#10;</span></span><span class="line"><span class="cl">sudo cp misc/spring-boot-jaxrs-postgres.service /etc/systemd/system&#10;</span></span><span class="line"><span class="cl">sudo cp misc/postgres.service /etc/systemd/system&#10;</span></span><span class="line"><span class="cl">sudo chmod ugo+x /etc/systemd/system/spring-boot-jaxrs.service&#10;</span></span><span class="line"><span class="cl">sudo chmod ugo+x /etc/systemd/system/spring-boot-jaxrs-postgres.service&#10;</span></span><span class="line"><span class="cl">sudo chmod ugo+x /etc/systemd/system/postgres.service&#10;</span></span><span class="line"><span class="cl">sudo systemctl daemon-reload</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>install.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl start docker.service&#10;</span></span><span class="line"><span class="cl">docker run --name postgres postgres&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sudo systemctl start spring-boot-jaxrs.service&#10;</span></span><span class="line"><span class="cl">sudo systemctl status spring-boot-jaxrs.service&#10;</span></span><span class="line"><span class="cl">sudo systemctl stop spring-boot-jaxrs.service&#10;</span></span><span class="line"><span class="cl">sudo systemctl start spring-boot-jaxrs-postgres.service&#10;</span></span><span class="line"><span class="cl">sudo systemctl status spring-boot-jaxrs-postgres.service&#10;</span></span><span class="line"><span class="cl">sudo systemctl stop spring-boot-jaxrs-postgres.service</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>manage.sh</span>
    </div>
</div>
<p>En los enlaces de referencia hay documentación más detallada tanto para gestionar los servicios con systemd como también documentación de sus archivos <em>unit</em>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrs">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>sudo systemctl start spring-boot-jaxrs.service</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files">Understanding Systemd Units and Unit Files</a></li>
<li><a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html">systemd unit</a></li>
<li><a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html">systemd service</a></li>
<li><a href="https://docs.docker.com/engine/admin/host_integration/">Docker host integration</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#deployment-install">Installing Spring Boot applications</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Systemd">Systemd (Arch Linux Wiki)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/</id>
        <title>Conferencia BilboStack 2017</title>
        <updated>2017-02-08T21:30:00+01:00</updated>
        <published>2017-02-05T00:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<p>Cuando me inscribí en la <a href="https://bilbostack.com/">BilboStack</a> para reservar entrada no me llamaron mucho la atención las presentaciones del programa pero ya a una semana de decidir a cuales iba a ir definitivamente he tenido dificultades para elegir y en varios casos me hubiese gustado ir a las de los dos <em>tracks</em>. Como años anteriores la BilboStack se ha celebrado en Bilbao en el mismo emplazamiento de la <a href="https://www.deusto.es">Universidad de Deusto</a> pero volviendo como en años precedentes al edificio de las ingenierías. Otro cambio ha sido que este año fueron cuatro presentaciones por <em>track</em> cuando en años anteriores fueron cinco.</p>
<p>El número de asistentes ha sido numeroso quedando algo de sitio libre en el <em>track 2</em> que era un aula pero en la sala de conferencias del <em>track 1</em> aunque tiene cómodas butacas salvo por su estrechez el sitio libre era inexistente de modo que en algunas presentaciones ha habido algunos asistentes que han debido estar de pie.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/bilbostack-2017_hu130f13bb56bbf285751e4f0132e281ed_18466_2560x1440_fit_q90_box.jpg" data-gallery="" title="BilboStack 2017"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/bilbostack-2017_hu130f13bb56bbf285751e4f0132e281ed_18466_300x200_fit_q90_box.jpg" width="300" height="75" alt="BilboStack 2017" title="BilboStack 2017"  class="lozad "></a></p>
<figcaption>BilboStack 2017</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/universidad-de-deusto-1_hu048d8ca4a7f556266addbf27347ed41d_234861_2560x1440_fit_q90_box.jpg" data-gallery="" title="Universidad de Deusto"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/universidad-de-deusto-1_hu048d8ca4a7f556266addbf27347ed41d_234861_300x200_fit_q90_box.jpg" width="267" height="200" alt="Universidad de Deusto" title="Universidad de Deusto"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/universidad-de-deusto-2_hu4fbc52ee0b218f50cb37d351c39bd8eb_193097_2560x1440_fit_q90_box.jpg" data-gallery="" title="Universidad de Deusto"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/universidad-de-deusto-2_hu4fbc52ee0b218f50cb37d351c39bd8eb_193097_300x200_fit_q90_box.jpg" width="267" height="200" alt="Universidad de Deusto" title="Universidad de Deusto"  class="lozad "></a></p>
<figcaption>Universidad de Deusto</figcaption>
</figure>
</div>
<p>Este era el programa completo con su horario, temas muy distintos y variados como Xamarin, <em>internet of things</em>, el siempre presente JavaScript con Angular y Node, Lean Analytics y DDD entre algunos otros de la siguiente agenda:</p>
<table class="table">
    <thead class="table-light">
        <th width="140px">Hora</th>
        <th>Track 1</th>
    </thead>
    <tbody>
        <tr>
            <td>09:30-10:20</td>
            <td>Xamarin.Forms en el mundo real™ : Verdades y Mitos <em>por Josué Yeray</em></td>
        </tr>
        <tr>
            <td>10:30-11:20</td>
            <td>Una visión de Angular 2 y TypeScript <em>por Hugo Biarge</em></td>
        </tr>
        <tr>
            <td>11:20-11:50</td>
            <td>Café</td>
        </tr>
        <tr>
            <td>11:50-12:40</td>
            <td>Lights, Camera, Node! <em>por Catalina Oyaneder</em></td>
        </tr>
        <tr>
            <td>12:50-13:40</td>
            <td>Domain-Driven Design, uniendo negocio con el software <em>por Gorka Laucirica y Beñat Espiña</em></td>
        </tr>
    </tbody>
</table>
<table class="table">
    <thead class="table-light">
        <th width="140px">Hora</th>
        <th>Track 2</th>
    </thead>
    <tbody>
        <tr>
            <td>09:30-10:20</td>
            <td>Invisible o desaparece... <em>por Isabel Cabezas y Juliet Moreiro</em></td>
        </tr>
        <tr>
            <td>10:30-11:20</td>
            <td>Érase una vez... el Design System <em>por Naiara Abaroa</em></td>
        </tr>
        <tr>
            <td>11:20-11:50</td>
            <td>Café</td>
        </tr>
        <tr>
            <td>11:50-12:40</td>
            <td>Agile for scrummies <em>por Jorge Uriarte</em></td>
        </tr>
        <tr>
            <td>12:50-13:40</td>
            <td>Lean Analytics, mi faro de cabecera <em>por Carlos Iglesias</em></td>
        </tr>
    </tbody>
</table>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/track-1_hu7fe6897ca96acc27598903f6f9ff5707_63359_2560x1440_fit_q90_box.jpg" data-gallery="" title="Track 1"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/track-1_hu7fe6897ca96acc27598903f6f9ff5707_63359_300x200_fit_q90_box.jpg" width="196" height="200" alt="Track 1" title="Track 1"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/track-2_hu2d06849af4f66161ada517a18151e682_55804_2560x1440_fit_q90_box.jpg" data-gallery="" title="Track 2"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/track-2_hu2d06849af4f66161ada517a18151e682_55804_300x200_fit_q90_box.jpg" width="180" height="200" alt="Track 2" title="Track 2"  class="lozad "></a></p>
<figcaption>Agenda</figcaption>
</figure>
</div>
<p>Al igual que en ediciones previas hago un pequeño resumen de las presentaciones a las que asistí. Los resúmenes no le hace justicia a las grandes ponencias que fueron en realidad pero espero haber captado y transmitir aquí escuetamente las ideas básicas que se expusieron. Y con este es el tercer resumen consecutivo que escribo de la BilboStack, los anteriores (y posteriores que si tengo oportunidad espero escribir) de esta serie de artículos están al final de este artículo.</p>
<h3 id="invisible-o-desaparece-empor-isabel-cabezas-y-juliet-moreiroem">Invisible o desaparece&hellip; <em>por Isabel Cabezas y Juliet Moreiro</em></h3>
<p>El <abbr title="Internet of Things">IoT</abbr> o esos pequeños dispositivos que tienen conexión a internet están surgiendo como una forma de ayudarnos en algunas situaciones cotidianas como cambiar la ruta cuando hay un accidente para no llegar a un atasco o encender la calefacción antes de llegar a casa o antes de levantarnos, espejos que proporcionan información como notificaciones o el tiempo o un centro comercial que te posiciona y ofrece ofertas según la localización en la que estas y tus hábitos de consumo. Aparatos como <a href="https://www.microsoft.com/cognitive-services/en-us/">Amazon Echo</a> son asistentes a través de los cuales mediante comandos de voz podemos realizar acciones como pedir comida a domicilio.</p>
<p>Estos aparatos conectados a internet nos ofrecen una nuevo área posibilidades. Muestra de ellos es la demostración presentada que consistía en base a los mensajes escritos en <a href="https://twitter.com/">Twitter</a> iluminar una lámpara <a href="https://www.amazon.com/PLAYBULB-Candle-Bluetooth-Flameless-Android/dp/B00O4LHNNS/">PLAYBULB</a> con color verde si eran positivos, rojo si eran negativos y azul si eran neutros haciendo uso de <a href="https://www.microsoft.com/cognitive-services/en-us/">Microsoft Cognitive Services</a> y de <a href="https://azure.microsoft.com/es-es/services/cognitive-services/">algunas de sus APIs</a> para evaluar el sentido de los mensajes. Por ejemplo el mensaje <em>BilboStak is an awesome event!</em> se evaluará como positivo y sumará a la media para que la lampara cambie a color verde.</p>
<p>El <em>hardware</em> era la propia lámpara y una placa de computación <a href="https://software.intel.com/es-es/iot/hardware/edison">Intel Edison</a> junto con un servicio en la nube de Azure pero perfectamente podría ser una <a href="https://www.raspberrypi.org/">Raspberry Pi</a> u otra de las numerosas pequeñas placas que están surgiendo en este nuevo mercado. El <a href="https://github.com/isabelcabezasm/notwificador">código fuente del ejemplo</a> está compartido en un repositorio de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://es.slideshare.net/isabelcabezas/bilbostack-17-invisible-o-desaparece">Diapositivas presentación</a></li>
</ul>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/invisible-o-desaparece_hu474712a99534faace04a56823f395766_208185_2560x1440_fit_q90_box.jpg" data-gallery="" title="Invisible o desaparece..."><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/invisible-o-desaparece_hu474712a99534faace04a56823f395766_208185_300x200_fit_q90_box.jpg" width="267" height="200" alt="Invisible o desaparece..." title="Invisible o desaparece..."  class="lozad "></a></p>
</figure>
</div>
<h3 id="érase-una-vez-el-design-system-empor-naiara-abaroaem">Érase una vez&hellip; el Design System <em>por Naiara Abaroa</em></h3>
<p>El diseño de una página es una parte importante de la misma, no considerarlo así seguramente nos encontremos con problemas.</p>
<ol>
<li>Requiere de un conocimiento específico para hacerlo bien y esta es la habilidad que posee un <em>front-designer</em>.</li>
<li>Falta de arquitectura de CSS a pesar de que existen herramientas como Sass o less se sigue produciendo código espagueti.</li>
<li>Hay duplicidades y está poco estructurado.</li>
<li>Falta de coherencia en la tipografía, color, &hellip;</li>
<li>Problemas de especifidad al no considerar la evaluación en cascada y el orden de precedencia de <em>inline</em>, <em>id</em>, clases y elementos con lo que se ha de usar el denostado <em>!important</em> como último recurso.</li>
<li>Mezcla de varias convenciones, en el nombrado de elementos.</li>
</ol>
<p>La solución es el <em>Design System</em> consiguiendo primero claridad, segundo eficiencia y finalmente «belleza». Siguiendo el <a href="http://atomicdesign.bradfrost.com/chapter-2/">Atomic Design</a> se consigue una mayor reutilización y facilidad de mantenimiento combinándolo con herramientas como <a href="https://www.sketchapp.com/">Sketch</a> para el desarrollo de <em>mockups</em>.</p>
<p>Algunos recursos de diseño e implementaciones conocidas de <em>Design Systems</em> son:</p>
<ul>
<li><a href="https://material.io/">Material Design</a> y su <a href="https://material.io/guidelines/material-design/introduction.html">guía</a></li>
<li><a href="https://www.lightningdesignsystem.com/">Lightning Design System</a></li>
<li><a href="https://getbootstrap.com/">Bootstrap</a></li>
<li><a href="https://foundation.zurb.com/">Foundation</a></li>
<li>Y el propio que ha comenzado a desarrollar Naiara, <a href="https://github.com/nabaroa/nakDS">nakDS</a> que ha compartido en su GitHub</li>
</ul>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://nabaroa.github.io/erase-una-vez-el-design-system/#/">Diapositivas presentación</a></li>
</ul>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/design-system_hu66815cf9af28fb872208e0899f206fb7_181784_2560x1440_fit_q90_box.jpg" data-gallery="" title="Érase una vez... el Design System"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/design-system_hu66815cf9af28fb872208e0899f206fb7_181784_300x200_fit_q90_box.jpg" width="267" height="200" alt="Érase una vez... el Design System" title="Érase una vez... el Design System"  class="lozad "></a></p>
</figure>
</div>
<h3 id="agile-for-scrummies-empor-jorge-uriarteem">Agile for scrummies <em>por Jorge Uriarte</em></h3>
<p>La situación respecto a las metodologías de desarrollo ha cambiado, hace 10 años había resistencia al cambio ahora se aplica pero tampoco resuelve mágicamente los problemas del desarrollo de todos los casos donde se usa.</p>
<p>Algunas esencias de <em>scrum</em> que permanecerán son:</p>
<ul>
<li>En el producto: no detallar en exceso el <em>backlog</em> ya que cambiará.</li>
<li>En las historias: siendo completas, entregables individualmente y según el valor que aportan.</li>
<li>En los equipos: siendo estos autoorganizados, multidisciplinares, alineados, dueños del proceso y autónomos.</li>
<li>En las entregas: serán incrementales y continuas.</li>
<li>En el proceso: no estará sacralizado y cambiará con el fin de mejorar al igual que tratan de conseguir las retrospectivas.</li>
</ul>
<p>Un sistema ágil es una aproximación a la incertidumbre. Incertidumbre que siempre está presente en los desarrollos de software al tratar de responder preguntas como ¿que hay que hacer? ¿cuanto tiempo se tardará? ¿que tecnología se usará?. Para evitar los problemas que genera la incertidumbre un <em>work in progress</em> o WIP pequeño es un buen arma. Lo terminado elimina incertidumbres, se considera que es lo menos que se puede hacer ahora que de el máximo valor. Una consecuencia es que en el flujo de desarrollo habrá menos cosas pero pasando más rápido. Esto se resume en título del libro <a href="https://amzn.to/2kB2fw9">Stop Starting, Start Finishing!</a> y que tiene la siguiente reseña.</p>
<blockquote>
<p>This booklet tells the story of Justin - a project manager who achieved remarkable results with his team by doing very simple things! This guide covers the core concepts of Kanban for knowledge work, and shows how limiting your amount of work-in-progress can lead to getting things done better and faster.</p>
</blockquote>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0985305169&amp;linkId=3fb69c8c67a77d17456e3a5fca1ce831" title="Amazon" class="lozad"></iframe>
</div>
<p>La combinación de un WIP pequeño junto con un sistema <em>pull</em> en el que no se construye lo no necesario, no se prueba lo que no se puede entregar, no se desarrolla lo que no se puede probar y no se especifica lo no se puede desarrollar produce una reducción de tiempos de entrega, hay mayor predictibilidad y elimina rehacer trabajo.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://es.slideshare.net/Gailen/agile-forscrummiesbilbaostack">Diapositivas presentación</a></li>
</ul>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/agile-for-scrummies_hua23b8dff5a1a882893d0b322550b1bee_194737_2560x1440_fit_q90_box.jpg" data-gallery="" title="Agile for scrummies"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/agile-for-scrummies_hua23b8dff5a1a882893d0b322550b1bee_194737_300x200_fit_q90_box.jpg" width="267" height="200" alt="Agile for scrummies" title="Agile for scrummies"  class="lozad "></a></p>
</figure>
</div>
<h3 id="domain-driven-design-uniendo-negocio-con-el-software-empor-gorka-laucirica-y-beñat-espiñaem">Domain-Driven Design, uniendo negocio con el software <em>por Gorka Laucirica y Beñat Espiña</em></h3>
<p>El <em>Domain-Driven Design</em> o DDD se centra en el dominio de la aplicación, la lógica de negocio y lo que quiere el negocio de la aplicación.</p>
<p>Los modelos anémicos con <em>getters</em> y <em>setters</em> se consideran un antipatrón y hace que la lógica esté dispersa. En el patrón MVC los controladores pueden contener múltiples responsabilidades generando duplicidad de código. Aplicar los principios <a href="https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID</a> generan código limpio y una <a href="http://alistair.cockburn.us/Hexagonal&#43;architecture">arquitectura hexagonal</a> ayuda a no crear en la aplicación una dependencia con el <em>framework</em> posibilitando usar por ejemplo Symfony como herramienta y no como base.</p>
<p>DDD se divide en patrones estratégicos (<em>bounded context</em>) que no tienen código y tácticos (<em>entities</em>, agregados, eventos de dominio, factorías, repositorios) que si tienen código. Hay un servicio para cada caso de uso de la aplicación. Para cosas simples junto con su curva de aprendizaje esto seguramente será demasiado complejo pero en los casos en los que haya lógica de negocio, equipos medianos/grandes si será útil.</p>
<p>Un ejemplo de aplicación donde han aplicado DDD es <a href="https://github.com/kreta/kreta">Kreta</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li>Libro <a href="https://leanpub.com/ddd-in-php">Domain-Driven Design in PHP</a></li>
</ul>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/domain-driven-design_huef0bfbef5f6ff40b6548df5bf57d06b3_217300_2560x1440_fit_q90_box.jpg" data-gallery="" title="Domain-Driven Design, uniendo negocio con el software"><img src="https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/images/domain-driven-design_huef0bfbef5f6ff40b6548df5bf57d06b3_217300_300x200_fit_q90_box.jpg" width="267" height="200" alt="Domain-Driven Design, uniendo negocio con el software" title="Domain-Driven Design, uniendo negocio con el software"  class="lozad "></a></p>
</figure>
</div>
<hr>
<p>Nuevamente gracias la dedicación de los organizadores por crear otra edición de este gran pequeño evento anual, los ponentes que altruistamente colaboran compartiendo su conocimiento y a la Universidad de Deusto por acoger un año más uno de los mejores eventos para desarrolladores de Bilbao y alrededores.</p>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/</id>
        <title>Cursos de formación de KeepCoding</title>
        <updated>2019-06-01T00:00:00+02:00</updated>
        <published>2017-02-03T23:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/keepcoding.png" width="300" height="210" alt="KeepCoding" title="KeepCoding"  class=""></p>
</div>
<p>En internet hay cantidad de recursos disponibles para aprender de prácticamente cualquier cosas que queramos. También con libros técnicos como los <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8 libros que recomiendo para mejorar como programadores</a> de los que es posible aprender de forma profunda sobre un tema en concreto. Estando suscritos a blogs como este también se pueden aprender ciertos detalles sobre un tema o obtener una pequeña introducción con en ocasiones un ejemplo de código funcional.</p>
<p>Sin embargo, algunos recursos de los que se encuentran disponibles en internet no están bien estructurados y de forma didáctica para aprender, los libros requieren de bastante atención y de una buena cantidad de tiempo además no tienen un tutor al que preguntar, los blogs como el mío son muy específicos en el tema de los artículos o introductorios sin cubrir tampoco un tema de forma completa y profunda. Asistir a conferencias también es una buena forma de obtener una introducción sobre el tema que se trate, en algunas conferencias sus entradas son gratuitas y otras tienen un coste de algunos cientos de euros a los que hay que sumar el transporte y alojamiento si son de varios días y en ocasiones no coinciden en fechas en las que poder asistir.</p>
<p>Hay webs en las que se ofrecen cursos de formación a distancia que se pueden completar según el tiempo disponible y aprender al ritmo de cada uno. Además, cuentan con tutores a los que hacer preguntas para resolver las dudas. Una de ellas es <a href="https://plataforma.keepcoding.io/?affcode=897_eznkgvrg">KeepCoding</a> que ofrece varios cursos con un temario bastante completo y de varias decenas de horas de formación. Algunos cursos de los que en este momento tienen disponibles son sobre varias de las tecnologías más demandadas actualmente y conocerlas son un buen punto a incluir en el <em>curriculum vitae</em> con el objetivo de acceder a un puesto de trabajo o desarrollar una carrera profesional como desarrollador. Algunos cursos de los que ofrecen que posiblemente en el futuro amplíen son los siguientes de los que puedes consultar su temario.</p>
<p>Hay disponibles una buena cantidad de <a href="https://plataforma.keepcoding.io/courses/category/Cursos%20Gratuitos?affcode=897_eznkgvrg">cursos gratuitos</a> introductorios a la programación, sin ningún coste ni compromiso bastando únicamente registrarse para tener acceso inmediato a ellos <em>online</em> desde el navegador.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-introduccion-programacion?affcode=897_eznkgvrg">Curso de Introducción a la Programación</a></li>
<li><a href="https://plataforma.keepcoding.io/p/introduccion-programacion-python?affcode=897_eznkgvrg">Fundamentos de la programación con Python</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-php?affcode=897_eznkgvrg">Mini Curso introducción a PHP 7</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-go?affcode=897_eznkgvrg">Mini Curso introducción a Go</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-kotlin?affcode=897_eznkgvrg">Mini Curso Kotlin - Ventajas y características</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-bbdd-mysql?affcode=897_eznkgvrg">Mini curso Introductorio a BBDD y MySQL</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso_arquitectura_aplicaciones_android?affcode=897_eznkgvrg">Mini curso Arquitectura en aplicaciones Android</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-microservicios?affcode=897_eznkgvrg">Mini Curso introducción a Microservicios</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso_docker_contenedores_101?affcode=897_eznkgvrg">Mini Curso introducción a Docker y Contenedores 101</a></li>
</ul>
<p>Cursos desde cero sobre varios de los lenguajes más empleados y demandados en ofertas de trabajo.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-programacion-javascript-desde-cero?affcode=897_eznkgvrg">Curso JavaScript desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-kotlin-desde-cero?affcode=897_eznkgvrg">Curso Kotlin desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-koltin-avanzado?affcode=897_eznkgvrg">Curso Kotlin Avanzado</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-go-desde-cero?affcode=897_eznkgvrg">Curso Go desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/scala-spark-desde-cero?affcode=897_eznkgvrg">Curso Scala desde Cero</a></li>
</ul>
<p><a href="https://git-scm.com/">Git</a> la herramienta de control de versiones para el código fuente utilizada mayoritariamente. <a href="https://www.docker.com/">Docker</a> se ha convertido en una de las mejores formas de aprovisionar aplicaciones y software tanto en el entorno de desarrollo como en producción.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-git-github-sourcetree?affcode=897_eznkgvrg">Curso Git, GitHub &amp; SourceTree</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-docker-desde-cero?affcode=897_eznkgvrg">Curso Docker desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/smart-contracts-ethereum-solidity?affcode=897_eznkgvrg">Curso Smart Contracts en Ethereum con Solidity</a></li>
</ul>
<p>Otros dedicados a la programación web <em>backend</em> en <a href="https://secure.php.net/">PHP</a>, <a href="https://www.python.org/">Python</a> y <a href="https://www.ruby-lang.org/es/">Ruby</a>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-php-7-y-laravel?affcode=897_eznkgvrg">Curso PHP 7 y Laravel</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-online-python-django-rest?affcode=897_eznkgvrg">Curso Django + Python &amp; REST</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-ruby-on-rails-y-servicios-rest?affcode=897_eznkgvrg">Curso Ruby on Rails y servicios REST desde Cero</a></li>
</ul>
<p>Otros a la programación web con varios <em>frameworks</em> populares de <em>frontend</em>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-polymer-web-components?affcode=897_eznkgvrg">Curso Polymer &amp; Web Components</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-completo-react-desde-cero?affcode=897_eznkgvrg">Curso React desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-javascript-node-js-express-mongodb?affcode=897_eznkgvrg">Curso JavaScript + Node.js + Express + MongoDB</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-fundamentos-angular-html-css?affcode=897_eznkgvrg">Curso HTML5 + CSS3 + AngularJS</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-angular-6?affcode=897_eznkgvrg">Curso Angular 6</a></li>
</ul>
<p>La mayoría de aplicaciones necesitan de una base de datos relacional con lo que el conocimiento adquirido de ellas es muy aprovechado.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-de-bbdd-sql-mysql?affcode=897_eznkgvrg">Curso BBDD relacionales, SQL &amp; MySQL</a></li>
</ul>
<p>A la seguridad de una aplicación no siempre se le presta la atención que merece, es importante conocer los fundamentos para desarrollar aplicaciones seguras.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-desarrollo-seguro-aplicaciones?affcode=897_eznkgvrg">Curso de desarrollo seguro de aplicaciones</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-ciberseguridad-enfocada-pentesting?affcode=897_eznkgvrg">Curso Ciberseguridad enfocada en Pentesting</a></li>
</ul>
<p>Uno sobre <a href="https://www.android.com/">Android</a>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-programacion_android_desde_cero?affcode=897_eznkgvrg">Curso Programación Android desde Cero</a></li>
</ul>
<p>Varios dedicados a la programación en <a href="https://www.apple.com/es/ios/ios-12/">iOS</a>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-fundamentos-de-swift-3?affcode=897_eznkgvrg">Curso Fundamentos Swift 3.0</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-tdd-para-ios?affcode=897_eznkgvrg">Curso TDD en iOS</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-programacion-ios-avanzada?affcode=897_eznkgvrg">Curso iOS Avanzado</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-fundamentos-ios?affcode=897_eznkgvrg">Curso Fundamentos iOS</a></li>
</ul>
<p>Los cursos constan de varias horas lectivas con vídeos explicativos narrados en español como si un profesor estuviese dándonos una clase magistral que podrás revisar siempre que desees. Cada vídeo del curso no suele exceder de diez minutos siendo la mayoría de entre tres minutos y cinco minutos de forma que se pueda visionarlos según el tiempo y momento disponible. Creada la cuenta en KeepCoding e inscritos a un curso se puede ver el progreso en el mismo.</p>
<p>Para aprender de forma intensiva durante 4 y 6 meses con mayor profundidad imparten 5 <em>bootcamps</em> diferentes según especialización.</p>
<ul>
<li><a href="https://keepcoding.io/es/bootcamp-aprende-a-programar-desde-cero/?affcode=897_eznkgvrg">Bootcamp Aprende a Programar desde Cero</a></li>
<li><a href="https://keepcoding.io/es/keepcoding-web-development-master-bootcamp/?affcode=897_eznkgvrg">Full Stack Web Bootcamp</a></li>
<li><a href="https://keepcoding.io/es/mobile-startup-coding-bootcamp/?affcode=897_eznkgvrg">Full Stack Mobile Bootcamp</a></li>
<li><a href="https://keepcoding.io/es/big-data-machine-learning-bootcamp/?affcode=897_eznkgvrg">Full Stack Big Data &amp; Machine Learning Bootcamp</a></li>
<li><a href="https://keepcoding.io/es/bootcamp-devops/?affcode=897_eznkgvrg">Full Stack DevOps Bootcamp</a></li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/images/keepcoding-course_hu252675a706fe078b74f07f5aa8faade0_178723_2560x1440_fit_box_3.png" data-gallery="" title="Curso online de KeepCoding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/images/keepcoding-course_hu252675a706fe078b74f07f5aa8faade0_178723_300x200_fit_box_3.png" width="300" height="143" alt="Curso online de KeepCoding" title="Curso online de KeepCoding"  class="lozad "></a></p>
<figcaption>Curso online de KeepCoding</figcaption>
</figure>
</div>
<p>Algunos cursos de que ofrece KeepCoding son gratis y puedes inscribirte en ellos libremente y permite conocer la metodología de los cursos. Los cursos de pago tienen un precio de entre 30 € y 300 €. Si la empresa en la que trabajas tiene interés en formar a sus empleados, y debería, posiblemente también esté interesada en costear el curso con un presupuesto destinado a formación, muchas empresas lo tiene, si no lo tiene puedes solicitarlo. Aunque la cantidad no sea grande ni de para todo al menos posibilitará adquirir algún curso individual, unos meses de suscripción o comprar algún libro técnico, si el trabajo que desarrollas coincide con la temática de los cursos, este puede ser el caso de los <a href="https://plataforma.keepcoding.io/p/curso-programacion_android_desde_cero?affcode=897_eznkgvrg">Curso Programación Android desde Cero</a>, del <a href="https://plataforma.keepcoding.io/p/curso-git-github-sourcetree?affcode=897_eznkgvrg">Curso Git, GitHub &amp; SourceTree</a>, del <a href="https://plataforma.keepcoding.io/p/curso-programacion-ios-avanzada?affcode=897_eznkgvrg">Curso iOS Avanzado</a> o de <a href="https://plataforma.keepcoding.io/p/curso-online-python-django-rest?affcode=897_eznkgvrg">Curso Django + Python &amp; REST</a>. También a nivel personal es una buena opción de formación para optar a puestos de trabajo de nuestro interés y demandados en el mercado laboral.</p>
<p>En los paquetes Premium todos los cursos individualmente tiene un coste de más de 5000 € pero con el modelo de suscripción se puede adquirir el acceso a todos sin restricciones a un precio significativamente más reducido de unos 49 €/mes. El pago se puede hacer mediante tarjeta de crédito y tienen un derecho de desistimiento de 14 días según las <a href="https://plataforma.keepcoding.io/p/condiciones-generales-contratacion/?affcode=897_eznkgvrg">Condiciones Generales de Contratación de KeepCoding</a>.</p>
<ul>
<li>En la página de <a href="https://plataforma.keepcoding.io/p/suscripcion-cursos-programacion-online/?affcode=897_eznkgvrg">Paquetes de suscripciones Premium</a> ocasionalmente hay cupones descuento con los que el precio es aún más reducido.</li>
<li><a href="https://plataforma.keepcoding.io/p/paquete-keepcoding-online/?affcode=897_eznkgvrg">Todos los cursos con KeepCoding Online Premium</a> que dan acceso al catálogo completo de cursos.</li>
</ul>
<p>Si quieres aprender reserva una hora algún día de entre semana o del fin de semana para dedicarle al curso que desees, de modo que tengas ese tiempo para completarlo y puedas empezarlos, terminarlos y que te resulten provechosos con posterioridad.</p>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="patrocinado"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/</id>
        <title>Registro y descubrimiento de servicios con Spring Cloud y Consul</title>
        <updated>2017-01-28T11:00:00+01:00</updated>
        <published>2017-01-28T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Tradicionalmente el conectar un servicio con sus servicios dependientes se ha realizado por configuración, normalmente mediante un nombre de dominio y su puerto. Esta configuración estática es suficiente para unos pocos servicios y que no varían durante su funcionamiento. Con el advenimiento de los microservicios con su estado y número cambiantes en el tiempo han surgido varias herramientas para en vez de usar configuración usar descubrimiento. Una de estas herramientas Consul para la que Spring Cloud proporciona integración.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En una aplicación con una arquitectura de microservicios esta se compone de múltiples partes cambiantes. Los microservicios pueden aparecer, desaparecer, variar en número o cambiar de ubicación, la aplicación debe ser tolerante a esos cambios y seguir proporcionando su servicio. Por tanto, la configuración de red de los servicios no se puede realizar usando direcciones <abbr title="Internet Protocol">IP</abbr> ya que no se conocen las que utilizarán los microservicios y usar nombres de dominio de <abbr title="Domain Name System">DNS</abbr> puede no ser viable ya que los cambios tardan en propagarse. Conocer el nombre de <em>host</em> y puerto reales de los microservicios es proporcionado por la funcionalidad de descubrimiento de servicios o <em>service discovery</em> que proporcionan algunos servicios como <a href="https://github.com/Netflix/eureka">Eureka</a>, <a href="https://www.consul.io/">Consul</a> o <a href="https://zookeeper.apache.org/">Apache Zookeper</a>.</p>
<p>En este artículo explicaré como usar la parte de descubrimiento de servicios de Consul usando una aplicación con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> y  con <a href="https://projects.spring.io/spring-cloud/">Spring Cloud</a>. Spring Cloud proporciona varias cosas comunes para aplicaciones basadas en microservicios. Si aún no conoces las herramientas en las que se basará el ejemplo puedes consultar los siguientes artículos específicos como introducción:</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">Herramienta de construcción Gradle </a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/">Ejemplo de multiproyecto con Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">Aplicación Java autocontenida con Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config/">Configuración de una aplicación en diferentes entornos con Spring Cloud Config</a></li>
</ul>
<p>Consul además de descubrimiento de servicios proporciona otras funcionalidades como detección de fallos o caídas para prevenir enviar peticiones a máquinas fuera de servicio y almacenamiento básico clave/valor para configuración dinámica o activación de características. Dispone de una aplicación web en la que podemos ver el estado de los servicios, una <a href="https://www.consul.io/api/index.html">API REST</a> con la que comunicarse con Consul en una aplicación o en cada microservicio y un servidor de nombres <abbr>DNS</abbr>, podemos usar cualquiera de las dos interfaces de consulta, la basada en la <abbr>API</abbr> <abbr>REST</abbr> o la basada en DNS para obtener las direcciones IP con la ubicación de los servicios.</p>
<div class="media">
<figure>
<p><img src="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/consul_hu5e35c35c046c258a2599a40c947fcc52_11502_2560x1440_fit_box_3.png" width="200" height="199" alt="Consul" title="Consul"  class="lozad "></p>
</figure>
</div>
<p>Instalar Consul es muy sencillo basta con <a href="https://www.consul.io/downloads.html">descargar un binario</a> y descargar la interfaz web si queremos tener el <em>dashboard</em> con la información del servicio. Descargados y descomprimidos Consul se inicia con el siguiente comando. Podemos acceder al panel <em>dashboard</em> con la dirección <em>http://localhost:8500</em> con un navegador web. Inicialmente en el panel de servicios solo se encuentra el propio de Consul cuando aún no se ha registrado ningún servicio, aplicación o microservicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>consul agent -server -client<span class="o">=</span>0.0.0.0 -data-dir /tmp/consul -ui-dir ./webui&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>consul.sh</span>
    </div>
</div>
<p>Una aplicación que use Spring Boot y que quiera hacer pública su disponibilidad en Consul basta con que use la anotación <code>@EnableDiscoveryClient</code> en la clase de inicio de la aplicación junto con las dependencias adecuadas. Con la declaración de esta anotación y la dependencia <em>spring-cloud-starter-consul-all</em> Spring se comunicará con Consul a través de la API REST para registrar cuando se inicie la aplicación, su nombre, nombre de máquina y puerto en el que estará disponible.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.ServiceInstance</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.DiscoveryClient</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.EnableDiscoveryClient</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>&#10;</span></span><span class="line"><span class="cl"><span class="nd">@EnableDiscoveryClient</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${config.key}&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Autowired</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">DiscoveryClient</span> <span class="n">discoveryClient</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.key&#34;</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Servicios:&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">discoveryClient</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">service</span> <span class="o">-&gt;</span> <span class="o">{</span>	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">ServiceInstance</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="n">discoveryClient</span><span class="o">.</span><span class="na">getInstances</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceInstance</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s (%d): %s:%d %s%n&#34;</span><span class="o">,</span> <span class="n">service</span><span class="o">,</span> <span class="n">instances</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">instance</span><span class="o">.</span><span class="na">getHost</span><span class="o">(),</span> <span class="n">instance</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="n">instance</span><span class="o">.</span><span class="na">getUri</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8080}</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">consul</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">discovery</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">instanceId</span><span class="p">:</span><span class="w"> </span><span class="l">${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>application.yml</span>
    </div>
</div>
<p>Spring Cloud proporciona además un servicio que podemos usar para conocer los servicios registrados en Consul, con la clase <em>DiscoveryClient</em> podemos conocer los nombres de los servicios, su nombre de máquina y puerto desde una aplicación Java. En el método <em>run</em> de la clase <em>Main</em> se usa en este ejemplo para imprimir en la salida el listado de servicios registrados en Consul. Uno de esos servicios esta aplicación de ejemplo, ya que se registra en Consul cuando se inicia.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/consul-services_hu7b6922ae49f41ee0813233022d6adc1c_56113_2560x1440_fit_box_3.png" data-gallery="" title="Servicios registrados en Consul"><img src="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/consul-services_hu7b6922ae49f41ee0813233022d6adc1c_56113_300x200_fit_box_3.png" width="300" height="145" alt="Servicios registrados en Consul" title="Servicios registrados en Consul"  class="lozad "></a></p>
<figcaption>Servicios registrados en Consul</figcaption>
</figure>
</div>
<p>Consul para conocer que los servicios siguen en funcionamiento hace una petición <abbr>HTTP</abbr> cada ciertos segundos a una ruta de la aplicación, Spring Boot proporciona una dependencia, <em>spring-boot-starter-actuator</em>, que usada provee del <em>endpoint /health</em> para que Consul monitorice el estado del servicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;1.4.4.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springcloud.client.Main&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-context:4.3.6.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter:1.4.4.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-web:1.4.4.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator:1.4.4.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-consul-all:1.1.2.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/service-health_hu2c85a088e3fa0b2999e15f12aba27016_73001_2560x1440_fit_box_3.png" data-gallery="" title="Endpoint de estado de servicio"><img src="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/service-health_hu2c85a088e3fa0b2999e15f12aba27016_73001_300x200_fit_box_3.png" width="135" height="200" alt="Endpoint de estado de servicio" title="Endpoint de estado de servicio"  class="lozad "></a></p>
<figcaption>Endpoint de estado de servicio</figcaption>
</figure>
</div>
<p>Esta es la salida en la consola listando los servicios disponibles, siendo uno de ellos esta aplicación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Valor de propiedad de configuración (config.key): prod&#10;</span></span><span class="line"><span class="cl">Servicios:&#10;</span></span><span class="line"><span class="cl">consul (1): 192.168.1.2:8300 http://192.168.1.2:8300&#10;</span></span><span class="line"><span class="cl">springcloudclient (1): 192.168.1.2:8080 http://192.168.1.2:8080</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloudConsul">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./consul/consul.sh y ./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://projects.spring.io/spring-cloud/">Spring Cloud</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-consul/">Spring Cloud Consul</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/01/distribuciones-gnu-linux-mas-seguras-que-windows/</id>
        <title>Distribuciones GNU/Linux, ¿más seguras que Windows?</title>
        <updated>2017-01-21T20:00:00+01:00</updated>
        <published>2017-01-21T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/01/distribuciones-gnu-linux-mas-seguras-que-windows/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los sistemas GNU/Linux pueden ser igual de seguros o inseguros que los sistemas Windows. Sin embargo, en ambas plataformas hay algunas diferencias que explican por que los sistemas Windows tienen peor fama y por que los sistemas GNU/Linux se consideran más seguros que Windows.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Habitualmente se comenta que los sistemas con alguna distribución <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> son más seguros que los sistemas <a href="https://www.microsoft.com/es-es/windows/">Windows</a>. Probablemente bien configurados y debidamente actualizados ambas opciones sean muy seguras. Sin embargo, desde el punto de vista de un usuario es común que Windows se vea infectado con virus o <em>malware</em> aún con un antivirus instalado.</p>
<p>Las razones de que Windows se vea más amenazado son varias, una es que es una plataforma con una cuota de uso enorme por tanto muy atractiva de atacar. Otra es que instalar programas o software en las distribuciones GNU/Linux se realiza en su mayor parte desde los repositorios oficiales, es decir, de una fuente confiable. En Windows hay que buscar la página oficial del programa y en los resultados de Google no siempre es la primera opción si se busca por «windows reproductor de vídeo», «windows programa para descargar películas» o segundas o terceras opciones es software dudoso. Esas páginas no oficiales de los programas pueden realmente hospedar programas con virus. Quizá ahora que <a href="https://www.microsoft.com/">Microsoft</a> ha añadido en sus últimas versiones de Windows <a href="https://www.microsoft.com/en-us/windows/windows-10-apps">una tienda de aplicaciones</a> se podrán instalar desde ella con más garantías de forma similar a lo que desde hace mucho tiempo en GNU/Linux son los repositorios de paquetes.</p>
<p>Otro motivo es que <a href="https://picodotdev.github.io/blog-bitix/2016/01/windows-10-y-office-2016-tan-faciles-de-usar-sin-licencia-como-siempre/">muchos usuarios de Windows y Office los usan sin licencia</a> y no hay mayor problema ya que incluso Microsoft ofrece la descarga de la <a href="https://www.microsoft.com/es-es/software-download/windows10ISO">imagen ISO de Windows 10</a> desde su propia página pero para realizar la activación sin la correspondiente licencia hay que usar un programa que puede contener un virus y en un buen caso obligar a reinstalar Windows para deshacerse de él, un peor caso es que el virus no muestre síntomas de su presencia y pase desapercibido pero recolectando datos (contraseñas, fotos, documentos, &hellip;) del usuario sin que este lo sepa. La lista de programas que los usuarios de Windows usan sin licencia es mucho más extensa <a href="https://www.adobe.com/es/products/photoshop.html">Photoshop</a>, <a href="https://www.adobe.com/es/products/illustrator.html">Illustrator</a>, <a href="https://www.adobe.com/es/products/indesign.html">InDesign</a>, <a href="https://www.adobe.com/es/products/premiere.html">Premiere Pro</a>, <a href="https://www.adobe.com/es/products/aftereffects.html">After Effects</a>, <a href="https://www.adobe.com/es/products/photoshop-lightroom.html">Lightroom</a>, <a href="https://acrobat.adobe.com/es/es/acrobat.html">Acrobat</a>, <a href="https://www.adobe.com/es/creativecloud/catalog/desktop.html">otro software de Adobe</a>, <a href="https://www.autodesk.es/products/autocad/overview">AutoCAD</a>, <a href="https://www.winzip.com/win/es/">Winzip</a>, &hellip; que igualmente al <em>crackearlos</em> para usarlos después de su periodo de prueba, con la que la seguridad de los sistemas Windows se ve comprometida. Para cada uno de estos programas hay otros <a href="https://alternativeto.net/">alternativos con licencias de software libre</a> mejores o las suficientes funciones para la mayoría de usuarios. Los juegos también son muy pirateados y los <em>cracks</em> usados también pueden contener funciones maliciosas y es otra fuente de entrada para comprometer la seguridad.</p>
<p>Con la cuota de uso que tiene Windows serán muchos usuarios con muchos conocimientos que lo usan pero es mayor el número de sus usuarios que tienen pocos conocimientos informáticos y que a la mayoría les vino con el ordenador preinstalado con <a href="https://elblogdepicodev.blogspot.com.es/2011/05/impuesto-windows.htmlindex-amp.html">el impuesto Windows</a> con lo que la seguridad de los sistemas Windows queda inutilizada. Algunas páginas de reputación dudosa muestran mensajes o correos electrónicos fraudulentos contienen <em>banners</em> advirtiendo que se debe descargar y ejecutar un programa, un usuario con conocimientos simplemente los ignoraría pero algunos usuarios sin conocimientos pueden hacerles caso. E incluso los usuarios con conocimientos si no usan el software con su licencia y usan activadores pueden comprometer la seguridad de sus sistemas.</p>
<p>Descargar y ejecutar un programa en GNU/Linux de una fuente externa a los repositorios oficiales igualmente puede comprometer la seguridad pero dado que todo el software normalmente se encuentra en los repositorios no suele haber necesidad. Sin embargo, también hay que tener precauciones de <em>scritps</em> como estos dos que pueden destruir de forma catastrófica un sistema GNU/Linux.</p>
<p><strong>ADVERTENCIA: no los ejecutes!</strong>. El primero elimina todos los archivos del sistema y el segundo por mucho que parezcan unos extraños inocentes emoticonos crea procesos hasta que agota los recursos del sistema. Un usuario de GNU/Linux precavido y con conocimientos antes revisaría el contenido de cualquier <em>script</em> o binario ejecutable y no ejecutaría nada en caso de duda.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo rm -rf /&#10;</span></span><span class="line"><span class="cl">$ :<span class="o">(){</span> :<span class="p">|</span>:<span class="p">&amp;</span> <span class="o">}</span><span class="p">;</span>:&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>nuke.sh</span>
    </div>
</div>
<p>Dicho lo cual, tanto GNU/Linux y Windows tendrán un nivel de seguridad no tan diferente bien configurados pero el hecho de que los primeros normalmente se basan en software libre, usan repositorios de software confiables, se mantienen siempre actualizados y más rápidamente (al no suponer un coste en nuevas licencias de Windows ni tiene una fecha de expiración del soporte como Windows XP, Vista o Windows 7), se evitan usar activadores, el código fuente está disponible para cualquiera que quiera verlo, la seguridad es auditable y si contuviese alguna función maliciosa podría ser descubierta con mayor facilidad, junto con que los usuarios de GNU/Linux tienen de media más conocimientos que los usuarios Windows, es una plataforma minoritaria en cuota de uso, más fragmentada en diferentes distribuciones y por tanto menos atractiva para atacar hace que GNU/Linux a nivel de usuario tenga menos problemas de seguridad.</p>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="microsoft"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
</feed>
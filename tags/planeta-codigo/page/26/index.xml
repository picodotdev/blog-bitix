<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <updated>2023-01-06T01:00:00+01:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/</id>
        <title>Descargar e instalar Windows 10 paso a paso desde cero</title>
        <updated>2020-11-01T12:30:00+01:00</updated>
        <published>2017-05-09T22:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Un virus, el <em>bloatware</em> preinstalado en muchos portátiles o tras instalar y desinstalar programas en Windows puede ocasionar que el equipo sea lento, se muestren mensajes de error o un virus cifre los archivos personales. En estos casos una solución habitual sencilla, rápida y fiable de volver a usar con normalidad el equipo es reinstalar Windows 10 desde cero. No es complicado pero para un usuario con pocos conocimientos de informática no es una tarea sencilla. En este artículo explico cómo descargar gratis e instalar paso a paso y desde cero el sistema operativo Windows 10.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/microsoft.svg" width="200" height="200" alt="Microsoft" title="Microsoft"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/windows-10.svg" width="200" height="200" alt="Windows 10" title="Windows 10"  class=""></p>
</div>
<p>Prácticamente la totalidad de portátiles que se venden en las grandes superficies comerciales más conocidas están con el sistema operativo Windows preinstalado. Pero los fabricantes con la intención dotar de más capacidades y funcionalidades que las que incorpora <a href="https://www.microsoft.com/es-es/windows/">Windows</a> instalan numerosos programas que conforman el conocido <em>bloatware</em> que en muchas ocasiones hacen que un equipo completamente nuevo sea más lento de lo normal al iniciar el sistema, al arrancar programas o trabajar con ellos. Entre los programas que suelen preinstalar los fabricantes están los antivirus que al cabo de un tiempo se desactivan ya que suelen ser versiones de evaluación pudiendo dejar al equipo desprotegido ante virus y software malicioso, Windows 10 ya incorpora uno, Windows Defender, y para la mayoría de usuarios es suficiente por su efectividad aceptable. Otros programas que los fabricantes suelen instalar son reproductores de vídeo o software multimedia en la mayoría de casos innecesario ya que Windows  de por si ya incorpora las capacidades de trabajar con archivos multimedia como fotografías o vídeos. También puede darse el caso que tras una actualización o la instalación de un programa el equipo empiece a presentar fallos.</p>
<p>En los casos anteriores realizar una reinstalación de Windows desde cero es necesaria. Muchos usuarios no tienen conocimientos avanzados de tecnología o informática y no conocen los pasos para realizar una reinstalación. En este artículo explicaré detalladamente, paso a paso y desde cero cuales son los pasos que hay que realizar para instalar Windows 10.</p>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="requisitos-mínimos">Requisitos mínimos</h3>
<p>Lo primero es conocer que Windows 10 para funcionar correctamente posee unos requisitos mínimos para el equipo en el que vaya a ser instalado, fue comercializado en julio del 2015 y cualquier equipo posterior a esa fecha ya cumplirá con los requisitos mínimos y también los equipos que cumpliesen con los de Windows 7 o viniesen preinstalados con esta versión anterior. En la página de <a href="https://www.microsoft.com/es-es/windows/windows-10-specifications">Especificaciones y requisitos del sistema para Windows</a> están detalladas una buena cantidad de notas informativas y los requerimientos que son los siguientes:</p>
<ul>
<li>Procesador: Un procesador a 1 GHz o más rápido o SoC</li>
<li>RAM: 1 gigabyte (GiB) para 32 bits o 2 GB para 64 bits</li>
<li>Espacio en disco duro: 16 GB para un SO de 32 bits o 20 GB para un SO de 64 bits</li>
<li>Tarjeta gráfica: DirectX 9 o posterior con un controlador WDDM 1.0</li>
<li>Pantalla: 800 x 600</li>
</ul>
<p>Estos son los requisitos básicos, los recomendables para una buena experiencia de uso son disponer de 4 GiB de memoria y con esta memoria el siguiente aspecto con el que más se nota una mejora es disponer de un disco duro de estado sólido o SSD en vez de mecánico ya que son varias magnitudes más rápidos tanto en la lectura como en la escritura.</p>
<p>Cualquier equipo nuevo cumple con estos requisitos pero quizá algunos no posean disco duro SSD, estos discos son más caros y ofrecen menos capacidad aunque ya se han abaratado y son bastante asequibles y su capacidad a partir de los 128 GiB o 256 GiB son suficientes para muchos usuarios. Pagar algo más por un equipo con un disco SSD es una buena decisión, un equipo con disco mecánico puede tardar 1 o 2 minutos en iniciarse, uno con un SSD menos de 10 segundos lo que es solo un ejemplo entre la diferencia entre unos y otros.</p>
<h3 id="versiones-de-windows-10">Versiones de Windows 10</h3>
<p>Windows 10 tiene diferentes versiones, las diferencias entre ellas está en las características que soportan.</p>
<ul>
<li><em>Home</em>: es la versión usada mayoritariamente y suficiente para la mayoría de usuarios que se instala en los equipos domésticos.</li>
<li><em>Pro</em>: esta versión incluye todas las funcionalidades de la edición <em>Home</em> con algunas adicionales normalmente necesarias en entornos empresariales. Algunas de sus funcionalidades adicionales son Directorio activo, Escritorio remoto, BitLocker, virtualización con Hyper-V y <em>Windows Defender Device Guard</em>.</li>
<li><em>Pro for Workstations</em>: es la versión que permite usar Windows en equipos de altas prestaciones con procesadores Intel Xeon o AMD Epyc, grandes cantidades de memoria y algunas opciones avanzadas más.</li>
</ul>
<h3 id="copia-de-seguridad">Copia de seguridad</h3>
<p>Una vez que sabes que el equipo cumple con los requisitos mínimos hay que hacer una copia de seguridad de los documentos, fotos y demás archivos personales que posea el equipo y quieras conservar en un disco duro o memoria USB externo, si son muchos los datos en vez de copiar y pegar con el explorador de archivos puedes hacer la <a href="https://picodotdev.github.io/blog-bitix/2016/05/como-realizar-copias-de-seguridad-en-windows-con-freefilesync/">copia de seguridad con el programa FreeFileSync</a> y restaurar los datos también con el mismo programa una vez reinstalado Windows.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/freefilesync_hu850fac8bdc50ed57ad63701c150e5e1e_58783_2560x1440_fit_box_3.png" data-gallery="" title="Realizar copia de seguridad con FreeFileSync"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/freefilesync_hu850fac8bdc50ed57ad63701c150e5e1e_58783_200x150_fit_box_3.png" width="200" height="122" alt="Realizar copia de seguridad con FreeFileSync" title="Realizar copia de seguridad con FreeFileSync"  class="lozad "></a></p>
<figcaption>Realizar copia de seguridad con FreeFileSync</figcaption>
</figure>
</div>
<h3 id="cómo-descargar-windows-10-gratis">Cómo descargar Windows 10 gratis</h3>
<p>En versiones anteriores de Windows este debía buscarse en las redes de compartición de archivos o P2P como torrent. Es la propia Microsoft la que ofrece mediante descarga directa la imagen ISO de Windows 10 gratis desde su propia página y una herramienta para la creación del medio USB o DVD desde el que iniciar la instalación. Basta con <a href="https://www.microsoft.com/es-es/software-download/windows10">descargar el medio de instalación de Windows 10</a> al ordenador accediendo a la página de descarga con un navegador web, el medio de instalación incluye todas las versiones de Windows, la <em>Home</em>, <em>Pro</em> y <em>Pro for Workstations</em>. Con una buena conexión a internet la descarga es rápida, no tarda más de unos pocos minutos.</p>
<h3 id="creación-del-medio-de-instalación">Creación del medio de instalación</h3>
<p>Según la actualización de Windows descargada las capturas de pantalla o pasos variarán pero serán similares en gran parte. Accediendo a la página de descarga de Windows 10 desde un sistema con Windows 7, Windows 8.1 o Windows 10 se mostrará la opción de descargar la herramienta de creación de medios o <em>Media Creation Tool</em>. Descargada y ejecutada la herramienta también permite la descarga de Windows 10 y la creación de medio ya sea un DVD o memoria USB. En el caso de la memoria USB esta deberá tener una capacidad de al menos 8 GiB y todos los datos que posea se perderán con lo que su datos en su caso deberán ser salvaguardados en otra unidad externa.</p>
<p>Para realizar la instalación de Windows 10 es más recomendable usar una memoria USB con el programa <em>Media Creation Tool</em> ya que es más rápida que utilizar un disco DVD ya en desuso para los que algunos sistemas ya ni siquiera incorporan un lector DVD.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-01_hufd65225e7198e5f47aea1dbd4b72e459_134397_2560x1440_fit_box_3.png" data-gallery="" title="Media Creation Tool"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-01_hufd65225e7198e5f47aea1dbd4b72e459_134397_200x150_fit_box_3.png" width="200" height="150" alt="Media Creation Tool" title="Media Creation Tool"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-02_hufd65225e7198e5f47aea1dbd4b72e459_140315_2560x1440_fit_box_3.png" data-gallery="" title="Media Creation Tool"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-02_hufd65225e7198e5f47aea1dbd4b72e459_140315_200x150_fit_box_3.png" width="200" height="150" alt="Media Creation Tool" title="Media Creation Tool"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-03_hufd65225e7198e5f47aea1dbd4b72e459_136520_2560x1440_fit_box_3.png" data-gallery="" title="Media Creation Tool"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-03_hufd65225e7198e5f47aea1dbd4b72e459_136520_200x150_fit_box_3.png" width="200" height="150" alt="Media Creation Tool" title="Media Creation Tool"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-04_hufd65225e7198e5f47aea1dbd4b72e459_135275_2560x1440_fit_box_3.png" data-gallery="" title="Media Creation Tool"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-media-creation-tool-04_hufd65225e7198e5f47aea1dbd4b72e459_135275_200x150_fit_box_3.png" width="200" height="150" alt="Media Creation Tool" title="Media Creation Tool"  class="lozad "></a></p>
<figcaption>Creación del medio de instalación</figcaption>
</figure>
</div>
<h3 id="inicio-instalación-de-window-10">Inicio instalación de Window 10</h3>
<p>Una vez está listo el medio de instalación de Windows 10 en forma de memoria USB o DVD con el equipo apagado y el medio de instalación conectado a un puerto USB o insertado en el lector de DVD hay que iniciarlo para que arranque desde el medio de instalación. Según el fabricante iniciar el equipo desde el medio de instalación varía ligeramente pero suele emplearse la pulsación de una tecla cuando el equipo se inicia, la tecla suele ser F2, F8, F10, F12 o la tecla Escape que permite seleccionar la unidad desde la que se inicia el equipo donde hay que elegir la memoria USB o DVD.</p>
<p>Puede ser que la tecla sirva para acceder a la BIOS UEFI donde también se podrá seleccionar el orden de arranque de las unidades que también varía según el fabricante, la BIOS UEFI contiene parámetros importante de configuración del equipo con lo que hay que tener precaución en las cosas que se modifican en ellas por lo que si no estás seguro de los cambios que estás realizando no los guardes, por suerte las últimas versiones de las BIOS UEFI son más intuitivas y con interfaces gráficas más fáciles de usar.</p>
<p>Según el fabricante e incluso modelos de la misma fabricante la tecla de acceso para iniciar desde el medio de instalación varía:</p>
<ul>
<li>Acer: F2 o Delete</li>
<li>Asus: F2 o F10</li>
<li>Dell: F2, F1, Delete, F12 o F3</li>
<li>HP: F10 o Esc</li>
<li>Lenovo: F1 o F2</li>
<li>Sony: F2, F3, F1 o tecla assist</li>
<li>Toshiba: F2, F1, Esc</li>
</ul>
<p>En las siguientes páginas puedes encontrar varias posibles teclas para entrar en la BIOS y cambiar la unidad de inicio del sistema según la marca, <a href="http://www.makeuseof.com/tag/enter-bios-computer/">I</a>, <a href="https://www.lifewire.com/bios-setup-utility-access-keys-for-major-bios-manufacturers-2624461">II</a> y <a href="https://www.lifewire.com/bios-setup-utility-access-keys-for-popular-computer-systems-2624463">III</a>.</p>
<p>Puede ser el caso de que cuando se inicia el equipo muestre un mensaje con la tecla que hay que pulsar si hay que probar hasta dar con ella. Después de pulsar el botón de encendido poco después o según se muestra un logotipo es cuando hay que pulsar la tecla.</p>
<h3 id="asistente-de-instalación-de-windows-10">Asistente de instalación de Windows 10</h3>
<p>Uno de los éxitos de Windows 10 es que la instalación ofrece un asistente con el que después de completar varios pasos y pulsaciones en botones <em>Siguiente</em> el sistema queda instalado y listo para usarse. La instalación se completa en menos de una hora.</p>
<p>Entre los pasos están la selección del idioma, la versión del sistema <em>Home</em> o <em>Pro</em> (la primera es suficiente), la lectura de de los términos de la licencia de uso que poca gente se lee completamente por su extensión y su jerga legal poco comprensible. Si el equipo tiene una licencia se ofrecerá la posibilidad de introducir la clave del producto para activar Windows, si no la tiene es posible omitir este paso pulsando la opción <em>No tengo clave de producto</em> y usar Windows sin limitaciones durante un tiempo, pasado un tiempo en cualquier caso las limitaciones son muy leves y Windows 10 es usable con normalidad.</p>
<p>Es recomendable la instalación <em>Personalizada: instalar solo Windows</em> y no conservar archivos y configuraciones anteriores para evitar problemas o heredarlos del sistema anterior. También es recomendable eliminar todas las particiones del disco y dejar que Windows cree las necesarias. Tras finalizar la copia de archivos al ordenador del que se muestra el progreso de instalación se realizar un reinicio de forma automática.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-01_hu3653d37e445d70237bdc1666bc900c9b_23018_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-01_hu3653d37e445d70237bdc1666bc900c9b_23018_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-02_hu8737aa76b6e74e0cf927acbbc9f767d6_15762_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-02_hu8737aa76b6e74e0cf927acbbc9f767d6_15762_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-03_hu38b6f2a0d57ae4e036f1ebf2cc0ba9ce_7761_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-03_hu38b6f2a0d57ae4e036f1ebf2cc0ba9ce_7761_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-04_huc7b655666a8c23d0b9098acd9620b24a_27905_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-04_huc7b655666a8c23d0b9098acd9620b24a_27905_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-05_huedf05b605a29cade512929b67cb63a00_29308_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-05_huedf05b605a29cade512929b67cb63a00_29308_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-06_hu360f4fa9176ec86849d8525e292d745a_31670_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-06_hu360f4fa9176ec86849d8525e292d745a_31670_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-07_hu27fd114fd4129e58c7144c2b36c1bf05_30034_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-07_hu27fd114fd4129e58c7144c2b36c1bf05_30034_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-08_hucf0c0634ee37cede4e113fe04c7a18d8_30011_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-08_hucf0c0634ee37cede4e113fe04c7a18d8_30011_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-09_hub8188a9d1bb3996561f174e439accd45_18224_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/instalacion-windows-10-09_hub8188a9d1bb3996561f174e439accd45_18224_200x150_fit_box_3.png" width="200" height="150" alt="Instalación de Windows 10" title="Instalación de Windows 10"  class="lozad "></a></p>
<figcaption>Instalación de Windows 10</figcaption>
</figure>
</div>
<h4 id="configuración-básica">Configuración básica</h4>
<p>Después de instalar Windows este ofrece un nuevo asistente donde se personalizan algunas cosas adicionales del sistema. Algunas opciones a seleccionar en estos pasos antes de empezar a usar Windows 10 son:</p>
<ul>
<li>La región o país del usuario.</li>
<li>La distribución o disposición de las teclas del teclado.</li>
<li>El usuario de inicio de sesión ya sea con una cuenta de Microsoft o con una cuenta sin conexión y la contraseña. Si el ordenador está conectado a internet el asistente de configuración solicita usar una cuenta de Microsoft, si se quiere usar una cuenta local hay que desconectar el cable de red.</li>
<li>Si se desea usar Cortana como asistente personal.</li>
<li>Algunas opciones de privacidad que son recomendables desactivar para que Windows no recopile información de nuestro dispositivo aunque sean datos anónimos.</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-01_huc94c5191a8a49cfe8af12ceae460aeb2_10643_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-01_huc94c5191a8a49cfe8af12ceae460aeb2_10643_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-02_hufae8ac09bc24bc21a35cf32858167fcf_15078_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-02_hufae8ac09bc24bc21a35cf32858167fcf_15078_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-03_hu9e92ba2f396c2ad008a96332bbef0cc3_27292_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-03_hu9e92ba2f396c2ad008a96332bbef0cc3_27292_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-04_hua5168a28023d3f77bf1d1d3442ce2fa9_31965_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-04_hua5168a28023d3f77bf1d1d3442ce2fa9_31965_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-05_hu32e5b5953b9746caa7fb7fcf5fc96f99_30788_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-05_hu32e5b5953b9746caa7fb7fcf5fc96f99_30788_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-06_hu7cd9850ac7c156bb14e5edf0a6b3828a_15679_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-06_hu7cd9850ac7c156bb14e5edf0a6b3828a_15679_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-07_hubc68cff7e31a14395692351abee3c554_36286_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-07_hubc68cff7e31a14395692351abee3c554_36286_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-08_hu486e78d45b29b84959d271497910c123_28489_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-08_hu486e78d45b29b84959d271497910c123_28489_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-09_hue80ff4532111cfcd16d9bd9d9b362ebf_30470_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-09_hue80ff4532111cfcd16d9bd9d9b362ebf_30470_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-10_hu50fd4e6f7da2a0c7ee2e1257debb69ce_26971_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-10_hu50fd4e6f7da2a0c7ee2e1257debb69ce_26971_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-11_hub47375722c5e248a7e695b9606b8b9ec_63777_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-11_hub47375722c5e248a7e695b9606b8b9ec_63777_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-12_hua7dc2bd90edd695f9b35b39e958c30c2_61436_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-12_hua7dc2bd90edd695f9b35b39e958c30c2_61436_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-13_hueccb48aba8017948c54fb27133d69cc4_45763_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-13_hueccb48aba8017948c54fb27133d69cc4_45763_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-14_hu85938cce626695d5a1dfb9caaaf84288_69265_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-14_hu85938cce626695d5a1dfb9caaaf84288_69265_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-15_huce6934b0e6ec8647f05b5ec4c9196e34_54998_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-15_huce6934b0e6ec8647f05b5ec4c9196e34_54998_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-16_huaa5cb6719d7bfe1fbcc5d76e68b76e70_63882_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-16_huaa5cb6719d7bfe1fbcc5d76e68b76e70_63882_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-17_hu4ee5f4a194f638c10cef6c44696725dc_52091_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-17_hu4ee5f4a194f638c10cef6c44696725dc_52091_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-18_hu6d91242804999d82806b1f7f985a565e_55100_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-18_hu6d91242804999d82806b1f7f985a565e_55100_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-19_hu9a02a4028d01069ba244d60c99c3283f_90448_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-19_hu9a02a4028d01069ba244d60c99c3283f_90448_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-20_hu1d9ca35afa09a08dc306f070871ba6b3_18693_2560x1440_fit_box_3.png" data-gallery="" title="Configuración Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/configuracion-windows-10-20_hu1d9ca35afa09a08dc306f070871ba6b3_18693_200x150_fit_box_3.png" width="200" height="150" alt="Configuración Windows 10" title="Configuración Windows 10"  class="lozad "></a></p>
<figcaption>Configuración inicial de Windows 10</figcaption>
</figure>
</div>
<p>Después de los pasos de configuración Windows 10 prepara el sistema para el primer incio de sesión.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/primer-inicio-sesion-windows-10-01_hub4b1dfc545250023694b9ba3115829d7_3722_2560x1440_fit_box_3.png" data-gallery="" title="Primer inicio de sesión en Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/primer-inicio-sesion-windows-10-01_hub4b1dfc545250023694b9ba3115829d7_3722_200x150_fit_box_3.png" width="200" height="150" alt="Primer inicio de sesión en Windows 10" title="Primer inicio de sesión en Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/primer-inicio-sesion-windows-10-02_hu92d7160fcabfd0918e97a5bfcf2cda18_8016_2560x1440_fit_box_3.png" data-gallery="" title="Primer inicio de sesión en Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/primer-inicio-sesion-windows-10-02_hu92d7160fcabfd0918e97a5bfcf2cda18_8016_200x150_fit_box_3.png" width="200" height="150" alt="Primer inicio de sesión en Windows 10" title="Primer inicio de sesión en Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/primer-inicio-sesion-windows-10-03_hu15daebdabca7f9d693efbbe841df90f3_16690_2560x1440_fit_box_3.png" data-gallery="" title="Primer inicio de sesión en Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/primer-inicio-sesion-windows-10-03_hu15daebdabca7f9d693efbbe841df90f3_16690_200x150_fit_box_3.png" width="200" height="150" alt="Primer inicio de sesión en Windows 10" title="Primer inicio de sesión en Windows 10"  class="lozad "></a></p>
<figcaption>Primer inicio de sesión en Windows 10</figcaption>
</figure>
</div>
<h3 id="usando-windows-y-qué-hacer-después-de-la-instalación">Usando Windows y qué hacer después de la instalación</h3>
<p>Si el equipo ya tenía licencia de de Windows y estaba activado seguramente Windows 10 ya lo reconozca como activado. También es muy probable que Windows 10 sea capaz de reconocer automáticamente todo el hardware que posea en el equipo incluyendo la tarjeta gráfica pasa usar la máxima resolución que ofrezca la pantalla con lo que si es necesario hay que instalar algún controlador de dispositivo adicional descargándolo de la página oficial del fabricante del producto.</p>
<p>Llegado a este punto Windows 10 ya se puede empezar a usar y quizá instalar el software básico y programas que vayas a utilizar como un paquete ofimático ya sea <a href="https://products.office.com/es-es/">Microsoft Office</a> o alguna de las mejores <a href="https://picodotdev.github.io/blog-bitix/2016/05/4-opciones-ofimaticas-alternativas-gratuitas-a-microsoft-office/">4 alternativas a Microsoft Office</a>, un navegador web como <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a> o <a href="https://www.google.es/chrome/browser/desktop/">Chrome</a> con el complemento para bloquear publicidad <a href="https://adblockplus.org/es/">AdBlockPlus</a> en vez de usar <a href="https://www.microsoft.com/es-es/windows/microsoft-edge/">Microsoft Edge</a> que está incorporado por defecto. No es necesario instalar ningún antivirus ya que Windows 10 ya integra el suyo propio que además es uno de los mejores.</p>
<p>Aún sin licencia y sin activar Windows 10 es perfectamente usable, quizá al cabo de un tiempo no puedas cambiar algunas opciones de personalización como el fondo del escritorio o temas de las ventanas pero nada importante que impida usarlo. Y en cualquier caso <a href="https://picodotdev.github.io/blog-bitix/2016/01/windows-10-y-office-2016-tan-faciles-de-usar-sin-licencia-como-siempre/">Windows 10 y Office 2016 siguen siendo tan fáciles de usar sin licencia como siempre</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-01_hu7a226b0e11554bfc7f50cf48f99a95c2_206052_2560x1440_fit_box_3.png" data-gallery="" title="Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-01_hu7a226b0e11554bfc7f50cf48f99a95c2_206052_200x150_fit_box_3.png" width="200" height="150" alt="Windows 10" title="Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-02_hua584fff2b9f6a763b95f3733f5ed047f_197183_2560x1440_fit_box_3.png" data-gallery="" title="Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-02_hua584fff2b9f6a763b95f3733f5ed047f_197183_200x150_fit_box_3.png" width="200" height="150" alt="Windows 10" title="Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-03_hua5e3bee7b0a9664d72809318af1ef05f_134947_2560x1440_fit_box_3.png" data-gallery="" title="Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-03_hua5e3bee7b0a9664d72809318af1ef05f_134947_200x150_fit_box_3.png" width="200" height="150" alt="Windows 10" title="Windows 10"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-04_hu9f88f2b88975908bbaee460a4df3094c_51975_2560x1440_fit_box_3.png" data-gallery="" title="Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-04_hu9f88f2b88975908bbaee460a4df3094c_51975_200x150_fit_box_3.png" width="200" height="150" alt="Windows 10" title="Windows 10"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-05_hua48fe921f04329bf175569f2f75d609b_247437_2560x1440_fit_q90_box.jpg" data-gallery="" title="Windows 10"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/windows-10-05_hua48fe921f04329bf175569f2f75d609b_247437_200x150_fit_q90_box.jpg" width="200" height="150" alt="Windows 10" title="Windows 10"  class="lozad "></a></p>
<figcaption>Windows 10</figcaption>
</figure>
</div>
<h4 id="comprar-una-licencia-y-activar-windows-10">Comprar una licencia y activar Windows 10</h4>
<p>Instalar y usar Windows 10 es gratuito pero pasados unos días después de la instalación ha de activarse con un código de licencia válido, si no se activa se deshabilitan algunas opciones de personalización como el cambio del fondo de escritorio aunque no impiden su uso.</p>
<p>Las licencias de Windows 10 vendidas por Microsoft no son baratas, entre 145 € y 439 € según la versión. Algunos vendedores ofrecen licencias baratas y legales a unos precios muy reducidos de entre 10 € y 15 € como explico en el artículo <a href="https://picodotdev.github.io/blog-bitix/2020/09/como-comprar-una-licencia-y-activar-windows-10-y-office-2019/">Cómo comprar una licencia y activar Windows 10 y Microsoft Office 2019</a>.</p>
<h3 id="alternativa-a-windows-con-distribuciones-gnulinux">Alternativa a Windows con distribuciones GNU/Linux</h3>
<p>Debes conocer que Windows no es la única opción de sistema operativo que puedes instalar, si quieres puedes probar alguna de las distribuciones <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> como alternativa a Windows y descubrir el mundo del software libre que respeta tus derechos y no te los quita como el software privativo, puedes leer el artículo <a href="https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/">Elegir una distribución GNU/Linux según el usuario o equipo</a> e <a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-la-distribucion-ubuntu-de-gnu-linux-paso-a-paso-desde-cero/">instalar Ubuntu paso a paso desde cero</a>.</p>
<p>Las siguientes son unas capturas de pantalla de varias de las distribuciones GNU/Linux más famosas.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/ubuntu_hu688947c873613f770b8fce072759e364_634897_2560x1440_fit_box_3.png" data-gallery="" title="Ubuntu con entorno de escritorio Unity"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/ubuntu_hu688947c873613f770b8fce072759e364_634897_200x150_fit_box_3.png" width="200" height="150" alt="Ubuntu con entorno de escritorio Unity" title="Ubuntu con entorno de escritorio Unity"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/elementary-os_hu6850958699743fb7b2d663014faa6ed7_524177_2560x1440_fit_box_3.png" data-gallery="" title="elementaryOS"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/elementary-os_hu6850958699743fb7b2d663014faa6ed7_524177_200x150_fit_box_3.png" width="200" height="150" alt="elementaryOS" title="elementaryOS"  class="lozad "></a></p>
<figcaption>Ubuntu y elementaryOS</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/fedora_hu3a55cf603f217ed80ba1c280e25bba4d_575634_2560x1440_fit_box_3.png" data-gallery="" title="Fedora con entorno de escritorio GNOME"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/fedora_hu3a55cf603f217ed80ba1c280e25bba4d_575634_200x150_fit_box_3.png" width="200" height="150" alt="Fedora con entorno de escritorio GNOME" title="Fedora con entorno de escritorio GNOME"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/opensuse_hu9d15c118b90231a9588d6324419986dd_87237_2560x1440_fit_box_3.png" data-gallery="" title="openSUSE con entorno de escritorio KDE"><img src="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/images/opensuse_hu9d15c118b90231a9588d6324419986dd_87237_200x150_fit_box_3.png" width="200" height="150" alt="openSUSE con entorno de escritorio KDE" title="openSUSE con entorno de escritorio KDE"  class="lozad "></a></p>
<figcaption>Fedora y openSUSE</figcaption>
</figure>
</div>
]]>
        </content>
        
            
                <category term="microsoft"/>
            
                <category term="planeta-codigo"/>
            
                <category term="software"/>
            
                <category term="windows"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un servomotor con la Raspberry Pi y Java</title>
        <updated>2017-05-13T11:40:00+02:00</updated>
        <published>2017-05-07T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Otro de los elementos que incluye el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la Raspberry Pi</a> es un <a href="https://es.wikipedia.org/wiki/Servomotor">servomotor</a>, en concreto uno del modelo SG90. En la <a href="http://akizukidenshi.com/download/ds/towerpro/SG90_a.pdf">especificación del servomotor SG90</a> está detallado cual es el código de colores de los cables. Rojo para la corriente de 5V, marrón para tierra y naranja para el <em>pin</em> <abbr title="Pulse Width Modulated">PWM</abbr> con el que se controlará el servo motor, el diodo led es simplemente para saber que cuando se enciende el programa Java se ha iniciado. La Raspberry Pi tiene algunos <em>pines</em> con soporte hardware para realizar PWM.</p>
<p>Un servomotor es un elemento distinto de un motor, un motor usa dos cables uno para mover el motor hacia adelante y otro cable para mover el motor hacia atrás. Los servomotores además de utilizar un único cable para controlarlo su funcionalidad es distinta usándose para posicionar el motor en un determinado ángulo que en el caso del SG90 tiene un ángulo de funcionamiento de 180º. Además el servomotor es más complejo, como se explica en el siguiente artículo de título <a href="http://handyboard.com/hb/faq/hardware-faqs/dc-vs-servo/">¿Cual es la diferencia entre un motor DC y servo motor?</a> el servomotor se compone de varios elementos empaquetados como una pieza. Se compone de un motor DC normal, una unidad de reducción, un sensor de posicionamiento y un circuito de control.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/images/servomotor_hu6764442dc229d274d15e84357470d3d3_154925_2560x1440_fit_q90_box.jpg" data-gallery="" title="Servomotor"><img src="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/images/servomotor_hu6764442dc229d274d15e84357470d3d3_154925_300x200_fit_q90_box.jpg" width="300" height="103" alt="Servomotor" title="Servomotor"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/images/cableado_hu61c0e41b06d1f9f4477c5ed3a6a8630c_260206_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado en la breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/images/cableado_hu61c0e41b06d1f9f4477c5ed3a6a8630c_260206_300x200_fit_q90_box.jpg" width="300" height="128" alt="Cableado en la breadboard" title="Cableado en la breadboard"  class="lozad "></a></p>
<figcaption>Servomotor y cableado</figcaption>
</figure>
</div>
<p>La función del servomotor es recibir la señal de control y aplicar corriente al motor hasta que que esté en la posición indicada por la señal. Un servomotor no rota libremente sino que como he comentado en el caso del SG90 tiene un ángulo de funcionamiento de entre 0º y 180º. La señal de control es un pulso de anchura modulada o PWM.</p>
<p>Usando la librería <a href="http://rtd.diozero.com/en/latest/">Diozero</a> es sencillo controlar un servomotor a través de la clase <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/Servo.html">Servo</a>. El constructor recibe tres datos el <em>pin</em> de la Raspberry Pi que controlará el servomotor, según la nomenclatura Broadcom que usa la librería Diozero, la frecuencia del pulso PWD que sirve para controlar la velocidad de rotación y finalmente la posición inicial a establecer. Con el método <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/Servo.html#getPulseWidthMs--">pulseWidthMs</a> y un rango de un valor <em>float</em> entre 0.6 y 2.4 controlaremos la posición o ángulo del servomotor.</p>
<p>El siguiente programa Java cambia en un bucle la posición del servo desde la posición mínima a la máxima. En él he utilizado el <em>pin</em> 18 que en la Raspberry Pi 1 soporta PWD, en las versiones 2 y 3 podríamos haber usado los <em>pines</em> 18 o 19.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.sandpit.Servo</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Servomotor</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="mi">21</span><span class="o">);</span> <span class="n">Servo</span> <span class="n">servo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Servo</span><span class="o">(</span><span class="mi">18</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mf">1.45F</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servo</span><span class="o">.</span><span class="na">setPulseWidthMs</span><span class="o">(</span><span class="mf">0.6F</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servo</span><span class="o">.</span><span class="na">setPulseWidthMs</span><span class="o">(</span><span class="mf">2.3F</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servo</span><span class="o">.</span><span class="na">setPulseWidthMs</span><span class="o">(</span><span class="mf">1.45F</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Servomotor.java</span>
    </div>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/g8RsvZ26Cqg" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>Aunque he conseguido hacer funcionar el servomotor con este programa no ha sido exento de problemas. Y es que cuando el programa finaliza la Raspberry Pi se me bloquea o se pierde la conectividad de red. No se si por algún <em>bug</em> en la librería Diozero o alguna incompatibilidad con la Raspberry Pi 1 B, quizá en otro modelo de la Raspberry Pi no dé los problemas que a mi me da.</p>
<p>En otros artículos de la serie puedes consultar cómo usar otros <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">elementos de kit con Java y la Raspberry Pi</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeServomotor</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://akizukidenshi.com/download/ds/towerpro/SG90_a.pdf">Especificación SG90 servomotor</a></li>
<li><a href="https://es.wikipedia.org/wiki/Servomotor">Servomotor</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/</id>
        <title>Artículo #4 de Yo apoyo al software libre</title>
        <updated>2017-05-06T11:00:00+02:00</updated>
        <published>2017-05-06T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<p>En los últimos meses las visitas que estoy recibiendo en Blog Bitix están creciendo cada mes entre un 5% y 10%, junto con el número de visitas los ingresos por la publicidad AdSense también estoy notando que está aumentando en proporción similar o incluso más aún. Cuando hace no tanto un buen mes generaba unos 12 € y uno malo 6 € ahora el <em>blog</em> me está reportando entre 18 € y 40 € al mes. Además, en este último periodo he escrito un artículo patrocinado sobre <a href="https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/">Servidores Cloud VPS en la nube</a> para <a href="https://clouding.io/">Clouding.io</a> que también ha sido otra forma de ingreso. El punto negativo de todo esto es que solo son unos pocos artículos los que se llevan la mayor parte del tráfico de mi <em>blog</em>, aún así el resto de artículos contribuyen a que las visitas e ingresos aumenten constantemente.</p>
<p>Como cada vez que desde hace un tiempo recibo una transferencia en mi cuenta por la publicidad <a href="https://www.google.com/adsense/">AdSense</a> o a través del programa de <a href="https://afiliados.amazon.es">afiliados de Amazon</a> me he planteado realizar unas pocas donaciones económicas a algunos de los proyectos de software libre que uso habitualmente o creo que son merecedores de una donación. En anteriores ocasiones han sido a la <a href="https://fsfe.org/index.en.html">FSFE</a>, <a href="https://es.wikipedia.org/wiki/Wikipedia:Portada">Wikipedia</a>, <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a>, <a href="https://elementary.io/es/">Elementary OS</a>, <a href="https://archlinuxarm.org/">Arch Linux ARM</a> y <a href="https://www.libreoffice.org/">Libre Office</a>.</p>
<h3 id="gnome">GNOME</h3>
<p>Uno de los proyectos a los que he donado esta vez ha sido al entorno de escritorio <a href="https://www.gnome.org/">GNOME</a> que uso en mi equipo con <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> ya desde la época de la versión 2.30 allá por el 2010 y continué utilizándolo desde los inicios turbulentos de la versión 3.0 en la que todavía era un nuevo concepto del escritorio inmaduro pero que desde entonces ha mejorado notablemente en cada nueva versión publicada con una cadencia puntual cada seis meses. A partir de la versión 3.16 o 3.18 el escritorio de GNOME empezó a completar la visión de sus desarrolladores y satisfacer con las expectativas de muchos más usuarios en cuanto a funcionalidades y detalles gráficos. En las últimas versiones los cambios ya no son tan notables pero sigue mejorando.</p>
<div class="media">
<figure>
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnome.svg" width="200" height="200" alt="GNOME" title="GNOME"  class="lozad "></p>
</figure>
</div>
<h3 id="videolan-vlc">VideoLAN (VLC)</h3>
<p>Otro proyecto al que he donado ha sido el <a href="https://www.videolan.org/vlc/">reproductor de multimedia VLC</a> del que no me gusta mucho su interfaz gráfica pero que funciona muy bien y es capaz de reproducir cualquier formato de archivo multimedia ya sea de audio o vídeo. Además de este proyecto me encargo de la traducción al español.</p>
<div class="media">
<figure>
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/vlc.svg" width="200" height="200" alt="VLC" title="VLC"  class="lozad "></p>
</figure>
</div>
<h3 id="arch-linux">Arch Linux</h3>
<p>Finalmente, he donado a <a href="https://www.archlinux.org/">Arch Linux</a> que es la distribución de GNU/Linux que ya uso de manera constante desde hace unos años después de usar en unos pequeños periodos <a href="https://www.ubuntu.com/">Ubuntu</a> y <a href="https://www.debian.org/">Debian</a>. Al ser una distribución <em>rolling release</em> o en constante actualización no es necesario reinstalar cada nueva versión basta con actualizar el equipo cada unas semanas para tener las últimas versiones de cada paquete de software que se encuentre en sus repositorios de paquetes. La última reinstalación de Arch Linux que hice en mi equipo es de principios del 2014, no por actualizar el equipo cada unas semanas he tenido problemas con las nuevas versiones o los he resuelto fácilmente leyendo la excelente <a href="https://wiki.archlinux.org/">wiki</a>, los <a href="https://bbs.archlinux.org/">foros</a> o la página principal con las noticias de la distribución.</p>
<p>Por un problema con el medio de pago que usa Arch Linux, <a href="http://spi-inc.org/">Software in the Public Interest (SPI)</a>, para hacer donaciones directas no he podido pagar con mi tarjeta de crédito, finalmente he optado por comprar unas pegatinas para poner en el portátil, unas de Arch Linux, otras de Linux y otras de GNOME en <a href="http://www.unixstickers.com/">unixstickers</a>.</p>
<div class="media">
<figure>
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/archlinux.svg" width="250" height="250" alt="Arch Linux" title="Arch Linux"  class="lozad "></p>
</figure>
</div>
<h3 id="comprobantes-de-las-donaciones">Comprobantes de las donaciones</h3>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/images/donacion-gnome_hubf624972ca565d573fd01c595ad5be73_114825_2560x1440_fit_box_3.png" data-gallery="" title="Donación GNOME"><img src="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/images/donacion-gnome_hubf624972ca565d573fd01c595ad5be73_114825_650x450_fit_box_3.png" width="273" height="450" alt="Donación GNOME" title="Donación GNOME"  class="lozad "></a></p>
<figcaption>Donación GNOME</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/images/donacion-videolan_huc52f852ff4bf0144f6ce56770da8ce30_109043_2560x1440_fit_box_3.png" data-gallery="" title="Donación VideoLAN (VLC)"><img src="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/images/donacion-videolan_huc52f852ff4bf0144f6ce56770da8ce30_109043_650x450_fit_box_3.png" width="297" height="450" alt="Donación VideoLAN (VLC)" title="Donación VideoLAN (VLC)"  class="lozad "></a></p>
<figcaption>Donación VideoLAN (VLC)</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/images/donacion-archlinux_hu6df8fc6b4d96b58de7e87afc49a732b7_101954_2560x1440_fit_box_3.png" data-gallery="" title="Donación Arch Linux"><img src="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/images/donacion-archlinux_hu6df8fc6b4d96b58de7e87afc49a732b7_101954_650x450_fit_box_3.png" width="264" height="450" alt="Donación Arch Linux" title="Donación Arch Linux"  class="lozad "></a></p>
<figcaption>Donación Arch Linux</figcaption>
</figure>
</div>
<p>Las donaciones no son muy cuantiosas pero son una forma de entre las muchas que hay de colaborar con estos proyectos. Otras formas de colaborar son reportando de errores o que no requieren conocimiento técnico como traduciendo las aplicaciones al lenguaje español o simplemente compartiendo las imágenes torrent de las distribuciones GNU/Linux.</p>
<p>Si los ingresos que tengo siguen al mismo ritmo que los últimos meses, y parece que sí, en poco tiempo escribiré un nuevo artículo con los proyectos a los que he donado.</p>
<p><a href="https://www.gnu.org/">Yo apoyo al software libre</a></p>
<table class="table">
    <thead>
        <tr class="thead-dark">
            <th colspan="4">Donaciones que he realizado hasta la última fecha</th>
        </tr>
        <tr class="thead-light">
            <th>#</th>
            <th>Fecha</th>
            <th>Proyecto</th>
            <th>Donación</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1</td>
            <td>2015/12</td>
            <td>Free Software Foundation Europe (FSFE)</td>
            <td>40 €</td>
        </tr>
        <tr>
            <td>2</td>
            <td>2016/09</td>
            <td>Wikipedia, Mozilla/Firefox</td>
            <td>10 €, 10 €</td>
        </tr>
        <tr>
            <td>3</td>
            <td>2017/01</td>
            <td>elementaryOS, Libre Office, Arch Linux ARM</td>
            <td>10 €, 10 €, 10 €</td>
        </tr>
        <tr>
            <td>4</td>
            <td>2017/05</td>
            <td>GNOME, VideoLAN (VLC), Arch Linux</td>
            <td>15,31 €, 10 €, 0,31 €</td>
        </tr>
        <tr>
            <td>5</td>
            <td>2018/01</td>
            <td>LineageOS, Replicant</td>
            <td>15 €, 15 €</td>
        </tr>
        <tr>
            <td>6</td>
            <td>2018/12</td>
            <td>Wine</td>
            <td>$20</td>
        </tr>
        <tr>
            <td>7</td>
            <td>2019/12</td>
            <td>Calibre</td>
            <td>$10</td>
        </tr>
        <tr>
            <td>8</td>
            <td>2020/12</td>
            <td>Phoronix, Mozilla/Firefox, GnuPG</td>
            <td>$12, 10 €, 10 €</td>
        </tr>
        <tr>
            <td>9</td>
            <td>2022/01</td>
            <td>KeePassXC</td>
            <td>15 €</td>
        </tr>
        <tr>
            <td colspan="3">Total</td>
            <td>180 €, $42</td>
        </tr>
    </tbody>
</table>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/</id>
        <title>Imágenes de Docker con Alpine Linux</title>
        <updated>2017-04-28T23:00:00+02:00</updated>
        <published>2017-04-28T23:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/alpinelinux.svg" width="350" height="85" alt="Alpine Linux" title="Alpine Linux"  class=""></p>
</div>
<p>En el repositorio de imágenes <a href="https://registry.hub.docker.com/">Docker Hub</a> de <a href="https://www.docker.com/">Docker</a> hay múltiples versiones de cada software <em>contenirizado</em>, alguna de las versiones están etiquetadas con la palabra <em>alpine</em>. Las imágenes de Docker etiquetadas con <em>alpine</em> hacen referencia a que usan como base la distribución <a href="https://www.alpinelinux.org/">Alpine Linux</a> y la razón de usar Alpine Linux es que al ser una distribución minimalista basada en <a href="https://www.busybox.net/">busybox</a> y <a href="https://www.musl-libc.org/">musl-libc</a> hace que las imágenes ocupen bastante menos que una imagen equivalente por ejemplo basada en <a href="https://www.ubuntu.com/">Ubuntu</a> o <a href="https://www.debian.org/">Debian</a>, seguramente porque no contienen una buena cantidad de cosas innecesarias.</p>
<p>Por ejemplo, la <a href="https://hub.docker.com/_/openjdk/">imagen de Docker que contiene en JDK</a> de Java basada en Debian ocupa 643 MiB y la imagen de Java basada en Alpine Linux ocupa 101 MiB, una diferencia significativa de casi 500 MiB. Con la capacidad de los discos duros actuales no es tanto por lo que ocupan en disco sino por el tiempo que las imágenes tardan en descargarse desde el repositorio e iniciarse los contenedores como es el caso en un <a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/">cluster de contenedores Docker</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/images/imagenes-docker_hu253efe971b278639688e2ea3de182c9f_81827_2560x1440_fit_box_3.png" data-gallery="" title="Imágenes de Docker con su tamaño. Ver imágenes openjdk, Ubuntu y Alpine. Linux"><img src="https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/images/imagenes-docker_hu253efe971b278639688e2ea3de182c9f_81827_300x200_fit_box_3.png" width="300" height="165" alt="Imágenes de Docker con su tamaño. Ver imágenes openjdk, Ubuntu y Alpine. Linux" title="Imágenes de Docker con su tamaño. Ver imágenes openjdk, Ubuntu y Alpine. Linux"  class="lozad "></a></p>
<figcaption>Imágenes de Docker con su tamaño. Ver imágenes openjdk, Ubuntu y Alpine Linux.</figcaption>
</figure>
</div>
<p>El tiempo de descarga solo se emplea la primera vez que se hace uso de una imagen pero como las imágenes se van actualizando hay que tener en cuenta que en cada nueva versión que se use hay que descargar una nueva imagen, cuanto más pequeñas sean las imágenes menos tiempo se emplea en descargarlas y más rápidamente se iniciarán los contenedores.</p>
<p>La <a href="https://hub.docker.com/_/ubuntu/">imagen base de Ubuntu</a> con la que crear nuevas ocupa 117 MiB y la <a href="https://hub.docker.com/_/alpine/">imagen base de Alpine Linux</a> únicamente 3.98 MiB. Si creamos imágenes propias basadas en Alpine Linux deberemos saber que esta distribución usa su propio gestor de paquetes <em>apk</em> y su propio <a href="https://pkgs.alpinelinux.org/packages">repositorio de paquetes</a>. Para <a href="https://picodotdev.github.io/blog-bitix/2014/11/como-crear-una-imagen-para-docker-usando-un-dockerfile/">crear una imagen de Docker</a> hay que usar los archivos <em>Dockerfile</em> que contienen las instrucciones para construir la imagen del contenedor.</p>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-los-contenedores-con-docker-secrets/</id>
        <title>Información sensible en los contenedores con Docker Secrets</title>
        <updated>2017-04-22T12:00:00+02:00</updated>
        <published>2017-04-22T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-los-contenedores-con-docker-secrets/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Parte de la información que usan los contenedores de Docker se debe proteger de accesos no deseados. Anteriormente en algunos casos se usaban variables de entorno para lanzar los contenedores lo que no es seguro si se listan los procesos del sistema con sus parámetros, incluir archivos en las imágenes de los contenedores tampoco es recomendable. Docker Secrets permite proporcionar y mantener segura la información sensible que usen los contenedores.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>Los contenedores de <a href="https://www.docker.com/">Docker</a> necesitan acceder a algunos datos sensibles desde el punto de vista de la seguridad como usuarios y contraseñas, certificados SSL, claves privadas SSH o cualquier otra información de acceso restringido. Algunos de estos datos en Docker se proporcionan mediante variables de entorno al lanzar los contenedores, esto es inseguro ya que al hacer un listado de los procesos con sus parámetros de invocación los relativos a Docker mostrarán esta información, lo que es un posible problema de seguridad.</p>
<p>Con <a href="https://docs.docker.com/engine/swarm/secrets/">Docker Secrets</a> se puede gestionar esta información que se necesita en tiempo de ejecución pero que no se quiere almacenar en la imagen de Docker o en el repositorio de código fuente. Algunos ejemplos de información sensible son:</p>
<ul>
<li>Nombres de usuario y contraseñas.</li>
<li>Certificados TLS y claves.</li>
<li>Claves SSH.</li>
<li>Otra información sensible como el nombre de una base de datos o el nombre de un servidor interno.</li>
</ul>
<p>Los secretos de Docker se proporcionan a los contenedores que los necesitan y se transmiten de forma cifrada al nodo en el que se ejecuten. Los secretos se montan en el sistema de archivos en la ruta <em>/run/secrets/&lt;secret_name&gt;</em> de forma descifrada al que el servicio del contenedor puede acceder.</p>
<p>Algunos comandos para manejar los secretos son los siguientes:</p>
<ul>
<li><em>docker secret create secreto</em>: crea un secreto.</li>
<li><em>docker secret inspect secreto</em>: muestra los detalles de un secreto.</li>
<li><em>docker secret ls</em>: lista los secretos creados.</li>
<li><em>docker secret rm secreto</em>: elimina un secreto.</li>
<li>Se usa el parámetro <em>--secret</em> para <em>docker service create</em> y <em>--secret-add</em> y <em>--secret-rm flags</em> para <em>docker service update</em>.</li>
</ul>
<p>Usando un <em>stack</em> de servicios con un archivo de <a href="https://docs.docker.com/compose/">Docker Compose</a> en la sección <em>secrets</em> de los servicios se indica cuales usa, en la sección <em>secrets</em> se definen los secretos de los servicios con sus nombres y su contenido referenciando archivos que pueden ser binarios o de text no superior a 500 KiB.</p>
<p>Al servicio de <a href="https://nginx.org/">nginx</a> la clave privada y certificado para configurar el acceso mediante el protocolo seguro HTTPS se le proporciona a través de secretos que son referenciados en el archivo de configuración del servidor web <em>nginx.conf</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.1&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:stable-alpine</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">proxy</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">nginx.conf</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">localhost.pem</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">localhost.key</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">sh -c &#34;exec nginx -c /run/secrets/nginx.conf -g &#39;daemon off;&#39;&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">app</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:5000/spring-boot-app:1.0</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;8080:8080&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">proxy</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">app:/data</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">message.txt</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">proxy</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">app</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">rexray</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx.conf</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./nginx.conf</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">localhost.pem</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./localhost.pem</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">localhost.key</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./localhost.key</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">message.txt</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./message.txt</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-app.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="s">http</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">upstream</span> <span class="s">app</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kn">server</span> <span class="s">app_app:8080</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">server</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">listen</span>&nbsp;&nbsp;&nbsp;&nbsp;   <span class="mi">80</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">server</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">listen</span>&nbsp;&nbsp;&nbsp;&nbsp;   <span class="mi">443</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="no">on</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl_certificate</span>&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s">/run/secrets/localhost.pem</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl_certificate_key</span>  <span class="s">/run/secrets/localhost.key</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl_protocols</span>  <span class="s">SSLv2</span> <span class="s">SSLv3</span> <span class="s">TLSv1</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">ssl_prefer_server_ciphers</span>   <span class="no">on</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">proxy_pass</span> <span class="s">http://app</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>nginx.conf</span>
    </div>
</div>
<p>Por otra parte la aplicación Java con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> lista el contenido de los secretos incorporados en el contenedor cuando se solicita en la URL <em>https://192.168.99.100/system/info/</em>, esto no se debe hacer porque se pierde la seguridad que proporcionan los secretos pero sirve a modo de muestra en el ejemplo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.dockerswarm</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HostInfoContributor</span> <span class="kd">implements</span> <span class="n">InfoContributor</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contribute</span><span class="o">(</span><span class="n">Info</span><span class="o">.</span><span class="na">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">details</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">File</span><span class="o">[]</span> <span class="n">secrets</span> <span class="o">=</span> <span class="n">FileSystems</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getPath</span><span class="o">(</span><span class="s">&#34;/run/secrets/&#34;</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">listFiles</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span> <span class="o">:</span> <span class="n">secrets</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">lines</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">toPath</span><span class="o">()).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&#34;\n&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">details</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">content</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">withDetails</span><span class="o">(</span><span class="n">details</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HostInfoContributor.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="err">...,</span><span class="nt">&#34;message.txt&#34;</span><span class="p">:</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>info.json</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-los-contenedores-con-docker-secrets/images/message_hu4ebecdd1723c600c663f2f340442b569_13817_2560x1440_fit_box_3.png" data-gallery="" title="Contenido del archivo message.txt"><img src="https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-los-contenedores-con-docker-secrets/images/message_hu4ebecdd1723c600c663f2f340442b569_13817_300x200_fit_box_3.png" width="300" height="97" alt="Contenido del archivo message.txt" title="Contenido del archivo message.txt"  class="lozad "></a></p>
<figcaption>Contenido del archivo message.txt</figcaption>
</figure>
</div>
<p>Para probar el ejemplo hay que ejecutar varios comandos, la secuencia completa es la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./01-cluster-create.sh&#10;</span></span><span class="line"><span class="cl">$ ./02-vboxwebsrv.sh&#10;</span></span><span class="line"><span class="cl">$ ./03-rex-ray-install.sh&#10;</span></span><span class="line"><span class="cl">$ ./04-docker-compose-stack-deploy-registry.sh&#10;</span></span><span class="line"><span class="cl">$ ./05-spring-boot-app-build.sh&#10;</span></span><span class="line"><span class="cl">$ ./06-create-volumes.sh&#10;</span></span><span class="line"><span class="cl">$ ./06-docker-compose-stack-deploy-app.sh&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ curl -k https://192.168.99.100/system/info</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>run.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/</id>
        <title>Contenedores en Docker Swarm con volúmenes de datos persistentes usando REX-Ray y VirtualBox</title>
        <updated>2017-04-16T23:00:00+02:00</updated>
        <published>2017-04-16T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Salvo que un servicio sea sin estado o <em>stateless</em> los contenedores de Docker necesitan persistir datos y que estos sobrevivan a su terminación, como es el caso de un contenedor de una base de datos. Además en un <em>cluster</em> de nodos Docker hay que tener en cuenta que los datos deben estar accesibles para todos los nodos ya que un contenedor que usase los datos podría ser lanzado en cualquiera de ellos. REX-Ray es un sistema de almacenamiento en red que cubre estas necesidades, es simple de instalar, configurar y de iniciar. En el artículo muestro un ejemplo usando REX-Ray junto con Docker Swarm y VirtualBox.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>Los contenedores de datos son efímeros, se crean y se destruyen y con ellos los datos que tuviesen en su sistema de archivos de modo que cualquier dato que queramos que sobreviva a la vida del contenedor ha de almacenarse de forma externa, este es el caso de los datos de una base de datos como <a href="https://www.postgresql.org/">PostgreSQL</a> o <a href="https://www.mongodb.com/">MongoDB</a>. Además usando <a href="https://docs.docker.com/swarm/">Docker Swarm</a> se plantea el problema de que hay varios nodos formando un <em>cluster</em> por lo que los datos han de estar accesibles independientemente del nodo en el que sea iniciado el contenedor que los utilice y significa que los datos no pueden estar almacenados en el nodo ya que un contenedor podría ser iniciado en cualquiera de ellos.</p>
<p>Así que los contenedores iniciados en un <em>cluster</em> de Docker Swarm que usen datos persistentes necesitan un sistema de almacenamiento en red externo a los contenedores y nodos. Una de las opciones disponibles es <a href="https://rexray.codedellemc.com/">REX-Ray</a> que ofrece una configuración sencilla y múltiples proveedores de computación entre las que están las más populares como <a href="https://aws.amazon.com/es/ec2/">Amazon EC2</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a>, <a href="https://cloud.google.com/compute/">Google Compute Engine</a>, <a href="https://azure.microsoft.com/es-es/">microsoft-azure</a> e incluso <a href="https://www.virtualbox.org/">VirtualBox</a>.</p>
<p>En el siguiente ejemplo uso un <em>cluster</em> de nodos Docker, VirtualBox y REX-Ray para proporcionar volúmenes de datos persistentes para un contenedor que tiene una base de datos postgres basándome en el artículo previo <a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/">Crear un <em>cluster</em> de contenedores Docker</a> donde explicaba como crear un <em>cluster</em> de nodos con Docker Swarm.</p>
<p>Para la integración entre VirtualBox y REX-Ray hay que iniciar primero un servidor en el <em>host</em> que permite a REX-Ray hacer llamadas remotas a VirtualBox para que gestione los volúmenes de datos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl">VBoxManage setproperty websrvauthlibrary null&#10;</span></span><span class="line"><span class="cl">vboxwebsrv -H 0.0.0.0 -v</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>02-vboxwebsrv.sh</span>
    </div>
</div>
<p>Si hay un <em>firewall</em> hay que permitir el tráfico para el puerto <em>18083</em>, en mi caso que uso <em>ufw</em> creando la siguiente regla.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo ufw allow to any port <span class="m">18083</span> from 192.168.0.0/16&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ufw.sh</span>
    </div>
</div>
<p>Con el <em>cluster</em> creado debemos instalar y configurar REX-Ray en cada uno de los nodos ejecutando varios comandos, un comando instala REX-Ray, otro crea el archivo de configuración en <em>/etc/rexray/config.yml</em> y finalmente otro inicia el servicio de REX-Ray. Algunas opciones que se indican en el archivo de configuración de REX-Ray es la ubicación en el <em>host</em> donde se guardan los volúmenes con el parámetro <em>volumePath</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">#sudo ufw allow to any port 18083 from 192.168.0.0/16  </span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine ssh node-<span class="nv">$i</span> <span class="s2">&#34;curl -sSL https://dl.bintray.com/emccode/rexray/install | sh -&#34;</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine ssh node-<span class="nv">$i</span> <span class="s2">&#34;cat &gt; /tmp/rexray-config.yml &lt;&lt; EOF&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">rexray:&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">  logLevel: info&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">libstorage:&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">  service: virtualbox&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">virtualbox:&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">  endpoint: http://192.168.99.1:18083&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">  volumePath: /run/media/picodotdev/BMOVE ROJO/docker-machine/volumes/&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">  controllerName: SATA&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">EOF&#10;</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine ssh node-<span class="nv">$i</span> <span class="s2">&#34;sudo mkdir -p /etc/rexray/&#34;</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine ssh node-<span class="nv">$i</span> <span class="s2">&#34;sudo mv /tmp/rexray-config.yml /etc/rexray/config.yml&#34;</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine ssh node-<span class="nv">$i</span> <span class="s2">&#34;sudo rexray start&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>03-rex-ray-install.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/instalacion-rex-ray_hu9269de5ba430913abbd77617811f8219_72113_2560x1440_fit_box_3.png" data-gallery="" title="Instalación de REX-Ray en nodos de Docker Swarm con VirtualBox"><img src="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/instalacion-rex-ray_hu9269de5ba430913abbd77617811f8219_72113_300x200_fit_box_3.png" width="254" height="200" alt="Instalación de REX-Ray en nodos de Docker Swarm con VirtualBox" title="Instalación de REX-Ray en nodos de Docker Swarm con VirtualBox"  class="lozad "></a></p>
<figcaption>Instalación de REX-Ray en nodos de Docker Swarm con VirtualBox</figcaption>
</figure>
</div>
<p>Para probar la persistencia de datos usaré un <em>stack</em> iniciado de la misma forma que en artículo <a href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/">Iniciar un stack de servicios en un cluster de Docker Swarm</a> pero con un contenedor de postgres que guarda los datos en un volumen de REX-Ray en <em>/var/lib/postgresql/data</em>. Para iniciar el <em>stack</em> el <em>custer</em> de Docker Swarm uso un archivo de <a href="https://docs.docker.com/compose/">Docker Compose</a> con la definición del <em>stack</em> en formato YAML.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.1&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">postgres</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:latest</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;5432:5432&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">postgres:/var/lib/postgresql/data</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">postgres</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-postgres.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker stack deploy -c docker-compose-stack-postgres.yml postgres&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 30s&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Cluster services&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ls&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx_nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nb">echo</span> -e <span class="s2">&#34;\n# Node </span><span class="nv">$i</span><span class="s2"> containers&#34;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">	docker ps&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-docker-compose-stack-deploy-postgres.sh</span>
    </div>
</div>
<p>En la siguiente captura de pantalla se observa en que nodo ha sido iniciado el contenedor de postgres y que identificativo se le ha asignado.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/stack-deploy-postgres_huc4318c531e7472eac4f793e01e0a1a73_77737_2560x1440_fit_box_3.png" data-gallery="" title="Deploy del stack de postgres"><img src="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/stack-deploy-postgres_huc4318c531e7472eac4f793e01e0a1a73_77737_300x200_fit_box_3.png" width="300" height="150" alt="Deploy del stack de postgres" title="Deploy del stack de postgres"  class="lozad "></a></p>
<figcaption>Deploy del stack de postgres</figcaption>
</figure>
</div>
<p>En el <em>stack</em> el volumen de datos postgres está declarado y creado de forma externa. Usando VirtualBox con REX-Ray en el <em>host</em> o anfitrión se crea un archivo que contiene los datos del volumen. Al listar los volúmenes de datos además de los creados <em>postgres</em> y <em>app</em> están los de los discos duros de cada uno de los nodos identificados como <em>disk.vmdk</em>. El parámetro <em>opt=size=5</em> indica que el volumen de datos es de una tamaño de 5GiB.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker volume create --driver<span class="o">=</span>rexray --name<span class="o">=</span>postgres --opt<span class="o">=</span><span class="nv">size</span><span class="o">=</span><span class="m">5</span>&#10;</span></span><span class="line"><span class="cl">docker volume create --driver<span class="o">=</span>rexray --name<span class="o">=</span>app --opt<span class="o">=</span><span class="nv">size</span><span class="o">=</span><span class="m">5</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Volumes&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker volume ls</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-create-volumes.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/volumes_hu1a75dbcefbb92d4d004e2d4d4ce88252_33342_2560x1440_fit_box_3.png" data-gallery="" title="Volúmenes de datos"><img src="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/volumes_hu1a75dbcefbb92d4d004e2d4d4ce88252_33342_300x200_fit_box_3.png" width="300" height="193" alt="Volúmenes de datos" title="Volúmenes de datos"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/volumes-nautilus_hu09fff62e4158ba9c87ce0b119de89d76_22720_2560x1440_fit_box_3.png" data-gallery="" title="Archivos de volúmenes en el sistema de archivos del host"><img src="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/images/volumes-nautilus_hu09fff62e4158ba9c87ce0b119de89d76_22720_300x200_fit_box_3.png" width="300" height="166" alt="Archivos de volúmenes en el sistema de archivos del host" title="Archivos de volúmenes en el sistema de archivos del host"  class="lozad "></a></p>
<figcaption>Volúmenes de datos</figcaption>
</figure>
</div>
<p>Para crear algunos datos en la base de datos hay que conectarse al contenedor y lanzar algunas sentencias SQL. Hay que obtener el identificativo del contenedor de postgres, iniciar un proceso <em>bash</em>, realizar la conexión a la base de datos con el cliente <em>psql</em> y lanzar las sentencias SQL.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps -q --filter <span class="nv">label</span><span class="o">=</span>com.docker.swarm.service.name<span class="o">=</span>postgres_postgres&#10;</span></span><span class="line"><span class="cl">ac90f7e1e7b5&#10;</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -it ac90f7e1e7b5 /bin/bash&#10;</span></span><span class="line"><span class="cl">postgres-# psql --username<span class="o">=</span>postgres&#10;</span></span><span class="line"><span class="cl"><span class="nv">postgres</span><span class="o">=</span><span class="c1"># CREATE TABLE COMPANY(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>&#10;</span></span><span class="line"><span class="cl">postgres<span class="o">(</span><span class="c1">#&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SERIAL PRIMARY KEY&nbsp;&nbsp;&nbsp;&nbsp; NOT NULL,</span>&#10;</span></span><span class="line"><span class="cl">postgres<span class="o">(</span><span class="c1">#&nbsp;&nbsp;&nbsp;&nbsp;NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   NOT NULL,</span>&#10;</span></span><span class="line"><span class="cl">postgres<span class="o">(</span><span class="c1">#&nbsp;&nbsp;&nbsp;&nbsp;AGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NOT NULL,</span>&#10;</span></span><span class="line"><span class="cl">postgres<span class="o">(</span><span class="c1">#&nbsp;&nbsp;&nbsp;&nbsp;ADDRESS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CHAR(50),</span>&#10;</span></span><span class="line"><span class="cl">postgres<span class="o">(</span><span class="c1">#&nbsp;&nbsp;&nbsp;&nbsp;SALARY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL</span>&#10;</span></span><span class="line"><span class="cl">postgres<span class="o">(</span><span class="c1"># );</span>&#10;</span></span><span class="line"><span class="cl">CREATE TABLE&#10;</span></span><span class="line"><span class="cl"><span class="nv">postgres</span><span class="o">=</span><span class="c1"># \dt</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  List of relations&#10;</span></span><span class="line"><span class="cl"> Schema <span class="p">|</span>  Name   <span class="p">|</span> Type  <span class="p">|</span>  Owner   &#10;</span></span><span class="line"><span class="cl">--------+---------+-------+----------&#10;</span></span><span class="line"><span class="cl"> public <span class="p">|</span> company <span class="p">|</span> table <span class="p">|</span> postgres&#10;</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="m">1</span> row<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">postgres</span><span class="o">=</span><span class="c1"># \d+ company</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table <span class="s2">&#34;public.company&#34;</span>&#10;</span></span><span class="line"><span class="cl"> Column  <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp; Type&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Modifiers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="p">|</span> Storage  <span class="p">|</span> Stats target <span class="p">|</span> Descrip&#10;</span></span><span class="line"><span class="cl">tion &#10;</span></span><span class="line"><span class="cl">---------+---------------+------------------------------------------------------+----------+--------------+--------&#10;</span></span><span class="line"><span class="cl">-----&#10;</span></span><span class="line"><span class="cl"> id&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> integer&nbsp;&nbsp;&nbsp;&nbsp;   <span class="p">|</span> not null default nextval<span class="o">(</span><span class="s1">&#39;company_id_seq&#39;</span>::regclass<span class="o">)</span> <span class="p">|</span> plain&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> &#10;</span></span><span class="line"><span class="cl"> name&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span> text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> not null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">|</span> extended <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> &#10;</span></span><span class="line"><span class="cl"> age&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">|</span> integer&nbsp;&nbsp;&nbsp;&nbsp;   <span class="p">|</span> not null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">|</span> plain&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> &#10;</span></span><span class="line"><span class="cl"> address <span class="p">|</span> character<span class="o">(</span>50<span class="o">)</span> <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> extended <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> &#10;</span></span><span class="line"><span class="cl"> salary  <span class="p">|</span> real&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> plain&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">|</span> &#10;</span></span><span class="line"><span class="cl">Indexes:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;company_pkey&#34;</span> PRIMARY KEY, btree <span class="o">(</span>id<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">postgres</span><span class="o">=</span><span class="c1"># INSERT INTO COMPANY (name, age, address, salary) VALUES (&#39;Company A&#39;, 21, &#39;13, Rue del Percebe&#39;, 45000);</span>&#10;</span></span><span class="line"><span class="cl">INSERT <span class="m">0</span> <span class="m">1</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">postgres</span><span class="o">=</span><span class="c1"># SELECT * FROM company;</span>&#10;</span></span><span class="line"><span class="cl"> id <span class="p">|</span>   name&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span> age <span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="p">|</span> salary&#10;</span></span><span class="line"><span class="cl">----+-----------+-----+----------------------------------------------------+--------&#10;</span></span><span class="line"><span class="cl">  <span class="m">3</span> <span class="p">|</span> Company A <span class="p">|</span>  <span class="m">21</span> <span class="p">|</span> 13, Rue del Percebe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span>  <span class="m">45000</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="m">1</span> row<span class="o">)</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>postgres.sh</span>
    </div>
</div>
<p>Destruyendo el <em>stack</em> y volviéndolo a arrancar posiblemente Docker Swarm iniciará el contenedor en otro nodo del <em>cluster</em> pero los datos seguirán estando presentes en la base de datos postgres, se puede comprobar iniciando una nueva sesión bash en el nuevo contenedor, iniciando el cliente de <em>psql</em> y lanzando la consulta <em>select</em> de SQL o con el comando <code>\dt</code> para obtener las tablas de la base de datos, <em>\d+ company</em> para obtener una descripción de la tabla y la consulta SQL <em>SELECT * FROM company;</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker stack rm postgres</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-remove-postgres.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://rexray.readthedocs.io/en/v0.3.3/user-guide/installation/">REX-Ray Installation</a></li>
<li><a href="https://rexray.readthedocs.io/en/v0.3.3/user-guide/installation/#docker-machine-virtualbox">REX-Ray Installation - Docker Machine (VirtualBox)</a></li>
<li><a href="https://rexray.readthedocs.io/en/v0.3.3/user-guide/storage-providers/#virtualbox">REX-Ray Storage Providers - VirtualBox</a></li>
<li><a href="http://rexray.readthedocs.io/en/stable/user-guide/applications/">REX-Ray - Applications</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/</id>
        <title>Ejemplo sensor de golpes y detector de movimiento en la Raspberry Pi con Java</title>
        <updated>2017-04-13T11:00:00+02:00</updated>
        <published>2017-04-13T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Otro par de sensores que incluye el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de introducción a la electrónica para la Raspberry Pi</a> son un sensor de golpes o <em>tilt</em> y un detector de movimiento. El funcionamiento de ambos es muy similar, utilizando un <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> como entrada se recibe si el sensor de golpes está activo o si el detector de movimiento ha detectado movimiento. El sensor de golpes es una bolita de mercurio encerrada en una ampolla de cristal. Como el mercurio a temperatura ambiente su estado es líquido puede moverse y como es un metal puede conducir la electricidad cuando está en una determinada posición entre dos filamentos.</p>
<p>El sensor de golpes necesita de tres cables uno para la corriente de 3.3V, otro para tierra y finalmente otro que se conecta como entrada a un <em>pin</em> GPIO. Usando varios cables hembra-hembra y macho-macho hacemos las conexiones entre el sensor y la placa de pruebas sin soldadura o <em>breadboard</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-1_hu72fde87c50037226c7e027f53998df11_148115_2560x1440_fit_q90_box.jpg" data-gallery="" title="Sensor de golpes y detector de movimiento"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-1_hu72fde87c50037226c7e027f53998df11_148115_300x200_fit_q90_box.jpg" width="300" height="121" alt="Sensor de golpes y detector de movimiento" title="Sensor de golpes y detector de movimiento"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-2_hub246cb2a41f0864b5a6f7e27b3a753b8_190121_2560x1440_fit_q90_box.jpg" data-gallery="" title="Sensor de golpes y detector de movimiento"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-2_hub246cb2a41f0864b5a6f7e27b3a753b8_190121_300x200_fit_q90_box.jpg" width="300" height="124" alt="Sensor de golpes y detector de movimiento" title="Sensor de golpes y detector de movimiento"  class="lozad "></a></p>
<figcaption>Sensor de golpes y detector de movimiento</figcaption>
</figure>
</div>
<p>Usando la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> para controlar los <em>pines</em> GPIO desde un programa implementado con Java detectamos si el sensor está activo o no según la posición de la bolita de mercurio. El ejemplo consiste en <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/">encender un diodo LED</a> que ya mostré en un artículo anterior de esta <a href="https://picodotdev.github.io/blog-bitix/series/electronica/">serie sobre electrónica</a> cuando el sensor <em>tilt</em> esté activo. Usaré el <em>pin</em> 18 para el diodo LED y el <em>pin</em> 21 para el sensor según la nomenclatura de Broadcom. Los <em>pines</em> serían el 12 según la nomenclatura del <em>header</em> y 1 según la nomenclatura de wiringPi para el diodo LED y 13 y 2 para el sensor <em>tilt</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-tilt_huc426378df3450d2db6296dceb7253079_298261_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado sensor de golpes"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-tilt_huc426378df3450d2db6296dceb7253079_298261_300x200_fit_q90_box.jpg" width="300" height="198" alt="Cableado sensor de golpes" title="Cableado sensor de golpes"  class="lozad "></a></p>
<figcaption>Cableado sensor de golpes</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.api.*</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tilt</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="mi">18</span><span class="o">);</span> <span class="n">DigitalInputDevice</span> <span class="n">tilt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DigitalInputDevice</span><span class="o">(</span><span class="mi">21</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tilt</span><span class="o">.</span><span class="na">whenActivated</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tilt</span><span class="o">.</span><span class="na">whenDeactivated</span><span class="o">(()</span> <span class="o">-&gt;</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Tilt.java</span>
    </div>
</div>
<p>En el siguiente vídeo se aprecia como cuando al cambiar de posición del sensor de movimiento se mueve la bolita de mercurio y el diodo LED de ejemplo se enciende y apaga.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/7Rkou-pJWFY" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>El detector de movimiento en teoría es similar en funcionamiento al <em>tilt</em> y la librería diozero proporciona la clase <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/MotionSensor.html">MotionSensor</a> para hacer más sencillo su uso. Digo en teoría porque no he conseguido hacerlo funcionar y he revisado varias veces las conexiones mostradas en otros ejemplos incluido el <a href="http://osoyoo.com/2016/07/14/motionsensor-pi/">ejemplo de osoyoo</a>, no se si es porque me falta algo más que debo tener en cuenta y que no conozco o el sensor no funciona viniéndome estropeado. Cuando el sensor detecta movimiento cambia el voltaje de su <em>pin</em> GPIO de datos. Los otros dos <em>pines</em> que utiliza son uno para el voltaje de 5V y el de tierra.</p>
<p>El programa Java para el sensor de movimiento es similar al sensor <em>tilt</em> e igualmente encendería o apagaría un diodo LED cuando detecta movimiento.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-motion_hu919daab0ca3f88d0ef311958bdf8b23b_230707_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado sensor de movimiento"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-motion_hu919daab0ca3f88d0ef311958bdf8b23b_230707_300x200_fit_q90_box.jpg" width="300" height="157" alt="Cableado sensor de movimiento" title="Cableado sensor de movimiento"  class="lozad "></a></p>
<figcaption>Cableado sensor de movimiento</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.sandpit.MotionSensor</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Motion</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="mi">18</span><span class="o">);</span> <span class="n">MotionSensor</span> <span class="n">motion</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MotionSensor</span><span class="o">(</span><span class="mi">21</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">motion</span><span class="o">.</span><span class="na">whenActivated</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">motion</span><span class="o">.</span><span class="na">whenDeactivated</span><span class="o">(()</span> <span class="o">-&gt;</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Motion.java</span>
    </div>
</div>
<p>Ambos ejemplos pueden usarse con los siguientes comandos cambiando la dirección IP de la Raspberry Pi y el directorio de la misma a donde se suben los ejemplos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Tilt&#39;</span>&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Motion&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<p>El siguiente artículo de la sería será sobre cómo usar un <em>servo motor</em> que es diferente de un motor que gira constantemente.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://pimylifeup.com/raspberry-pi-motion-sensor/">Raspberry Pi Motion Sensor using a PIR Sensor</a></li>
<li><a href="http://www.meccanismocomplesso.org/en/pir-motion-detector/">PIR motion detector – a sensor for Arduino and Raspberry Pi (1st part)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/</id>
        <title>Cómo usar un diodo LED, un pulsador y un zumbador con la Raspberry Pi y Java</title>
        <updated>2017-04-09T12:00:00+02:00</updated>
        <published>2017-04-09T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>El <em>kit</em> de electrónica para la Raspberry Pi incluye varios dispositivos controlables con lo <em>pines</em> GPIO. En el caso de este ejemplo usaré un diodo LED, un zumbador y un pulsador para crear un ejemplo en el que el diodo LED se enciendan y el zumbador emita un sonido cuando el pulsador se active.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En artículos anteriores ya he comentado <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/">como hacer parpadear un diodo LED</a>, <a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/">como usar un display LCD de 16 columnas y 2 filas</a> y <a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/">como obtener la temperatura y humedad de un sensor DHT11</a>, todo estos ejemplo usando varios elementos de <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi 3</a>. En este artículo en el que mostraré cómo usar un LED, un pulsador y un zumbador es mucho más sencillo que los casos del <em>display</em> LCD de 16 filas y 2 columnas y del sensor DHT11. Vistos los ejemplos de artículos anteriores lo más difícil de este es hacer el conexionado con los cables. Para controlar los <em>pines</em> usaré la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> que proporciona clases de alto nivel para cada uno de estos elementos para que desde código Java sea bastante sencillo controlarlos.</p>
<p>El ejemplo consistirá en que cuando se presione el pulsador se encienda el diodo LED y el zumbador se active emitiendo un zumbido audible. Cada uno de estos elementos requiere usar un <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> de los 17 que hay disponibles en la Raspberry Pi 1 que es el modelo que tengo yo o de los 26 <em>pines</em> que poseen versiones posteriores de la Raspberry Pi como la B+, 2 y 3.</p>
<p>Este sería el esquema de conexionado de los elementos. El diodo LED tiene una polaridad de modo que la patita larga que es la parte positiva se conectará al <em>pin</em> GPIO 1 según la nomenclatura de wiringPi o el 18 según la de Broadcom con una resistencia de 200 ohmios entre el <em>pin</em> GIPO y la patita de diodo para que la intensidad que atraviesa el diodo sea menor y no se desgaste. El zumbador también tiene una polaridad que en el caso del <em>kit</em> que he usado viene serigrafiado y con una etiqueta, la parte positiva se conectará a otro <em>pin</em> GPIO y usaré el <em>pin</em> GPIO 2. Para que el pulsador haga contacto bien en la placa de conexiones para hacer pruebas sin soldadura hay que presionar sin forzar pero hasta que quede bien encadado y sin fijo, usaré el <em>pin</em> GPIO 3.</p>
<p>Para el pulsador usaré el método <em>PULL UP</em> (el otro es <em>PULL DOWN</em>) donde conectaré una patita del pulsador a tierra y la adyacente al <em>pin</em> GPIO, en <a href="https://grantwinney.com/using-pullup-and-pulldown-resistors-on-the-raspberry-pi/">algunas páginas</a> se explica haciendo uso de resistencias, sin embargo, el uso de resistencias en la Raspberry Pi no es necesario ya que los <em>pines</em> ya <a href="https://projects.drogon.net/raspberry-pi/wiringpi/special-pin-functions/">las tienen incorporadas internamente</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/cableado_hubfa7419859bb46d6a314285baad9a7e6_233757_2560x1440_fit_q90_box.jpg" data-gallery="" title="cableado en la breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/cableado_hubfa7419859bb46d6a314285baad9a7e6_233757_300x200_fit_q90_box.jpg" width="300" height="131" alt="cableado en la breadboard" title="cableado en la breadboard"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/esquema-cableado_hud3307a9dcf866997c14e92a84e64db8d_261061_2560x1440_fit_box_3.png" data-gallery="" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/esquema-cableado_hud3307a9dcf866997c14e92a84e64db8d_261061_300x200_fit_box_3.png" width="300" height="123" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Esquema del cableado</figcaption>
</figure>
</div>
<p>La librería diozeo para identificar los <em>pines</em> usa la nomenclatura de Broadcom, otras son las nomenclaturas del <em>header</em> o de wiringPi. Hay que tener en cuenta la nomenclatura que se use ya que el número del <em>pin</em> variará en cada una de ellas, también hay que tener en cuenta la versión de la Raspberry Pi ya que hay pequeñas variaciones según la versión. Por ejemplo, según la tabla de referencia siguiente, para la Raspberry Pi 1 y según la nomenclatura de Broadcom el <em>pin</em> GPIO 18 corresponde al número 12 de <em>header</em>, el GPIO 21 al número 13 y el GPIO 22 al número 15. Según la nomenclatura de wiringPi el GPIO 1 corresponde al número 1, el GPIO 2 al número 2 y el GPIO 3 al número 3.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_2560x1440_fit_box_3.png" data-gallery="" title="Header de pines Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_300x200_fit_box_3.png" width="152" height="200" alt="Header de pines Raspberry Pi 1 B" title="Header de pines Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_2560x1440_fit_box_3.png" data-gallery="" title="Header de pines Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_300x200_fit_box_3.png" width="110" height="200" alt="Header de pines Raspberry Pi 3 B" title="Header de pines Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Header de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_2560x1440_fit_box_3.png" data-gallery="" title="Header de pines Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_300x200_fit_box_3.png" width="94" height="200" alt="Header de pines Raspberry Pi 1 B" title="Header de pines Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_2560x1440_fit_box_3.png" data-gallery="" title="Header de pines Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_300x200_fit_box_3.png" width="67" height="200" alt="Header de pines Raspberry Pi 3 B" title="Header de pines Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Headers de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom</figcaption>
</figure>
</div>
<p>Usando la librería diozero el código Java para realizar el ejemplo no necesita excesiva explicación. Es posible hacer uso de las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">funciones lambdas que incorporó el lenguaje Java en la versión de Java 8</a> y con la sentencia <em>try-with-resources</em> del lenguaje los elementos se finalizará correctamente en caso de producirse alguna excepción, por ejemplo apagando el diodo en caso de que estuviese encendido o apagando el zumbador en su caso.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.Button</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.Buzzer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.api.GpioPullUpDown</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LedButtonBuzzer</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="mi">18</span><span class="o">);</span> <span class="n">Buzzer</span> <span class="n">buzzer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Buzzer</span><span class="o">(</span><span class="mi">21</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="mi">22</span><span class="o">,</span> <span class="n">GpioPullUpDown</span><span class="o">.</span><span class="na">PULL_UP</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">button</span><span class="o">.</span><span class="na">whenPressed</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">buzzer</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">button</span><span class="o">.</span><span class="na">whenReleased</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">buzzer</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>LedButtonBuzzer.java</span>
    </div>
</div>
<p>Este es un pequeño vídeo en el que muestro su funcionamiento.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/jaqMi53pjf0" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeLedButtonBuzzer</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/</id>
        <title>Escalar y actualizar un servicio de un cluster de Docker Swarm</title>
        <updated>2017-04-16T13:00:00+02:00</updated>
        <published>2017-04-09T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Ya tenemos un <em>cluster</em> formado por varios nodos con algún servicio ejecutándose en el <em>cluster</em> de Docker Swarm. Si surge la necesidad los servicios del <em>cluster</em> se pueden escalar cambiando el número de instancias de contenedores que forma el servicio para atender las necesidades computacionales o para ofrecer el servicio a más usuarios. Por otro lado, pasado un tiempo muy posiblemente se publicará una nueva imagen de los contenedores, el servicio se puede actualizar para que los contenedores utilicen esa nueva imagen.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>Una vez que ya hemos <a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/">creado un <em>cluster</em> de nodos con Docker Swarm</a> y hemos desplegado algunos servicios ya sea directamente mediante comandos para crear servicios o mediante un <a href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/"><em>stack</em> con un archivo similar a un Docker Compose</a> al cabo de un tiempo necesitaremos hacer otras operaciones. Dos de esas operaciónes básicas son escalar hacia arriba o hacia abajo un servicio cambiando el número de instancias de contenedores desplegadas o actualizar la imagen que utilizan los servicios por otra diferente posiblemente más nueva.</p>
<p>En la documentación de <a href="https://www.docker.com/">Docker</a> están detallados y comentados los <a href="https://docs.docker.com/engine/swarm/swarm-tutorial/scale-service/">comandos para escalar un servicio</a>. Por ejemplo, en el <em>cluster</em> de ejemplo formado por tres nodos, uno con el rol de <em>manager</em> y otros dos como <em>worker</em>, ejecutándose en <a href="https://www.virtualbox.org/">VirtualBox</a> y desplegando un servicio para el servidor <a href="https://nginx.org/">nginx</a> con inicialmente una réplica o instancia podemos escalar el servicio para que se cree alguna instancia o contenedor más del servicio con el siguiente comando <code>docker service scale</code>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service inspect&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service inspect --pretty nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service scale <span class="nv">nginx</span><span class="o">=</span><span class="m">4</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 1m&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service inspect&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service inspect --pretty nginx&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-nginx-scale.sh</span>
    </div>
</div>
<p>Al igual que cuando se crea un contenedor para un servicio en el <em>cluster</em> <a href="https://docs.docker.com/swarm/">Docker Swarm</a> si no se indica alguna restricción decidirá en qué nodos se crean las nuevas instancias o contenedores del servicio.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-1_huebd5c25c0b0faf24527b6ab44777e5b5_76821_2560x1440_fit_box_3.png" data-gallery="" title="Servicio de nginx con una réplica"><img src="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-1_huebd5c25c0b0faf24527b6ab44777e5b5_76821_300x200_fit_box_3.png" width="300" height="161" alt="Servicio de nginx con una réplica" title="Servicio de nginx con una réplica"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-4_hu1208181ff1627b77e3058ac3d716d6f5_90824_2560x1440_fit_box_3.png" data-gallery="" title="Servicio de nginx escalado a cuatro réplicas"><img src="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-4_hu1208181ff1627b77e3058ac3d716d6f5_90824_300x200_fit_box_3.png" width="300" height="161" alt="Servicio de nginx escalado a cuatro réplicas" title="Servicio de nginx escalado a cuatro réplicas"  class="lozad "></a></p>
<figcaption>Servicio de nginx antes y después de escalarlo</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-scale_hub8dd279f35158bcce114c552cc782715_24245_2560x1440_fit_box_3.png" data-gallery="" title="Escalado del servicio de nginx"><img src="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-scale_hub8dd279f35158bcce114c552cc782715_24245_300x200_fit_box_3.png" width="300" height="161" alt="Escalado del servicio de nginx" title="Escalado del servicio de nginx"  class="lozad "></a></p>
<figcaption>Escalado del servicio de nginx</figcaption>
</figure>
</div>
<p>Por otro lado, una vez desplegados en un <em>cluster</em> algunos servicios llegará el momento en que queramos actualizar algún parámetro del servicio, uno de ellos será probablemente la imagen del servicio cuando se publique una nueva. En la página de documentación <a href="https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/">Aplicando actualizaciones a un servicio</a> está explicada esta funcionalidad y los comandos junto con sus opciones que hay que utilizar.</p>
<p>En el ejemplo al crear el <em>cluster</em> se usa la última imagen de docker para nginx, en un entorno de producción es más recomendable establecer una versión en concreto para evitar que la imagen que se usa no varía desde que se prueba hasta que se despliega. El siguiente <em>script</em> actualiza la imagen a la versión <em>nginx:1.10-alpine</em> en todas las réplicas del servicio de nginx en el <em>cluster</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service inspect&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service inspect --pretty nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service update --image nginx:1.10-alpine nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 1m&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service inspect&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service inspect --pretty nginx&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-nginx-update.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-update_huc4c244276d3bb3c7e0dd9083867fc331_62385_2560x1440_fit_box_3.png" data-gallery="" title="Actualización de la imagen del servicio de nginx"><img src="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/images/nginx-service-update_huc4c244276d3bb3c7e0dd9083867fc331_62385_300x200_fit_box_3.png" width="300" height="161" alt="Actualización de la imagen del servicio de nginx" title="Actualización de la imagen del servicio de nginx"  class="lozad "></a></p>
<figcaption>Actualización de la imagen del servicio de nginx</figcaption>
</figure>
</div>
<p>Docker Swarm realiza el proceso de actualización siguiendo los siguientes pasos:</p>
<ul>
<li>Detiene el primer contenedor o tarea a actualizar.</li>
<li>Programa la actualización del contenedor o tarea detenida.</li>
<li>Inicia una nueva tarea actualizado.</li>
<li>Si la tarea actualizada retorna su estado como <em>RUNNING</em> se espera un tiempo determinado y se inicia el proceso de actualización de una nueva tarea.</li>
<li>Si, en cualquier momento durante la actualización, una tarea retorna su estado como <em>FAILED</em>, se detiene la actualización.</li>
</ul>
<p>Por defecto, el planificador actualiza las tareas o contenedores del servicio de uno en uno. Con la opción <em>--update-parallelism</em> se especifica el número de tareas del servicio que se actualizan simultáneamente. La opción <em>--update-delay</em> especifica el tiempo de espera desde que se actualiza la tarea de un servicio y la siguiente. Se puede describir como una combinación de segundos, minutos o horas, de modo que 1m30s indica una espera de 1 minuto y 30 segundos.</p>
<p>En los <a href="https://docs.docker.com/compose/compose-file/">archivos en formato YAML de los <em>stacks</em> de Docker Compose</a> hay una sección en cada servicio en el que se indica el número de contenedores que se desea que esté formado el servicio así como las opciones de paralelismo y tiempo de espera entre actualización. Para actualizar el <em>stack</em> basta con hacer de nuevo el <em>deploy</em>, ya sea la imagen usada, el número de réplicas u otros parámetros.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">...</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">deploy</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">update_config</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">parallelism</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1m30s</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-app.yml</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/</id>
        <title>Iniciar un stack de servicios en un cluster de Docker Swarm</title>
        <updated>2017-04-02T12:00:00+02:00</updated>
        <published>2017-04-02T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los <em>stacks</em> en Docker Swarm son definiciones en un archivo de texto en formato YAML de múltiples servicios además de volúmenes, redes de software y secretos. Esta definición de un <em>stack</em> ejecutado en un <em>cluster</em> de nodos Docker Swarm permite iniciar múltiples contenedores además de los otros elementos que necesiten para su funcionamiento. Los <em>stacks</em> son el equivalente para Docker Swarm de los archivos multicontenedor de Docker Compose, y el formato de ambos muy similar.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>Con <a href="https://docs.docker.com/compose/">Docker Compose</a> se pueden <a href="https://picodotdev.github.io/blog-bitix/2015/07/aplicaciones-multicontenedor-con-docker-compose/">definir en un único archivo un conjunto de contenedores</a> que forma un servicio o aplicación y que se lanzan como una unidad. En vez de ejecutar los comandos individuales que inician cada contenedor el archivo en formato <a href="https://www.yaml.org/">yaml</a> de Docker Compose define varios contenedores y al ser un archivo de texto es añadible a un sistema de control de versiones para registrar los cambios. La información del archivo de Docker Compose es la misma que se indicaría en el comando para iniciar un contenedor individual.</p>
<p>En versiones más recientes se ha modificado ligeramente el formato del archivo de Docker Compose para añadirle las características necesarias que necesita <a href="https://docs.docker.com/swarm/">Docker Swarm</a>, la <a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/">herramienta integrada en Docker que permite crear <em>clusters</em> de nodos</a> que ejecuten contenedores <a href="https://www.docker.com/">Docker</a>. A estos archivos ahora se les denomina como <em>stacks</em>. Así hay nuevas secciones como <em>services</em>, <em>networks</em>, <em>volumes</em> y <em>secrets</em> entre otras para soportar algunas funcionalidades adicionales. La sección <em>services</em> es similar a la que usábamos en Docker Compose y define los contenedores. Por ejemplo, para definir que el servicio se componga de un contenedor con un servidor web <a href="https://nginx.org/">nginx</a> usaríamos el siguiente archivo. El parámetro <em>version</em> es muy importante ya que indica las opciones soportadas en el archivo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.1&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:stable-alpine</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">deploy</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-nginx.yml</span>
    </div>
</div>
<p>A destacar las opciones <em>deploy</em> y <em>replicas</em> ya que indican cuantas instancias o contenedores de ese servicio habrá en el <em>cluster</em>. Al igual que con los comandos de Docker Swarm era posible crear redes por software a las cuales conectar los contenedores para que se puedan comunicar entre sí en la sección <em>networks</em> de cada servicio se indica las redes a las que conectarlo y en la sección a nivel raíz del archivo las redes a crear.</p>
<p>También hay una sección propia para definir los volúmenes que dependiendo del <em>driver</em> se integra con diferentes plataformas de computación como <a href="https://aws.amazon.com/es/ec2/">Amazon EC2</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a>, <a href="https://www.virtualbox.org/">VirtualBox</a> con <a href="https://rexray.readthedocs.io/en/v0.3.3/">REX-Ray</a>, &hellip;. Los volúmenes proporcionan persistencia a los efímeros contenedores, por un lado almacenar datos que deban sobrevivir a la vida de un contenedor en su sistema de archivos es inadecuado ya que sus datos no son compartidos si se inicia otra instancia del contenedor y son eliminados cuando el contenedor desaparece, por otro lado en un <em>cluster</em> de contenedores Docker si un contenedor de un servicio finaliza inexperadamente Docker Swarm puede decidir reiniciarlo en cualquier otro nodo del <em>cluster</em> para mantener el estado del servicio por lo que los archivos compartidos no pueden estar tampoco en el <em>host</em> que hospeda los contenedores. Por estos motivos Docker Swarm necesita de un sistema de persistencia, que en este caso son los volúmenes definidos en la sección del mismo nombre <em>volumes</em>.</p>
<p>Para mayor seguridad se ha incorporado la sección <em>secrets</em> en la que se especifican elementos de datos como archivos que en el contenedor se montan en el directorio <em>/run/secrets/</em>. Algunos elementos sensibles como usuarios y contraseñas al proporcionarse como parámetros o variables de entorno aparecen haciendo un listado de procesos del sistema con sus respectivos comandos de lanzamiento y parámetros, lo que es un problema de seguridad. Hay otros elementos sensibles como claves SSH, claves privadas o certificados que ahora con los <em>secrets</em> no es necesario incluirlos en la propia imagen del contenedor.</p>
<p>La forma de iniciar y eliminar un <em>stack</em> en un <em>cluster</em> de nodos Docker Swarm es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker stack deploy -c docker-compose-stack-nginx.yml nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 30s&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Cluster services&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ls&#10;</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\n# Nginx service tasks&#34;</span>&#10;</span></span><span class="line"><span class="cl">docker service ps nginx_nginx&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">echo</span> -e <span class="s2">&#34;\n# Node </span><span class="nv">$i</span><span class="s2"> containers&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;docker ps&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">echo</span> -e <span class="s2">&#34;\n# Node </span><span class="nv">$i</span><span class="s2"> request&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nv">NODE_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;curl http://<span class="nv">$NODE_IP</span>/&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-docker-compose-stack-deploy-nginx.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker stack rm nginx</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-remove-nginx.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/images/nginx-service_huaf72f50b5fc5509540108f173383460a_97355_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/images/nginx-service_huaf72f50b5fc5509540108f173383460a_97355_300x200_fit_box_3.png" width="281" height="200"  class="lozad "></a></p>
<figcaption>Cluster de nodos de Docker Swarm con servicio de nginx replicado con 2 instancias</figcaption>
</figure>
</div>
<p>En la captura de la terminal se aprecia como estando el <em>cluster</em> formado por tres nodos y el servicio estando replicado con dos instancias Docker Swarm ha decidido iniciar una instancia de contenedor nginx en el <em>nodo-01</em> y otra en el <em>nodo-03</em> pero perfectamente podría haber iniciado una de ellas en el <em>nodo-02</em>. Gracias a las capacidades de <em>networking</em> de Docker Swarm con <a href="https://docs.docker.com/engine/swarm/ingress/">Routing Mesh</a> al cualquier nodo que se le haga una petición al puerto 80 del servicio de nginx devolverá una respuesta, incluso si se hace en el ejemplo la petición al <em>nodo-02</em> la respuesta será devuelta aunque en ese nodo no tenga una instancia de contenedor ejecutándose, realmente redirigirá la petición de forma transparente para el cliente la petición a un nodo que si tenga una instancia de nginx. También, al estar el servicio replicado con dos instancias Docker Swarm realizará automáticamente un <a href="https://docs.docker.com/docker-cloud/getting-started/deploy-app/9_load-balance_the_service/">balanceo de carga</a> <em>round-robin</em> repartiendo las peticiones entre cada una de las instancias de nginx.</p>
<p>De los <em>volumes</em> y <em>secrets</em> en posteriores entregas de esta <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie de artículos sobre Docker</a> las comentaré de forma específica. El <em>stack</em> de servicios mostrado en este ejemplo es muy sencillo. Aunque también sencillo en el mismo código fuente del ejemplo incluyo otro <em>stack</em> formado por un servicio de nginx y una aplicación Java con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> que hace uso de <em>secrets</em> y <em>volumes</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.1&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:stable-alpine</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">proxy</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">nginx.conf</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">localhost.pem</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">localhost.key</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">sh -c &#34;exec nginx -c /run/secrets/nginx.conf -g &#39;daemon off;&#39;&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">app</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:5000/spring-boot-app:1.0</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;8080:8080&#34;</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">proxy</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">app:/data</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">message.txt</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">proxy</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">app</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">rexray</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">secrets</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx.conf</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./nginx.conf</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">localhost.pem</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./localhost.pem</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">localhost.key</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./localhost.key</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">message.txt</span><span class="p">:</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">./message.txt</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose-stack-app.yml</span>
    </div>
</div>
<p>Un libro que me ha gustado mucho y que recomiendo leer sobre Docker Swarm es <a href="https://amzn.to/2mIirti">The Devops 2.1 Toolkit</a> que lo explica detalladamente y todo el libro está orientado a como usarlo en un entorno de producción. Un libro más introductorio que también he leído y que está bastante bien es <a href="https://amzn.to/2mF3Xtj">Docker in Action</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1492036730&amp;linkId=666d0aff3a2629cd87c205370bc5ae87" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=9d344246cd59cd65a952305379c2556a" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=2101ae950cfcfe9e69b6cc1210e4bf2c" title="Amazon" class="lozad"></iframe>
</div>
<p>Docker Swarm es una opción simple y que está integrada en Docker pero no ofrece todas las funcionalidades de algunas otras opciones que el algunos casos de uso algo más avanzados son necesarias o convenientes. <a href="https://www.nomadproject.io/">Nomad</a> es otra opción simple para gestionar un conjunto de aplicaciones o servicios pero con algunas funcionalidades adicionales que no posee Docker Swarm como escribo en <a href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/">Introducción a Nomad para gestionar aplicaciones y microservicios</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.docker.com/engine/swarm/stack-deploy/">Deploy a stack to a swarm</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/">Compose file reference</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/</id>
        <title>Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java</title>
        <updated>2017-04-02T10:15:00+02:00</updated>
        <published>2017-03-31T19:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>El <em>kit</em> de iniciación a la electrónica para la Raspberry Pi tiene un sensor para la temperatura y humedad, el modelo DHT11. Obtener la información requiere restricciones de tiempo, este es un caso de uso justificado para usar lenguaje C y JNI para integrarlo con Java. En el ejemplo el código C llama a un método de una clase Java con dos valores enteros o lanza una excepción en caso de que al realizar la lectura haya habido algún error en la transmisión de los bits.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Entre los varios sensores incluídos en el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación para la Raspberry Pi</a> está el sensor de temperatura y humedad con el modelo DHT11. El DHT11 es un sensor muy básico pero suficiente y válido si el objetivo es trastear un poco con hardware.</p>
<p>En la <a href="http://www.micropik.com/PDF/dht11.pdf">especificación del sensor DHT11</a> está descrita su funcionamiento y forma de comunicación. Utiliza 3 cables, uno para la corriente de 3.3V, otro para tierra y finalmente uno de datos que se conecta a cualquier <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> de la Raspberry Pi. Según la especificación el sensor proporciona sus datos en unos 4 ms cuando se le emite un pulso bajo durante unos pocos microsegundos y a continuación uno alto durante otros pocos microsegundos, momento a partir del cual el sensor emite 40 bits de información empezando por un pulso bajo de inicio y a continuación el propio bit con un pulso alto, según sea la duración del pulso alto el bit se considera un 0 si es menor de unos 27μs y un 1 si dura más de ese tiempo hasta unos 80μs momento en el que se emite el siguiente bit de información. Los primeros 8 bits corresponden a la parte entera de la humedad, los siguientes 8 bits a la parte decimal de la humedad, el tercer grupo de 8 bits a la parte entera de la temperatura y 8 bits más para la parte decimal. El último grupo de 8 bits hasta completar los 40 bits son de <em>checksum</em> para detectar errores en la transmisión. El porcentaje de errores en la transmisión significativo en este sensor y quizá haya que realizar varias lecturas del sensor para obtener una correcta.</p>
<p>Dada las restricciones de tiempo que utiliza el sensor en el ejemplo usaré el lenguaje C para obtener los valores de temperatura y humedad y <abbr title="Java Native Interface">JNI</abbr> para acceder a ellos desde Java. Aún usando C se producen errores en la obtención de los valores ya que el método usado por el sensor y transmitir los datos basados en tiempo de microsegundos no es muy fiable. Usando Java la situación sería peor por las restricciones que impone la máquina virtual con sus paradas para la recolección de basura por ejemplo. Así que el ejemplo consistirá en una combinación de C y Java con JNI un poco más avanzado que el <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/">Ejemplo de JNI, usar código en C desde Java</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-1_huf15bd8a2768efd9c6ad1887c2eb98f8b_135926_2560x1440_fit_q90_box.jpg" data-gallery="" title="Sensor DHT11"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-1_huf15bd8a2768efd9c6ad1887c2eb98f8b_135926_300x200_fit_q90_box.jpg" width="300" height="118" alt="Sensor DHT11" title="Sensor DHT11"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-2_huc8d787f20ca8a7e91a1094d8f98d55f1_124881_2560x1440_fit_q90_box.jpg" data-gallery="" title="Sensor DHT11"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-2_huc8d787f20ca8a7e91a1094d8f98d55f1_124881_300x200_fit_q90_box.jpg" width="300" height="129" alt="Sensor DHT11" title="Sensor DHT11"  class="lozad "></a></p>
<figcaption>Sensor DHT11</figcaption>
</figure>
</div>
<p>Lo primero que deberemos hacer para acceder a la información del sensor desde Java es crear una clase que contenga un método nativo que realizará la lectura de la información en C. Con la utilidad <em>javah</em> obtendremos el archivo de cabecera que implementará el programa en C. Finalmente, siguiendo la especificación se escribe el código C que realice la lectura que en este caso usará la librería <a href="http://wiringpi.com/">wiringPi</a> para la interacción con los <em>pines</em> GPIO de la Raspberry Pi.</p>
<p>El código en C invocará el método <em>setTemperatureHumidity</em> pasando como parámetros los datos de temperatura y humedad leídos del sensor, el método nativo <em>read</em> es utilizado por el código Java que controla el sensor para realizar la lectura en el código C.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.StandardCopyOption</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dht11</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">architecture</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;os.arch&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">library</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;/libdht11-%s.so&#34;</span><span class="o">,</span> <span class="n">architecture</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">Dht11</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">library</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">&#34;libdht11&#34;</span><span class="o">,</span> <span class="s">&#34;so&#34;</span><span class="o">).</span><span class="na">toPath</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">int</span> <span class="n">gpio</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">temperature</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">humidity</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Dht11</span><span class="o">(</span><span class="kt">int</span> <span class="n">gpio</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">gpio</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">init</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">(</span><span class="kt">int</span> <span class="n">gpio</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">read</span><span class="o">(</span><span class="n">gpio</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">break</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getTemperature</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">temperature</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getHumidity</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">humidity</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="nf">getDate</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTemperatureHumidity</span><span class="o">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">humidity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">temperature</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">humidity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Dht11</span> <span class="n">sensor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dht11</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sensor</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Temperature (C): %f, Humidity: %f%n&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;No temperature/humidity&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/* Header for class io_github_picodotdev_blogbitix_javaraspberrypi_Dht11 */</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifndef _Included_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#define _Included_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/*&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;init&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Signature: ()V&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_init</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cm">/*&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;read&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Signature: (I)V&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_read</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jint</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.h</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;wiringPi.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  &#10;</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io_github_picodotdev_blogbitix_javaraspberrypi_Dht11.h&#34;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#define MAXTIMINGS 85&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_init</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nf">wiringPiSetup</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_read</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">gpio</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">uint8_t</span> <span class="n">state</span>	<span class="o">=</span> <span class="n">HIGH</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">counter</span>	<span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">j</span>		<span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nf">pinMode</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nf">digitalWrite</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nf">delay</span><span class="p">(</span><span class="mi">18</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nf">digitalWrite</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nf">delayMicroseconds</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nf">pinMode</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAXTIMINGS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">gpio</span><span class="p">)</span> <span class="o">==</span> <span class="n">state</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">counter</span><span class="o">++</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nf">delayMicroseconds</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">255</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">break</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">state</span> <span class="o">=</span> <span class="nf">digitalRead</span><span class="p">(</span><span class="n">gpio</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">255</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">break</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">dht11_dat</span><span class="p">[</span><span class="n">j</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">&gt;</span> <span class="mi">16</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">dht11_dat</span><span class="p">[</span><span class="n">j</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">j</span><span class="o">++</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">40</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">dht11_dat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="p">((</span><span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)))</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">GetObjectClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jmethodID</span> <span class="n">method</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&#34;setTemperatureHumidity&#34;</span><span class="p">,</span> <span class="s">&#34;(II)V&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">CallVoidMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;java/io/IOException&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&#34;Failed read&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.c</span>
    </div>
</div>
<p>El código en C del sensor hay que compilarlo en la Raspberry Pi con el compilador <a href="https://gcc.gnu.org/">gcc</a> obteniendo una librería con código nativo que Java y JNI cargará y enlazará de forma dinámica en el programa Java. Ya que el código C usa la librería wiringPi ha de instalarse previamente junto con el compilador gcc. Obtenida la librería la copiamos mediante FTP o SSH de la Raspberry Pi a nuestro equipo de desarrollo. El código C realiza la lectura usando la librería wiringPi siguiendo la especificación de como se transmiten los datos por el sensor, realizada una lectura correcta usa varias de las funciones de la estructura <a href="http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html">JNIEnv</a> para obtener la referencia a un método de la clase DHT11 e invocarlo con los valores obtenidos del sensor o lanza una excepción si la lectura ha sido errónea.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># pacman -S wiringpi gcc</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>install-packages.sh</span>
    </div>
</div>
<p>El comando para compilar la librería de código nativo a partir del código en C y el archivo de cabecera generado con <em>javah</em> es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include&#34;</span> -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span> -shared -fPIC -L/usr/lib -lwiringPi -o libdht11-arm.so Dht11.c&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>compile.sh</span>
    </div>
</div>
<p>Para facilitar la ejecución la librería la proporcionó ya compilada y ubicada en el directorio <em>src/main/resources</em> de modo que será incluida en el archivo <em>jar</em> generado por <a href="https://gradle.org/">Gradle</a> en el ejemplo y que la clase DHT11 extraerá al directorio temporal del sistema y cargará para su uso.</p>
<p>La clase Java del ejemplo que hace uso del sensor realiza una lectura cada 3 segundos e imprime en la terminal y en el <em>display</em> 1602 el último valor obtenido correctamente de la temperatura y humedad.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.I2CLcd</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.api.I2CConstants</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.ByteOrder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ScheduledExecutorService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TemperatureHumidity</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Dht11</span> <span class="n">sensor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dht11</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ScheduledExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">I2CLcd</span> <span class="n">lcd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">I2CLcd</span><span class="o">(</span><span class="n">I2CConstants</span><span class="o">.</span><span class="na">BUS_0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">DEFAULT_DEVICE_ADDRESS</span><span class="o">,</span> <span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Runnable</span> <span class="n">monitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sensor</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Temperature: %dºC, Humidity: %d%%, Date: %s%n&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">get</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_DATE_TIME</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;T: %dC, H: %d%% &#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">get</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;HH:mm:ss&#34;</span><span class="o">))));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;No data&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">service</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">monitor</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">60000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TemperatureHumidity.java</span>
    </div>
</div>
<p>Este es el esquema de conexiones que he utilizado para el ejemplo y una foto del cableado real, he usado del <em>pin</em> GPIO número 2 según la nomenclatura de wiringPi para el cable de datos del sensor DHT11 que se corresponde con pin número 13 según la nomenclatura del <em>header</em> de la Raspberry Pi. Para ver el cableado del <em>display</em> 1602 más detalladamente y la activación del bus de comunicación I2C que necesita consulta el artículo <a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/">Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/cableado_hu0d8a80d75f578f66ed41ed680a8be94b_791258_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado sensor DHT11 y display 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/cableado_hu0d8a80d75f578f66ed41ed680a8be94b_791258_300x200_fit_q90_box.jpg" width="263" height="200" alt="Cableado sensor DHT11 y display 1602" title="Cableado sensor DHT11 y display 1602"  class="lozad "></a></p>
<figcaption>Cableado sensor DHT11 y display 1602</figcaption>
</figure>
</div>
<p>Ejecutando el programa del ejemplo y usando el display 1602 (16 columnas y 2 filas) se muestra la temperatura y humedad obtenida del sensor.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/temperature-humidity_hu134d612f6f9e28cd0b81ff333d54b875_1380733_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado ejemplo y funcionando"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/temperature-humidity_hu134d612f6f9e28cd0b81ff333d54b875_1380733_300x200_fit_q90_box.jpg" width="294" height="200" alt="Cableado ejemplo y funcionando" title="Cableado ejemplo y funcionando"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/display_hu1f1e292a1d4cb70e5c9f82a94dd9173b_251674_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado ejemplo y funcionando"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/display_hu1f1e292a1d4cb70e5c9f82a94dd9173b_251674_300x200_fit_q90_box.jpg" width="300" height="162" alt="Cableado ejemplo y funcionando" title="Cableado ejemplo y funcionando"  class="lozad "></a></p>
<figcaption>Cableado ejemplo y funcionando</figcaption>
</figure>
</div>
<p>En el kernel de Linux hay un módulo que proporciona también los valores del sensor, sin embargo, no he conseguido obtener la temperatura y humedad usándolo. Lo he probado con el kernel 4.4 de Arch Linux ARM y en la versión 4.9 veo que hay cambios en este módulo que quizá lo hagan funcionar. Para usar el módulo del kernel hay que añadir un poco de configuración para el inicio de la Raspberry Pi. En los archivos <em>/sys/devices/platform/dht11@0/iio:device0/in_temp_input</em> y <em>/sys/devices/platform/dht11@0/iio:device0/in_temp_input</em> estarán la temperatura y humedad respectivamente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">dtoverlay=dht11,gpiopin=2&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>kernel-module-config.txt</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat /sys/bus/iio/devices/iio:device0/in_temp_input&#10;</span></span><span class="line"><span class="cl">$ cat /sys/devices/platform/dht11@0/iio:device0/in_temp_input&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>cat.sh</span>
    </div>
</div>
<p>Para ejecutar el ejemplo con ya todo instalado uso uno de los siguientes dos comandos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.TemperatureHumidity&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ ./gradlew executeTemperatureHumidity</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeTemperatureHumidity</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html">Java programming with JNI</a></li>
<li><a href="http://hirt.se/blog/?p=493">Accessing 1-wire Protocol Devices from Java</a></li>
<li><a href="http://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-the-raspberry-pi/">How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi</a></li>
<li><a href="http://www.prometec.net/sensores-dht11/">Sensores de temperatura DHT11</a></li>
<li><a href="https://github.com/Hexalyse/RPi-weather-log/blob/master/dht11.c">dht11.c</a></li>
<li><a href="http://www.uugear.com/portfolio/read-dht1122-temperature-humidity-sensor-from-raspberry-pi/">Read DHT11/22 Temperature &amp; Humidity Sensor from Raspberry Pi</a></li>
<li><a href="https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor">Digital output temperature and humidity sensor DHT11 - DHT22</a></li>
<li><a href="http://playground.arduino.cc/Main/DHT11Lib">A DHT11 Class for Arduino</a></li>
<li><a href="https://github.com/torvalds/linux/blob/master/drivers/iio/humidity/dht11.c">torvalds/linux/blob/master/drivers/iio/humidity/dht11.c</a></li>
<li><a href="http://www.tortosaforum.com/raspberrypi/dht11driver.htm">RaspberryPi DHT11 temperature and humidity sensor driver</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/</id>
        <title>Ejemplo de JNI, usar código en C desde Java</title>
        <updated>2017-03-25T10:05:00+01:00</updated>
        <published>2017-03-25T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Para tareas muy específicas que requieran alto rendimiento, baja latencia, tiempo real o haya restricciones de tiempo el lenguaje Java y la JVM pueden mostrar algunas limitaciones obligando a escribir alguna sección crítica de un programa en un lenguaje nativo como C o C++. Para hacer posible la integración entre Java y C existe en Java la API JNI. En este artículo mostraré como realizar un programa Java que emite el mensaje Hola Mundo desde una biblioteca compartida en C y usando JNI.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Nunca hasta ahora había tenido necesidad de crear un programa que no estuviese completamente escrito en el lenguaje Java. La <a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">API de Java</a> ofrece multitud de clases para cualquier funcionalidad que necesitemos desde estructuras de datos hasta algoritmos de búsqueda o criptografía. También porque el rendimiento de un programa en Java es suficiente y similar a un programa equivalente escrito en C o C++ gracias a las optimizaciones que implementa la máquina virtual de Java o <abbr title="Java Virtual Machine">JVM</abbr> aún siendo los programas Java compilados a una representación intermedia de <em>bytecode</em> independiente de la arquitectura de procesador y sistema operativo en archivos de extensión <em>class</em> y posteriormente interpretados y traducidos a la arquitectura de ejecución, lo que le proporciona a Java la conocida frase <em>&ldquo;Write once, run anywhere&rdquo;</em>.</p>
<p>Sin embargo, en casos que se necesita un alto rendimiento para tareas muy específicas o evitar las imposiciones de la máquina virtual como las paradas que realiza para el recolector de basura una solución es escribir esa funcionalidad crítica en lenguaje C, C++ e incluso en <a href="https://golang.org/">Go</a>. El caso de necesidad que me he encontrado es acceder a un sensor de temperatura DHT11 del <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a> para leer de él la temperatura y humedad. La forma que tiene el sensor DHT11 de proporcionar los datos tiene restricciones de tiempo, cuando se le requieren los valores envía 80 bits de datos donde un pulso de 27μs significa un 0 y un pulso de más de ese tiempo hasta 70μs significa un 1. Estas restricciones de tiempo del sensor y el hecho de que es en una modesta en potencia <a href="https://www.raspberrypi.org/">Raspberry Pi</a> 1 donde lo usaré hace que Java no sea capaz de leer correctamente los valores del sensor.</p>
<p>Acceder desde Java a código nativo en C requiere usar <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface o por sus siglas JNI</a>. Lo primero que hay que realizar es crear una clase que declare los métodos que serán implementados de forma nativa declarando estos métodos usando la palabra reservada <em>native</em> y que serán enlazados por la JVM cargando una librería compartida con <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#loadLibrary-java.lang.String-">System.loadLibrary()</a>. Creada la clase Java se ha de generar el archivo de cabecera <em>.h</em> propia del lenguaje C con el programa de utilidad del JDK <em>javah</em>. Con el archivo de cabecera se implementa la función y se crea una librería compartida en <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> usando el <a href="https://gcc.gnu.org/">compilador gcc</a>. Con la librería compartida se puede iniciar el programa Java. Si la biblioteca compartida no se encuentra se lanzará una excepción del tipo <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/UnsatisfiedLinkError.html">UnsatisfiedLinkError</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/UnsatisfiedLinkError_huafbea2a660c5da4daa8f678c6e8bc0ac_46763_2560x1440_fit_box_3.png" data-gallery="" title="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/UnsatisfiedLinkError_huafbea2a660c5da4daa8f678c6e8bc0ac_46763_300x200_fit_box_3.png" width="300" height="193" alt="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo" title="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo"  class="lozad "></a></p>
<figcaption>Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo</figcaption>
</figure>
</div>
<p>Algunas otras necesidades para hacer uso de JNI son:</p>
<ul>
<li>Acceder a características dependientes de la plataforma necesitadas por la aplicación que no están soportadas en la librería estándar de Java.</li>
<li>Ya hay una librería escrita en otro lenguaje y se quiere hacer accesible a código Java a través de JNI.</li>
<li>Se quiere implementar una pequeña parte de código crítico en un lenguaje de bajo nivel como ensamblador.</li>
</ul>
<p>Desde los métodos de código nativo se puede:</p>
<ul>
<li>Crear, inspeccionar y actualizar objetos Java (incluyendo arrays y strings).</li>
<li>Llamar a métodos Java.</li>
<li>Capturar y lanzar excepciones.</li>
<li>Cargar y obtener información de clases.</li>
<li>Realizar validación de tipos en tiempo de ejecución.</li>
</ul>
<p>Los comandos para generar el archivo de cabecera de C y compilarlo con el código nativo en una librería compartida con gcc son:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ javah -d src/main/c -classpath buil/classes/main io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#10;</span></span><span class="line"><span class="cl">$ gcc -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include&#34;</span> -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span> -shared -fPIC -L/usr/lib -o src/main/resources/libjnihelloworld-amd64.so src/main/c/JniHelloWorld.c&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">javah1</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s2">&#34;javah&#34;</span><span class="o">,</span> <span class="s2">&#34;-d&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/c&#34;</span><span class="o">,</span> <span class="s2">&#34;-classpath&#34;</span><span class="o">,</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span><span class="o">,</span> <span class="s2">&#34;io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">javah</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;javah1&#39;</span><span class="o">,</span> <span class="s1">&#39;javah2&#39;</span><span class="o">]){</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">gcc1</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;javah&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s2">&#34;gcc&#34;</span><span class="o">,</span> <span class="s2">&#34;-shared&#34;</span><span class="o">,</span> <span class="s2">&#34;-fPIC&#34;</span><span class="o">,</span> <span class="s2">&#34;-I/usr/lib/jvm/java-8-openjdk/include&#34;</span><span class="o">,</span> <span class="s2">&#34;-I/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span><span class="o">,</span> <span class="s2">&#34;-o&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/resources/libjnihelloworld-amd64.so&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/c/JniHelloWorld.c&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">gcc</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;gcc1&#39;</span><span class="o">]){</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">executeJniHelloWorldLocal</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;build&#39;</span><span class="o">,</span> <span class="s1">&#39;gcc&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La cabecera usa varias definiciones de tipos definidas en los archivos <em>jni.h</em> y el archivo que variará según el sistema operativo <em>jni_md.h</em>. En la <a href="http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html">estructura JNIEnv</a> con múltiples funciones de integración en C y Java, también varias definiciones de los tipos Java para usarlos en C como <em>jobject</em>, <em>jstring</em>, <em>jint</em>, <em>jboolean</em>, <em>jlong</em>, <em>jdouble</em>, <em>jchar</em>, etc.</p>
<p>El programa que emite el mensaje <em>Hello World!</em> desde código nativo en C debe cargar y enlazar la librería de código nativo con el código de la clase Java. Esto se muestra en el bloque de inicialización <em>static</em> de la clase, en este caso usándo el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#load-java.lang.String-">System.load()</a>, la librería de código nativo de extensión <em>.so</em> en GNU/Linux como en este caso al construirse el proyecto se incluye en el archivo <em>.jar</em> del artefacto resultante se extráe al directorio temporal y se carga desde esa ubicación temporal. En el programa se llama al método <em>print</em> implementado en código nativo y en el código C se usa la función <em>printf</em> de la librería <em>stdio</em> para emitir el mensaje:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.StandardCopyOption</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JniHelloWorld</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">architecture</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;os.arch&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">library</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;/libjnihelloworld-%s.so&#34;</span><span class="o">,</span> <span class="n">architecture</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">JniHelloWorld</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">library</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">&#34;libjnihelloworld&#34;</span><span class="o">,</span> <span class="s">&#34;so&#34;</span><span class="o">).</span><span class="na">toPath</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">JniHelloWorld</span><span class="o">().</span><span class="na">print</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld.h&#34;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld_print</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Hello World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.c</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/* Header for class io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld */</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifndef _Included_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#define _Included_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="cm">/*&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;print&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Signature: ()V&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld_print</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">#endif&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.h</span>
    </div>
</div>
<p>La librería compartida para un sistema <em>amd64</em> la he compilado en mi equipo de escritorio y para la versión <em>arm</em> en la Raspberry Pi e incluido en el directorio <em>src/main/resources</em> de código fuente del ejemplo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew build&#10;</span></span><span class="line"><span class="cl">$ java -classpath build/classes/main:build/resources/main io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-amd64_hub2b4c641f5fe198f142e57637f8a6ec4_27206_2560x1440_fit_box_3.png" data-gallery="" title="Mensaje en la terminal emitido desde código nativo (amd64)"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-amd64_hub2b4c641f5fe198f142e57637f8a6ec4_27206_300x200_fit_box_3.png" width="300" height="193" alt="Mensaje en la terminal emitido desde código nativo (amd64)" title="Mensaje en la terminal emitido desde código nativo (amd64)"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-arm_hu6c56be07a094fe8914ade92188032253_34069_2560x1440_fit_box_3.png" data-gallery="" title="Mensaje en la terminal emitido desde código nativo (ARM)"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-arm_hu6c56be07a094fe8914ade92188032253_34069_300x200_fit_box_3.png" width="300" height="193" alt="Mensaje en la terminal emitido desde código nativo (ARM)" title="Mensaje en la terminal emitido desde código nativo (ARM)"  class="lozad "></a></p>
<figcaption>Mensaje en la terminal emitido desde código nativo en un sistema amd64 y ARM</figcaption>
</figure>
</div>
<p>Ente ejemplo usa Java 8 y requiere instalar el compilador gcc para compilar la librería con código nativo. <a href="https://gradle.org/">Gradle</a> ofrece soporte para <a href="https://docs.gradle.org/3.4.1/userguide/native_software.html">compilar código nativo con su plugin</a>, sin embargo, he preferido usar y conocer los comandos javah y gcc sin usar Gradle. En el siguiente artículo mostraré el ejemplo del sensor DHT11 usando JNI y código nativo en C llamando a métodos de un objeto Java desde código C.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeJniHelloWorldLocal</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://blog.dogan.io/2015/08/15/java-jni-jnr-go/">GO: Call me maybe, Java!</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</a></li>
<li><a href="http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html">Java Programming Tutorial, Java Native Interface (JNI)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/</id>
        <title>Introducción y ejemplo de cluster de contenedores con Docker Swarm</title>
        <updated>2017-03-19T12:00:00+01:00</updated>
        <published>2017-03-19T12:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Las funcionalidades de Docker Swarm están incorporadas en Docker para gestionar <em>clusters</em> de nodos con contenedores de los servicios que deseemos. En artículo comentaré algunas de las propiedades de <em>networkning</em> distribuido incorporado en Docker, como crear un <em>cluster</em> de nodos Docker usando VirtualBox con máquinas virtuales para simular múltiples máquinas junto con como lanzar un servicio en el <em>cluster</em> que en este caso consistirá en un servidor web nginx.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/docker.svg" width="200" height="167" alt="Docker" title="Docker"  class=""></p>
</div>
<p>En <a href="https://picodotdev.github.io/blog-bitix/series/docker/">artículos anteriores de la serie sobre Docker</a> comentaba varias de las herramientas de <a href="https://www.docker.com/">Docker</a> como <a href="https://docs.docker.com/compose/">Docker Compose</a>, Dockerfile o <a href="https://docs.docker.com/machine/">Docker Machine</a> con ejemplos de como usarlo en local. Una de las herramientas que me quedaba por investigar era <a href="https://docs.docker.com/swarm/">Docker Swarm</a> para crear <em>clusters</em> de nodos para contenedores Docker en un entorno de producción. A partir de la versión 1.12 de Docker se han incorporado varias características a Docker para usar contenedores de forma distribuida y que a pesar de la complejidad subyacente que debe haber es realmente simple usarlo.</p>
<p>Una de las características es el <em>networking</em> que hace transparente la comunicación en red distribuida que se hace entre los nodos y los contenedores de esos nodos. Además permite crear redes por software para que los contenedores conectados a esas redes se comuniquen de forma privada. Otra característica interesante de Docker Swarm es que se encarga de monitorizar el estado de los servicios recreando contenedores si alguno deja de funcionar. También a través del denominado <em>routing mesh</em> da igual al nodo del <em>cluster</em> por el que se acceda y da igual en que nodo esté el contenedor que Docker Swarm con esta propiedad se encargará de hacer llegar la petición al contenedor. Además, a lo que en Docker Swarm se denomina servicio se realiza balanceo de carga entre la instancias del mismo que haya en el <em>cluster</em> y al servicio se le asigna un DNS y dirección IP por el que puede ser accedido por otros servicios.</p>
<p>En el siguiente ejemplo para crear el <em>cluster</em> de nodos Docker usaré Docker Machine para crear las máquinas de los nodos en máquinas virtuales de <a href="https://www.virtualbox.org/">VirtualBox</a> aunque su funcionamiento es similar si usásemos la nube de <a href="https://aws.amazon.com/es/ec2/">Amazon EC2</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a> u otros.</p>
<p>El siguiente <em>script</em> crea primeramente varios nodos cada uno en una máquina virtual, luego establece el nodo 01 como <em>manager</em> y los nodos 02 y 03 como <em>workers</em> usando un <em>token</em> para unirlos al <em>cluster</em> según su rol. Los nodos <em>manager</em> se encargan de mantener el estado del <em>cluster</em> y los que a través de ellos los comandos de los servicios deben ser lanzados, en un entorno de producción posiblemente tendríamos 3 nodos <em>manager</em> para soportar tolerancia a fallos. Finalmente, se obtiene lista los nodos del <em>cluster</em>. El comando <code>docker-machine env node-01</code> permite establecer el entorno contra el que el comando <code>docker</code> lanzará las operaciones como si de la máquina local se tratase.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine create -d virtualbox node-<span class="nv">$i</span>&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">MANAGER_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker swarm init --advertise-addr <span class="nv">$MANAGER_IP</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">MANAGER_TOKEN</span><span class="o">=</span><span class="k">$(</span>docker swarm join-token -q manager<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">WORKER_TOKEN</span><span class="o">=</span><span class="k">$(</span>docker swarm join-token -q worker<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span><span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nv">WORKER_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	docker swarm join --token <span class="nv">$WORKER_TOKEN</span> --advertise-addr <span class="nv">$WORKER_IP</span> <span class="nv">$MANAGER_IP</span>:2377&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker-machine ls&#10;</span></span><span class="line"><span class="cl">docker node ls</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>01-cluster-create.sh</span>
    </div>
</div>
<p>Una vez creado los nodos es cuando podemos empezar a crear servicios en el <em>cluster</em>. Los servicios son una definición de los contenedores de Docker que queremos que el <em>cluster</em> ejecute. En el ejemplo definiré el servicio de un servidor web <a href="https://nginx.org/">nginx</a>, primeramente crearé una red por software en el <em>cluster</em> a la que los servicios pueden conectarse que en el ejemplo (aunque para este no es necesario) utilizaré para hacer una consulta DNS con la herramienta <a href="https://linux.die.net/man/1/drill">drill</a> para ver el nombre de dominio y dirección IP que asigna Docker Swarm al servicio del servidor web. Con <em>docker service create</em> se crean los servicios, algunos de los parámetros del comando son el nombre del servicio que queremos asignarle, los puertos que expone en este caso el 80 y 443 en el <em>host</em> para que sea accesible desde fuera del <em>cluster</em>, la redes a las que está conectado y finalmente la imagen del contenedor del servicio que en este caso será la versión de <a href="https://hub.docker.com/_/nginx/">nginx con Alpine para Docker</a>. Se pueden listar los servicios que contiene el <em>cluster</em> con <em>docker service ls</em> y los procesos de cada nodo donde podemos ver en que nodos se está ejecutando los contenedores con <em>docker ps</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker network create --driver overlay nginx&#10;</span></span><span class="line"><span class="cl">docker network ls -f <span class="s2">&#34;driver=overlay&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service create --name nginx -p 80:80 -p 443:443 --network nginx nginx:stable-alpine&#10;</span></span><span class="line"><span class="cl">sleep 1m&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service create --name util --network nginx --mode global alpine sleep <span class="m">1000000000</span>&#10;</span></span><span class="line"><span class="cl">sleep 1m&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service ls&#10;</span></span><span class="line"><span class="cl">docker service ps nginx&#10;</span></span><span class="line"><span class="cl">docker service ps util&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">UTIL_CONTAINER_ID</span><span class="o">=</span><span class="k">$(</span>docker ps -q --filter <span class="nv">label</span><span class="o">=</span>com.docker.swarm.service.name<span class="o">=</span>util<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it <span class="nv">$UTIL_CONTAINER_ID</span> apk add --update drill&#10;</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it <span class="nv">$UTIL_CONTAINER_ID</span> drill nginx&#10;</span></span><span class="line"><span class="cl">docker service rm util&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">sleep 5s&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">	docker ps&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nv">NODE_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip node-<span class="nv">$i</span><span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;curl http://<span class="nv">$NODE_IP</span>/&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>06-nginx-create.sh</span>
    </div>
</div>
<p>Una de las propiedades interesantes del <em>networking</em> de Docker Swarm es que ofrece incorporado balanceo de carga, esto es, si el servicio de nginx del ejemplo estuviese formado por dos instancias las peticiones se distribuirían entre las instancias usando el método <em>round-robin</em>. Otra característica interesante si se observa el ejemplo con detalle es que da igual el nodo al que hagamos la petición que la respuesta se obtendrá igualmente, esto es, aunque la petición se haga al nodo 01 y realmente el contenedor del servidor nginx se esté ejecutando en el nodo 02 la petición se realizará correctamente gracias al <em>routing mesh</em> del <em>networking</em> de Docker Swarm, esto es gracias a que cada servicio tiene asignada una dirección IP, como se ha visto anteriormente en la salida del comando <code>drill</code>.</p>
<p>En este vídeo de <a href="https://asciinema.org/">asciinema</a> se ve en funcionamiento todos los anteriores comandos. Y en la aplicación de VirtualBox estarán las máquinas virtuales de cada uno de los nodos que crea el ejemplo. En el vídeo se aprecia que el servicio de nginx se está ejecutando en el nodo 02 cuando se listan los procesos de Docker de cada nodo con <em>docker ps</em>, nótese sin embargo que al hacer un petición HTTP a cualquiera de los nodos se devuelve la página de inicio de nginx ya que gracias al <em>routing mesh</em> de Docker Swarm la petición se redirige de forma transparente para el cliente y el servicio al nodo donde realmente se está ejecutando el contenedor de nginx.</p>
<div class="media">
<script type="text/javascript" src="https://asciinema.org/a/107868.js" id="asciicast-107868" async></script>
<noscript><a href="https://asciinema.org/a/107868" target="_blank"><img src="https://asciinema.org/a/107868.png" width="650" height="450"></a></noscript>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/images/maquinas-virtuales-cluster_huf8538b90e28f6002b8467479e07fb214_130650_2560x1440_fit_box_3.png" data-gallery="" title="Máquinas virtuales de los nodos del _cluster_ de Docker Swarm"><img src="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/images/maquinas-virtuales-cluster_huf8538b90e28f6002b8467479e07fb214_130650_300x200_fit_box_3.png" width="288" height="200" alt="Máquinas virtuales de los nodos del _cluster_ de Docker Swarm" title="Máquinas virtuales de los nodos del _cluster_ de Docker Swarm"  class="lozad "></a></p>
<figcaption>Máquinas virtuales de los nodos del cluster de Docker Swarm</figcaption>
</figure>
</div>
<p>Los comandos para eliminar un servicio del <em>cluster</em> y eliminar completamente el <em>cluster</em> son los siguientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="k">$(</span>docker-machine env node-01<span class="k">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">docker service rm nginx&#10;</span></span><span class="line"><span class="cl">docker network rm nginx&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>nginx-remove.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">#export MACHINE_STORAGE_PATH=&#34;/run/media/picodotdev/BMOVE ROJO/docker-machine/&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;01&#34;</span> <span class="s2">&#34;02&#34;</span> <span class="s2">&#34;03&#34;</span><span class="p">;</span> <span class="k">do</span>&#10;</span></span><span class="line"><span class="cl">	docker-machine rm -f node-<span class="nv">$i</span>&#10;</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>cluster-remove.sh</span>
    </div>
</div>
<p>Un libro que me ha gustado mucho y que recomiendo leer sobre Docker Swarm es <a href="https://amzn.to/2mIirti">The Devops 2.1 Toolkit</a> que lo explica detalladamente y todo el libro está orientado a como usarlo en un entorno de producción. Un libro más introductorio que también he leído y que está bastante bien es <a href="https://amzn.to/2mF3Xtj">Docker in Action</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1492036730&amp;linkId=666d0aff3a2629cd87c205370bc5ae87" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=9d344246cd59cd65a952305379c2556a" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=2101ae950cfcfe9e69b6cc1210e4bf2c" title="Amazon" class="lozad"></iframe>
</div>
<p>Finalmente, quizás si estás usando GNU/Linux y VirtualBox como yo al crear los nodos con el comando <code>docker-machine</code> te produzca el siguiente error (quizá se corrija en futuras versiones de Docker o VirtualBox).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Setting Docker configuration on the remote daemon...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">This machine has been allocated an IP address, but Docker Machine could not&#10;</span></span><span class="line"><span class="cl">reach it successfully.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">SSH for the machine should still work, but connecting to exposed ports, such as&#10;</span></span><span class="line"><span class="cl">the Docker daemon port (usually &lt;ip&gt;:2376), may not work properly.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">You may need to add the route manually, or use another related workaround.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">This could be due to a VPN, proxy, or host file configuration issue.&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">You also might want to clear any VirtualBox host only interfaces you are not using.&#10;</span></span><span class="line"><span class="cl">Checking connection to Docker...&#10;</span></span><span class="line"><span class="cl">Error creating machine: Error checking the host: Error checking and/or regenerating the certs: There was an error validating certificates for host &#34;192.168.99.100:2376&#34;: dial tcp 192.168.99.100:2376: i/o timeout&#10;</span></span><span class="line"><span class="cl">You can attempt to regenerate them using &#39;docker-machine regenerate-certs [name]&#39;.&#10;</span></span><span class="line"><span class="cl">Be advised that this will trigger a Docker daemon restart which might stop running containers.</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>vboxnet0-error.out</span>
    </div>
</div>
<p>La solución que he encontrado para que funcione es asignar una dirección IP al adaptador puente solo-anfitrión y levantar la interfaz que usa Docker para comunicarse con las máquinas virtuales previamente a crear el nodo. En <a href="https://www.archlinux.org/">Arch Linux</a> con los siguientes comandos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash&#10;</span></span></span><span class="line"><span class="cl"><span class="cp"></span>&#10;</span></span><span class="line"><span class="cl">sudo ip addr add 192.168.99.1/24 dev vboxnet0&#10;</span></span><span class="line"><span class="cl">sudo ip link <span class="nb">set</span> dev vboxnet0 up</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>01-vboxnet0-configure.sh</span>
    </div>
</div>
<p>Se puede definir un conjunto de servicios como una unidad en un archivo en <em>stacks</em> de forma similar a como es posible hacer con Docker Compose cosa que mostraré en otro artículo.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</title>
        <updated>2017-03-19T02:00:00+01:00</updated>
        <published>2017-03-18T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Uno de los motivos por los que compré el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a>, además de cacharrear un poco, era en concreto controlar el <em>display</em> LCD de 16 columnas y 2 filas. En el <em>kit</em> el <em>display</em> viene con un adaptador con el bus de comunicación I2C. El <em>display</em> se puede usar sin este bus pero requiere utilizar muchos más <em>pines</em> GPIO de datos de los limitados 17 que ofrece la Raspberry Pi 1 y los 26 de las Raspberry Pi B+, 2  y 3. Controlar el <em>display</em> con I2C requiere únicamente 2 pines, por contra sin usar I2C requiere un número significativamente mayor 4 u 8 pines.</p>
<p>El <em>display</em> 1602 con su adaptador para el bus I2C que viene con el <em>kit</em> ya incorporado en la parte trasera es el siguiente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/display-lcd-1602_hudec7d325162bd5734a4764f0f652bdc1_213977_2560x1440_fit_q90_box.jpg" data-gallery="" title="Display LCD 16 columnas y 2 filas"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/display-lcd-1602_hudec7d325162bd5734a4764f0f652bdc1_213977_300x200_fit_q90_box.jpg" width="300" height="141" alt="Display LCD 16 columnas y 2 filas" title="Display LCD 16 columnas y 2 filas"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/adaptador-bus-i2c-1602_hu088a2091b37df42dbf508d1cbdc80ce3_242376_2560x1440_fit_q90_box.jpg" data-gallery="" title="Adaptador bus I2C para display 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/adaptador-bus-i2c-1602_hu088a2091b37df42dbf508d1cbdc80ce3_242376_300x200_fit_q90_box.jpg" width="300" height="134" alt="Adaptador bus I2C para display 1602" title="Adaptador bus I2C para display 1602"  class="lozad "></a></p>
<figcaption>Display LCD 1602 y adaptador bus I2C</figcaption>
</figure>
</div>
<p>El esquema de conexionado para controlar el <em>display</em> requiere usar los <em>pines</em> de la Raspberry Pi <em>SDA</em> y <em>SDL</em> además de un <em>pin</em> para proporcionar un voltaje de 5V y otro <em>pin</em> para la tierra. El <em>pin</em> <em>SDA</em> es el número 2 según la numeración de <em>pines</em> de la Raspberry Pi y el <em>SDL</em> es el 5. El <em>pin</em> <em>SDA</em> es utilizado en el bus I2C para transmitir los datos y el <em>SDL</em> para la señal de reloj o sincronización. Utilizando la placa de extensión wiringPi de 26 <em>pines</em> los <em>pines</em> <em>SDA</em> y <em>SDL</em> se encuentran identificados por su nombre y el de la placa de extensión de 40 <em>pines</em> que viene con el <em>kit</em> de iniciación también, deberemos identificar estos <em>pines</em> y realizar las conexiones adecuadamente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/breadboard-cableado_hu9efc39f5b6a5663511ff278421cfc4fc_554266_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cableado en la breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/breadboard-cableado_hu9efc39f5b6a5663511ff278421cfc4fc_554266_300x200_fit_q90_box.jpg" width="164" height="200" alt="Cableado en la breadboard" title="Cableado en la breadboard"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/esquema-cableado_hu78b02982f519ac875b343bc71e481476_96429_2560x1440_fit_box_3.png" data-gallery="" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/esquema-cableado_hu78b02982f519ac875b343bc71e481476_96429_300x200_fit_box_3.png" width="300" height="143" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Cableado en la breadboard</figcaption>
</figure>
</div>
<p>Hay que emplear varios cables macho-macho y hembra-hembra para conectar a los <em>pines</em> del adaptador I2C del <em>display</em>  a los <em>pines</em> del voltaje de 5V, tierra, <em>SDA</em> y <em>SDL</em> de la placa de pruebas sin soldadura.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/cables-macho-macho-hembra-hembra_hu5bd502ece26df8c90c0240f7b6e4e0af_344589_2560x1440_fit_q90_box.jpg" data-gallery="" title="Unión cables macho-macho y hembra-hembra"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/cables-macho-macho-hembra-hembra_hu5bd502ece26df8c90c0240f7b6e4e0af_344589_300x200_fit_q90_box.jpg" width="252" height="200" alt="Unión cables macho-macho y hembra-hembra" title="Unión cables macho-macho y hembra-hembra"  class="lozad "></a></p>
<figcaption>Unión cables macho-hembra</figcaption>
</figure>
</div>
<p>El siguiente paso será activar el bus I2C en la Raspberry Pi que por defecto está desactivado. Esto requiere añadir unos parámetros en la configuración de arranque y cargar unos módulos del kernel que finalmente crearán un dispositivo tal que en <em>/dev/i2c-0</em> o <em>/dev/i2c-0</em>. Si instalamos el paquete <em>i2c-tools</em> podremos detectar el <em>display</em> en el bus I2C, en la captura de pantalla en la dirección 27 que hay que usar al construir la instancia del controlador del <em>display</em>. Estos cambios en la configuración de inicio requieren reiniciar la Raspberry Pi. En un sistema con la distribución <a href="https://archlinuxarm.org/">Arch Linux ARM</a> los cambios son los siguientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl"># /boot/config.txt&#10;</span></span><span class="line"><span class="cl">device_tree_param=i2c_arm=on&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"># sudo vim /boot/cmdline.txt&#10;</span></span><span class="line"><span class="cl">bcm2708.vc_i2c_override=1&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ sudo systemctl reboot&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ sudo modprobe i2c-bcm2708&#10;</span></span><span class="line"><span class="cl">$ sudo modprobe i2c-dev&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ sudo pacman -S i2c-tools&#10;</span></span><span class="line"><span class="cl">$ sudo i2cdetect -y 0</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>configuration.txt</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/i2cdetect_huf6262b8283cadf398a1aab0f9279ada0_22811_2560x1440_fit_box_3.png" data-gallery="" title="Detección del display 1602 en el bus I2C"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/i2cdetect_huf6262b8283cadf398a1aab0f9279ada0_22811_300x200_fit_box_3.png" width="300" height="187" alt="Detección del display 1602 en el bus I2C" title="Detección del display 1602 en el bus I2C"  class="lozad "></a></p>
<figcaption>Detección del display 1602 en el bus I2C</figcaption>
</figure>
</div>
<p>Según la <a href="https://www.sparkfun.com/datasheets/LCD/HD44780.pdf">especificación del <em>display</em> 1602</a> este componente soporta varios comandos para controlarlo, algunos son para limpiar el texto, cambiar la dirección de escritura, añadir caracteres personalizados y emitir texto en la línea o posición del <em>display</em> que queramos. No es simple el controlar el <em>display</em> a bajo nivel ya que hay que trabajar en momentos con binario y usar bytes, por ello para el ejemplo usaré la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> que ya trae una implementación de controlador con funciones de alto nivel <em>I2CLcd</em> que en versiones más recientes de la librería ha sido renombrada a <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html">HD44780Lcd</a> mucho más cómoda que enviar <em>bytes</em> a bajo nivel al bus I2C, el <a href="https://github.com/mattjlewis/diozero/blob/master/diozero-core/src/main/java/com/diozero/HD44780Lcd.java">código fuente de la clase HD44780Lcd</a> está disponible y podemos verlo si hay curiosidad.</p>
<p>En mi caso con la Raspberry Pi 1 he tenido que utilizar la versión 0.9 de la librería diozero porque la 0.8 me generaba un <em>stacktrace</em> de una excepción <em>java.lang.UnsupportedOperationException</em>. Obtener esta versión de la librería como aún era de desarrollo y no estaba publicada en <a href="https://search.maven.org/">Maven Central</a> la he descargado de un <a href="https://drive.google.com/drive/u/0/folders/0B2Kd_bs3CEYaZ3NiRkd4OXhYd3c">google drive que ha creado el autor</a> y usado en <a href="https://gradle.org/">Gradle</a> como una dependencia del sistema de ficheros. Como librería subyacente de diozero para controlar los <em>pines</em> GPIO he usado <a href="http://abyz.co.uk/rpi/pigpio/">pigpio</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Caused by: java.lang.UnsupportedOperationException&#10;</span></span><span class="line"><span class="cl">	at java.util.AbstractList.add(AbstractList.java:148)&#10;</span></span><span class="line"><span class="cl">	at java.util.AbstractList.add(AbstractList.java:108)&#10;</span></span><span class="line"><span class="cl">	at com.diozero.internal.board.raspberrypi.RaspberryPiBoardInfoProvider$PiBRev1BoardInfo.&lt;clinit&gt;(RaspberryPiBoardInfoProvider.java:281)&#10;</span></span><span class="line"><span class="cl">	... 14 more</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>java.lang.UnsupportedOperationException</span>
    </div>
</div>
<p>En el ejemplo mostraré un texto en cada una de las lineas del <em>display</em> y usaré una de las funciones del para mostrar caracteres personalizados con los que es posible crear <em>emojis</em> o caracteres nuevos. El controlador de diozero ya contiene una buena colección de caracteres personalizados que definen el patrón de 5x8 puntos que siguen, los nombres de estos caracteres personalizados están en la clase interna <em>Characters</em> de <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html">HD44780Lcd</a> aunque también podemos definir nuevos. El ejemplo es el siguiente donde se muestra el uso de los métodos <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setText-int-java.lang.String-">setText</a> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-">setCharacter</a>, también el constructor donde hay que indicar la dirección asignada al dispositivo en el bus I2C que siendo la 27 corresponde con el valor definido en una constante. Pero también hay otros métodos como <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#clear--">clear</a>, <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOff--">cursorOff</a> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOn--">cursorOn</a> para apagar y encender el cursor, <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOff--">displayOff</a>
<a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOn--">displayOn</a> para apgar y encender el <em>display</em> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#createChar-int-byte:A-">createChar</a> para crear nuevos caracteres definidos como una <em>array</em> de 8 posiciones donde cada <em>byte</em> indica los pixeles encendidos de cada fila del caracter de 5x8 y con <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-">setCharacter</a> para emitir uno de los 8 posibles que se pueden usar al mismo tiempo. Además de estos también hay otros pocos métodos más relacionados con el cursor.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.I2CLcd</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.api.I2CConstants</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.ByteOrder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lcd</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">I2CLcd</span> <span class="n">lcd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">I2CLcd</span><span class="o">(</span><span class="n">I2CConstants</span><span class="o">.</span><span class="na">BUS_0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">DEFAULT_DEVICE_ADDRESS</span><span class="o">,</span> <span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;heart&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;smilie&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;space_invader&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="mi">13</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="mi">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="mi">14</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="mi">1</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="mi">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span> <span class="n">messager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&#34; powered by Java&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">)).</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd HH:mm&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">messager</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">messager</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Lcd.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/diozero-core-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/diozero-provider-pigpio-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/pigpioj-java-1.0.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/commons-math3-3.6.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/tinylog-1.1.jar&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">copyDependencies</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">into</span> <span class="s2">&#34;$buildDir/libs&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">runtime</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">jar</span> <span class="o">{</span> <span class="n">dependsOn</span> <span class="n">copyDependencies</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">upload</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;jar&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;rsync&#39;</span><span class="o">,</span> <span class="s1">&#39;-arPL&#39;</span><span class="o">,</span> <span class="s1">&#39;--delete&#39;</span><span class="o">,</span> <span class="s1">&#39;-e&#39;</span><span class="o">,</span> <span class="s1">&#39;ssh&#39;</span><span class="o">,</span> <span class="s1">&#39;build/libs/&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi@192.168.1.101:/home/raspberrypi/scripts/javaraspberrypi/&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">executeLcd</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;upload&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;ansible&#39;</span><span class="o">,</span> <span class="s1">&#39;-i&#39;</span><span class="o">,</span> <span class="s1">&#39;hosts&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi&#39;</span><span class="o">,</span> <span class="s1">&#39;--sudo&#39;</span><span class="o">,</span> <span class="s1">&#39;--ask-sudo-pass&#39;</span><span class="o">,</span> <span class="s1">&#39;-m&#39;</span><span class="o">,</span> <span class="s1">&#39;command&#39;</span><span class="o">,</span> <span class="s1">&#39;-a&#39;</span><span class="o">,</span> <span class="s1">&#39;chdir=/home/raspberrypi/scripts/javaraspberrypi java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Lcd&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">standardInput</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Lcd&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew executeLcd&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/mensaje-lcd-1602_hu62a298306b4eecc0b9f527b7686a5a47_205348_2560x1440_fit_q90_box.jpg" data-gallery="" title="Mensaje en LCD 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/mensaje-lcd-1602_hu62a298306b4eecc0b9f527b7686a5a47_205348_300x200_fit_q90_box.jpg" width="300" height="140" alt="Mensaje en LCD 1602" title="Mensaje en LCD 1602"  class="lozad "></a></p>
<figcaption>Mensaje en LCD 1602</figcaption>
</figure>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/V6msjQNDPuU" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>Pudiendo mostrar mensajes en <em>display</em> es posible mostrar cualquier información que un programa sea capaz de capturar como temperatura y humedad del correspondiente sensor en el mismo <em>kit</em>, estado de un pulsador, espacio disponible en el disco del sistema, y memoria libre, <em>uptime</em> del sistema, fecha y hora, &hellip; cualquier cosa que se nos ocurra.</p>
<p>El ejemplo parece simple, y el programa Java lo es, pero requiere conocer varias cosas que en internet está dispersas como activar el bus I2C o conocer la librería diozero para controlar el <em>display</em> que simplifica enormemente el código y nos evita comunicarnos a más bajo nivel con el <em>display</em>, realizar las conexiones eléctricas también requiere algo de conocimiento. Averiguar todo esto me costó una buena cantidad de tiempo.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeLcd</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/</id>
        <title>Ejemplo encender y apagar diodo LED con la Raspberry Pi en Java</title>
        <updated>2017-03-12T00:15:00+01:00</updated>
        <published>2017-03-11T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El primer ejemplo que haré de un programa Java que usa los <em>pines</em> GPIO para realizar algo con el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de inicialización a la electrónica con la Raspberry Pi</a> consiste en un pequeño programa Java que hace parpadear un diodo LED. La librería <a href="http://rtd.diozero.com/en/latest/">Diozero</a> ofrece a los programas Java el acceso a los <em>pines</em> GPIO de la diferentes versiones de la Raspberry Pi desde la 1 (rev 1 y rev 2) pasando por los modelos B+, 2 y 3. Otra librería que se puede usar con el lenguaje de programación Java es <a href="https://pi4j.com/">Pi4J</a> aunque personalmente Diozero me ha gustado más por ser de más alto nivel.</p>
<p>Algunas de las características que ofrece la librería Diozero son:</p>
<ul>
<li>Soporta dispositivos GPIO / I2C / SPI (LEDs, botones, sensores, motores, pantallas, etc).</li>
<li>Soporta todos los modelos de las placas Raspberry Pi, Odroid C2, BeagleBone Black, C.H.I.P y Asus Tinker.</li>
<li>Usa caracterśiticas de Java como <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">gestión automática de recursos</a>, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">expresiones lambda</a> y <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">referencias a métodos</a> que simplifican el desarrollo y mejoran la legibilidad.</li>
<li><a href="http://rtd.diozero.com/en/latest/#devices">Lista de deipositivos</a>.</li>
<li>Soporta varios proveedores para el acceso al los dispositivos con <a href="http://rtd.diozero.com/en/latest/#performance">diferentes grados de rendimiento</a>.</li>
</ul>
<p>Una de las primeras cosas a conocer es como se numeran los <em>pines</em> en la Raspberry Pi ya que hay varias nomenclaturas (<em>header</em>, wiringPi y Broadcom) y que nomenclatura utiliza la librería Diozero. También deberemos tener en cuenta el modelo de la Raspberry Pi que poseamos ya que según el modelo hay pequeñas diferencias en algunos <em>pines</em>. Además si usamos una placa de extensión para pruebas sin soldadura como la <a href="http://wiringpi.com/">wiringPi</a> deberemos identificarlos por su nombre. Yo que poseo una de las primeras Raspberry Pi (la 1, rev1) el correspondiente su <a href="https://www.raspberrypi.org/documentation/usage/gpio/">esquema de <em>pines</em> Raspberry Pi 1 (rev. 1)</a> es el del enlace. En ese esquema se define que el <em>pin</em> número 12 según el conteo del <em>header</em> corresponde a GPIO 18 según la nomenclatura Broadcom y la librería Diozero y al GPIO 1 en la librería Pi4J y en la placa de extensión wiringPi.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_300x200_fit_q90_box.jpg" width="268" height="200" alt="Raspberry Pi 1 B" title="Raspberry Pi 1 B"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_300x200_fit_q90_box.jpg" width="287" height="200" alt="Raspberry Pi 3 B" title="Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Placas modelos Raspberry Pi 1 B y 3 B</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/breadboard-cableado_hu4408ad1d84b4f4d48570a363c8652fed_871766_2560x1440_fit_q90_box.jpg" data-gallery="" title="Breadboard y placa extensión GPIO wiringPi de 26 pines"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/breadboard-cableado_hu4408ad1d84b4f4d48570a363c8652fed_871766_300x200_fit_q90_box.jpg" width="267" height="200" alt="Breadboard y placa extensión GPIO wiringPi de 26 pines" title="Breadboard y placa extensión GPIO wiringPi de 26 pines"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/gpio-extension-40-pines-board_hua16e258eafc6d06cef89d52014497ddd_604238_2560x1440_fit_q90_box.jpg" data-gallery="" title="Placa extensión GPIO de 40 pines"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/gpio-extension-40-pines-board_hua16e258eafc6d06cef89d52014497ddd_604238_300x200_fit_q90_box.jpg" width="150" height="200" alt="Placa extensión GPIO de 40 pines" title="Placa extensión GPIO de 40 pines"  class="lozad "></a></p>
<figcaption>Breadboard y placa extesión GPIO wiringPi de 26 _pines_ y 40 pines</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/esquema-cableado_hu198f1be709c561ea99bf0746642b0382_216071_2560x1440_fit_box_3.png" data-gallery="" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/esquema-cableado_hu198f1be709c561ea99bf0746642b0382_216071_300x200_fit_box_3.png" width="300" height="129" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Esquema del cableado</figcaption>
</figure>
</div>
<p>Como uso la placa de extensión wiringPi para conectar los <em>pines</em> de la Raspberry Pi a otra placa para hacer pruebas sin soldadura también conocidas como <em>breadboard</em>  resultará que en el programa Java al usar Diozero uso la nomenclatura Broadcom para identificar los <em>pines</em> pero al conectar los cables en la placa de pruebas uso la nomenclatura de wiringPi.</p>
<p>Para el ejemplo utilizaré la placa de extensión sin soldadura, una resistencia de 200 ohmios (dadas sus bandas de colores rojo, negro, marrón y dorado) y un diodo LED además de un par de cables macho-macho para realizar las conexiones electrónicas entre el GPIO 18 (según la nomenclatura de la librería Diozero y Broadcom, 12 según la nomenclatura del <em>header</em> y 1 según la de wiringPi) y la resistencia además de entre el diodo y la línea de tierra. Los diodos LED poseen una orientación y hay que conectar la resistencia con el polo positivo del diodo LED, el polo positivo del diodo LED identifica porque es la patita larga y el negativo con tierra es la patita corta. Si realizamos la conexión al revés solo pasará que el diodo no se enciende pero no lo estropeará, la resistencia si es necesaria para no hacer que pase por el diodo una intensidad que lo estropee como se explica en
<a href="http://www.educachip.com/resistencia-led/">¿Qué resistencia ooner a un LED?</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/diodo-resistencia_hub20135d37a090410847a8b3a8f4a3210_619557_2560x1440_fit_q90_box.jpg" data-gallery="" title="Diodo blanco y resistencia de 200 ohmios"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/diodo-resistencia_hub20135d37a090410847a8b3a8f4a3210_619557_300x200_fit_q90_box.jpg" width="182" height="200" alt="Diodo blanco y resistencia de 200 ohmios" title="Diodo blanco y resistencia de 200 ohmios"  class="lozad "></a></p>
<figcaption>Diodo blanco y resistencia de 200 ohmios</figcaption>
</figure>
</div>
<p>Las resistencias poseen cuatro bandas de colores que indican el valor en ohmios de esa resistencia, la tabla de colores es el siguiente:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_2560x1440_fit_q90_box.jpg" data-gallery="" title="Código de colores de las resistencias"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_300x200_fit_q90_box.jpg" width="237" height="200" alt="Código de colores de las resistencias" title="Código de colores de las resistencias"  class="lozad "></a></p>
<figcaption>Código de colores de las resistencias</figcaption>
</figure>
</div>
<p>El programa Java para hacer parpadear el diodo LED con la librería Diozero con el proveedor <a href="http://abyz.co.uk/rpi/pigpio/">pigpio</a>. El ejemplo consiste en activar y apagar el <em>pin</em> sucesivamente en un bucle y usar el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-">Thread.sleep</a> para que pase unos segundos entre uno y otro y nos de tiempo a ver el encendido y apagado. El nada complejo programa Java para controlar el diodo y un vídeo de su funcionamiento están a continuación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PinBlink</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="mi">18</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PinBlink.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew upload&#10;</span></span><span class="line"><span class="cl">$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.PinBlink&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew executePinBlink&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/NX5tBxWuzFA" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>En un artículo anterior comento <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/">como disponer de un entorno para desarrollar, desplegar las librerías <em>jar</em> en la Raspberry Pi</a> y como ejecutar los ejemplos desde la línea de comandos usando una combinación de herramientas de <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="https://rsync.samba.org/">rsync</a> y <a href="https://www.ansible.com/">Ansible</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executePinBlink</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>
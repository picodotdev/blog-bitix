<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <updated>2022-09-08T11:00:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/05/plantillas-con-etiquetas-no-balanceadas-en-apache-tapestry/</id>
        <title>Plantillas con etiquetas no balanceadas en Apache Tapestry</title>
        <updated>2018-05-01T10:30:00+02:00</updated>
        <published>2018-05-01T10:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/05/plantillas-con-etiquetas-no-balanceadas-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Apache Tapestry es uno de los mejores <em>frameworks</em> web para Java que he usado, sin embargo, también tiene algún incordio o curiosidad. Una de ellas es que las plantillas han de ser XML bien formado y en este caso que comento en el que necesitaríamos una plantilla con etiquetas desbalanceadas nos obliga a buscar una solución, esta es la que uso.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Las plantillas en <a href="https://tapestry.apache.org/">Apache Tapestry</a> son XHTML, esto quiere decir que al ser <a href="https://es.wikipedia.org/wiki/Validaci%C3%B3n_XML#Documento_Bien_Formado">archivos xml han de estar bien formados</a> con sus etiquetas bien balanceadas y anidadas. Esto tiene la ventaja de que Tapestry nos avisará cuando se intente generar código HTML mal formado con el contenido de plantilla, una especie de compilación que si no es correcta no pasará desapercibida como en otros <em>frameworks</em> y que puede generar otro tipo de errores. Sin embargo, también tiene una desventaja y es que si necesitamos generar una etiqueta de inicio dentro de un componente <em>if</em> la plantilla no será válida.</p>
<p>Supongamos que queremos generar un contenido a tres columnas de una serie de elementos, en cada tercer elemento de la fila tendremos que cerrar la fila anterior y abrir una nueva. El ejemplo de lo que no se puede hacer es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">t:loop</span> <span class="na">source</span><span class="o">=</span><span class="s">&#34;elements&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;element&#34;</span> <span class="na">index</span><span class="o">=</span><span class="s">&#34;i&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;open&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;row&#34;</span><span class="p">&gt;&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;col-xs-12 col-md-4&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;close&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">t:loop</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>template-1.tml</span>
    </div>
</div>
<p>En este ejemplo las etiquetas <em>div</em> de apertura y cierre hacen que el XML de la plantilla no esté bien balanceado. No se si habrá otra forma mejor pero esta es el rodeo que uso para tener una plantilla bien balanceada y generar el contenido HTML necesario. En el código Java del componente creo un método que devuelve un mapa de trozos de HTML que no podría incluir en la propia plantilla, cada trozo de HTML tiene una clave asociada por la que identificarlo, en este caso <em>open</em> y <em>close</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Component</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">   <span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isOpen</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isClose</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">1</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">isLast</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isLast</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">elements</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">element</span><span class="o">)</span> <span class="o">==</span> <span class="n">elements</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Cached</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Map</span> <span class="nf">getTags</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;open&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;div class=\&#34;row\&#34;&gt;&lt;div class=\&#34;col-xs-12 col-md-4\&#34;&gt;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;close&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;/div&gt;&lt;/div&gt;&#34;</span><span class="o">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">m</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Component.java</span>
    </div>
</div>
<p>Usando estos métodos en la plantilla el código de la plantilla <em>tml</em> ya bien formado quedaría de la siguiente manera, usando el componente <a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/OutputRaw.html">OutputRaw</a> se emite el trozo HTML de apertura o cierre:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">t:loop</span> <span class="na">source</span><span class="o">=</span><span class="s">&#34;elements&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;element&#34;</span> <span class="na">index</span><span class="o">=</span><span class="s">&#34;i&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;open&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;tags.get(&#39;open&#39;)&#34;</span><span class="p">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;close&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;tags.get(&#39;close&#39;)&#34;</span><span class="p">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">t:loop</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>template-2.tml</span>
    </div>
</div>
<p>Esta pequeña «ñapa» que no es muy habitual en las plantillas pero que en algún caso puede ser necesario emplear es una forma de hacer las plantillas <em>tml</em> bien formadas en circunstancias donde incluyéndolo en la plantilla no lo sería.</p>
<p>Prefiero que Tapestry me valide que el XML de la plantilla esté bien formado evitando que se pudiera generar HTML con etiquetas no balanceadas y me obligue a hacer este rodeo que la posibilidad de generar HTML con etiquetas mal balanceadas que los navegadores aceptan pero que en algún caso podría provocar una desmaquetación, aunque en los casos que se aplique esta solución hay que tener especial cuidado ya que como no se realiza ninguna validación al emitir etiquetas de forma «cruda» el HTML generado podría estar mal balanceado.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/</id>
        <title>Personalizar el prompt del sistema del intérprete de comandos Bash</title>
        <updated>2018-04-29T21:30:00+02:00</updated>
        <published>2018-04-29T10:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>El <em>prompt</em> de la terminal es el símbolo del sistema que precede al comando que introducimos en la terminal y por defecto indica el directorio de trabajo que utilizarán los comandos y el directorio que utilizarán las rutas relativas. El <em>prompt</em> del intérprete de comandos <em>Bash</em> se puede personalizar para por ejemplo modificar el color de su texto y la información que incluye con las preferencias del usuario.</p>
<p>El <em>prompt</em> se configura con la variable de entorno <em>PS1</em> que en <em>Bash</em> está en el directorio personal definido en el archivo <em>.bashrc</em>. Los colores se especifican con una secuencia de caracteres y números que forman códigos de escape que son interpretados de forma especial, estas secuencias están mezclados con las secuencias de la información a mostrar. Como conocer las secuencias de caracteres con los códigos de escape ANSI para los colores y letras para la información es complicado de escribir o conocer al detalle en la web <a href="https://www.kirsle.net/wizards/ps1.html">Bash $PS1 Generator</a> hay un asistente que facilita el crear un <em>prompt</em> a nuestro gusto de forma sencilla y correcta.</p>
<p>El siguiente es el que utilizo en mi sistema con colores, el nombre del usuario, el nombre sistema y el directorio de trabajo actual.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-personalizado_hu9d8ea0e92ec202a66f2573bf5c6472ac_8224_2560x1440_fit_box_3.png" data-gallery="" title="Prompt de la terminal personalizado"><img src="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-personalizado_hu9d8ea0e92ec202a66f2573bf5c6472ac_8224_300x200_fit_box_3.png" width="300" height="161" alt="Prompt de la terminal personalizado" title="Prompt de la terminal personalizado"  class="lozad "></a></p>
<figcaption>Prompt de la terminal personalizado</figcaption>
</figure>
</div>
<p>Según se edita el <em>prompt</em> el asistente previsualiza como queda en la sección <em>Preview</em>, una vez que el <em>prompt</em> es el que deseamos en la sección <em>Result</em> el asistente ofrece el contenido de la variable de entorno <em>PS1</em> que hay que añadir o cambiar en el archivo <em>~/.bashrc</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">#&#10;</span></span><span class="line"><span class="cl"># ~/.bashrc&#10;</span></span><span class="line"><span class="cl">#&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"># If not running interactively, don&#39;t do anything&#10;</span></span><span class="line"><span class="cl">[[ $- != *i* ]] &amp;&amp; return&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">alias ls=&#39;ls --color=auto&#39;&#10;</span></span><span class="line"><span class="cl">#PS1=&#39;[\u@\h \W$ &#39;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">#&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWDIRTYSTATE=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWSTASHSTATE=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWUNTRACKEDFILES=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWUPSTREAM=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWCOLORHINTS=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">source ~/.git-prompt.sh&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">PS1=&#39;[\[\033[01;34m\]\u\[\033[00m\]@\[\033[01;35m\]\h\[\033[00m\] \W]\$ &#39;&#10;</span></span><span class="line"><span class="cl">PROMPT_COMMAND=&#39;__git_ps1 &#34;[\[\033[01;34m\]\u\[\033[00m\]@\[\033[01;35m\]\h\[\033[00m\] \W&#34; &#34;]\$ &#34;&#39;&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>bashrc</span>
    </div>
</div>
<p>Si quieres mostrar alguna información que sea el resultado de algún comando también se puede añadir al <em>prompt</em>. Por ejemplo, supón que se desea añadir la hora del sistema al <em>prompt</em> útil si se quiere a modo de registro para conocer posteriormente a que hora se lanzó un comando, la información de la hora entre otras posibles cosas relacionadas con la fecha la devuelve el comando <em>date</em>. El siguiente <em>script</em> de <em>Bash</em> usando el comando <em>date</em> proporciona la información de la hora a añadir en este caso.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ date +%H:%M&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>date.sh</span>
    </div>
</div>
<p>Ahora hay que incluir esta información en el <em>prompt</em> de la siguiente forma.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">PROMPT_COMMAND=&#39;__git_ps1 &#34;($(date +%H:%M))[\[\033[01;34m\]\u\[\033[00m\]@\[\033[01;35m\]\h\[\033[00m\] \W&#34; &#34;]\$ &#34;&#39;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>bashrc-date</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-date_hud4a1d03f3ab4a9cb27abe1f1606be98d_8996_2560x1440_fit_box_3.png" data-gallery="" title="Prompt de la terminal personalizado con el resultado de un comando"><img src="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-date_hud4a1d03f3ab4a9cb27abe1f1606be98d_8996_300x200_fit_box_3.png" width="300" height="161" alt="Prompt de la terminal personalizado con el resultado de un comando" title="Prompt de la terminal personalizado con el resultado de un comando"  class="lozad "></a></p>
<figcaption>Prompt de la terminal personalizado con el resultado de un comando</figcaption>
</figure>
</div>
<p>Otro caso habitual es añadir la rama de git del directorio actual de trabajo y si esta tiene cambios como comento en <a href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/">Prompt de la terminal personalizado en carpetas de git con el intérprete Bash</a>. El <em>script</em> necesario que proporciona <a href="https://git-scm.com/">Git</a> es más complejo que el caso anterior pero con la misma finalidad, el <em>script</em> está en <a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">git-prompt.sh</a> y requiere modificar la variable de entorno <em>PS1</em> o bien <em>PROMPT_COMMAND</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_2560x1440_fit_box_3.png" data-gallery="" title="Prompt de la terminal por defecto"><img src="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_300x200_fit_box_3.png" width="300" height="191" alt="Prompt de la terminal por defecto" title="Prompt de la terminal por defecto"  class="lozad "></a></p>
<figcaption>Prompt de la terminal personalizado en carpeta de git</figcaption>
</figure>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://stackoverflow.com/questions/9200862/short-date-in-bash-ps1-prompt">Short date in bash PS1 prompt</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/la-clase-optional-de-java-para-evitar-la-excepcion-nullpointerexception/</id>
        <title>La clase Optional de Java para evitar la excepción NullPointerException</title>
        <updated>2018-04-28T00:00:00+02:00</updated>
        <published>2018-04-28T00:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/04/la-clase-optional-de-java-para-evitar-la-excepcion-nullpointerexception/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con la clase <em>Optional</em> añadida en el JDK en la versión 8 del lenguaje Java se puede evitar una de las excepciones más comunes que se produce cuando se hace uso de una referencia nula a un objeto.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Una de las excepciones que más se producen en un programa hecho con el lenguaje Java es la conocida <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/NullPointerException.html">NullPointerException</a> que ocurre cuando se hace uso de una variable que referencia a un objeto pero que el contenido de la variable es <em>null</em>, sin valor o sin contener una referencia a un objeto de modo que la llamada al método no es posible. La excepción <em>NullPointerException</em> extiende de <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/RuntimeException.html">RuntimeException</a> por lo que es una <em>unchecked exception</em> y por ello no es necesario capturarla o lanzarla, cuando se produce hay un error en el programa.</p>
<p>Entre las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">novedades que Java 8 incluyó en el lenguaje y JDK</a> está la inclusión de la clase <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html">Optional</a> con la que haciendo uso de ella se pueden evitar los <em>NullPointerException</em>. Un objeto de tipo <em>Optional</em> contiene o no una referencia a otro tipo de objeto. Por ejemplo, una variable de tipo <em>Optional&lt;String&gt;</em> contiene una referencia a un objeto <em>Optional</em> que a su vez contiene o no una referencia a una cadena <em>String</em>. El uso de la variable <em>Optional</em> no producirá un <em>NullPointerException</em> y con sus métodos es posible saber si contiene o no una referencia al tipo usado en el genérico. Con el método <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#isPresent%28%29">isPresent()</a> es posible saber si el <em>Optional</em> contiene una referencia, con <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#orElse%28T%29">orElse()</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#orElseGet%28java.util.function.Supplier%29">orElseGet()</a> se obtiene la referencia que indiquemos en caso de que no tenga una referencia y con los métodos estáticos a modo de constructores <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#of%28T%29">of()</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#ofNullable%28T%29">ofNullable()</a> se obtiene respectivamente una instancia de <em>Optional</em> con la referencia indicada que no puede ser nula o un <em>Optional</em> que podría contener una referencia nula.</p>
<p>Usar un objeto <em>Optional</em> advierte al programador de que la referencia que contiene puede ser nula y usada correctamente evita los <em>NullPointerException</em> aunque usarla indiscriminadamente hace del código más incómodo de escribir y leer, en variables locales es prescindible su uso pero útil en algunos valores de retorno o parámetros de métodos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ java -version&#10;</span></span><span class="line"><span class="cl">java version <span class="s2">&#34;10.0.1&#34;</span> 2018-04-17&#10;</span></span><span class="line"><span class="cl">Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment 18.3 <span class="o">(</span>build 10.0.1+10<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM 18.3 <span class="o">(</span>build 10.0.1+10, mixed mode<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ jshell&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>  Welcome to JShell -- Version 10.0.1&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>  For an introduction type: /help intro&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">jshell&gt; String <span class="nv">string</span> <span class="o">=</span> null<span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">string</span> <span class="o">==</span>&gt; null&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">jshell&gt; System.out.println<span class="o">(</span>string.toLowerCase<span class="o">())</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>  java.lang.NullPointerException thrown&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at <span class="o">(</span><span class="c1">#2:1)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">// Optional&#10;</span></span><span class="line"><span class="cl">jshell&gt; Optional&lt;String&gt; <span class="nv">optional</span> <span class="o">=</span> Optional.ofNullable<span class="o">(</span>string<span class="o">)</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">optional</span> <span class="o">==</span>&gt; Optional.empty&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">jshell&gt; <span class="k">if</span> <span class="o">(</span>optional.isPresent<span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">   ...&gt;   System.out.println<span class="o">(</span>optional.get<span class="o">()</span>.toLowerCase<span class="o">())</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">   ...&gt; <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">jshell&gt; System.out.println<span class="o">(</span>optional.orElse<span class="o">(</span><span class="s2">&#34;null&#34;</span><span class="o">)</span>.toLowerCase<span class="o">())</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">null</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>jshell.sh</span>
    </div>
</div>
<p>Hay algunos métodos más en la clase <em>Optional</em> con algunas funcionalidades adicionales que hace uso de las nuevas capacidades funcionales del lenguaje como convertir un <em>Optional</em> a un <a href="https://docs.oracle.com/javase/10/docs/api/java/util/stream/Stream.html">Stream</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-para-gestionar-errores-con-java/">Las excepciones para gestionar errores en Java</a></li>
<li><a href="https://dzone.com/articles/one-dollar-solution-to-avoid-null-pointer-exceptio">The $1 Solution to Avoid the Null Pointer Exception</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/la-sentencia-try-with-resources-de-java/</id>
        <title>La sentencia try-with-resources de Java</title>
        <updated>2018-04-21T14:30:00+02:00</updated>
        <published>2018-04-21T14:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/04/la-sentencia-try-with-resources-de-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Una de las novedades que incorporó Java 7 es la sentencia <em>try-with-resources</em> con el objetivo de cerrar los recursos de forma automática en la sentencia <em>try-catch-finally</em> y hacer más simple el código. Aquellas variables cuyas clases implementan la interfaz <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/AutoCloseable.html">AutoCloseable</a> pueden declararse en el bloque de inicialización de la sentencia <em>try-with-resources</em> y sus métodos <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/AutoCloseable.html#close%28%29">close()</a> serán llamados después del bloque <em>finally</em> como si su código estuviese de forma explícita.</p>
<p>Un ejemplo de código que lee una línea de un fichero usando la sentencia <em>try-with-resources</em> es la siguiente de Java 7. Como se observa no es necesario llamar de forma explícita al método <em>close</em> para liberar los recursos de la instancia de la clase <a href="https://docs.oracle.com/javase/10/docs/api/java/io/BufferedReader.html">BufferedReader</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">readFirstLineFromFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Java7.java</span>
    </div>
</div>
<p>Anteriormente a Java 7 esto se debía hacer de la siguiente manera con unas pocas lineas más de código algo menos legibles.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">readFirstLineFromFileWithFinallyBlock</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Java6.java</span>
    </div>
</div>
<p>El código es similar pero no es equivalente. Observesé que require declarar la variable <em>br</em> fuera del ámbito de la sentencia <em>try-catch-finally</em> donde se usa. Además, si se produce una excepción en el bloque <em>try</em> y posteriormente en el bloque <em>finally</em> en Java 6 la excepción del bloque <em>try</em> se enmascara y la que se lanza es la del bloque <em>finally</em>.</p>
<p>La excepción que se lanza en el bloque <em>try</em> y usando el método <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Throwable.html#addSuppressed%28java.lang.Throwable%29">Throwable.addSuppressed()</a> que se añadió en la API en Java 7 junto con el método <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Throwable.html#getSuppressed%28%29">Throwable.getSuppressed()</a> se obtienen las excepciones enmascaradas o suprimidas en la sentencia <em>try-with-resources</em>. El orden de ejecución de los bloques de una sentencia <em>try-with-resources</em> es el indicado en los números emitidos con el método <em>println</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">readLine</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span> <span class="o">:</span> <span class="n">e</span><span class="o">.</span><span class="na">getSuppressed</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">readLine</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;0&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;file.txt&#34;</span><span class="o">)))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">throwException</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">exception</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">throwException</span><span class="o">(</span><span class="n">exception</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;4&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">line</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">throwException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">supressed</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Exception</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Exception</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">supressed</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">addSuppressed</span><span class="o">(</span><span class="n">supressed</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="n">e</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">0&#10;</span></span><span class="line"><span class="cl">1&#10;</span></span><span class="line"><span class="cl">2&#10;</span></span><span class="line"><span class="cl">3&#10;</span></span><span class="line"><span class="cl">java.lang.Exception&#10;</span></span><span class="line"><span class="cl">	at Main.throwException(Main.java:37)&#10;</span></span><span class="line"><span class="cl">	at Main.readLine(Main.java:30)&#10;</span></span><span class="line"><span class="cl">	at Main.main(Main.java:8)&#10;</span></span><span class="line"><span class="cl">	Suppressed: java.lang.Exception&#10;</span></span><span class="line"><span class="cl">		at Main.throwException(Main.java:37)&#10;</span></span><span class="line"><span class="cl">		at Main.readLine(Main.java:23)&#10;</span></span><span class="line"><span class="cl">		... 1 more&#10;</span></span><span class="line"><span class="cl">java.lang.Exception&#10;</span></span><span class="line"><span class="cl">	at Main.throwException(Main.java:37)&#10;</span></span><span class="line"><span class="cl">	at Main.readLine(Main.java:23)&#10;</span></span><span class="line"><span class="cl">	at Main.main(Main.java:8)</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>La mayoría de clases relacionadas con entrada y salida implementan la interfaz <em>AutoCloseable</em> como las relacionadas con el sistema de ficheros y flujos de red como <a href="https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html">InputStream</a>, también las relacionadas con la conexión de base de datos mediante JDBC con <a href="https://docs.oracle.com/javase/10/docs/api/java/sql/Connection.html">Connection</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">The try-with-resources Statement</a></li>
<li><a href="http://tutorials.jenkov.com/java-exception-handling/try-with-resources.html">Try-with-resources in Java 7</a></li>
<li><a href="https://stackoverflow.com/a/27033358">What is a suppressed exception?</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/la-controversia-sobre-las-excepciones-checked-y-unchecked/</id>
        <title>La controversia sobre las excepciones checked y unchecked</title>
        <updated>2018-04-20T17:00:00+02:00</updated>
        <published>2018-04-20T17:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/04/la-controversia-sobre-las-excepciones-checked-y-unchecked/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Las excepciones son una forma de gestionar las condiciones de error que se dan en los programas. En el lenguaje C se utiliza el valor de retorno de la función para determinar la condición de error que se ha producido, el problema es que comprobar el valor de retorno puede ignorarse y la gestión de errores está mezclada con la tarea del programa.</p>
<p>El lenguaje Java utiliza un <a href="https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-para-gestionar-errores-con-java/">mecanismo de excepciones</a>, las excepciones son objetos que se lanzan cuando se produce una condición de error. Todas las excepciones en Java heredan de <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Throwable.html">Throwable</a> subdividiéndose en <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Error.html">Error</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Exception.html">Exception</a>, las primeras son condiciones de error del sistema y las segundas condiciones de error del programa. A su vez las <em>Exception</em> pueden ser <em>checked</em> si heredan de esta y son aquellas que el compilador fuerza a que sean capturadas no pudiendo ignorarse, han de capturarse en una construcción <em>try catch</em> o declarar que el método puede lanzar la excepción no capturada. Las excepciones <em>unchecked</em> heredan de <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/RuntimeException.html">RuntimeException</a> que heredan a su vez de <em>Exception</em> pero tienen la particularidad de que no es necesario capturarlas ni declararlas como que se pueden lanzar debido a que se consideran condiciones de error en la programación como un acceso a un <em>array</em> fuera de rango que produce un <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBounds</a>, el conocido <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/NullPointerException.html">NullPointerException</a> cuando se utiliza una referencia nula, otro es <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/ArithmeticException.html">ArithmeticException</a> que se produce al dividir por 0.</p>
<p>Algunas ventajas de las excepciones son:</p>
<ul>
<li>Separar el código que gestiona los errores del código con el caso principal del programa.</li>
<li>Propagar errores hacia arriba en la pila de llamadas.</li>
<li>Agrupar y diferenciar entre diferentes tipos de errores.</li>
</ul>
<h3 id="los-problemas-de-las-excepciones-_checked_">Los problemas de las excepciones <em>checked</em></h3>
<p>Hay una cierta polémica sobre si las excepciones <em>checked</em> son una buena idea. Entre los motivos que se alegan en contra de su uso están que cambiar la firma de un método añadiendo una nueva excepción como lanzable hace que el código que usase ese método podría ocasionar errores de compilación y que hace necesario el tratarla o declararla en la cadena de métodos hasta que sea tratada. Otro motivo es que a mayor nivel en la jerarquía de llamada en los métodos se necesitarán manejar una lista amplia de excepciones.</p>
<p>En el lado contrario las excepciones se consideran que son buenas porque conocer las condiciones de error o excepción que puede lanzar el método forma parte del contrato del método y es necesario para realizar un correcto manejo de errores. Las excepciones <em>checked</em> pueden parecer un incordio pero son necesarias para hacer un correcto manejo de errores y evitar que el programa falle por no tratar las condiciones de error de las que advertirían. Por otro lado no deberían silenciarse con un bloque <em>catch</em> vacío sin una buena razón. En las excepciones <em>checked</em> el compilador es capaz de advertir si alguna excepción no ha sido capturada o lanzada.</p>
<p>Como regla general las excepciones <em>checked</em> se usan cuando el programa es capaz de recuperarse del error y tratarlo adecuadamente, las <em>unchecked</em> cuando se trata de un error de programación o no se puede hacer nada para recuperarse.</p>
<p>En el siguiente código se observa como capturar, lanzar y declarar excepciones en las firmas de los métodos en Java en una construcción <em>try catch finally</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bank</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">source</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">target</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidAmountException</span><span class="o">,</span> <span class="n">InsufficientFoundsException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">amount</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidAmountException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">getAmount</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">InsufficientFoundsException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">target</span><span class="o">.</span><span class="na">substract</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">source</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Bank.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">brank</span><span class="o">.</span><span class="na">transfer</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">destine</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAmountException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InsufficientFoundsException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Acción finalizada&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>Las excepciones <em>checked</em> presentan los siguientes problemas:</p>
<ul>
<li>Son verbosas: requieren utilizar bloques de sentencias <em>try-catch</em> y declarar en la firma del método la excepción en caso de que las lancen. Al mismo tiempo si hay niveles intermedios de métodos entre el método que la lanza y el que la trata la excepción debe ser declarada en los métodos intermedios.</li>
<li>Promueven malas prácticas: si se intentan manejar en el lugar incorrecto, si se usan bloques de código <em>catch</em> que no hacen nada que las ocultan, si se capturan excepciones generales como <em>Exception</em> en vez de tipos específicos y si se transforman excepciones <em>Exception</em> en <em>RuntimeException</em>.</li>
<li>Incrementan el acoplamiento entre módulos: si se usa un método de una librería que añade una excepción, entonces todo el código que llame a ese método debe ser actualizado para manejar la excepción o relanzarla.</li>
<li>Requieren transformar excepciones entre diferentes niveles de abstracción: por ejemplo la capa de acceso a base de datos puede requerir convertir uan excepción por un problema de red en una excepción de base de datos no disponible. Esto es tedioso pero necesario para evitar exponer detalles de implementación.</li>
<li>No funciona bien con la herencia: si un método se sobreescribe no puede lanzar una excepción si el método sobreescrito no declara que lanza una excepción.</li>
<li>No funcionan bien con las <em>lambdas</em>: en Java las <em>lambdas</em> se implementan usando interfaces con un único método abstracto, ese método debe o declarar la posible excepción, en cuyo caso todo método que lo use debe manejarla, o el cuerpo de la <em>lambda</em> debe capturar la excepción. Ambas opciones incrementan el código necesario para usar las <em>lambdas</em> reduciendo uno de sus beneficios de ser más concisas.</li>
</ul>
<h3 id="la-solución-a-las-excepciones-_checked_-de-otros-lenguajes-posteriores-a-java">La solución a las excepciones <em>checked</em> de otros lenguajes posteriores a Java</h3>
<p>La solución por la que han optado otros lenguajes más modernos que Java como <a href="https://dotnet.microsoft.com/">C#</a> y <a href="https://kotlinlang.org/">Kotlin</a> es considerar a todas las excepciones como <em>unchecked</em>. Dado que en muchos casos el único tratamiento posible de una excepción posible es relanzarla, para manejar las excepciones en muchos casos es suficiente un manejador global de excepciones que las capture. Otro beneficio del manejador global de excepciones es que centraliza en un único punto el tratamiento de las excepciones.</p>
<p>Por el contrario dado que las excepciones <em>unchecked</em> no necesitan declararse en los métodos ni el compilador produce ningún error en caso de que una excepción no se capture o lance al usar un método se desconoce que ese método puede lanzar una excepción. Para mitigar el problema de no conocer si un método lanzan una excepción en Java se pueden usar las anotaciones de Javadoc para declararlas al menos en la documentación. Dado que los IDEs muestran la documentación del Javadoc al usar un método no es necesario inspeccionar el cuerpo de un método para conocer si lanza una excepción.</p>
<p>En el aparatado referencia incluyo unos buenos enlaces que amplían y detallan más apropiadamente la controversia sobre las excepciones <em>checked</em> y <em>unchecked</em>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html">Exceptions tutorial</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html">Unchecked Exceptions — The Controversy</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html">Advantages of Exceptions</a></li>
<li><a href="https://stackoverflow.com/questions/124143/why-are-exceptions-not-checked-in-net#126122">Why are Exceptions not Checked in .NET?</a></li>
<li><a href="http://www.artima.com/intv/handcuffs.html">The Trouble with Checked Exceptions</a></li>
<li><a href="https://stackoverflow.com/questions/58639126/whats-the-idea-behind-kotlin-removing-checked-exceptions">What&rsquo;s the idea behind Kotlin removing checked exceptions?</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/</id>
        <title>Prompt de la terminal personalizado en carpetas de git con el intérprete Bash</title>
        <updated>2018-04-14T00:30:00+02:00</updated>
        <published>2018-04-14T00:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Uno de los sistemas de control de versiones más utilizado es <a href="https://git-scm.com/">Git</a>. <a href="https://es.wikipedia.org/wiki/Bash">Bash</a> es el intérprete de comandos por defecto en la mayoría de distribuciones <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a>. A la hora de trabajar en la terminal y estando como directorio actual en un directorio que está bajo el control de versiones de git bash por defecto no muestra ninguna información del estado de los archivos en su repositorio en el símbolo del sistema o <em>prompt</em>.</p>
<p>El intérprete <a href="https://zsh.sourceforge.net/">Zsh</a> y <a href="https://ohmyz.sh/">Oh-My-Zsh</a> ofrece mediante sus temas soporte para los repositorios de git modificando el símbolo del sistema para mostrar más información acerca del estado. En Bash también es posible añadir soporte para que muestre información como la rama actual en la que se está trabajando, si hay archivos modificados o no añadidos al control de versiones, si hay archivos en el <em>stash</em> y una comparación entre la rama actual y la del origen o <em>upstream</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/terminal_hu6d4cd90f7258a5b4f3fa9ff1cd70710c_8935_2560x1440_fit_box_3.png" data-gallery="" title="Prompt de la terminal por defecto"><img src="https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/terminal_hu6d4cd90f7258a5b4f3fa9ff1cd70710c_8935_300x200_fit_box_3.png" width="300" height="191" alt="Prompt de la terminal por defecto" title="Prompt de la terminal por defecto"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_2560x1440_fit_box_3.png" data-gallery="" title="Prompt de la terminal en carpeta git"><img src="https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_300x200_fit_box_3.png" width="300" height="191" alt="Prompt de la terminal en carpeta git" title="Prompt de la terminal en carpeta git"  class="lozad "></a></p>
<figcaption>Prompt de la terminal por defecto y en carpeta de git</figcaption>
</figure>
</div>
<ul>
<li>* la presencia de este caracter indica que hay cambios en alguno de los archivos bajo el control de versiones.</li>
<li>+ indica que hay archivos añadidos al <em>stash</em></li>
<li><em>=</em> indica que la rama está en el mismo estado que en <em>upstream</em>, en su lugar puede mostrarse el caracter <em>&gt;</em> para indicar que la rama en local está por delante de la rama en remoto o mostrarse <em>&lt;</em> para lo contrario.</li>
</ul>
<p>El <em>script</em> necesario para añadir el soporte a repositorios git en Bash es <a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">git-prompt.sh</a>. Una vez descargado su funcionalidad se personaliza con varias variables de entorno tal y como está documentado en el comentario al inicio de este <em>script</em> que se añaden en el archivo de perfil del usuario de inicio <em>.bashrc</em>. Añadidas unas variables de entorno que empiezan por <em>GIT_PS1</em> y hecho el <em>source</em> del script junto con la utilización de la variable <em>PROMPT_COMMAND</em> en lugar de <em>PS1</em> para posibilitar la información de estado con colores al estar en un directorio git se muestra el <em>prompt</em> del ejemplo anterior.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ wget -O ~/.git-prompt.sh https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>install.sh</span>
    </div>
</div>
<p>Este es el archivo <em>.bashrc</em> completo de la distribución <a href="https://www.archlinux.org/">Arch Linux</a> con el soporte para el <em>script</em> <em>git-prompt.sh</em> y algunas opciones personalizadas.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">#&#10;</span></span><span class="line"><span class="cl"># ~/.bashrc&#10;</span></span><span class="line"><span class="cl">#&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"># If not running interactively, don&#39;t do anything&#10;</span></span><span class="line"><span class="cl">[[ $- != *i* ]] &amp;&amp; return&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">alias ls=&#39;ls --color=auto&#39;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">#&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWDIRTYSTATE=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWSTASHSTATE=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWUNTRACKEDFILES=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWUPSTREAM=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">GIT_PS1_SHOWCOLORHINTS=&#34;true&#34;&#10;</span></span><span class="line"><span class="cl">source ~/.git-prompt.sh&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">PS1=&#39;[\[\033[01;34m\]\u\[\033[00m\]@\[\033[01;35m\]\h\[\033[00m\] \W]\$ &#39;&#10;</span></span><span class="line"><span class="cl">PROMPT_COMMAND=&#39;__git_ps1 &#34;[\[\033[01;34m\]\u\[\033[00m\]@\[\033[01;35m\]\h\[\033[00m\] \W&#34; &#34;]\$ &#34;&#39;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>bashrc</span>
    </div>
</div>
<p>La documentación completa con todas las opciones de personalización están en las primeras líneas de comentario del <em>script</em>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/">Personalizar el prompt del sistema del intérprete de comandos Bash</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/introduccion-a-nio-2-el-sistema-de-entrada-salida-de-java/</id>
        <title>Introducción a NIO.2, el sistema de entrada/salida de Java</title>
        <updated>2018-04-07T14:00:00+02:00</updated>
        <published>2018-04-07T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/04/introduccion-a-nio-2-el-sistema-de-entrada-salida-de-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Una de las tareas más importante que realizan algunas aplicaciones es el manejo de la entrada y salida ya sea al sistema de ficheros o a la red. Desde las versiones iniciales de Java se ha mejorado soporte añadiendo programación asíncrona de E/S, permitir obtener información de atributos propios del sistema de archivos, reconocimiento de enlaces simbólicos y facilitado de algunas operaciones básicas.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En las primeras versiones de Java el sistema de entrada/salida proporcionado en el paquete <a href="https://docs.oracle.com/javase/10/docs/api/java/io/package-summary.html"><em>java.io</em></a> era básico. En la versión 1.4 de Java se añadió un nuevo sistema de entrada/salida llamado NIO para suplir algunas de sus deficiencias que posteriormente en Java 7 se mejoró aún más con NIO.2. Entre las mejoras se incluyen permitir navegación de directorios sencillo, soporte para reconocer enlaces simbólicos, leer atributos de ficheros como permisos e información como última fecha de modificación, soporte de entrada/salida asíncrona y soporte para operaciones básicas sobre ficheros como copiar y mover ficheros.</p>
<p>Las clases principales de esta nueva API para el manejo de rutas, ficheros y operaciones de entrada/salida son las siguientes:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html">Path</a>: es una abstracción sobre una ruta de un sistema de ficheros. No tiene porque existir en el sistema de ficheros pero si si cuando se hacen algunas operaciones como la lectura del fichero que representa. Puede usarse como reemplazo completo de <a href="https://docs.oracle.com/javase/10/docs/api/java/io/File.html">java.io.File</a> pero si fuera necesario con los métodos <a href="https://docs.oracle.com/javase/10/docs/api/java/io/File.html#toPath%28%29">File.toPath()</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#toFile%28%29">Path.toFile()</a> se ofrece compatibilidad entre ambas representaciones.</li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html">Files</a>: es una clase de utilidad con operaciones básicas sobre ficheros.</li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/FileSystems.html">FileSystems</a>: otra clase de utilidad como punto de entrada para obtener referencias a sistemas de archivos.</li>
</ul>
<p>Con la clase <em>Path</em> se pueden hacer operaciones sobre rutas como obtener la ruta absoluta de un <em>Path</em> relativo o el <em>Path</em> relativo de una ruta absoluta, de cuanto elementos se compone la ruta, obtener el <em>Path</em> padre o una parte de una ruta. Otros métodos interesantes son <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#relativize%28java.nio.file.Path%29">relativize()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#normalize%28%29">normalize()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#toAbsolutePath%28%29">toAbsolutePath()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#resolve%28java.nio.file.Path%29">resolve()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#startsWith%28java.nio.file.Path%29">startsWith()</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#endsWith%28java.nio.file.Path%29">endsWith()</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Path&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# info&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Path</span> <span class="n">relative</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Path</span> <span class="n">absolute</span> <span class="o">=</span> <span class="n">relative</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">normalize</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Relative: %s%n&#34;</span><span class="o">,</span> <span class="n">relative</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Absolute: %s%n&#34;</span><span class="o">,</span> <span class="n">absolute</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Name count: %d%n&#34;</span><span class="o">,</span> <span class="n">absolute</span><span class="o">.</span><span class="na">getNameCount</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Parent: %s%n&#34;</span><span class="o">,</span> <span class="n">absolute</span><span class="o">.</span><span class="na">getParent</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Subpath(0, 2): %s%n&#34;</span><span class="o">,</span> <span class="n">absolute</span><span class="o">.</span><span class="na">subpath</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">2</span><span class="o">));</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-1.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl"># info&#10;</span></span><span class="line"><span class="cl">Relative: .&#10;</span></span><span class="line"><span class="cl">Absolute: /home/picodotdev/Software/personal/blog-ejemplos/JavaNIO&#10;</span></span><span class="line"><span class="cl">Name count: 6&#10;</span></span><span class="line"><span class="cl">Parent: /home/picodotdev/Software/personal/blog-ejemplos&#10;</span></span><span class="line"><span class="cl">Subpath(0, 2): home/picodotdev</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>info.out</span>
    </div>
</div>
<p>Utilizando estas clases expondré algunos ejemplos siendo el primero recorrer el listado de archivos o también se podría hacer el listado de forma recursiva de un directorio e imprimir la información de cada archivo como nombre, si es un enlace simbólico, permisos propietario, fecha de última modificación y tamaño utilizando los siguiente métodos similar a lo que hace el comando <em>ls</em> de GNU/Linux:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#walkFileTree%28java.nio.file.Path">Files.walkFileTree()</a></li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#isSymbolicLink%28java.nio.file.Path%29">Files.isSymbolicLink()</a></li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAttributes%28java.nio.file.Path">Files.readAttributes()</a></li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/attribute/PosixFilePermissions.html">PosixFilePermissions</a></li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/FileVisitor.html">FileVisitor</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/SimpleFileVisitor.html">SimpleFileVisitor</a></li>
</ul>
<p>Al igual que es posible leer los permisos también es posible establecerlos con el método <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#setPosixFilePermissions%28java.nio.file.Path">Files.setPosixFilePermissions()</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// ls -la&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# ls -la&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Files</span><span class="o">.</span><span class="na">walk</span><span class="o">(</span><span class="n">relative</span><span class="o">,</span> <span class="n">1</span><span class="o">).</span><span class="na">sorted</span><span class="o">((</span><span class="n">p1</span><span class="o">,</span> <span class="n">p2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">getFileName</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">getFileName</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}).</span><span class="na">forEach</span><span class="o">(</span><span class="n">path</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">toLine</span><span class="o">(</span><span class="n">path</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toLine</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">attributtes</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">readAttributes</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="s">&#34;posix:*&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">PosixFileAttributes</span> <span class="n">posixFileAttributes</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">getFileAttributeView</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">PosixFileAttributeView</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">readAttributes</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="o">(</span><span class="n">posixFileAttributes</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">?</span> <span class="s">&#34;d&#34;</span><span class="o">:</span> <span class="s">&#34;-&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">permissions</span> <span class="o">=</span> <span class="n">PosixFilePermissions</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">posixFileAttributes</span><span class="o">.</span><span class="na">permissions</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">owner</span> <span class="o">=</span> <span class="n">posixFileAttributes</span><span class="o">.</span><span class="na">owner</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">group</span> <span class="o">=</span> <span class="n">posixFileAttributes</span><span class="o">.</span><span class="na">group</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">long</span> <span class="n">size</span> <span class="o">=</span> <span class="n">posixFileAttributes</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ZonedDateTime</span> <span class="n">date</span> <span class="o">=</span> <span class="n">posixFileAttributes</span><span class="o">.</span><span class="na">lastModifiedTime</span><span class="o">().</span><span class="na">toInstant</span><span class="o">().</span><span class="na">atZone</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">lasModified</span> <span class="o">=</span> <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;d MMM HH:mm&#34;</span><span class="o">).</span><span class="na">format</span><span class="o">(</span><span class="n">date</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getFileName</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s%s %16s %10s %5d %12s %s&#34;</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">permissions</span><span class="o">,</span> <span class="n">owner</span><span class="o">,</span> <span class="n">group</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">lasModified</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-2.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">$ ls -la&#10;</span></span><span class="line"><span class="cl">total 40&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  11 picodotdev  110277442   352  7 abr 12:11 .&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  78 picodotdev  110277442  2496  7 abr 10:41 ..&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x   5 picodotdev  110277442   160  7 abr 10:47 .gradle&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x   6 picodotdev  110277442   192  7 abr 12:23 .idea&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x   4 picodotdev  110277442   128  7 abr 10:50 build&#10;</span></span><span class="line"><span class="cl">-rw-r--r--   1 picodotdev  110277442   156  7 abr 10:49 build.gradle&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x   3 picodotdev  110277442&nbsp;&nbsp;&nbsp;&nbsp;96  7 abr 10:42 gradle&#10;</span></span><span class="line"><span class="cl">-rwxr-xr-x   1 picodotdev  110277442  5296  7 abr 10:42 gradlew&#10;</span></span><span class="line"><span class="cl">-rw-r--r--   1 picodotdev  110277442  2260  7 abr 10:42 gradlew.bat&#10;</span></span><span class="line"><span class="cl">-rw-r--r--   1 picodotdev  110277442   354  7 abr 10:42 settings.gradle&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x   4 picodotdev  110277442   128  7 abr 10:48 src&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"># ls -la (with Java)&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  picodotdev  110277442   352  7 abr 12:11 .&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  picodotdev  110277442   160  7 abr 10:47 .gradle&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  picodotdev  110277442   192  7 abr 12:23 .idea&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  picodotdev  110277442   128  7 abr 10:50 build&#10;</span></span><span class="line"><span class="cl">-rw-r--r--  picodotdev  110277442   156  7 abr 10:49 build.gradle&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  picodotdev  110277442&nbsp;&nbsp;&nbsp;&nbsp;96  7 abr 10:42 gradle&#10;</span></span><span class="line"><span class="cl">-rwxr-xr-x  picodotdev  110277442  5296  7 abr 10:42 gradlew&#10;</span></span><span class="line"><span class="cl">-rw-r--r--  picodotdev  110277442  2260  7 abr 10:42 gradlew.bat&#10;</span></span><span class="line"><span class="cl">-rw-r--r--  picodotdev  110277442   354  7 abr 10:42 settings.gradle&#10;</span></span><span class="line"><span class="cl">drwxr-xr-x  picodotdev  110277442   128  7 abr 10:48 src</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ls.out</span>
    </div>
</div>
<p>Las operaciones de crear directorios o archivos, copiar archivos, moverlos y eliminarlos son muy comunes de modo que la clase <em>Files</em> ofrece varios métodos que con una única línea permite hacer estas operaciones de forma sencilla. El siguiente ejemplo crea un archivo, lo copia, lo mueve y finalmente lo elimina.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// File operations&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Path</span> <span class="n">file</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;build.gradle&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Path</span> <span class="n">backup</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;build.gradle.backup&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Path</span> <span class="n">rename</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;build.gradle.backup.1&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">backup</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Files</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">backup</span><span class="o">,</span> <span class="n">rename</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Files</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">rename</span><span class="o">);</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-3.java</span>
    </div>
</div>
<p>Para leer el contenido de archivos la clase <em>Files</em> ofrece los métodos <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newBufferedReader%28java.nio.file.Path%29">newBufferedReader()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newBufferedWriter%28java.nio.file.Path">newBufferedWrite()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newInputStream%28java.nio.file.Path">newInputStream()</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newOutputStream%28java.nio.file.Path">newOutputStream()</a> junto con otros como <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path">readAllLines()</a> y <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAllBytes%28java.nio.file.Path%29">readAllBytes()</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Read&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# build.gradle&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Files</span><span class="o">.</span><span class="na">readAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">).</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">l</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">});</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-4.java</span>
    </div>
</div>
<p>En cuanto a la programación de entrada/salida asíncrona se ofrecen dos paradigmas uno basado en la clase <a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Future.html">Future</a> y otro en funciones de rellamada o <em>callbacks</em>. La programación asíncrona evita bloquear el hilo que ejecuta el código y aprovecha mejor los procesadores multinúcleo con lo que se mejora el rendimiento de las aplicaciones. Para los ficheros se usa la clase <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/channels/AsynchronousFileChannel.html">AsynchronousFileChannel</a> y para flujos de red <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/channels/AsynchronousSocketChannel.html">AsynchronousSocketChannel</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# async with Future&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AsynchronousFileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">AsynchronousFileChannel</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">StandardOpenOption</span><span class="o">.</span><span class="na">READ</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ByteBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="n">100_000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Future</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Integer</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">array</span><span class="o">(),</span> <span class="s">&#34;utf-8&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-5.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# async with callback&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AsynchronousFileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">AsynchronousFileChannel</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">StandardOpenOption</span><span class="o">.</span><span class="na">READ</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ByteBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="n">100_000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">buffer</span><span class="o">,</span> <span class="k">new</span> <span class="n">CompletionHandler</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">ByteBuffer</span><span class="o">&gt;()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">completed</span><span class="o">(</span><span class="n">Integer</span> <span class="n">result</span><span class="o">,</span> <span class="n">ByteBuffer</span> <span class="n">buffer</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">array</span><span class="o">(),</span> <span class="s">&#34;utf-8&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UnsupportedEncodingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">failed</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">exception</span><span class="o">,</span> <span class="n">ByteBuffer</span> <span class="n">attachment</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-6.java</span>
    </div>
</div>
<p>Si se desea profundizar más en NIO y NIO.2 el libro <a href="https://amzn.to/2JsEIao">The Well-Grounded Java Developer</a> dedica un capítulo introductorio en el que me he basado para realizar este artículo, el libro <a href="https://amzn.to/2q7qMdN">Java I/O, NIO and NIO.2</a> está completamente dedicado al nuevo sistema de entrada/salida de Java y el tutorial <a href="https://docs.oracle.com/javase/tutorial/essential/io/index.html">Java Basic I/O</a> también está muy bien como introducción.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617290068&amp;linkId=61507308185711a0af4b5ed5ab70b62b" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484215664&amp;linkId=d748ea086bd02aa68dd0b27945514558" title="Amazon" class="lozad"></iframe>
</div>
<p>En el artículo <a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/">monitorizar archivos con Java</a> muestro como recibir eventos cuando se añade, elimina o modifica algún archivo de los observados usando la clase <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/WatchService.html">WatchService</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaNIO">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://www.javamagazine.mozaicreader.com/JulyAug2016/Twitter">Artículo NIO.2, Java Magazine Jul/Ago 2016</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="blog"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/que-es-y-como-funciona-el-type-erasure-en-java/</id>
        <title>Qué es y cómo funciona el type erasure en Java</title>
        <updated>2018-03-31T10:30:00+02:00</updated>
        <published>2018-03-31T10:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/03/que-es-y-como-funciona-el-type-erasure-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los tipos genéricos en Java se implementaron usando <em>type erasure</em> por simplicidad en la implementación, no incurrir en penalizaciones de rendimiento o memoria y por mantener la compatibilidad con versiones anteriores de Java. Son varios los conceptos que están asociados a la implementación de los tipos genéricos en Java que es recomendable conocer como <em>type erasure</em>  y métodos <em>bridge</em> de este artículo pero también <em>heap pollution</em>, <em>non-reifiable</em>, <em>wildcards</em> y <em>bound type parameters</em>.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En la introducción de los <a href="https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/">tipos genéricos en Java</a> con la versión 1.5 se decidió implementarlo usando <em>type erasure</em> que consiste en que en tiempo de ejecución se pierde la información de los tipos genéricos y para la máquina virtual no son distintos de un tipo no genérico, es un proceso que realiza el compilador. Esto tiene sus ventajas y algunas desventajas pero hay dos buenos motivos por los que en Java se decidió implementar los tipos genéricos usando <em>type erasure</em>.</p>
<p>Un motivo es que los tipos al ser en tiempo de ejecución exactamente iguales que los no genéricos de versiones anteriores se mantiene la compatibilidad hacia atrás tanto a nivel de código como a nivel binario lo que significa en un caso que el código fuente no es necesario que sea modificado y en otro que no es necesario recompilarlo y esto es importante para usar nuevas versiones de Java sin ningún tipo de modificación y para que programas antiguos sigan funcionando. El segundo motivo es que el mismo tipo sirve para todas las posibles instancias del tipo genérico, de forma que es eficiente y no se incurre en ninguna penalización de rendimiento o memoria.</p>
<p>La desventaja del <em>type erasure</em> es que en tiempo de ejecución no se pueden hacer algunas optimizaciones, en computación y uso de memoria. Sin embargo, evaluando las ventajas y desventajas los desarrolladores de Java siempre han dado gran importancia en la compatibilidad hacia atrás y por ello prefirieron implementar los <em>generics</em> usando <em>type erasure</em>.</p>
<p>El proceso de eliminar los tipos de los genéricos se realiza eliminando todos los parámetros de los tipos parametrizados siendo reemplazados con su restricción (<em>bound</em>), con el tipo <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html">Object</a> o con con su restricción, si tiene múltiples restricciones se usa la primera.</p>
<p>En Java dos métodos distintos no pueden tener la misma firma, dado que los <em>generics</em> han sido implementados con <em>type erasure</em> también se ha de cumplir que dos métodos no pueden tener la misma firma una vez aplicado el <em>erasure</em>. Para no perder las validaciones de tipos el compilador inserta los <em>cast</em> necesarios. El código fuente de una clase genérica sería el siguiente, que el compilador transformaría siguiendo las reglas del <em>type erasure</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">T</span> <span class="n">data</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="n">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntegerNode</span> <span class="kd">extends</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">IntegerNode</span><span class="o">(</span><span class="n">Integer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span> <span class="kd">super</span><span class="o">(</span><span class="n">data</span><span class="o">);</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="n">Integer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">super</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Generic.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Object</span> <span class="n">data</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">Object</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="n">Object</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntegerNode</span> <span class="kd">extends</span> <span class="n">Node</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">IntegerNode</span><span class="o">(</span><span class="n">Integer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span> <span class="kd">super</span><span class="o">(</span><span class="n">data</span><span class="o">);</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Método bridge creado por el compilador&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// public void setData(Object data) {&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//&nbsp;&nbsp;&nbsp;&nbsp;this.setData((Integer) data);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// }&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="n">Integer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">super</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Erased.java</span>
    </div>
</div>
<p>Al mismo tiempo que el compilador inserta los <em>cast</em> necesarios para mantener la validación de tipos inserta métodos <em>bridge</em> para mantener el polimorfismo en las clases que extienden de tipos genéricos. Si se extiende la clase <em>Node</em> anterior y se aplica <em>type erasure</em> la firma del método <em>setData</em> de <em>IntegerNode</em> no coincide con el de la clase <em>Node</em>. Para solventar este problema el compilador inserta un método <em>bridge</em> para el método <em>setData</em> con un parámetro <em>Object</em> que se encarga de hacer de puente y llamar al método <em>setData</em> que recibe un <em>Integer</em> aplicando un <em>cast</em>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/generics/erasure.html">Type Erasure</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/05/que-es-el-concepto-de-heap-pollution-en-java/">Qué es el concepto de Heap Pollution en Java</a></li>
<li><a href="https://www.quora.com/What-are-the-pros-and-cons-of-having-Generics-as-erasure-or-reifiable?share=1">What are the pros and cons of having Generics as erasure or reifiable?</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/la-herramienta-jlink-para-generar-runtimes-de-java-incluyendo-exclusivamente-los-modulos-que-usa-una-aplicacion/</id>
        <title>La herramienta jlink para generar runtimes de Java incluyendo exclusivamente los módulos que usa una aplicación</title>
        <updated>2018-03-24T23:30:00+01:00</updated>
        <published>2018-03-24T23:30:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/03/la-herramienta-jlink-para-generar-runtimes-de-java-incluyendo-exclusivamente-los-modulos-que-usa-una-aplicacion/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En versiones anteriores de Java 9 había un único <em>runtime</em> para ejecutar cualquier aplicación que debía ser instalado previamente para la ejecución de la aplicación. Aunque la aplicación no usase <em>Swing</em> por ser una aplicación web o cosas como <a href="https://es.wikipedia.org/wiki/CORBA">CORBA</a> ya en desuso aún estaban disponibles en el <em>runtime</em> por motivos de no romper la compatibilidad con versiones anteriores.</p>
<p>Esto hacía que las aplicaciones no fuesen lo más eficiente posible y aumenta el tamaño necesario ahora de las imágenes de contenedores como <a href="https://www.docker.com/">Docker</a> estas tuviesen un tamaño mayor del imprescindible, además de hacer que el tiempo de arranque sea algo mayor e incluir clases que aumentan la superficie de ataque ante un fallo de seguridad. Entre las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">novedades de Java 8</a> se añadieron los <a href="https://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html"><em>compact profiles</em></a> que eran subconjuntos más reducidos del <em>runtime</em> pero eran conjuntos prefijados, las aplicaciones debían usar el mínimo que necesitasen si querían usar alguno. La solución de Java 8 fue una solución intermedia, <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/">los módulos de Java 9</a> han sido la solución completa.</p>
<p>Con la incorporación de la modularidad a Java 9 se posibilita generar <em>runtimes</em> con exclusivamente los módulos que necesite la aplicación, si la aplicación solo necesita el módulo <em>java.base</em> por ser muy sencilla se puede generar un <em>runtime</em> con solo este módulo. Los módulos son una mejora conveniente para la tendencia en el desarrollo de aplicaciones en forma de microservicios y ejecución con contenedores. La herramienta que posibilita generar <em>runtimes</em> personalizados con <a href="https://docs.oracle.com/javase/9/tools/jlink.htm">jlink</a> que pueden ser ejecutados sin instalar previamente ningún JDK en el sistema y posibilitando que cada aplicación pueda usar su propio <em>runtime</em>.</p>
<p>Usando como ejemplo el caso de la <a href="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/">aplicación con el cliente de HTTP/2</a> que tiene como dependencias únicamente el módulo <em>jdk.incubator.httpclient</em> de forma explícita y <em>java.base</em> de forma implícita en su definición de módulo la forma de generar un runtime específico para esta aplicación con <em>jlink</em> es la siguiente que utiliza el archivo con las dependencias de módulos declarados en el archivo <em>module-info.java</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">module</span> <span class="n">blogbitix</span><span class="o">.</span><span class="na">http</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">requires</span> <span class="n">jdk</span><span class="o">.</span><span class="na">incubator</span><span class="o">.</span><span class="na">httpclient</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>module-info.java</span>
    </div>
</div>
<p>Usando la linea de comandos o con una tarea de <a href="https://gradle.org/">Gradle</a> se genera el <em>runtime</em> para la aplicación con <em>jlink</em>. El módulo ha de compilarse previamente. Con la opción <em>--launcher</em> se crea un <em>script</em> para lanzar la aplicación con la clase que contiene el método <em>main</em> indicada como punto de entrada, la opción <em>--output</em> indica donde se genera el contenido del <em>runtime</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ jlink --module-path build/classes/java/main --add-modules <span class="s2">&#34;blogbitix.http&#34;</span> --launcher <span class="s2">&#34;run=blogbitix.http/io.github.picodotdev.blogbitix.http.Main&#34;</span> --output build/distributions/jlink&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ ./gradew jlink</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>jlink.sh</span>
    </div>
</div>
<p>El espacio total del <em>runtime</em> en este caso de es de solo 38 MiB. Comparados con los casi 200 MiB que ocupa el <a href="https://openjdk.java.net/">OpenJDK</a> comprimido que incluye todos los módulos, aproximadamente 500 MiB instalado y alrededor de entre 600 y 900 MiB dependiendo de la imagen base de Docker que se use se aprecia que el ahorro de espacio es considerable lo que redunda en tiempos de transferencia por red menores y un inicio más rápido de las aplicaciones.</p>
<p>El contenido del <em>runtime</em> y de su estructura de directorios es la indicada a continuación. Listando los módulos incluidos en este <em>runtime</em> en vez de todos los del JDK se observa que solo están incluidos los necesarios por la aplicación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ du -sh build/distributions/jlink&#10;</span></span><span class="line"><span class="cl"> 38M	build/distributions/jlink&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ build/distributions/jlink/bin/java --list-modules&#10;</span></span><span class="line"><span class="cl">blogbitix.http&#10;</span></span><span class="line"><span class="cl">java.base@10&#10;</span></span><span class="line"><span class="cl">jdk.incubator.httpclient@10&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ tree build/distributions/jlink&#10;</span></span><span class="line"><span class="cl">build/distributions/jlink&#10;</span></span><span class="line"><span class="cl">├── bin&#10;</span></span><span class="line"><span class="cl">│   ├── java&#10;</span></span><span class="line"><span class="cl">│   ├── keytool&#10;</span></span><span class="line"><span class="cl">│   └── run&#10;</span></span><span class="line"><span class="cl">├── conf&#10;</span></span><span class="line"><span class="cl">│   ├── net.properties&#10;</span></span><span class="line"><span class="cl">│   └── security&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp; ├── java.policy&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp; ├── java.security&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp; └── policy&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├── README.txt&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├── limited&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; │   ├── default_US_export.policy&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; │   ├── default_local.policy&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; │   └── exempt_local.policy&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; └── unlimited&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├── default_US_export.policy&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; └── default_local.policy&#10;</span></span><span class="line"><span class="cl">├── include&#10;</span></span><span class="line"><span class="cl">│   ├── classfile_constants.h&#10;</span></span><span class="line"><span class="cl">│   ├── darwin&#10;</span></span><span class="line"><span class="cl">│   │   └── jni_md.h&#10;</span></span><span class="line"><span class="cl">│   ├── jni.h&#10;</span></span><span class="line"><span class="cl">│   ├── jvmti.h&#10;</span></span><span class="line"><span class="cl">│   └── jvmticmlr.h&#10;</span></span><span class="line"><span class="cl">├── legal&#10;</span></span><span class="line"><span class="cl">│   ├── java.base&#10;</span></span><span class="line"><span class="cl">│   │   ├── COPYRIGHT&#10;</span></span><span class="line"><span class="cl">│   │   ├── LICENSE&#10;</span></span><span class="line"><span class="cl">│   │   ├── aes.md&#10;</span></span><span class="line"><span class="cl">│   │   ├── asm.md&#10;</span></span><span class="line"><span class="cl">│   │   ├── cldr.md&#10;</span></span><span class="line"><span class="cl">│   │   ├── icu.md&#10;</span></span><span class="line"><span class="cl">│   │   ├── public_suffix.md&#10;</span></span><span class="line"><span class="cl">│   │   └── zlib.md&#10;</span></span><span class="line"><span class="cl">│   └── jdk.incubator.httpclient&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp; ├── COPYRIGHT -&gt; ../java.base/COPYRIGHT&#10;</span></span><span class="line"><span class="cl">│  &nbsp;&nbsp;&nbsp;&nbsp; └── LICENSE -&gt; ../java.base/LICENSE&#10;</span></span><span class="line"><span class="cl">├── lib&#10;</span></span><span class="line"><span class="cl">│   ├── classlist&#10;</span></span><span class="line"><span class="cl">│   ├── jli&#10;</span></span><span class="line"><span class="cl">│   │   └── libjli.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── jrt-fs.jar&#10;</span></span><span class="line"><span class="cl">│   ├── jspawnhelper&#10;</span></span><span class="line"><span class="cl">│   ├── jvm.cfg&#10;</span></span><span class="line"><span class="cl">│   ├── libjava.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libjimage.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libjsig.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libnet.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libnio.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libosxsecurity.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libverify.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── libzip.dylib&#10;</span></span><span class="line"><span class="cl">│   ├── modules&#10;</span></span><span class="line"><span class="cl">│   ├── security&#10;</span></span><span class="line"><span class="cl">│   │   ├── blacklist&#10;</span></span><span class="line"><span class="cl">│   │   ├── blacklisted.certs&#10;</span></span><span class="line"><span class="cl">│   │   ├── cacerts&#10;</span></span><span class="line"><span class="cl">│   │   ├── default.policy&#10;</span></span><span class="line"><span class="cl">│   │   ├── public_suffix_list.dat&#10;</span></span><span class="line"><span class="cl">│   │   └── trusted.libraries&#10;</span></span><span class="line"><span class="cl">│   ├── server&#10;</span></span><span class="line"><span class="cl">│   │   ├── Xusage.txt&#10;</span></span><span class="line"><span class="cl">│   │   ├── libjsig.dylib&#10;</span></span><span class="line"><span class="cl">│   │   └── libjvm.dylib&#10;</span></span><span class="line"><span class="cl">│   └── tzdb.dat&#10;</span></span><span class="line"><span class="cl">└── release</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>info.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">ext</span><span class="o">.</span><span class="na">moduleName</span> <span class="o">=</span> <span class="s1">&#39;blogbitix.http&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">mainClassName</span> <span class="o">=</span> <span class="s2">&#34;$moduleName/io.github.picodotdev.blogbitix.http.Main&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">println</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span><span class="o">.</span><span class="na">asPath</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">compileJava</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">inputs</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s2">&#34;moduleName&#34;</span><span class="o">,</span> <span class="n">moduleName</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doFirst</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">compilerArgs</span> <span class="o">=</span> <span class="o">[</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;--module-path&#39;</span><span class="o">,</span> <span class="n">classpath</span><span class="o">.</span><span class="na">asPath</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">]</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">files</span><span class="o">()</span>  &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">run</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">inputs</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s2">&#34;moduleName&#34;</span><span class="o">,</span> <span class="n">moduleName</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doFirst</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jvmArgs</span> <span class="o">=</span> <span class="o">[</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;--module-path&#39;</span><span class="o">,</span> <span class="n">classpath</span><span class="o">.</span><span class="na">asPath</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;--module&#39;</span><span class="o">,</span> <span class="n">mainClassName</span> &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">]</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">files</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">clearJlink</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Delete</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">  <span class="n">delete</span> <span class="s2">&#34;${distsDir}/jlink&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">jlink</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="n">clearJlink</span><span class="o">,</span> <span class="n">compileJava</span><span class="o">],</span> <span class="nl">type:</span> <span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">commandLine</span> <span class="s2">&#34;jlink&#34;</span><span class="o">,</span> <span class="s2">&#34;--module-path&#34;</span><span class="o">,</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span><span class="o">.</span><span class="na">asPath</span><span class="o">,</span> <span class="s2">&#34;--add-modules&#34;</span><span class="o">,</span> <span class="n">moduleName</span><span class="o">,</span> <span class="s2">&#34;--launcher&#34;</span><span class="o">,</span> <span class="s2">&#34;run=${mainClassName}&#34;</span><span class="o">,</span> <span class="s2">&#34;--output&#34;</span><span class="o">,</span> <span class="s2">&#34;${distsDir}/jlink&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Una vez generado el <em>runtime</em> su uso es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ build/distributions/jlink/bin/run&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>run.sh</span>
    </div>
</div>
<p>En el vídeo <a href="https://www.oracle.com/java/java9-screencasts.html?bcid=5582437011001&amp;playerType=single-social&amp;size=events">Java in a World of Containers</a> se comenta otra serie de características y opciones incluidas en Java para hacer de esta plataforma más consciente de las condiciones de ejecución propias de los contenedores.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHttp2">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradew jlink</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/novedades-de-java-10/</id>
        <title>Novedades de Java 10</title>
        <updated>2018-03-27T17:00:00+01:00</updated>
        <published>2018-03-23T20:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/03/novedades-de-java-10/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Oracle y los ingenieros a cargo del desarrollo de Java están haciendo en mi opinión un buen trabajo que se han materializado en las versiones Java 8 con las <em>lambdas</em>, en Java 9 con los módulos y en Java 10 con la mejora en la inferencia de tipos. Todo ello está haciendo que la plataforma evolucione más rápido y significativamente que lo que hasta hace unos años estábamos acostumbrados.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El 20 de marzo de 2018 se publicó la que es la versión 10 de Java siguiendo el nuevo calendario de publicar una nueva versión cada seis meses, Java 9 fue publicado en septiembre del año anterior. Con este nuevo calendario no pasarán tantos años entre cada nueva versión que era la queja de algunos desarrolladores y el motivo de que la plataforma Java no evolucionar tan rápidamente como algunos desarrolladores desean, quizá ahora la queja sea al contrario que se publican demasiadas versiones y no da tiempo a asimilar los cambios. Para dar cabida a ambas necesidades y garantizar un soporte prolongado cada año y medio será declarada una versión como de soporte a plazo largo o <em>LTS</em> para que las empresas tengan seguridad en las aplicaciones que desarrollen.</p>
<p>Lo mejor de este nuevo calendario de publicaciones cada seis meses es que las empresas y programadores tienen predictibilidad de cuándo se lanzará la siguiente versión aunque las nuevas características que tenga no está predeterminado ya no pasarán varios años entre versiones visibilizando que la plataforma evoluciona continuamente en pequeños saltos cada poco tiempo en vez de saltos grandes cada mucho tiempo que son más disruptivos y hace más difícil la adopción.</p>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="introducción">Introducción</h3>
<p>En Java es un principio no añadir características según lo que está de moda sino pensando en décadas futuras. Java 10 tiene una lista más reducida de cambios que Java 9 pero importantes y significativos. Java es el último en unirse a la fiesta de la inferencia de tipos pero ha sido de forma intencionada ya que el coste de implementarla de forma incorrecta supone un alto coste que hay que mantener en adelante. Otras ideas que ha sido implementadas el lenguajes de programación funcional y están listas para su uso masivo tomarán su propio camino en futuras versiones de Java por ejemplo <em>pattern matching</em> y <em>value types</em>.</p>
<ul>
<li><a href="http://openjdk.java.net/projects/jdk/10/">Características de Java 10</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/10-relnote-issues.html">Notas de publicación de Java 10</a></li>
<li><a href="https://docs.oracle.com/javase/10/">Documentación de Java 10</a></li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/overview-summary.html">Documentación Javadoc de Java 10</a></li>
</ul>
<p>La lista más relevante de es la siguiente:</p>
<ul>
<li>286: <a href="http://openjdk.java.net/jeps/286">Local-Variable Type Inference</a></li>
<li>296: <a href="http://openjdk.java.net/jeps/296">Consolidate the JDK Forest into a Single Repository</a></li>
<li>304: <a href="http://openjdk.java.net/jeps/304">Garbage-Collector Interface</a></li>
<li>307: <a href="http://openjdk.java.net/jeps/307">Parallel Full GC for G1</a>, se ha mejorado el recolector de basura G1 añadiendo soporte para paralelismo y mejorado las pausas en los peores escenarios.</li>
<li>310: <a href="http://openjdk.java.net/jeps/310">Application Class-Data Sharing</a></li>
<li>312: <a href="http://openjdk.java.net/jeps/312">Thread-Local Handshakes</a>, mejora interna en la sincronización y pausas en los <em>threads</em>.</li>
<li>313: <a href="http://openjdk.java.net/jeps/313">Remove the Native-Header Generation Tool (javah)</a>, se elimina la funcionalidad de <em>javah</em> al haber sido sustituida y mejorada por funcionalidad añadida en <em>javac</em>.</li>
<li>314: <a href="http://openjdk.java.net/jeps/314">Additional Unicode Language-Tag Extensions</a>, se añade alguna nueva extensión de Unicode.</li>
<li>316: <a href="http://openjdk.java.net/jeps/316">Heap Allocation on Alternative Memory Devices</a></li>
<li>317: <a href="http://openjdk.java.net/jeps/317">Experimental Java-Based JIT Compiler</a>, se añade en forma experimental el compilador JIT Graal implementado en Java en la plataforma Linux.</li>
<li>319: <a href="http://openjdk.java.net/jeps/319">Root Certificates</a>, se han añadido varios certificados raíz al <em>keystore</em> incluído para permitir que las conexiones TLS funcionen por defecto.</li>
<li>322: <a href="http://openjdk.java.net/jeps/322">Time-Based Release Versioning</a></li>
</ul>
<h3 id="nuevas-características">Nuevas características</h3>
<h4 id="inferencia-de-tipos-para-variables-locales">Inferencia de tipos para variables locales</h4>
<p>De las novedades la inferencia de tipos para variables locales es la más destacada en cuanto a cambios en el lenguaje con la adición de la nueva palabra reservada <em>var</em>, esto ayuda a no tener que repetir varias veces los tipos en la construcción de un objeto. En las <em>lambdas</em> los parámetros no es necesario declararlos infiriéndose de la interfaz que implementan. La inferencia de tipos es la idea que permite al compilador obtener el tipo estático sin que sea necesario escribirlo de forma explícita.</p>
<p>Java no es el único o primer lenguaje en incluir la inferencia de tipos para variables. Ha sido usado en otros lenguajes durante décadas. En realidad la inferencia de tipos incluida en Java 10 con <em>var</em> es muy limitada y restringida de manera intencionada. Si no fuese así el <a href="https://en.wikipedia.org/wiki/Hindley-Milner_type_system">algoritmo Hindley-Milner</a> usado para la inferencia de tipos usado en la mayoría de lenguajes que toma un tiempo exponencial en el peor de los casos potencialmente disminuiría la velocidad de <em>javac</em>.</p>
<p>La inferencia de tipos para variables locales hace que el código no sea tan verboso sin perder en gran medida la legibilidad ya que solo es para las variables locales. El siguiente ejemplo muestra la evolución de la inferencia de tipos desde Java 5 pasando por Java 8 donde se incluyeron algunas mejoras y el que puede utilizarse a partir de Java 10.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Java 5&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">channels</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">emptyList</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">channels</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Java 7&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">userChannels</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">userChannels</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Java 8&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nameValidation</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nameValidation</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Java 10&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">var</span> <span class="n">userChannels</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">channels</span> <span class="o">=</span> <span class="n">lookupUserChannels</span><span class="o">(</span><span class="s">&#34;Tom&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">channels</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JavaTypeInference.java</span>
    </div>
</div>
<p>Los tipos en la parte izquierda pueden parecer redundantes y obvios. Tradicionalmente la filosofía de Java es declarar de forma estática los tipos para todo incluyendo las expresiones más simples. Ciertamente definir los tipos para propiedades y en las firmas de los métodos impone un contrato que es necesario respetar y esto ayuda en el mantenimiento asi como a su entendimiento. Sin embargo, declarar los tipos para expresiones intermedias puede parecer menos útil e incómodo.</p>
<p>En el artículo <a href="https://developer.oracle.com/java/jdk-10-local-variable-type-inference">Java 10 Local Variable Type Inference</a> y vídeo de Youtube <a href="https://www.youtube.com/watch?v=Le1DbpRZdRQ">First contact with &lsquo;var&rsquo; in Java 10</a> hay una explicación más detallada de esta nueva característica y se aprecia claramente en los siguientes ejemplos que muestran la evolución de la inferencia de tipos.</p>
<p>No solo hay una mejora de legibilidad aquí, también hay una ventaja en términos de evolución y mantenimiento de código. Si tomamos el mismo código con tipos explícitos para la variable <em>userChannels</em> y reemplazamos el tipo del canal representado con un <em>String</em> con un objeto de dominio <em>Channel</em> que pudiese tener información adicional acerca del canal entonces necesitaríamos reescribir los tipos de todo el código que dependa de este nuevo tipo.</p>
<p>La inferencia de tipos definitivamente reduce la cantidad de tiempo para escribir código Java pero mejor es la mejora en legibilidad del código. Los desarrolladores dedican mucho más tiempo a leer código fuente que el que dedican a escribirlo de manera que definitivamente hay que optimizar para la facilidad de lectura sobre la facilidad de escritura. Aunque <em>var</em> no siempre es una mejora en cuanto a legibilidad ya que se pierde la información del tipo su uso se guía por el principio de no tanto para optimizar la escritura o lectura sino generalizando más para la facilidad de mantenimiento, escribir algunos tipos genéricos no triviales es complicado aún con la ayuda de asistencia de un entorno integrado de desarrollo.</p>
<p>No está permitido en retornos, parámetros, propiedades, variables sin inicializar, ni asignar <em>null</em> pero en Java 11 el uso de <em>var</em> se permitirá en los parámetros de una expresión <em>lambda</em> que será útil porque permite un parámetro formal cuyo tipo es inferido pero que además en el que se pueden usar anotaciones.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">(</span><span class="nd">@Nonnull</span> <span class="n">var</span> <span class="n">x</span><span class="o">,</span> <span class="n">var</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">y</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JavaLambdaVarAnnotation.java</span>
    </div>
</div>
<p>Con la inferencia de tipos los nombres de las variables cobran mayor importancia dado que <em>var</em> elimina la posibilidad al lector del código adivinar la intención de una variable a partir del tipo. Ya es difícil asignar nombres adecuados ahora supondrá mayor importancia.</p>
<p>El tipo en las variables locales no es tan importante ya que normalmente los nombres de las variables son el del tipo. Con <em>var</em> se evita repetición entre el tipo y el nombre de la variable, la brevedad de <em>var</em> hace destacar el nombre de la variable y proporciona mayor claridad además de tener que escribir menos código repetitivo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Java 9&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;org.postgresql.Driver&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="s">&#34;jdbc:postgresql://localhost/database&#34;</span><span class="o">,</span> <span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">PreparedStatement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">&#34;select * from user&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Java 10&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;org.postgresql.Driver&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="s">&#34;jdbc:postgresql://localhost/database&#34;</span><span class="o">,</span> <span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">&#34;select * from user&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>NamesAlign.java</span>
    </div>
</div>
<p>Con <em>var</em> se evita la longitud variable de los tipos y la no alineación de los nombres de las variables, permite quitar los nombres largos de algunos tipos que son comunes en las aplicaciones empresariales como cosas como <em>DefaultListenerFactory</em> con vocablos que se van añadiendo uno detrás de otro hasta formar un largo nombre.</p>
<p>Utilizar <em>var</em> no tiene por que suponer una perdida de legibilidad del código, un buen nombre de variable da más información que el tipo. Por ejemplo, <em>List&lt;User&gt;</em> parece ser una lista de usuarios, utilizando el nombre de la variable <em>admins</em> obtendríamos que son una parte más concreta de usuarios en el contexto local en el que se está usando. Por lo que no tener el tipo no es dramático si es suplido con un buen nombre de variable que capture su contenido correctamente.</p>
<p>La palabra reservada <em>var</em> no hace de Java un lenguaje dinámico, sigue siendo estático y fuertemente tipado. Solo que ahora los tipos no hace falta declararlos explícitamente y es el compilador el que se encarga de inferirlos según el contexto. En tiempo de ejecución nada cambia, el rendimiento sigue siendo el mismo y solo es una característica en tiempo de compilación.</p>
<p>La existencia de <em>var</em> no significa que haya de usarse de forma indiscriminada para todas las variables locales sino juiciosamente. En este caso quizá es preferible declarar el tipo por no ser obvio lo que retorna el método <em>getCities()</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">City</span><span class="o">&gt;&gt;</span> <span class="n">countryToCities</span> <span class="o">=</span> <span class="n">getCities</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">countryToCities</span> <span class="o">=</span> <span class="n">getCities</span><span class="o">();</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TypeVsVar.java</span>
    </div>
</div>
<ul>
<li><a href="http://openjdk.java.net/projects/amber/LVTIstyle.html">Style Guidelines for Local Variable Type Inference in Java</a></li>
</ul>
<p>Los entornos integrados de desarrollo tardarán un tiempo en implementar la inferencia de tipos para variables locales hasta que lancen nuevas versiones.</p>
<h3 id="otras-novedades">Otras novedades</h3>
<p>El tiempo para iniciar el interprete REPL de <a href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm">JShell</a> ha sido reducido significativamente especialmente en casos donde se inicia con un archivo que incluye varios <em>snippets</em>.</p>
<p>Se han añadido mejoras en la herramienta de documentación de las clases Javadoc como soporte para varias hojas de estilo, agrupar métodos redefinidos que no cambian la especificación o nueva etiqueta <em>summary</em> como resumen de la API.</p>
<p>Se han añadido varios métodos para crear copias no modificables con <a href="https://docs.oracle.com/javase/10/docs/api/java/util/List.html#copyOf%28java.util.Collection%29">List.copyOf()</a>, <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Set.html#copyOf%28java.util.Collection%29">Set.copyOf()</a>, and <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Map.html#copyOf%28java.util.Map%29">Map.copyOf()</a>. Se han añadido nuevos métodos a la clase <a href="https://docs.oracle.com/javase/10/docs/api/java/util/stream/Collectors.html">Collectors</a> para devolver una lista no modificable con <em>toUnmodifiableList</em>, <em>toUnmodifiableSet</em>, and <em>toUnmodifiableMap</em>.</p>
<p>Se añade el método <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#orElseThrow%28%29">Optional.orElseThrow()</a>.</p>
<p>Algunas <a href="https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html#Removed">otras características ya obsoletas se han eliminado</a> y <a href="https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html#Deprecated">otras se han marcado como <em>deprecated</em></a>.</p>
<h3 id="el-posible-futuro-jdk-11">El posible futuro JDK 11+</h3>
<p>Está planificado en seis meses después de Java 10 y con soporte extendido, el soporte de Java 10 durará tan solo hasta 2018.09, el de Java 11 al ser una <em>LTS</em> durará un periodo de 8 años hasta el 2026.09.</p>
<p>En el nuevo modelo las nuevas características no se añaden hasta que están preparadas. Tentativamente las <a href="http://openjdk.java.net/projects/jdk/11/">características de JDK 11</a> no están completamente determinadas pero se están evaluando grandes proyectos como <a href="http://openjdk.java.net/projects/valhalla/">Valhalla</a> para hacer más eficiente el tratamiento de datos que no requieran la identidad de objetos con los denominados <a href="http://openjdk.java.net/jeps/169">Value Types</a> útil para la programación funcional con datos puros optimizados para computaciones en paralelo. El proyecto <a href="http://openjdk.java.net/projects/loom/">Loom</a> que posibilita una versión más ligera aún que los <em>threads</em> o hilos con <em>fibers</em> o fibras, <em>continuations</em> o <em>coroutine</em> y <a href="https://en.wikipedia.org/wiki/Tail_call">Tail Call</a>. El proyecto <a href="http://openjdk.java.net/projects/panama/">Panama</a> hará más fácil trabajar con código nativo o el proyecto <a href="http://openjdk.java.net/projects/zgc/">ZGC</a> para crear un recolector de basura que pueda manejar gigabytes y terabytes con pausas menores a 10ms. O el proyecto <a href="http://openjdk.java.net/projects/amber/">Amber</a> con unas pequeñas mejoras pero muy cómodas para el programador como la de los literales <em>strings raw</em>. En la <a href="http://openjdk.java.net/">página del OpenJDK</a> hay más proyectos que en un futuro quizá sean implementados y publicados en alguna versión.</p>
<p>En la sección final de referencia incluyo varios artículos y vídeos de los que he obtenido la información para hacer este resumen de las novedades de Java 10. Algunos son muy interesantes y amplían en gran medida lo comentado y lo que posiblemente llegue en un futuro.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.youtube.com/watch?v=Le1DbpRZdRQ">First contact with &lsquo;var&rsquo; in Java 10</a></li>
<li><a href="https://youtu.be/84mCmmzksGI?t=47m43s">Keynotes: Oracle Code Chicago</a></li>
<li><a href="https://developer.oracle.com/java/java10">Introducing Java SE 10</a></li>
<li><a href="https://developer.oracle.com/java/jdk-10-local-variable-type-inference">Java 10 Local Variable Type Inference</a></li>
<li><a href="https://marketplace.eclipse.org/content/java-10-support-oxygen">Java 10 Support for Oxygen</a></li>
<li><a href="http://jdk.java.net/10/">JDK 10 General-Availability Release</a></li>
<li><a href="https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html">JDK 10 Release Notes</a></li>
<li><a href="https://www.oracle.com/corporate/pressrelease/Java-10-032018.html">Oracle Java SE 10 Release Arrives</a></li>
<li><a href="https://www.infoworld.com/article/3230507/java/java-jdk-10-what-new-features-to-expect-in-the-next-java.html">JDK 10: What’s new in Java 10</a></li>
<li><a href="https://www.forbes.com/sites/oracle/2018/03/20/what-java-10-and-javas-new-6-month-release-cadence-mean-for-developers/">What Java 10 And Java&rsquo;s New 6-Month Release Cadence Mean For Developers</a></li>
<li><a href="http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html">Project Loom: Fibers and Continuations for the Java Virtual Machine</a></li>
<li><a href="https://www.azul.com/the-incredible-shrinking-java-platform/">The Incredible Shrinking Java Platform</a></li>
<li><a href="https://www.oracle.com/technetwork/java/eol-135779.html">Oracle Java SE Support Roadmap</a></li>
<li><a href="https://www.opsian.com/blog/java-on-docker/">Java on Docker will no longer suck: improvements coming in Java 10</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/</id>
        <title>Tú con tu Mac, yo con mi GNU/Linux</title>
        <updated>2018-03-18T17:00:00+01:00</updated>
        <published>2018-03-17T14:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/macos.svg" width="300" height="70" alt="macOS" title="macOS"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/windows-10.svg" width="200" height="200" alt="Windows 10" title="Windows 10"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Por motivos laborales y por política de la empresa tuve que elegir como equipo un portátil de <a href="https://www.apple.com/">Apple</a>, en concreto un MacBook Pro con procesador Intel Core i5, 16 GiB de memoria y 512 GiB de almacenamiento SSD. Prácticamente el mejor portátil que había en su momento en el catálogo de la manzana que tendría un precio seguro más de 2000 € y quizá 2500 €. Este cambio me ha permitido poder comparar con mi propio portátil, un Sony Vaio con procesador Intel Core i5 3210, 8 GiB de memoria y 250 GiB de almacenamiento SSD y la distribución <a href="https://www.archlinux.org/">Arch Linux</a> de <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a>.</p>
<p>Tenía la duda de si esta experiencia me iba a convencer de pasarme al lado oscuro. Llevo usando el MacBook desde hace un año siendo este <a href="https://picodotdev.github.io/blog-bitix/2016/11/mi-primer-mac-yo-usuario-de-gnu-linux/">mi primer contacto con un Mac</a> y puedo decir de momento que no hay nada en los Mac que me convenza de adquirir uno de los portátiles de Apple. Sí no son feos, tenían (en pasado) alguna cosa distinta como los <em>magsafe</em> en el adaptador de corriente, no tienen elementos obsoletos como una salida VGA o grabadora DVD, una buena pantalla y un buen <em>touchpad</em> pero a un precio exagerado. Aún así y ahora que he probado tanto Windows, macOS como GNU/Linux no tengo nada que envidiar a los portátiles de Apple ni a macOS por mi parte, es más estoy más convencido de usar GNU/Linux.</p>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="software">Software</h3>
<p>Empezando por el software libre, ¿hace falta que mecione <a href="https://www.gnu.org/philosophy/free-sw.es.html">las cuatro libertades esenciales</a>? o la posibilidad de elegir la distribución o entorno de escritorio que más me guste o mejor se adapte a mis requerimientos. Pensando mal, en el portátil Mac no estoy seguro de que no tengan algún tipo de software espía, algún tipo de monitorización o telemetría.</p>
<p>Para cualquier necesidad en Linux seguramente hay una aplicación que realice esa funcionalidad, editor de documentos, reproductor de vídeo, edición fotográfica, navegador, administrador de ebooks, entorno de desarrollo, editor de código, descargas torrent. Las principales aplicaciones están disponibles para ambas plataformas: <a href="https://www.libreoffice.org/">LibreOffice</a>, <a href="https://www.videolan.org/vlc/">VLC</a>, <a href="https://www.gimp.org/">GIMP</a>, <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a>, <a href="https://calibre-ebook.com/">Calibre</a>, <a href="https://www.jetbrains.com/idea/">IntelliJ</a>, <a href="https://code.visualstudio.com/">Visual Studio Code</a>, <a href="https://transmissionbt.com/">Tranmission</a>, &hellip;</p>
<p>Sin embargo, para algunas otras necesidades en Mac seguramente hay que sacar otra vez la tarjeta de crédito para compra alguna aplicación que realice la tarea que en GNU/Linux está disponible gratuitamente y es software libre. Por ejemplo, para convertir un vídeo a otro formato, para convertir a MP3 un CD de audio o un simple compresor/descompresor de archivos. Menos mal que en mac también se puede acceder a todo ese catálogo de software libre.</p>
<p>Y <a href="https://picodotdev.github.io/blog-bitix/2016/08/22-plus-buenos-juegos-en-gnu-linux/">en GNU/Linux también hay juegos de buena calidad</a>.</p>
<h3 id="hardware">Hardware</h3>
<p>El hardware de Apple es bonito y es un aspecto que lo cuidan mucho al menos más que en los típicos portátiles de la mayoría de las marcas que fabrican para Windows. Sin embargo, en cuanto a características no es de lo mejor que uno puede encontrar y a un precio significativamente mayor.</p>
<p>Mi equipo es del 2012 y el Mac que uso del 2015, realmente lo único que echo de menos es la resolución de la pantalla que en el Mac es de 2560x1600 nativa y de 1650x1050 escalada lo que hace que se vea el texto muy bien. El <em>magic mouse</em> al ser táctil también está bien aunque a veces detecte gestos incorrectos pero el hecho de que cuando esté cargándose no se pueda utilizar es un fallo de diseño.</p>
<p>Compara el <a href="https://slimbook.es/">Slimbook Pro 2</a> y el <a href="https://www.apple.com/es/macbook-pro/">MacBook Pro</a>, para empezar en el Slimbook se pueden instalar 32 GiB de memoria en el Mac solo 16 GiB, a características similares con disco SSD de 512 GiB y pantalla de HiDPI el Slimbook está sobre los 1000 € y los Mac empezando por 1500 €.</p>
<h3 id="entorno-de-escritorio">Entorno de escritorio</h3>
<p>El entorno de escritorio en lo personal uso <a href="https://www.gnome.org/">GNOME</a> y en ciertos aspectos tiene similitudes como la barra superior, la vista de ventas o la gestión de escritorios. GNOME ha evolucionado de forma muy notable desde las primeras versiones 3.0 añadiendo muchas nuevas funcionalidades y mejorando varios aspectos visuales en cada ciclo de desarrollo de seis meses. KDE también ha mejorado mucho.</p>
<p>GNOME puede personalizarse en cierta medida con algunos complementos para por ejemplo hacer que la barra de aplicaciones se muestre siempre. Algunos otros aspectos de GNOME me gustan más como el menú agrupado para varios de los iconos, en Mac cada icono tiene su propio menú de acciones. En la vista de aplicaciones de GNOME estás pueden cerrarse sin tener que seleccionar la aplicación. Tanto GNOME como macOS soportan escritorios virtuales.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/images/gnome-overview_hu08893c7d226a140d911340e41ef19d41_292132_2560x1440_fit_q90_box.jpg" data-gallery="" title="GNOME"><img src="https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/images/gnome-overview_hu08893c7d226a140d911340e41ef19d41_292132_300x200_fit_q90_box.jpg" width="300" height="169" alt="GNOME" title="GNOME"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/images/macos-overview_huf14a01973ba744f23db238411e78581a_822935_2560x1440_fit_q90_box.jpg" data-gallery="" title="macOS"><img src="https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/images/macos-overview_huf14a01973ba744f23db238411e78581a_822935_300x200_fit_q90_box.jpg" width="300" height="188" alt="macOS" title="macOS"  class="lozad "></a></p>
<figcaption>Comparación entre el entorno de escritotio de GNOME y macOS</figcaption>
</figure>
</div>
<p>GNOME incluye todo lo que un usuario necesita desde navegador de archivos, visor de fotos, visor de documentos, aplicación de correo electrónico, terminal, editor de texto plano. Y GNOME no es la única opción también está <a href="https://www.kde.org/">KDE</a> o <a href="https://xfce.org/">XFCE</a> por nombrar solo dos de los otros entornos e escritorio más conocidos.</p>
<h3 id="gestor-de-paquetes">Gestor de paquetes</h3>
<p>La forma de instalar y actualizar aplicaciones de las distribuciones GNU/Linux con los gestores y repositorios de paquetes es muy sencillo. En Arch Linux que es una distribución <a href="https://en.wikipedia.org/wiki/Rolling_release">rolling release</a> cada vez que hago una actualización tengo las últimas versiones de cada paquete y aplicación.</p>
<p>En los Mac se puede utilizar algo similar con <a href="https://brew.sh/">Homebrew</a> y menos mal que existe para hacer más fácil instalar y sobre todo matener actualizados los programas a las últimas versiones.</p>
<h3 id="precio">Precio</h3>
<p>No se cuanto costaría exactamente el equipo Mac pero con su configuración al menos unos 2000 €. Pues bien un Slimbook a día de hoy con con una configuración del modelo tal que Intel Core i5 8250U (4 núcleos, 8 hilos), 32 GiB de memoria, 250 GiB de almacenamiento SSD con interfaz NVMe y pantalla QHD+ 3200 x 1800 HiDPI cuesta unos 1400 € siendo el tope de gama. Eso para los usuarios que necesiten tal ingente cantidad de memoria y en una de las configuraciones más completas.</p>
<p>El MacBook Pro más barato empieza en 1500 € y con únicamente 8 GiB de memoria y solo 128 GiB de SSD, con 16 GiB de memoria y 256 GiB de SSD se va a los 2000 €.</p>
<h3 id="obsolescencia">Obsolescencia</h3>
<p>Es Apple quien decide cuando deja de dar soporte a sus equipos, en forma de actualizaciones de seguridad o nuevas versiones de macOS, 6+ años aproximadamente lo que me parece poco tiempo, posiblemente en ese momento uno ya se platee comprar otro pero también el equipo seguramente es útil para ciertos propósitos. En GNU/Linux los equipos siguen teniendo actualizaciones y siguen siendo usables incluso con 10 años. Dejan de ser válidos cuando el software demanda más al equipo del lo que es capaz principalmente por la cantidad de memoria. Pero aún en estos casos utilizando una distribución que consuma pocos recursos siguen siendo usables para ciertas tareas.</p>
<h3 id="mi-conclusión">Mi conclusión</h3>
<p>La marca Apple tiene un halo de idolatración, de que no hay nada mejor ya sea en el hardware o en el software y si se me permite de elitismo, superioridad, ir a contracorriente, tener algo diferenciativo o exclusividad. Por mi experiencia no creo que GNU/Linux hoy día tenga mucho envidiar, ni sea más difícil de instalar o usar, quizá un buen soporte de hardware desde el primer día pero eso es consecuencia de la cuota de uso de GNU/Linux en el escritorio, aún así las cosas han mejorado mucho en la última década.</p>
<p>¿Quieres un equipo para trabajar sin preocuparte mucho de dedicarle tiempo a mantenerlo? usa una versión con soporte prolongado (LTS) de <a href="https://www.ubuntu.com/">Ubuntu</a>, ¿quieres una distribución con el software actualizado? usa Arch Linux o una de sus derivadas, ¿quieres un equipo potente, configurable, ligero y bonito? échale un vistazo a los Slimbook.</p>
<p>Pasado este tiempo usando un Mac a mi no me han convencido de cambiar y comprar uno de ellos. La plataforma del pingüino también tiene defectos al igual que macOS no está exento de ellos, los dos alguna vez se me han bloqueado, pero después de probar un Mac la verdad es que no entiendo la idolatración y lo fieles que son algunos de sus usuarios a esta marca. Al pagar lo que hay que pagar por un Mac uno debe pensar que con legitimidad van a recibir a cambio algo acorde a sus expectativas más cuanto mayor sea el precio, quizá si el precio es elevado cuesta más reconocer los defectos. Quédate con tu Mac, a mi dame mi GNU/Linux.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.soydemac.com/apple-actualiza-la-lista-de-mac-y-otros-dispositivos-vintage-y-obsoletos/">Apple actualiza la lista de Mac y otros dispositivos “vintage y obsoletos”</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="apple"/>
            
                <category term="gnu-linux"/>
            
                <category term="microsoft"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="windows"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/</id>
        <title>7&#43; computadoras baratas del tamaño de una tarjeta de crédito basadas en GNU/Linux y ARM</title>
        <updated>2019-07-12T12:30:00+02:00</updated>
        <published>2018-03-10T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<p>Una de las tendencias de la tecnología desde sus inicios es que en todo momento está en constante evolución y mejora. Cada vez es más potente, más pequeña y más barata. Hay multitud de ejemplos en cualquier dispositivo electrónico que se use para ver su evolución desde <a href="https://en.wikipedia.org/wiki/History_of_IBM_magnetic_disk_drives#IBM%27s_first_HDD_versus_its_last_HDDs">discos duros de 5 megas que ocupaban un armario y pesaban varias decenas de kilos</a> a ahora las tarjetas microSD del tamaño de una uña con una capacidad de 256 GiB, de procesadores que en los años 70 funcionaban a una frecuencia de unos pocos megahercios a ahora varios gigahercios, de memorias RAM de unos pocos kilobytes a ahora varios gigabytes, de <em>chips</em> con <a href="https://en.wikipedia.org/wiki/Transistor_count">unos miles de transistores</a>, ya no digamos válvulas de vacío, a varios miles de millones de transistores que emplean ahora las GPU de las tarjetas gráficas.</p>
<p>En poco más de dos décadas ha habido un salto de entre dos y tres órdenes de magnitud. Mi primer ordenador en 1996 fué un Intel Pentium a 120 Mhz con 8 MiB de memoria RAM que luego amplié a 32 MiB y un disco duro de 1 GiB que utilicé en mis años de universidad. En el 2002 cambié a un AMD 1800+ con 512 MiB, 60 GiB de disco duro y una gráfica Nvidia GeForce 2 MX creo que con 32 MiB de memoria gráfica con un monitor de 17&quot; de tubo que pesaba más de 10 kilos seguro. En el 2008 dejé el ordenador de escritorio y pase a un portátil Dell, del que no me quiero acordar mucho por lo malo que resultó, con un Intel Core 2 Duo 8100 fabricado un una litografía de 45 nanómetros, 4 GiB de RAM, un disco duro de 320 GiB y una gráfica Nvidia 8600 con 256 MiB de memoria gráfica. Finalmente ya casi en el 2013 a mi siguiente equipo como portátil con un Intel i3-3210 de 2 núcleos y 4 hilos fabricado a 22 nanómetros, 8 GiB de memoria e inicialmente un disco duro de 500 GiB que posteriormente cambié por un SSD de 250 GiB. Y actualmente si cambiase de equipo optaría seguramente por un AMD basado en la arquitectura Zen que han aumentado de forma significativa los núcleos e hilos de los procesadores, iría a por 32 GiB para virtualizar a gusto o 64 GiB si fuese posible y la memoria DDR4 estuviese a precios más asequibles, un monitor 2K o 4K y un disco SSD basado en NVMe que aumenta más la tasa de transferencia incluso sobre la interfaz SATA. Eso en los computadores tradicionales pero ya algunos modelos de móviles de gama alta poseen más memoria que varios portátiles de la gama básica y en el tamaño de 5 pulgadas.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/11/desempaquetado-intel-nuc-nuc8i5bek-bean-canyon-hyperx-impact-ram-y-samsung-970-evo-nvme-ssd/">Desempaquetado Intel NUC8i5BEK (Bean Canyon), HyperX Impact (RAM) y Samsung 970 EVO NVMe (SSD)</a>, finalmente adquirí un Intel NUC</li>
</ul>
<p>En otro artículo algo comentaba <a href="https://picodotdev.github.io/blog-bitix/2016/10/sobre-el-rapido-avance-de-la-tecnologia/">Sobre el rápido avance de la tecnología</a> y básicamente sacaba dos conclusiones. Una no merece comprar tecnología hasta que realmente es necesario pero tampoco esperar indefinidamente a lo siguiente mejor y como segunda conclusión que no hace falta tener lo último para hacer lo mismo que ya es posible con lo anterior.</p>
<p>Una de las últimas adquisiciones que hice fué en 2012, uno de los primeros modelos de la popular computadora del tamaño de una tarjeta de crédito Raspberry Pi con un procesador ARM con el juego de instrucciones <em>armv6h</em> y 256 MiB que he utilizado mayoritariamente para realizar descargas y compartir archivos <em>torrent</em> o algunas pruebas de <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">utilización de sensores y dispositivos de entrada y salida con Java</a> o para <a href="https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/">usar un certificador de Let&rsquo;s Encrypt en un servidor Nginx</a>. El siguiente uso que le daré es como <a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/">consola de juegos retro</a>, otro uso es utilizarla como <a href="https://picodotdev.github.io/blog-bitix/2019/12/nube-privada-para-documentos-personales-con-nextcloud-y-onlyoffice/">nube privada de documentos personales con Nextcloud y OnlyOffice</a>.</p>
<p>Ya había placas de tamaño reducido con un computador completo similares a la Raspberry Pi pero la Raspberry Pi ha sido la placa con más éxito y que sigue teniendo uno de los mejores soportes y comunidad. Su propósito original es el aprendizaje a nivel educativo sin embargo su precio reducido de unos 36 € por los que se puede <a href="http://amzn.to/2EP9mHX">comprar ahora en Amazon</a> ha sido gran parte de su éxito junto con una labor de promoción muy bien realizada en internet que contribuyó a crear gran expectación superando con creces la demanda esperada por los propios creadores en los meses iniciales. Han sido elaborados nuevos modelos más capaces con 4 núcleos a más velocidad y basados en un procesador de arquitectura ARM Cortex-A53 de 64 bits, con WiFi y Bluetooth, pero con solo 1 GiB de memoria y ciertas limitaciones en el ancho de banda de red.</p>
<p>La Raspberry Pi es la más popular y con mejor soporte pero no es la mini placa más capaz ni incluso la más barata, debido a su éxito han surgido numerosas placas similares. La totalidad de estas placas usan alguna distribución de GNU/Linux y procesadores ARM ya sea <a href="https://www.debian.org/">Debian</a>, <a href="https://www.ubuntu.com/">Ubuntu</a>, <a href="https://www.android.com/">Android</a>, <a href="https://archlinuxarm.org/">Arch Linux ARM</a>, <a href="https://www.armbian.com/">Armbian</a> o algunas distribuciones especializadas como <a href="https://www.lakka.tv/">Lakka</a> para consola de juegos retro y <a href="https://libreelec.tv/">LibreELEC</a> o <a href="https://kodi.tv/">Kodi</a> para centro multimedia de salón.</p>
<p>El uso que se les puede dar a estas computadores es muy diverso quizá no como para sustituir a un ordenador de escritorio o portátil basado en procesadores <a href="https://www.intel.es">Intel</a> o <a href="https://www.amd.com/es">AMD</a> pero si para otros propósitos como servidor de descargas, centro multimedia, servidor web, cluster de servidores con <a href="https://www.docker.com/">Docker</a>, servicio en la nube propio con <a href="https://owncloud.org/">OwnCloud</a>, servidor de código fuente con <a href="https://about.gitlab.com/">GitLab</a>, servidor de integración continua con <a href="https://jenkins.io/">Jenkins</a>, base de datos <a href="https://www.postgresql.org/">PostgreSQL</a> o los mencionados consola de juegos retro y centro multimedia entre cualesquiera otros usos que queramos mientras el software necesario esté disponible y la cantidad memoria de la computadora sea suficiente.</p>
<div class="media">
<figure>
<p><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/arm-powered_hu4e4b4e6e72c77b245b83add14f218f6b_23049_2560x1440_fit_box_3.png" width="277" height="250" alt="ARM Powered" title="ARM Powered"  class="lozad "></p>
</figure>
</div>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="raspberry-pi">Raspberry Pi</h3>
<p>Cuando apareció en el 2012 ya había placas similares pero su bajo precio y <em>marketing</em> ha sido la que ha alcanzado la mayor popularidad sin ser la más potente. Gracias a su éxito con más de 14 millones de unidades vendidas es la mejor opción por su gran soporte de la comunidad aunque para algunos casos de uso su gigabyte de memoria en el modelo <a href="https://www.raspberrypi.org/magpi/raspberry-pi-3-specs-benchmarks/">Raspberry Pi 3</a> puede quedarse escaso. Su <em>SoC</em> BCM2837 de Broadcom no es el más capaz tanto en CPU (<em>quad-core</em> ARM Cortex-A53 a 1.4 GHz) como en GPU (VideoCore IV) y con su gigabit ethernet compartida con los puertos USB y limitada lo que es un inconveniente importante en las transferencias de datos.</p>
<ul>
<li>SoC: CPU Broadcom BCM2837B0, 4 x Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz</li>
<li>GPU VideoCore IV</li>
<li>Memoria 1GB LPDDR2 SDRAM</li>
<li>WiFi 2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN, Bluetooth 4.2, BLE</li>
<li>Red Gigabit Ethernet over USB 2.0 (maximum throughput 300 Mbps)</li>
<li>Extended 40-pin GPIO header</li>
<li>Full-size HDMI</li>
<li>4 USB 2.0 ports</li>
<li>CSI camera port for connecting a Raspberry Pi camera</li>
<li>DSI display port for connecting a Raspberry Pi touchscreen display</li>
<li>4-pole stereo output and composite video port</li>
<li>Micro SD port for loading your operating system and storing data</li>
<li>5V/2.5A DC power input</li>
<li>Power-over-Ethernet (PoE) support (requires separate PoE HAT)</li>
</ul>
<p>La <a href="https://www.raspberrypi.org/magpi/raspberry-pi-4-specs-benchmarks/">Raspberry Pi 4</a> ha sido anunciada y comercializada por sorpresa el 2019 cuando pocos se esperaban este nuevo modelo. Mejora sensiblemente varios aspectos y limitaciones de las versiones anteriores y sigue manteniendo un precio reducido. La CPU pasa a estar formada por 4 núcleos ARM Cotex-A72 a 1.5 GHz lo que es alrededor de 3 veces más potente que la CPU de la Raspberry Pi 3. La memoria pasa a tener varias configuraciones de 1, 2, 4 y 8 GiB además de ser más veloz al ser LPDDR4. Se ha eliminado la limitación del puerto Gigabit ethernet y dos puertos USB pasan a ser USB 3.0 con notables aumentos de capacidad de transferencia. La salida de vídeo ahora está compuesta por dos mini HDMI para soportar configuraciones multimonitor en resolución 4K. La GPU es una Video Core VI con soporte de OpenGL ES 3.0.</p>
<ul>
<li>SoC: CPU Broadcom BCM2711B0 quad-core A72 (ARMv8-A) 64-bit @ 1.5GHz</li>
<li>GPU: Broadcom VideoCore VI</li>
<li>RAM: 1GB, 2GB, 4GB, 8GB LPDDR4 SDRAM</li>
<li>Red: 2.4 GHz and 5 GHz 802.11b/g/n/ac wireless LAN</li>
<li>Bluetooth: Bluetooth 5.0, Bluetooth Low Energy (BLE)</li>
<li>GPIO: 40-pin GPIO header, populated</li>
<li>Almacenamiento: microSD</li>
<li>Puertos: 2 × micro-HDMI 2.0, 3.5 mm analogue audio-video jack, 2 × USB 2.0, 2 × USB 3.0, Gigabit Ethernet, Camera Serial Interface (CSI), Display Serial Interface (DSI)</li>
</ul>
<p>El precio del modelo de 1 GiB de memoria se mantiene en $35 y el de 4 GiB llega a $55. Con este nuevo modelo la Raspberry Pi vuelve a posicionarse a la altura de sus equivalentes que con el paso del tiempo habían superado a los modelos anteriores de RPi.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 3"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_300x200_fit_q90_box.jpg" width="287" height="200" alt="Raspberry Pi 3" title="Raspberry Pi 3"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/raspberrypi4b_hud8137f3457ffc935be8b5b47cc7bb3ae_296533_2560x1440_fit_q90_box.jpg" data-gallery="" title="Raspberry Pi 4"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/raspberrypi4b_hud8137f3457ffc935be8b5b47cc7bb3ae_296533_300x200_fit_q90_box.jpg" width="300" height="200" alt="Raspberry Pi 4" title="Raspberry Pi 4"  class="lozad "></a></p>
<figcaption>Raspberry Pi 3 y 4</figcaption>
</figure>
</div>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0899VXM8F&amp;linkId=d5f0684371c6b5b8fa5cbd472b276ba4" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VD5L1VY&amp;linkId=f7a5d402571fb5dd48fa2311dc169469" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01566WOAG&amp;linkId=1c7d89fa46e38c81f0e35cb1518e80ea" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07CXXBTST&amp;linkId=aee5521403e014f5b256191d116ac4b3" title="Amazon" class="lozad"></iframe>
</div>
<h3 id="rock64">Rock64</h3>
<p>El segundo modelo que destacaré es este de <a href="https://www.pine64.org/">PINE64</a> porque posee versiones de 1, 2 y 4 GiB de memoria, gigabit ethernet y 1 puerto USB 3.0 a un precio similar al de una Raspberry Pi, lo único que le falta es WiFi para superar en todo a la RPi. También posee un módulo eMMC más rápido que las tarjetas microSD, SPI de 128 MiB para prescincir de tarjeta microSD en el arranque, salida de audio, otros 2 puertos USB 2.0, salida HDMI con soporte para 4K@60fps HDR10, botones dedicados de encendido y reinicio y los 40 <em>pines</em> para usar sensores. El <em>SoC</em> es un <a href="http://www.rock-chips.com/a/en/products/RK33_Series/2017/0118/829.html">Rockchip RK3328</a> <em>quad-core</em> ARM Cortex-A53 y la GPU <a href="https://developer.arm.com/products/graphics-and-multimedia/mali-gpus/mali-450-gpu">ARM Mali-450MP2</a> con capacidad para OpenGL ES 1.1 / 2.0.</p>
<ul>
<li>CPU Rockchip RK3328, 4 x Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz</li>
<li>GPU ARM Mali-450MP2</li>
<li>Memoria 1 / 2 / 4 GiB 1600 MHz LPDDR3 SDRAM</li>
<li>128 Mb SPI Flash</li>
<li>eMMC Module Socket, eMMC Jumper</li>
<li>MicroSD Card Slot (Bottom)</li>
<li>3.5mm Barrel Power Jack (5V3A)</li>
<li>4K60P HDR Digital Output</li>
<li>A/V Jack</li>
<li>Red Gigabit Ethernet</li>
<li>2 x USB 2.0 Dedicated Host, 1 x USB 3.0 Dedicated Host</li>
<li>Pi-P5+ Bus</li>
<li>Pi-2 Bus</li>
<li>Power, Reset and Recovery Buttons</li>
<li>IR Receiver Port</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/rock64_hudfc13bdf91379a00065bee84942df0d9_616068_2560x1440_fit_q90_box.jpg" data-gallery="" title="Rock64"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/rock64_hudfc13bdf91379a00065bee84942df0d9_616068_300x200_fit_q90_box.jpg" width="300" height="196" alt="Rock64" title="Rock64"  class="lozad "></a></p>
<figcaption>Rock64</figcaption>
</figure>
</div>
<p>Para suplir la carencia de WiFi en su tienda hay disponible un accesorio conectable a un puerto USB, también tienen la posibilidad de comprar el alimentador de corriente, mando a distancia, caja acrílica y un <em>splitter</em> con <em>Power Over Ethernet</em> o <em>PoE</em> que hace innecesario el alimentador de corriente si poseemos o adquirimos un <em>switch</em> con esa función, tarjetas eMMC de 16, 32 y 64 GiB. Su precio de unos $45 para el modelo de 4 GiB.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/ZejkWra-Mfc" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>En el momento de escribir el artículo están preparando el lanzamiento de la placa Rock64Pro con un mejor <em>SoC</em> <a href="http://www.rock-chips.com/a/en/products/RK33_Series/2016/0419/758.html">Rockchip RK3399</a> <em>hexa-core</em> con dos Cortex-A72 y 4 Cortex-A53 además de un puerto USB Type-C y mejor GPU con una <a href="https://developer.arm.com/products/graphics-and-multimedia/mali-gpus/mali-t860-and-mali-t880-gpus">ARM Mali-T860MP4</a> <em>quad-core</em> con soporte para OpenGL ES 1.1 / 2.0 / 3.0 and OpenCL 1.2.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/rock64pro_huac7173302891f5df6b9d7f25e4921bbd_841529_2560x1440_fit_q90_box.jpg" data-gallery="" title="Rock64Pro"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/rock64pro_huac7173302891f5df6b9d7f25e4921bbd_841529_300x200_fit_q90_box.jpg" width="267" height="200" alt="Rock64Pro" title="Rock64Pro"  class="lozad "></a></p>
<figcaption>Rock64Pro</figcaption>
</figure>
</div>
<p>Estas placas de PINE64 son de lo mejor en la relación características hardware y precio, donde adolecen es en el software y es que aún con un tiempo relativamente corto de un año de vida es en el software donde pueden presentar algún problema. Conforme pase el tiempo mejorarán pero quizá no sea el modelo más adecuado para aquellos usuarios que no deseen encontrase problemas en su uso y no estén dispuestos buscar información o a resolver los que se presenten.</p>
<p>Aunque no es como los modelos anteriores de placas base este es destacable por ser un portátil basado en un procesador ARM RK3399 a un precio de $200. Pantalla de 14&quot; con una resolución de 1920x1080, 4 GiB de memoria, WiFi, microSD, mini HDMI, 64GB eMMC, dos puertos USB uno 3.0 y otro 2.0, salida de audio, cámara web y batería de 10000mAH, teclado y <em>touchpad</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/pinebook-pro_hu3f8af8bce03adffdd63b304c9c9fc947_188030_2560x1440_fit_q90_box.jpg" data-gallery="" title="PineBook Pro"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/pinebook-pro_hu3f8af8bce03adffdd63b304c9c9fc947_188030_300x200_fit_q90_box.jpg" width="233" height="200" alt="PineBook Pro" title="PineBook Pro"  class="lozad "></a></p>
<figcaption>PineBook Pro <br>Fuente: arstechnica.com</figcaption>
</figure>
</div>
<h3 id="rock-pi-4b">Rock Pi 4B</h3>
<p>Un modelo de placa mas reciente también basada en el mismo <em>SoC</em> de la Rock64Pro el Rockchip RK3399 con algunas características muy completas. Esta <a href="http://rockpi.org/">Rock Pi</a> no tiene uno de los defectos de la Rock64 y es que tiene WiFi AC y Bluetooth 5.0, su memoria también es de hasta 4 GiB pero LPDDR4, puerto Gigabit Ethernet, tiene dos puertos USB 2.0 y otros dos 3.0, GPIO de 40 <em>pines</em> compatible con la Raspberry Pi, además de conector de 3.5mm para el audio y salida HDMI de hasta 4K, se alimenta mediante conector USB Type-C, tarjeta microSD, tiene <em>socket</em> eMMC pero es que además tiene un conector M.2 lo que le permite tener SSD con esta interfaz y un gran ancho de banda para el almacenamiento.</p>
<ul>
<li>CPU Rockchip RK3399, 2 x Cortex-A72, 4 x Cortex-A53</li>
<li>GPU Mali T860MP4 (OpenGL ES 1.1 /2.0 /3.0 /3.1 /3.2, Vulkan 1.0, Open CL 1.1 1.2, DX11)</li>
<li>Memory LPDDR4 1GB/2GB/4GB</li>
<li>Storage eMMC, microSD, M.2 SSD</li>
<li>Display HDMI 2.0 4K@60, Audio 3.5mm jack</li>
<li>WiFI 802.11 ac, Bluetooth 5.0, Gigabit Ethernet with PoE</li>
<li>2 x USB 3.0, 2 x USB 2.0</li>
<li>IO 40-pin GPIO header</li>
<li>Power USB Type C, RTC battery connector</li>
</ul>
<p>Por si fuera poco tiene un precio razonable y similar al resto de placas que está entre los 70 € y los 107 € según configuración de memoria y accesorios incluidos, además es ofrecido por varias tiendas alemanas. Aunque no tiene el soporte de la Raspberry Pi en cuanto a características técnicas es posiblemente el mejor modelo de los comentados en este artículo.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/C4p9EpjA0ZM" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h3 id="asus-tinker-board">ASUS Tinker Board</h3>
<p>La <a href="https://www.asus.com/uk/Single-Board-Computer/Tinker-Board/overview/">ASUS Tinker Board</a> también está basada en un <em>SoC</em> de Rockchip pero en este caso el modelo <a href="http://www.rock-chips.com/a/en/products/RK32_Series/2014/0504/484.html">RK3288</a> que como CPU tiene el modelo más potente de 32 bits con una ARM Cortex-A17 <em>quad-core</em> e incorporando una GPU Mali-T764 mejor que la Mali de la Rock64. Tiene 2 GiB de memoria e incorpora de serie WiFi N y Bluetooth 4.0.</p>
<p>Su precio es algo más elevado que la Rock64 y tiene menos memoria pero más que la Raspberry Pi, aún así incorpora de serie WiFi y Bluetooth por lo que no sería necesario comprar elementos adicionales.</p>
<ul>
<li>CPU Rockchip Quad-Core RK3288 processor</li>
<li>Memoria 2GB Dual Channel DDR3</li>
<li>GPU ARM Mali-T764</li>
<li>Micro SD(TF) card slot</li>
<li>Red Gigabit Ethernet</li>
<li>WiFi 802.11 b/g/n, Bluetooth V4.0 + EDR</li>
<li>Audio RTL ALC4040 CODEC</li>
<li>4 x USB 2.0</li>
<li>GPIO 40-pin header, up to 28 x GPIO pins, up to 2 x SPI bus, up to 2 x I2C bus, up to 4 x UART, up to 2 x PWM, up to 1 x PCM/I2S, 2 x 5V power pins, 2 x 3.3V power pins, 8 x ground pins, 1 x PWM, 1 x S/PDIF, 1 x 15-pin MIPI DSI, 1 x 15-pin MIPI CSI</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/asus-tinker-board_hu26cefdac17f008c08b5b052328b833f9_77329_2560x1440_fit_q90_box.jpg" data-gallery="" title="ASUS Tinker Board"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/asus-tinker-board_hu26cefdac17f008c08b5b052328b833f9_77329_300x200_fit_q90_box.jpg" width="290" height="200" alt="ASUS Tinker Board" title="ASUS Tinker Board"  class="lozad "></a></p>
<figcaption>ASUS Tinker Board</figcaption>
</figure>
</div>
<h3 id="cubox">Cubox</h3>
<p>Aunque los modelos de <a href="https://www.solid-run.com/">SolidRun</a> son significativamente más caros poseen buenas especificaciones como el modelo <a href="https://www.solid-run.com/product/cubox-i4x4/">CuBox i4x4</a> con un procesador <em>quad core</em> aunque en si versión ARMv7 de 32 bits pero con 4 GiB de memoria, gigabit ethernet, WiFi y bluetooth incluido en un formato de cubo de 2 pulgadas. Como decía a un precio mas elevado, $170.</p>
<p>El modelo mas reciente <a href="https://www.solid-run.com/nxp-family/cubox-pulse/">Cubox Pulse</a> incorpora un procesador <a href="https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-8-processors:IMX8-SERIES">NXP i.MX8M</a> ya a 64 bits pero con el precio igualmente abultado respecto a otras opciones de 170 €.</p>
<ul>
<li>CPU i.MX8M Dual/Quad core ARM Cortex A53 up to 1.5Ghz (with ARM M4 GPP)</li>
<li>Memoria up to 4GB LPDDR4</li>
<li>MicroSD</li>
<li>eMMC</li>
<li>2 x USB 3.0, 1 x HDMI 2.0, 1 x RJ45</li>
<li>Power on button</li>
<li>Indication LEDs</li>
<li>RTC</li>
<li>IR receiver</li>
<li>PoE sink support</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/cubox_hu2c855b5894605dc99ee7a60598c9e367_87196_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cubox"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/cubox_hu2c855b5894605dc99ee7a60598c9e367_87196_300x200_fit_q90_box.jpg" width="260" height="200" alt="Cubox" title="Cubox"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/cubox-pulse_hu2f7dfc62d4499ad78ab3f1361dd53ac8_41698_2560x1440_fit_q90_box.jpg" data-gallery="" title="Cubox Pulse"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/cubox-pulse_hu2f7dfc62d4499ad78ab3f1361dd53ac8_41698_300x200_fit_q90_box.jpg" width="189" height="200" alt="Cubox Pulse" title="Cubox Pulse"  class="lozad "></a></p>
<figcaption>Cubox y Cubox Pulse</figcaption>
</figure>
</div>
<h3 id="odroid">ODROID</h3>
<p>Otro distribuidor importante es <a href="https://www.hardkernel.com">Hardkernel</a> con sus modelos ODROID de pequeñas computadoras basadas en ARM con varios modelos entre ellos el <a href="http://www.hardkernel.com/main/products/prdt_info.php?g_code=G145457216438">ODROID C2</a> que posee un procesador ARM Cortex-A53 <em>quad-core</em>, 2 GiB de memoria, gigabit ethernet, soporta HDMI 2.0 4K@60fps, eMMC, 4 puertos USB 2.0 pero sin WiFi ni bluetooth. A un precio de $46.</p>
<p>Están preparando el modelo <a href="https://forum.armbian.com/topic/6496-odroid-n1-not-a-review-yet/">ODROID N1</a> también basada en el <em>SoC</em> Rockchip RK3399.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/odroid-c2_hu3d03a01dcc18bc5be0e67db3d8d209a6_214044_2560x1440_fit_q90_box.jpg" data-gallery="" title="ODROID C2"><img src="https://picodotdev.github.io/blog-bitix/2018/03/7-plus-computadoras-baratas-del-tamano-de-una-tarjeta-de-credito-basadas-en-gnu-linux-y-arm/images/odroid-c2_hu3d03a01dcc18bc5be0e67db3d8d209a6_214044_300x200_fit_q90_box.jpg" width="282" height="200" alt="ODROID C2" title="ODROID C2"  class="lozad "></a></p>
<figcaption>ODROID C2</figcaption>
</figure>
</div>
<h3 id="nanopi-orangepi-y-bananapi">NanoPi, OrangePi y BananaPi</h3>
<p>De <a href="http://nanopi.org/">NanoPi</a> voy a destacar el modelo <a href="http://nanopi.org/NanoPi-K2_Feature.html">NanoPi K2</a> con 2 GiB de memoria, procesador quad core, con WiFi y bluetooth y gigabit ethernet y soporte de 4K@60fps y H.265 10bit, H.264 a un precio de $50.</p>
<p>Parece que con la costumbre de denominar a estas placas bases el nombre de frutos están <a href="http://www.orangepi.org/orangepiplus2/">OrangePi Plus 2</a> y <a href="http://www.banana-pi.org/m3.html">BananaPi M3</a>, el primero a un precio de 45 € con 2 GiB de memoria y soporte para HDMI 4K además de incluir gigabit ethernet y WiFi. El modelo de Banana Pi se diferencia en tener un procesador <em>octa-core</em>, un puerto SATA y un precio superior de 85 €.</p>
<h3 id="conclusión">Conclusión</h3>
<p>Estos no son los únicos modelos que existen pero son algunos de los más destacables. La Raspberry Pi 4 destaca por tener un modelo con 8 GiB de memoria y conectividad con WiFi sin necesidad de adaptadores. A pesar de que las alternativas de placas bases sean tan capaces como la Raspberry Pi esta les gana en mejor soporte del software como distribuciones GNU/Linux y programas como Kodi que también es algo a tener muy en cuenta y este posiblemente es el motivo de que aún siendo menos capaz tiene más éxito e igualmente una muy buena opción. Quizá con algunas de estas placas alternativas hay que leer la documentación que tengan, algún foro y probar más cosas de las que requeriría una Raspberry Pi.</p>
<p>Estas placas son un logro del avance de la tecnología pero ciertamente no hay ningún modelo que soporte la memoria que un Intel NUC, todas estas placas no incluyen más de 8 GiB de memoria ni es ampliable, los NUC pueden llegar hasta los 32 GiB siendo más capaces. En cuanto al precio quizá los NUC son algo más caros pero la plataforma x86 tiene un gran soporte de software y no está tan fragmentado como la plataforma ARM, por otro lado al precio de las placas hay que añadirles los accesorios como la fuente de alimentación, caja, disipador, microSD o eMMC. A los NUC lo que les falta es el puerto GPIO para <a href="https://picodotdev.github.io/blog-bitix/series/electronica/">trastear con la electrónica como LEDs, <em>displays</em> y otros actuadores</a>. Si el propósito es de software preferiría un NUC, si el propósito es la electrónica o un precio muy ajustado una de estas placas.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.arm.com/products/processors/cortex-a">Procesadores ARM Cortex-A</a></li>
<li><a href="https://es.wikipedia.org/wiki/Arquitectura_ARM">Arquitectura ARM</a></li>
<li><a href="https://es.wikipedia.org/wiki/Raspberry_Pi">Raspberry Pi</a></li>
<li><a href="https://www.arm.com/products/graphics-and-multimedia/mali-gpu">GPUs ARM Mali</a></li>
<li><a href="https://www.arm.com/products/graphics-and-multimedia/mali-gpu">GPUs ARM Mali (wkipedia)</a></li>
<li><a href="https://en.wikipedia.org/wiki/VideoCore">VideoCore</a></li>
<li><a href="https://www.khronos.org/opengles/">OpenGL ES</a></li>
<li><a href="https://www.khronos.org/opencl/">OpenCL</a></li>
<li><a href="https://www.khronos.org/openvg/">OpenVG</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="hardware"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/el-problema-de-concurrencia-del-agente-y-los-fumadores-resuelto-en-java/</id>
        <title>El problema de concurrencia del agente y los fumadores resuelto en Java</title>
        <updated>2018-03-05T19:00:00+01:00</updated>
        <published>2018-03-05T19:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/03/el-problema-de-concurrencia-del-agente-y-los-fumadores-resuelto-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Junto con los ejemplos de <a href="https://picodotdev.github.io/blog-bitix/2018/02/el-problema-de-concurrencia-de-la-cena-de-los-filosofos-resuelto-con-java/">la cena de los filósofos</a> y <a href="https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/">la barbería</a> el de los fumadores es otro ejemplo clásico que se estudia en las asignaturas de sistemas operativos. Estos ejemplos necesitan de mecanismos de sincronización y concurrencia para su correcto funcionamiento al haber varios procesos y recursos compartidos que los procesos intentan utilizar de forma concurrente pero que no se debe permitir utilizando notificaciones entre procesos o <a href="https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/">algunas primitivas de sincronización, concurrencia e hilos que posee Java</a> como <em>mutex</em>, <em>locks</em> o semáforos.</p>
<p>El caso de los fumadores consiste en un grupo de fumadores que para fumar necesitan los ingredientes que les faltan para hacer un cigarrillo y fumárselo, poseen un ingrediente en cantidades ilimitadas pero les faltan otros dos. El agente posee cantidades ilimitadas de todos los ingredientes que son papel, tabaco y cerillas pero solo deja en una mesa dos de estos ingredientes a la vez. Cada fumador posee un ingrediente distinto de los tres necesarios y según los ingredientes que deje el agente uno de los fumadores podrá fumar con los dos ingredientes que el agente deja.</p>
<p>El agente y los fumadores representan en la realidad a procesos y los ingredientes a los recursos de un sistema. La dificultad radica en sincronizar los agentes y fumadores para que el agente cuando deje ingredientes en la mesa el fumador correcto fume cuando.</p>
<p>A primera vista podríamos intentar que cada uno de los fumadores tomase cada uno de los ingredientes que le falta y se pusiese a fumar representando un ingrediente como un semáforo, sin embargo, esta solución puede producir un bloqueo si uno de los otros fumadores que no pueden fumar según los ingredientes que ha dejado el agente le quitan al que podría fumar uno de los ingredientes que necesita. Por ejemplo, un caso de bloqueo sería el caso de que el agente deje en la mesa los ingredientes de tabaco y cerillas el fumador que podría fumar sería el 1 pero si el fumador 2 es más rápido y se ejecuta antes tomando el tabaco el fumador 1 se quedaría esperando a tomar tabaco y el fumador 2 también por no haber dejado el agente papel sino cerillas.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Smoker 1&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">   <span class="n">tobbaco</span><span class="o">.</span><span class="na">take</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">   <span class="n">match</span><span class="o">.</span><span class="na">take</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Smoker 2&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">   <span class="n">tobbaco</span><span class="o">.</span><span class="na">take</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">   <span class="n">paper</span><span class="o">.</span><span class="na">take</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Smoker 3&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">   <span class="n">paper</span><span class="o">.</span><span class="na">take</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">   <span class="n">match</span><span class="o">.</span><span class="na">take</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>SmokersDeadlock.java</span>
    </div>
</div>
<p>Para la solución hay que optar por otra estrategia, en el ejemplo de código he creado tres clases que representa a cada una de las entidades, una clase <em>Agent</em>, una clase <em>Smoker</em> y una clase <em>Table</em>, adicionalmente una clase <em>Pusher</em> que se encargará de despertar al <em>Smoker</em> correcto según los ingredientes de la mesa. Todas las clases implementan la interfaz <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Runnable.html">Runnable</a> para convertir cada una de las instancias en un hilo de ejecución. Cuando un agente deja ingredientes en la mesa se notifica a todos los incitadores  o <em>pushers</em> para indicarles que hay ingredientes listos, el <em>pusher</em> adquiere el ingrediente que tiene asignado para tomar y comprueba cual es el único ingrediente que falta en la mesa, si no lo sabe porque falten varios ingredientes indica que en la mesa está su ingrediente y deja el trabajo de despertar al fumador al siguiente <em>pusher</em>. El <em>pusher</em> que sepa que dos ingredientes hay en la mesa despierta al fumador que puede fumar con el ingrediente que tiene y los dos que hay en la mesa. El fumador se pone a fumar y cuando termina se indica al agente que genere otros dos ingredientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Component</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">MATCH</span><span class="o">,</span> <span class="n">TOBACCO</span><span class="o">,</span> <span class="n">PAPER</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Component.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span><span class="lnt">88&#10;</span><span class="lnt">89&#10;</span><span class="lnt">90&#10;</span><span class="lnt">91&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Semaphore</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Table</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Table</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Agent</span> <span class="n">agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Smoker</span><span class="o">&gt;</span> <span class="n">smokers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Pusher</span><span class="o">&gt;</span> <span class="n">pushers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">EnumMap</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">,</span> <span class="n">Semaphore</span><span class="o">&gt;</span> <span class="n">components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">EnumMap</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">hasComponent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Table</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">agent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Agent</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">smokers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">pushers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">components</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumMap</span><span class="o">&lt;&gt;(</span><span class="n">Component</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">hasComponent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumMap</span><span class="o">&lt;&gt;(</span><span class="n">Component</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Component</span> <span class="n">component</span> <span class="o">:</span> <span class="n">Component</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Smoker</span> <span class="n">smoker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Smoker</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">component</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smokers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">smoker</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pusher</span> <span class="n">pusher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pusher</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">component</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">pushers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pusher</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">component</span><span class="o">,</span> <span class="k">new</span> <span class="n">Semaphore</span><span class="o">(</span><span class="n">0</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">hasComponent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">component</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">hasComponent</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">hasComponent</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setComponent</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">hasComponent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">component</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">take</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">components</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">component</span><span class="o">).</span><span class="na">acquire</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">&gt;</span> <span class="nf">getComponents</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">&gt;</span> <span class="n">components</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">noneOf</span><span class="o">(</span><span class="n">Component</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">hasComponent</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">components</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">putComponents</span><span class="o">(</span><span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">&gt;</span> <span class="n">components</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Agent generated {}&#34;</span><span class="o">,</span> <span class="n">components</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Component</span> <span class="n">component</span> <span class="o">:</span> <span class="n">Component</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">hasComponent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">component</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Component</span> <span class="n">component</span> <span class="o">:</span> <span class="n">components</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">components</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">component</span><span class="o">).</span><span class="na">release</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">awakeAgent</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">agent</span><span class="o">.</span><span class="na">awake</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">awakeSmoker</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Smoker</span> <span class="n">smoker</span><span class="o">:</span> <span class="n">smokers</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">smoker</span><span class="o">.</span><span class="na">hasComponent</span><span class="o">(</span><span class="n">component</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smoker</span><span class="o">.</span><span class="na">awake</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">break</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">agent</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Smoker</span> <span class="n">smoker</span> <span class="o">:</span> <span class="n">smokers</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">smoker</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Pusher</span> <span class="n">pusher</span> <span class="o">:</span> <span class="n">pushers</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">pusher</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Table.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Semaphore</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Smoker</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Smoker</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Table</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Component</span> <span class="n">component</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Semaphore</span> <span class="n">components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Smoker</span><span class="o">(</span><span class="n">Table</span> <span class="n">table</span><span class="o">,</span> <span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">component</span> <span class="o">=</span> <span class="n">component</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">components</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Semaphore</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Component</span> <span class="nf">getComponent</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">component</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasComponent</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">component</span> <span class="o">==</span> <span class="n">component</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">smoke</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Smoker {} smoking during {}ms&#34;</span><span class="o">,</span> <span class="n">component</span><span class="o">,</span> <span class="n">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">awake</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">components</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">awaitComponents</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">components</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">awaitComponents</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smoke</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">table</span><span class="o">.</span><span class="na">awakeAgent</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Smoker.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Semaphore</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Agent</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Table</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Random</span> <span class="n">random</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Semaphore</span> <span class="n">semaphore</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Agent</span><span class="o">(</span><span class="n">Table</span> <span class="n">table</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">semaphore</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Semaphore</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">&gt;</span> <span class="nf">nextComponents</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">&gt;</span> <span class="n">components</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">allOf</span><span class="o">(</span><span class="n">Component</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Component</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">components</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Component</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">components</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">putComponents</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">table</span><span class="o">.</span><span class="na">putComponents</span><span class="o">(</span><span class="n">nextComponents</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">semaphore</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">awake</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sleep</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">putComponents</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Agent.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pusher</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">ReentrantLock</span> <span class="n">lock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Table</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Component</span> <span class="n">component</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Pusher</span><span class="o">(</span><span class="n">Table</span> <span class="n">table</span><span class="o">,</span> <span class="n">Component</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">component</span> <span class="o">=</span> <span class="n">component</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">table</span><span class="o">.</span><span class="na">take</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">table</span><span class="o">.</span><span class="na">setComponent</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Component</span><span class="o">&gt;</span> <span class="n">components</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">complementOf</span><span class="o">(</span><span class="n">table</span><span class="o">.</span><span class="na">getComponents</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">components</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">table</span><span class="o">.</span><span class="na">awakeSmoker</span><span class="o">(</span><span class="n">components</span><span class="o">.</span><span class="na">iterator</span><span class="o">().</span><span class="na">next</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Pusher.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.agent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Table</span><span class="o">()).</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="media">
<a href="https://asciinema.org/a/167230" target="_blank"><amp-img src="https://asciinema.org/a/167230.png" width="650" height="563" class="lozad"></amp-img></a>
</div>
<p>En el siguiente <a href="https://cse.yeditepe.edu.tr/~kserdaroglu/spring2014/cse331/labnotes/WEEK%205%20-%20SEMAPHORES/mysemaphoreexamplesMOE.pdf">documento con varios de los problemas de concurrencia y sincronización</a> está muy bien explicado la solución a este problema de los fumadores y de los otros casos. En algunos otros sitios este caso lo convierten en un problema de sincronización en vez de uno de concurrencia.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaConcurrency">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Cigarette_smokers_problem">Cigarette smokers problem</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/">Introducción sobre la programación concurrente en Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/02/el-problema-de-concurrencia-de-la-cena-de-los-filosofos-resuelto-con-java/</id>
        <title>El problema de concurrencia de la cena de los filósofos resuelto con Java</title>
        <updated>2018-02-25T10:00:00+01:00</updated>
        <published>2018-02-25T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/02/el-problema-de-concurrencia-de-la-cena-de-los-filosofos-resuelto-con-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En un <a href="https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/">artículo de introducción sobre la programación concurrente en Java</a> explicaba cuales eran la facilidades que proporciona este lenguaje para la programación concurrente en múltiples hilos. En él exponía dos ejemplos clásicos que se estudian en las asignaturas de sistemas operativos, uno de ellos era el de <a href="https://es.wikipedia.org/wiki/Problema_de_la_cena_de_los_fil%C3%B3sofos">la cena de los filósofos</a> donde varios filósofos sentados en una tabla durante una cena se dedican a pensar y cuando tienen hambre comen usando para ello dos tenedores que comparten con sus compañeros que se sientan a la izquierda y derecha.</p>
<p>Dado que dos filósofos no puede utilizar el mismo tenedor a la vez hay que implementar sincronización a la hora de utilizarlos. En la realidad un filósofo representa a un proceso y un tenedor representa a un recurso compartido de uso exclusivo.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/el-problema-de-concurrencia-de-la-cena-de-los-filosofos-resuelto-con-java/images/dining-philosophers_huf96065da3b6879fd5d0ed4f92270ce22_1395015_2560x1440_fit_box_3.png" data-gallery="" title="La cena de los filósofos"><img src="https://picodotdev.github.io/blog-bitix/2018/02/el-problema-de-concurrencia-de-la-cena-de-los-filosofos-resuelto-con-java/images/dining-philosophers_huf96065da3b6879fd5d0ed4f92270ce22_1395015_300x200_fit_box_3.png" width="193" height="200" alt="La cena de los filósofos" title="La cena de los filósofos"  class="lozad "></a></p>
<figcaption>La cena de los filósofos</figcaption>
</figure>
</div>
<p>La solución del ejemplo que ponía en el artículo anterior no era completamente correcto ya que un filósofo si tiene mala suerte podría quedarse sin  comer o sin comer durante mucho tiempo, debido a que en esa implementación el filósofo intentaba coger los tenedores y si no podía desistía si alguno de sus compañeros los estuviese utilizando. Las reglas que ha de cumplir una solución a un problema de concurrencia para considerarse válida son:</p>
<ol>
<li>Exclusión mutua: Si un proceso se está ejecutando en su sección crítica ningún otro proceso se puede estar ejecutando en la suya.</li>
<li>Progreso: Si ningún proceso se está ejecutando en su sección crítica y hay otros procesos que desean entrar en las suyas, entonces solo aquellos procesos que no se está ejecutando en su sección restante pueden participar en la decisión  del cuál será el siguiente en entrar en la sección crítica, y esta selección no puede postergarse indefinidamente.</li>
<li>Espera limitada: Debe haber un límite en el número de veces que se permite que los demás procesos entren en su sección crítica después de que un proceso haya efectuado una solicitud para entrar en la suya y antes de que se conceda esa solicitud.</li>
</ol>
<p>En la implementación de este ejemplo evitaré que un filósofo pueda quedarse sin comer. La razón de que un filósofo desistiera de coger uno de los tenedores que necesita si uno de sus compañeros ya lo tuviese era para evitar un bloqueo circular en el caso de que todos los filósofos al mismo tiempo cogiesen su tenedor izquierdo, en esta situación ninguno de ellos podría coger su tenedor derecho y se quedarían todos esperando indefinidamente, se produciría un bloqueo indefinido o <em>deadlock</em>.</p>
<p>Para evitar un bloqueo indefinido una de las siguientes reglas no se ha de cumplir:</p>
<ol>
<li>Exclusión mutua: Por lo menos un recurso debe retenerse en modo no compartido; es decir, sólo un proceso a la vez puede usar el recurso. Si otro proceso solicita el recurso, deberá esperar hasta que se haya liberado.</li>
<li>Retención y espera: Debe haber un proceso que retenga por lo menos un recurso y espere adquirir otros recursos retenidos por otros procesos.</li>
<li>No apropiación: Los recursos no se pueden quitar; es decir, un recurso solo puede ser liberado voluntariamente por el proceso que lo retiene, después de que haya cumplido su tarea.</li>
<li>Espera circular: Debe haber un conjunto { P0, P1, &hellip;, Pn } de procesos en espera tales que P0 espera un recurso retenido por P1, P1 espera un recurso retenido por P2, &hellip; Pn-1 espera un recurso retenido por On, y Pn espera un recurso retenido por P0.</li>
</ol>
<p>En esta implementación he optado por hacer que el último filósofo en vez de ser diestro sea zurdo de modo que primero intente coger el tenedor izquierdo y luego el derecho, con este simple cambio la espera circular ya no puede producirse y con ello el bloqueo indefinido.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.philosophers2</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">picodotdev</span><span class="o">.</span><span class="na">blogbitix</span><span class="o">.</span><span class="na">javaconcurrency</span><span class="o">.</span><span class="na">philosophers</span><span class="o">.</span><span class="na">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Setuping dinner...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Table</span> <span class="n">table</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Table</span><span class="o">(</span><span class="n">5</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span> <span class="n">dinner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">table</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Starting dinner...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dinner</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dinner</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.philosophers2</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Table</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Fork</span><span class="o">&gt;</span> <span class="n">forks</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Philosopher</span><span class="o">&gt;</span> <span class="n">philosophers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">times</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Table</span><span class="o">(</span><span class="kt">int</span> <span class="n">numPhilosophers</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">numPhilosophers</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;There should be more than one philosopher&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">forks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">philosophers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">times</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">longs</span><span class="o">(</span><span class="n">2000</span><span class="o">,</span> <span class="n">7000</span><span class="o">).</span><span class="na">iterator</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numPhilosophers</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Fork</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fork</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">forks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numPhilosophers</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">numPhilosophers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Fork</span> <span class="n">left</span> <span class="o">=</span> <span class="n">forks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Fork</span> <span class="n">right</span> <span class="o">=</span> <span class="n">forks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">boolean</span> <span class="n">isLeftHanded</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Philosopher</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Philosopher</span><span class="o">(</span><span class="s">&#34;Philosopher &#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">),</span><span class="k">this</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">isLeftHanded</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">philosophers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">long</span> <span class="nf">getTime</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">times</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExecutorService</span> <span class="n">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">philosophers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Philosopher</span> <span class="n">p</span> <span class="o">:</span> <span class="n">philosophers</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Table.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.philosophers2</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fork</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">ReentrantLock</span> <span class="n">lock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Fork</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">take</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">drop</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">isHeld</span><span class="o">())</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isHeld</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">lock</span><span class="o">.</span><span class="na">isHeldByCurrentThread</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Fork.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaconcurrency.philosophers2</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Philosopher</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Philosopher</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Table</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Fork</span> <span class="n">right</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Fork</span> <span class="n">left</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isLeftHanded</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Philosopher</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Table</span> <span class="n">table</span><span class="o">,</span> <span class="n">Fork</span> <span class="n">left</span><span class="o">,</span> <span class="n">Fork</span> <span class="n">right</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isLeftHanded</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">isLeftHanded</span> <span class="o">=</span> <span class="n">isLeftHanded</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">think</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} thinking during {}ms&#34;</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">time</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">spendTime</span><span class="o">(</span><span class="n">time</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">takeForks</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} eating during {}ms&#34;</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">time</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">spendTime</span><span class="o">(</span><span class="n">time</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dropForks</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">think</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">eat</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">takeForks</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">isLeftHanded</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">left</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">right</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">right</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">left</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">dropForks</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">isLeftHanded</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">left</span><span class="o">.</span><span class="na">drop</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">right</span><span class="o">.</span><span class="na">drop</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">right</span><span class="o">.</span><span class="na">drop</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">left</span><span class="o">.</span><span class="na">drop</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">spendTime</span><span class="o">(</span><span class="kt">long</span> <span class="n">time</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">time</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Philosopher.java</span>
    </div>
</div>
<div class="media">
<a href="https://asciinema.org/a/165278" target="_blank"><amp-img src="https://asciinema.org/a/165278.png" width="650" height="563" class="lozad"></amp-img></a>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaConcurrency">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://bruceeckel.github.io/2016/12/29/dining-philosophers-in-java-8/">Dining Philosophers in Java 8</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/</id>
        <title>Consola de juegos retro con Lakka y una Raspberry Pi</title>
        <updated>2018-03-05T19:30:00+01:00</updated>
        <published>2018-02-23T23:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>El propósito original de las Raspberry Pi era educativo y se ha hecho muy popular debido a su bajo precio y un buen trabajo de <em>marketing</em>. Sin embargo, puede utilizarse para muchos otros propósitos desde aprendizaje a programación, electrónica, servidor de archivos personales, descarga de películas, series y libros con torrent y también como una consola de juegos antiguos de arcade.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/lakka.png" width="200" height="200" alt="Lakka" title="Lakka"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Desde que compré la <a href="https://www.raspberrypi.org/">Raspberry Pi</a> en el año 2012, el modelo inicial B con 256 MiB de memoria, me ha dado y me esta dando un estupendo servicio. Principalmente la he estado usando para descargar películas y libros vía <em>torrent</em> con <a href="https://transmissionbt.com/">Transmission</a> usando la distribución <a href="https://archlinuxarm.org/">Arch Linux para ARM</a>. Sin embargo, ya estoy pensando en sustituirla por algo más potente para hacer algunas pruebas con <a href="https://www.docker.com/">Docker</a>, <a href="https://www.ansible.com/">Ansible</a> y algunas pruebas más que se me ocurran aparte de seguir queriendo hacer descargas o en un futuro con la función de SmartTV. De la Raspberry Pi no se lanzará un nuevo modelo, el que sería el 4, hasta el 2019 y cuando salga no creo que sea más potente que una <a href="https://www.pine64.org/?page_id=7147">Rock64</a> que ya a día de hoy incorporan hasta 4 GiB de memoria, tienen Gigabit Ethernet y un puerto USB 3.0 con precio similar a la Raspberry Pi, lo único que le falta respecto al modelo de la RPi 3 es WiFi y Bluetooth pero a cambio se puede tener 4 veces más memoria, Gigabit Ethernet y un puerto USB 3.0. El mayor problema de la Rock64 es su soporte tanto en distribuciones, software y comunidad, en estos es donde la Raspberry Pi no tiene competidor.</p>
<p>Pero antes estoy pensando en el uso que le puedo dar a la Raspberry Pi para que no se quede en un cajón cogiendo polvo. Y he pensado en utilizarla como consola de juegos retro con <a href="https://www.lakka.tv/">Lakka</a> para mis sobrinos que ahora usan PlayStation 1 pero que ya tiene los cables de los mandos estropeados de tanto doblarlos al guardarlos, de tanto uso ya no funcionan bien.</p>
<p>Lo primero que he hecho es comprar unos <a href="http://amzn.to/2Cg6035">mandos similares a los de la antigua Super NES</a>, aunque con un teclado USB también se puede jugar es más cómodo con los mandos, además de poder jugar a dos jugadores. En muchos juegos de <em>arcade</em> antiguos es posible incluso a tres o cuatro jugadores.</p>
<div class="media">
<figure>
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/retroarch.svg" width="300" height="200" alt="RetroArch" title="RetroArch"  class="lozad "></p>
</figure>
</div>
<p>Los elementos necesarios para tener tener una consola retro son los siguientes: una <a href="https://amzn.to/2MXH57Q">Raspberry Pi</a>, un <a href="https://amzn.to/2YvYMRw">cargador USB</a> adecuado, una <a href="https://amzn.to/3ecB3wp">tarjeta microSD de 64 GiB</a> o más, <a href="http://amzn.to/2Cg6035">dos mandos para consola USB</a> o un <a href="http://amzn.to/2ou0QHD">teclado USB</a>, un <a href="http://amzn.to/2sPcjqz">cable HDMI</a> y si se quiere una <a href="http://amzn.to/2Fvtyjy">caja</a>. Por unos 65 € se pueden adquirir los elementos imprescindibles en la tienda de <a href="https://amzn.to/2flFhHA">Amazon</a>.</p>
<ul>
<li><a href="https://amzn.to/2MXH57Q">Raspberry Pi</a></li>
<li><a href="https://amzn.to/2YvYMRw">Cargador USB</a></li>
<li><a href="https://amzn.to/3ecB3wp">Tarjeta microSD de 64 GiB</a></li>
<li><a href="https://amzn.to/2UCN0n6">Cable HDMI</a></li>
<li><a href="http://amzn.to/2Cg6035">Mandos USB</a></li>
<li><a href="http://amzn.to/2ou0QHD">Teclado USB</a></li>
<li><a href="https://www.lakka.tv/">Software Lakka</a></li>
<li><a href="https://archive.org/details/datomatic.no-intro.org">ROMs de juegos</a></li>
</ul>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0899VXM8F&amp;linkId=d5f0684371c6b5b8fa5cbd472b276ba4" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VD5L1VY&amp;linkId=f7a5d402571fb5dd48fa2311dc169469" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01566WOAG&amp;linkId=1c7d89fa46e38c81f0e35cb1518e80ea" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07CXXBTST&amp;linkId=aee5521403e014f5b256191d116ac4b3" title="Amazon" class="lozad"></iframe>
</div>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N59IUV5&amp;linkId=0bcc896ec870ce504e2c4c0acfaa8870" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00564GWEI&amp;linkId=2264c2741c0914e881d4e70b36b927da" title="Amazon" class="lozad"></iframe>
</div>
<p>El software para usar la Raspberry Pi como consola retro que he utilizado es Lakka que es una distribución <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> especifica para convertir un ordenador en una consola de juegos retro. Para instalarlo en la tarjeta microSD hay que <a href="http://www.lakka.tv/get/">descargar la imagen de Lakka</a> y una forma simple de grabarla en la tarjeta microSD es utilizando <a href="https://www.balena.io/etcher/">Etcher</a>, basta instalarlo, iniciarlo, seleccionar la imagen de Lakka una vez descomprimido su archivo zip, seleccionar la unidad de la tarjeta SD (si es necesario ya que Etcher puede seleccionarla automáticamente) y pulsar el botón <em>Flash!</em>, después de unos pocos minutos la imagen está grabada y la tarjeta microSD lista para usarla en la Raspberry Pi y efectuar el primer inicio.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/etcher_huf9f2630e663feee1d2eb7938a2d085bb_110546_2560x1440_fit_box_3.png" data-gallery="" title="Etcher"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/etcher_huf9f2630e663feee1d2eb7938a2d085bb_110546_300x200_fit_box_3.png" width="300" height="162" alt="Etcher" title="Etcher"  class="lozad "></a></p>
<figcaption>Etcher</figcaption>
</figure>
</div>
<p>Los juegos se distribuyen en archivos denominados ROM y estos se pueden descargar de ciertas páginas, una de ellas es de <a href="https://archive.org/">Internet Archive</a> donde está una <a href="https://archive.org/details/datomatic.no-intro.org">colección de juegos</a> de las consolas más populares o si sabemos el nombre del juego de <em>arcade</em> descargarlo individualmente de <a href="http://coolrom.com/">CoolROM</a>. Hay miles de juegos por lo que es importante conocer su nombre para hacer la búsqueda. En otro artículo hice una pequeña <a href="https://picodotdev.github.io/blog-bitix/2016/08/jugar-a-videojuegos-clasicos-y-miticos-de-arcade-con-mame-en-gnu-linux/">recopilación de juegos míticos de arcade</a> y en otros blog están recopilados otra selección de juegos:</p>
<ul>
<li><a href="http://mundogeek.net/archivos/2009/11/16/los-10-mejores-juegos-de-mame-para-nostalgicos/">Los 10 mejores juegos de MAME para nostálgicos</a></li>
<li><a href="http://lopezpino.com/2010/08/24/los-mejores-juegos-de-mame/">Los mejores juegos de MAME</a></li>
<li><a href="https://www.taringa.net/comunidades/mame-arcade/4629126/Los-Mejores-234-Juegos-de-Mame-Por-Mediafire.html">Los Mejores 234 Juegos de Mame Por Mediafire</a></li>
<li><a href="https://www.hobbyconsolas.com/reportajes/100-juegos-miticos-nes-49310">Los 100 juegos míticos de NES</a></li>
</ul>
<p>Algunas de las consolas emuladas son:</p>
<ul>
<li>Nintendo Entertainment System, Super Nintendo Entertainment System, Nintendo 64, Nintendo GameCube, Game Boy</li>
<li>Sega Master System, Genesis, Saturn, Dreamcast, Game Gear</li>
<li>MSX, MSX 2</li>
<li>Atari 2600, 5200, 7800, Lynx, Jaguar</li>
<li>Varias más y juegos de máquinas recreativas con FBA Alpha y MAME</li>
</ul>
<p>En el primer inicio Lakka debe hacer una serie de tareas para inicializar el sistema durante unos minutos, recomiendo no conectar el cable de red  ni ningún mando o teclado en este paso. Una vez se completa este primer inicio el siguiente paso es copiar las ROMs, hay varias formas una de ellas es desde un equipo con GNU/Linux y copiar los archivos al directorio <em>/storage/ROMs/</em> directamente a la tarjeta microSD desde un ordenador. En otros sistemas que no saben como acceder a las particiones <em>ext4</em> de Linux la más sencilla es activando el protocolo SAMBA en Lakka y copiarlos por la red, aunque tarda más. SAMBA se activa desde el menú <em>Settings &gt; Services &gt; SAMBA Enable</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka_hu78451ee42d9f0aae4d1fe724b0e434d2_901934_2560x1440_fit_q90_box.jpg" data-gallery="" title="Lakka"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka_hu78451ee42d9f0aae4d1fe724b0e434d2_901934_300x200_fit_q90_box.jpg" width="160" height="200" alt="Lakka" title="Lakka"  class="lozad "></a></p>
<figcaption>Raspberry Pi ejecutando Lakka (La televisión va acorde con los juegos XD)</figcaption>
</figure>
</div>
<p>Con el cable de red conectado a la Raspberry Pi al <em>router</em> y desde un equipo con Windows, macOS o GNU/Linux y probando la dirección IP que el <em>router</em> le ha asignado a la Raspberry Pi se accede a los directorios compartidos por red poniendo en el explorador de archivos <em>\\192.168.0.2</em>, <em>\\192.168.0.3</em> o <em>\\192.168.0.4</em>, &hellip; o posteriores números dependiendo de los dispositivos conectados en la red, también podría ser <em>\\192.168.1.2</em>, <em>\\192.168.1.3</em>, <em>\\192.168.1.4</em>, &hellip; Con acceso en el explorador de archivos ya solo queda copiar las ROMs a la carpeta compartida ROMs. En macOS macOS con <em>Finder</em> en la opción <em>Ir &gt; Conectar al servidor</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka-samba-1_hu385d4d54b02ae23fe0c9b8e510fc62d4_197807_2560x1440_fit_box_3.png" data-gallery="" title="Carpetas compartidas por Lakka mediante SAMBA"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka-samba-1_hu385d4d54b02ae23fe0c9b8e510fc62d4_197807_300x200_fit_box_3.png" width="300" height="168" alt="Carpetas compartidas por Lakka mediante SAMBA" title="Carpetas compartidas por Lakka mediante SAMBA"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka-samba-2_huf0d9cd3b33c234685afc7cab18a8bffa_194063_2560x1440_fit_box_3.png" data-gallery="" title="Archivos de ROMs vía SAMBA"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka-samba-2_huf0d9cd3b33c234685afc7cab18a8bffa_194063_300x200_fit_box_3.png" width="300" height="169" alt="Archivos de ROMs vía SAMBA" title="Archivos de ROMs vía SAMBA"  class="lozad "></a></p>
<figcaption>Carpetas compartidas por Lakka mediante SAMBA</figcaption>
</figure>
</div>
<p>Copiados los archivos de las ROMs a la Raspberry Pi desde la opción <em>Import Content &gt; Scan Directory</em> de Lakka esta detectará todos los juegos que encuentre en su base de datos añadiéndolos en varios menús según el sistema emulado del juego en las últimas opciones del menú horizontal de Lakka.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka-games_hu824323f784df132c0c33e217641840f9_818081_2560x1440_fit_q90_box.jpg" data-gallery="" title="Juegos Lakka"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/lakka-games_hu824323f784df132c0c33e217641840f9_818081_300x200_fit_q90_box.jpg" width="160" height="200" alt="Juegos Lakka" title="Juegos Lakka"  class="lozad "></a></p>
<figcaption>Juegos Lakka</figcaption>
</figure>
</div>
<p>Detectadas las ROMS iniciar un juego basta con seleccionarlo desde los menús e iniciarlo. La mayoría funcionará con un rendimiento óptimo tanto el fluidez de imagen como en sonido, la Raspberry Pi es mucho más potente que los sistemas antiguos que emula, el modelo Raspberry Pi 3 incluso funcionará mejor. Aún asi algunos pueden ir un poco lentos o el sonido no ser completamente fiel al original.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/the-legend-of-zelda_hu39ca57807f5ed283640e80028a620925_139916_2560x1440_fit_box_3.png" data-gallery="" title="The Legend of Zelda"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/the-legend-of-zelda_hu39ca57807f5ed283640e80028a620925_139916_300x200_fit_box_3.png" width="140" height="200" alt="The Legend of Zelda" title="The Legend of Zelda"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/zelda-II-the-adventure-of-link_hu63f0e922d615f71d9710fba25de4ede9_84794_2560x1440_fit_box_3.png" data-gallery="" title="Zelda-II: The Adventure of Link"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/zelda-II-the-adventure-of-link_hu63f0e922d615f71d9710fba25de4ede9_84794_300x200_fit_box_3.png" width="146" height="200" alt="Zelda-II: The Adventure of Link" title="Zelda-II: The Adventure of Link"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/super-mario-bros-3_hua1ca64094a72c2e8cf3bf9808d6805a1_110980_2560x1440_fit_box_3.png" data-gallery="" title="Super Mario Bros 3"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/super-mario-bros-3_hua1ca64094a72c2e8cf3bf9808d6805a1_110980_300x200_fit_box_3.png" width="146" height="200" alt="Super Mario Bros 3" title="Super Mario Bros 3"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/mega-man-5_hua9e290a0024e55d79ec8b3048eaf5dd1_197813_2560x1440_fit_box_3.png" data-gallery="" title="Mega Man 5"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/mega-man-5_hua9e290a0024e55d79ec8b3048eaf5dd1_197813_300x200_fit_box_3.png" width="142" height="200" alt="Mega Man 5" title="Mega Man 5"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/1943_huaef99bddb12e1c97134ab2fb50de5614_557885_2560x1440_fit_box_3.png" data-gallery="" title="1943"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/1943_huaef99bddb12e1c97134ab2fb50de5614_557885_300x200_fit_box_3.png" width="144" height="200" alt="1943" title="1943"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/sonic-the-hedgehog_hub9781e6ba4310f33e0f23e679799bf12_169500_2560x1440_fit_box_3.png" data-gallery="" title="Sonic The Hedgehog"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/sonic-the-hedgehog_hub9781e6ba4310f33e0f23e679799bf12_169500_300x200_fit_box_3.png" width="141" height="200" alt="Sonic The Hedgehog" title="Sonic The Hedgehog"  class="lozad "></a></p>
<figcaption>Varios juegos de la NES y Sega</figcaption>
</figure>
</div>
<p>Tenía dudas por la calidad de los mandos por si eran demasiado frágiles, sin embargo, cuando me han llegado y los he visto me han parecido muy decentes y creo que tratándolos bien van a aguantar mucho tiempo. Además, la Raspberry Pi y Lakka los han reconocido sin ningún tipo de problema tanto conectando uno individualmente o los dos al mismo tiempo reconociendo correctamente todos los botones. Lo único que he tenido que hacer es configurar en el menú <em>Input &gt; Menu Toggle Gamepad Combo</em> (se elige con la cruceta a derecha e izquierda) un botón para salir de un juego pulsando a la vez los botones <em>Start + Select</em>.</p>
<p>Tampoco he tenido ningún problema para que me funcione por el HDMI como también por la salida de vídeo RCA y el sonido por el jack de 3.5mm que posee la Raspberry Pi 1 original que tengo, todo me ha funcionado sin haya tenido que realizar ninguna acción.</p>
<p>Si añadimos algunos juegos de <em>arcade</em> que Lakka no reconoce es posible crear una <a href="http://www.lakka.tv/doc/Playlists/">lista personalizada de juegos</a>, el nombre de la lista determina los iconos de los juegos y las <a href="https://forums.libretro.com/t/megathread-which-roms-work-with-lakka/5566">rutas de los <em>cores</em></a> dependen del sistema a emular, es probable que funcionen con <em>FB Alpha - Arcade Games</em> o <em>MAME</em>. Es importante no renombrar los nombres de los archivos zip de las ROMs ya que es necesario que tengan el nombre original para funcionar bien.</p>
<p>También es posible crear una lista de juegos favoritos (muy útil si tenemos muchos juegos), para ello hay que una vez iniciado el juego salir al menú con la combinación de teclas configurada en <em>Settings &gt; Input &gt; Menu Toggle Gamepad Combo</em> y usar la opción <em>Add to favorites</em>. Desde el mismo menú es posible salir del juego u obtener una captura de pantalla. La lista de favoritos se guarda en <em>Configfiles &gt; retroarch &gt; content_favorites.lpl</em> y el historial en <em>Configfiles &gt; retroarch &gt; content_history.lpl</em> por si se quiere editar manualmente.</p>
<p>Como son muchas ROMs reconocer una entre las muchas que hay o ver como es el juego sin entrar en él está la opción de descargar imágenes del juego y elegir ver una imagen de como es el juego, su portada o su pantalla inicial. Las imágenes se pueden descargar desde la opción <em>Main Menu &gt; Online Updater &gt; Thumbnails Updater</em>.</p>
<p>Al obtener ROMs de forma individual a veces es difícil dar con una que funcione, de algunos juegos hay varias versiones y es posible que algunas de ellas fallen al cargarse, hay que tener un poco de paciencia para encontrar la correcta.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/the-legend-of-zelda-screenshot_hu66fed8df68f46fcc35f3677e2ef44d56_3185_2560x1440_fit_box_3.png" data-gallery="" title="The Legend of Zelda"><img src="https://picodotdev.github.io/blog-bitix/2018/02/consola-de-juegos-retro-con-lakka-y-una-raspberry-pi/images/the-legend-of-zelda-screenshot_hu66fed8df68f46fcc35f3677e2ef44d56_3185_300x200_fit_box_3.png" width="229" height="200" alt="The Legend of Zelda" title="The Legend of Zelda"  class="lozad "></a></p>
<figcaption>Juego The Legend of Zelda de NES</figcaption>
</figure>
</div>
<p>Ya solo queda pasar algunos buenos momentos con estos juegos antiguos pero entretenidos, nosotros o los más pequeños de la casa. Otra opción alternativa a Lakka para el mismo propósito es <a href="https://retropie.org.uk">RetroPie</a> aunque la primera soporta algunos modelos mas de placas similares a la Raspberry Pi.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/05/raspberry-pi-desempaquetado-unboxing.html">Raspberry Pi, desempaquetado</a></li>
<li><a href="http://thumbnailpacks.libretro.com/">Imágenes juegos</a></li>
<li><a href="https://en.wikipedia.org/wiki/Nintendo_video_game_consoles">Nintendo video game consoles</a></li>
<li><a href="https://en.wikipedia.org/wiki/List_of_Sega_video_game_consoles">Sega video game consoles</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="juegos"/>
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
</feed>
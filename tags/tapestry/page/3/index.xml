<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/tapestry/</id>
    <updated>2020-05-01T10:30:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/anotacion-cached-de-apache-tapestry/</id>
        <title>Anotación Cached de Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-07-18T21:30:20+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/anotacion-cached-de-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>Como he comentado en un artículo anterior sobre los <a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/">modelos push y pull empleados en los motores de plantillas</a> donde comentaba algunas diferencias entre ellos, en el modelo pull es la vista la que pide los datos al controlador y no el controlador el que proporciona los datos a la vista como se hace en el modelo push. Un problema que puede plantear el que la vista pida los datos al controlador es que si la devolución de los datos solicitados son costosos en tiempo del cálculo, carga para el sistema en CPU o memoria, o intensivos en entrada/salida de disco o red y se piden varias veces puede suponer como resultado que el tiempo empleado para generar la página sea elevado o la aplicación consuma recursos innecesarios.</p>
<p><a href="http://tapestry.apache.org/">Apache Tapestry</a> que emplea el modelo pull dispone de la <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/annotations/Cached.html">anotación Cached</a> que permite cachear el resultado de un método a nivel de componente y página durante la generación de la misma. Su uso sería el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.tapestry.components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Label</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Label</span> <span class="n">label</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">page</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Inject</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">MainService</span> <span class="n">service</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">setupRender</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">page</span> <span class="o">=</span> <span class="o">(</span><span class="n">page</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">page</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Método que devuelve los articulos publicados o actualizados más recientemente de una etiqueta.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;label&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Post</span><span class="o">&gt;</span> <span class="nf">getPosts</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">Sort</span><span class="o">&gt;</span> <span class="n">sorts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sorts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Sort</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="n">Direction</span><span class="o">.</span><span class="na">DESCENDING</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pagination</span> <span class="n">pagination</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pagination</span><span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">NUMBER_POSTS_PAGE</span> <span class="o">*</span> <span class="n">page</span><span class="o">,</span> <span class="n">Globals</span><span class="o">.</span><span class="na">NUMBER_POSTS_PAGE</span> <span class="o">*</span> <span class="o">(</span><span class="n">page</span> <span class="o">+</span> <span class="mi">1</span><span class="o">),</span> <span class="n">sorts</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getPostDAO</span><span class="o">().</span><span class="na">findAllByLabel</span><span class="o">(</span><span class="n">label</span><span class="o">,</span> <span class="n">pagination</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;label&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Long</span> <span class="nf">getPostsCount</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getPostDAO</span><span class="o">().</span><span class="na">countBy</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Label.java</span>
    </div>
</div>
<p>En este ejemplo cada vez que se llama a los métodos getPosts, getPostsCount se accede a una base de datos (o sistema externo) que lanza una consulta, supongamos, costosa de calcular o que simplemente es innecesaria hacerla varias veces. Usando la anotación Cached podemos hacer la aplicación más eficiente evitando las segundas llamadas a los métodos. Si el componente Label del ejemplo se usa dentro de un bucle de un <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Loop.html">componente loop</a> y como parámetros se le van pasando varios labels las llamadas a los métodos getPosts y getPostCount se realizarán solo para cada valor diferente.</p>
<p>Algunas veces puede interesarnos que el cacheo dependa de un dato, es decir, que para cada valor de un dato la anotación Cached devuelva diferentes resultados. Y esto es lo que se hace en el ejemplo con el parámetro watch de la anotación, por cada valor de la propiedad label el resultado probablemente sea diferente pero nos interesa que el método solo se ejecute una vez por cada diferente valor, dado que los artículos y el número de ellos únicamente variarán en función de esta propiedad. Esto también puede ser usado para que solo se evalúe los métodos una vez por iteración de un bucle estableciendo la expresión watch al índice del bucle.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">&lt;!DOCTYPE html&gt;&#10;</span></span><span class="line"><span class="cl">&lt;t:container xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:loop source=&#34;posts&#34; value=&#34;post&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;t:postcomponent post=&#34;post&#34; excerpt=&#34;true&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/t:loop&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;/t:container&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Label.tml</span>
    </div>
</div>
<p>Aún así, la anotación Cached funciona a nivel de petición, cada vez que que se haga una petición a la aplicación y se llame al método anotado por primera vez y por cada valor de la expresión watch se ejecutará el método. Si tenemos muchas peticiones o un determinado componente tarda mucho en generar su contenido, por ejemplo, porque depende de un sistema externo lento (base de datos, http, &hellip;) quizá lo que debamos hacer es un componente que almacene durante un tiempo el contenido que genera y sea devuelto en múltiples peticiones, de modo que evitemos emplear un tiempo costoso en cada petición. Para ello, podríamos desarrollar un <a href="https://elblogdepicodev.blogspot.com.es/2011/01/componente-cache-para-tapestry-5.html">componente que usase una librería de cache</a> como por ejemplo <a href="http://ehcache.org/">EHCache</a>.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/</id>
        <title>Plantillas en Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-07-11T20:54:34+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>Una página web está formada por un conjunto de páginas enlazadas entre ellas. Cada página está formado por un html diferente pero normalmente todas las páginas de una misma web comparten el mismo aspecto variando solo una sección donde está el contenido propio de la página. La cabecera de la página, el pie de la página o los menús de navegación suelen estar presentes en todas las páginas de la web y suelen ser los mismos.</p>
<p>En este artículo voy a explicar como crear un componente que nos de a todas las páginas un aspecto común de una aplicación usando apache Tapestry como <em>framework</em> web de tal forma que esa parte común no esté duplicada en la aplicación y pueda ser reutilizada fácilmente. En el caso de <a href="http://www.blogstack.info">Blog Stack</a> las páginas se componen de las siguientes partes.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/images/plantilla-blog-stack_hud86d8d8e1d5b21a1b9287303b7e08493_139843_2560x1440_fit_box_3.png" data-gallery="" title="Plantilla de Blog Stack"><img src="https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/images/plantilla-blog-stack_hud86d8d8e1d5b21a1b9287303b7e08493_139843_300x200_fit_box_3.png" width="300" height="138" alt="Plantilla de Blog Stack" title="Plantilla de Blog Stack" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>El esquema de la plantilla será una cabecera, una barra de navegación con enlaces a diferentes secciones de la web, un menú lateral con contenido variable según la página, el contenido que variará según la página y un pie de página. Como todo componente de <a href="http://tapestry.apache.org/">Apache Tapestry</a> está formado de una clase Java y una plantilla. El componente puede tener diferentes parámetros, y en el caso del de la plantilla muchos para poder variar el contenido por defecto de las diferentes secciones de la página, estos son aside1, aside2, aside3, aside4.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">info.blogstack.components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.entities.Adsense</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.BindingConstants</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.Block</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ComponentResources</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Import</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Property</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.joda.time.DateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">(</span><span class="n">stack</span> <span class="o">=</span> <span class="s">&#34;blogstack&#34;</span><span class="o">,</span> <span class="n">module</span> <span class="o">=</span> <span class="s">&#34;app/analytics&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Layout</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span><span class="o">(</span><span class="n">read</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span><span class="o">(</span><span class="n">read</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">subtitle</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside1</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside2</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside3</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside4</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Adsense</span> <span class="n">adsense</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">page</span><span class="o">;</span>	&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Inject</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">ComponentResources</span> <span class="n">resources</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">setupRender</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">page</span> <span class="o">=</span> <span class="n">resources</span><span class="o">.</span><span class="na">getPageName</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getYear</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">getYear</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">title</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s&#34;</span><span class="o">,</span> <span class="n">getSubtitle</span><span class="o">());</span>			&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s | %s&#34;</span><span class="o">,</span> <span class="n">title</span><span class="o">,</span> <span class="n">getSubtitle</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getSubtitle</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">(</span><span class="n">subtitle</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;Blog Stack&#34;</span> <span class="o">:</span> <span class="n">subtitle</span><span class="o">;</span> &#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentClass</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">(</span><span class="n">isAside</span><span class="o">())</span> <span class="o">?</span> <span class="s">&#34;col-xs-12 col-sm-12 col-md-8 content&#34;</span> <span class="o">:</span> <span class="s">&#34;col-xs-12 col-sm-12 col-md-12 content&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAside</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">(</span><span class="n">aside1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aside2</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aside3</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aside4</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Layout.java</span>
    </div>
</div>
<p>El archivo tml asociado al componente plantilla será el que genere el contenido html que se enviará al navegador del usuario. En esta plantilla se incluye una cabecera con el logo de la aplicación y una frase que lo describe, posteriormente está una barra de navegación con varios enlaces, con &lt;t:body&gt; se incluye el contenido propio de la página que usa el componente plantilla y usando el componente <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Delegate.html">&lt;t:delegate&gt;</a> se incluye el contenido de los diferentes bloques aside si se han personalizado en el uso de la plantilla, con el componente <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/If.html">&lt;t:if test=&ldquo;aside&rdquo;&gt;</a> se comprueba si hay algún aside usándose el método isAside de la clase Layout asociada al componente plantilla y del tml. Finalmente, está el pie que será común a todas las páginas que usen este componente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span><span class="lnt">88&#10;</span><span class="lnt">89&#10;</span><span class="lnt">90&#10;</span><span class="lnt">91&#10;</span><span class="lnt">92&#10;</span><span class="lnt">93&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">&lt;!DOCTYPE html&gt;&#10;</span></span><span class="line"><span class="cl">&lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&lt;head&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;meta t:type=&#34;any&#34; t:pagina=&#34;${page}&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;title&gt;${title}&lt;/title&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;!-- Resources --&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;link href=&#34;//fonts.googleapis.com/css?family=Open+Sans:400,700&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;link href=&#34;//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;/&gt;	&#10;</span></span><span class="line"><span class="cl">	&lt;link href=&#34;https://picodotdev.github.io/blog-bitix/feed.atom.xml&#34; rel=&#34;alternate&#34; type=&#34;application/atom+xml&#34; title=&#34;Portada&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;link href=&#34;${context:images/favicon.png}&#34; rel=&#34;icon&#34; type=&#34;image/png&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/head&gt;&#10;</span></span><span class="line"><span class="cl">&lt;body&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;header&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;div class=&#34;container-fluid&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div class=&#34;col-xs-12 col-sm-12 col-md-4&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;h1&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34; class=&#34;blogstack&#34;&gt;&lt;span class=&#34;glyphicon glyphicon-th&#34;&gt;&lt;/span&gt; Blog &lt;span class=&#34;stack&#34;&gt;Stack&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div id=&#34;horizontalSkycraper&#34; class=&#34;col-xs-12 col-sm-12 col-md-8&#34;&gt;&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div  class=&#34;col-xs-12 col-sm-12 col-md-12&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;h4&gt;Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...&lt;/h4&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/header&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;div class=&#34;container-fluid&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;col-xs-12 col-sm-12 col-md-12&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;nav role=&#34;navigation&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;ul class=&#34;nav nav-pills menu&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;li&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34;&gt;Inicio&lt;/a&gt;&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;li&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;archive&#34; context=&#34;[]&#34;&gt;Archivo&lt;/a&gt;&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;li&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;faq&#34;&gt;Preguntas frecuentes&lt;/a&gt;&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/ul&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/nav&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;div class=&#34;container-fluid&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div t:type=&#34;any&#34; class=&#34;prop:contentClass&#34;&gt;&lt;t:body /&gt;&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;t:if test=&#34;aside&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;aside class=&#34;col-xs-12 col-sm-12 col-md-4&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;t:socialnetworks/&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;t:if test=&#34;aside1&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;   					&lt;t:delegate to=&#34;aside1&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;div id=&#34;bigRectangle&#34;&gt;&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;t:if test=&#34;aside2&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;t:delegate to=&#34;aside2&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;div class=&#34;col-xs-3 col-md-2&#34;&gt;&#10;</span></span><span class="line"><span class="cl">   							&lt;div id=&#34;wideSkycraper&#34;&gt;&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">   						&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;t:if test=&#34;aside3&#34;&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;div class=&#34;col-xs-3 col-md-2&#34;&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;t:delegate to=&#34;aside3&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	   				&lt;t:if test=&#34;aside4&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;t:delegate to=&#34;aside4&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/aside&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;footer&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;div class=&#34;container-fluid&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div class=&#34;col-xs-12 col-sm-12 col-md-12&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;div class=&#34;footer&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34;&gt;Blog Stack&lt;/a&gt; por &lt;a href=&#34;https://twitter.com/picodotdev/&#34;&gt;pico.dev&lt;/a&gt; está publicado bajo la licencia de software libre &lt;a href=&#34;http://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;GNU Affero General Public&lt;/a&gt;.&lt;br/&gt;&#10;</span></span><span class="line"><span class="cl">						El contenido agregado conserva la licencia de su bitácora.&lt;br/&gt;&#10;</span></span><span class="line"><span class="cl">						«Powered by» &lt;a href=&#34;https://github.com/picodotdev/blogstack&#34;&gt;Blog Stack&lt;/a&gt;, &lt;a href=&#34;http://tapestry.apache.org/&#34;&gt;Apache Tapestry&lt;/a&gt;, &lt;a href=&#34;https://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt;, &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&#34;http://www.oracle.com/es/technologies/java/overview/index.html&#34;&gt;Java&lt;/a&gt; y más software libre o de código abierto, inspirado en &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;.&lt;br/&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;span class=&#34;copyleft&#34;&gt;&amp;copy;&lt;/span&gt; pico.dev ${year}&#10;</span></span><span class="line"><span class="cl">					&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/footer&gt;&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	&lt;div id=&#34;fb-root&#34;&gt;&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;t:ads adsense=&#34;adsense&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/body&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/html&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Layout.tml</span>
    </div>
</div>
<p>Para terminar nos queda ver como sería usar este componente en una página donde queremos usarlo. En la etiqueta html se usa la plantilla con t:type para indicar que esa etiqueta es un componente de Tapestry y se le pasan los aside1 y aside2 que en esta página tienen contenido propio. El contenido de la etiqueta html se sustituirá por la etiqueta &lt;t:body&gt; de la plantilla, el contenido incluido en los componentes <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/Block.html">&lt;t:block&gt;</a> aunque esté dentro de la etiqueta html solo se mostrará cuando se haga uso de un &lt;t:delegate&gt;, como se hace el componente plantilla. Este es el caso de la <a href="http://www.blogstack.info">página índice de Blog Stack</a>. A pesar de todo el contenido que genera y solo consta de 34 líneas de código, esto muestra lo fácil que es en Tapestry dividir las diferentes partes de una página en componentes que puede ser reutilizados.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">&lt;html t:type=&#34;layout&#34; t:aside1=&#34;aside1&#34; t:aside2=&#34;aside2&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:data/&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:loop source=&#34;posts&#34; value=&#34;post&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;t:postcomponent post=&#34;post&#34; excerpt=&#34;true&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/t:loop&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;section class=&#34;index-pagination&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;div class=&#34;container-fluid&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;div class=&#34;row&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;col-xs-4 col-sm-4 col-md-4&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;t:if test=&#34;!lastPage&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34; context=&#34;nextContext&#34;&gt;&lt;span class=&#34;glyphicon glyphicon-arrow-left&#34;&gt;&lt;/span&gt; Más antiguo&lt;/a&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;	&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;col-xs-4 col-sm-4 col-md-4 col-xs-offset-4 col-sm-offset-4 col-md-offset-4 text-right&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;t:if test=&#34;!firstPage&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34; context=&#34;previusContext&#34;&gt;Más nuevo &lt;span class=&#34;glyphicon glyphicon-arrow-right&#34;&gt;&lt;/span&gt;&lt;/a&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/section&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:block id=&#34;aside1&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;t:feeds/&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/t:block&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:block id=&#34;aside2&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;t:lastposts/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;t:lastsourceswithposts/&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/t:block&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/html&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.tml</span>
    </div>
</div>
<p>Usando el mismo componente podemos darle un aspecto común pero variando el contenido de las diferentes secciones. En este caso usamos la misma plantilla donde se muestra la misma cabecera, enlaces de navegación y pie de página pero sin el contenido lateral como en el caso de la página de preguntas frecuentes de <a href="http://www.blogstack.info/faq">Blog Stack</a>, en este caso no usamos los componentes aside.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">&lt;html t:type=&#34;layout&#34; t:title=&#34;Preguntas frecuentes&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;article class=&#34;text-justify&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;header&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;h1&gt;Preguntas frecuentes&lt;/h1&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/header&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;h2&gt;¿Qué es Blog Stack?&lt;/h2&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;p&gt;Blog Stack (BS) es una agregador, planeta, o fuente de información de bitácoras sobre programación, desarrollo, desarrollo ágil, software, software libre, hardware,&#10;</span></span><span class="line"><span class="cl">		gnu/linux o en general temas relacionados con la tecnología.&lt;/p&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;h2&gt;¿Por qué otro agregador?&lt;/h2&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;p&gt;&#10;</span></span><span class="line"><span class="cl">		Hay varios motivos, la semilla es que quería hacer un proyecto personal con cierta utilidad para otras personas empleando de alguna forma el framework para el desarrollo de&#10;</span></span><span class="line"><span class="cl">		aplicaciones web &lt;a href=&#34;http://tapestry.apache.org/&#34;&gt;Apache Tapestry&lt;/a&gt;.&#10;</span></span><span class="line"><span class="cl">	&lt;/p&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	...&#10;</span></span><span class="line"><span class="cl">&lt;/article&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;/html&gt;&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Faq.tml</span>
    </div>
</div>
<p>Por supuesto, podemos crear tantos componentes plantilla como necesitemos en una aplicación y usar uno o otro en función del tipo de página.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/picodotdev/blog-stack">Código fuente de Blog Stack</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/</id>
        <title>Modelo «push» contra modelo «pull» en frameworks web</title>
        <updated>2015-06-06T11:00:00+02:00</updated>
        <published>2014-07-06T10:58:10+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>En la mayoría de <em>frameworks</em> de desarrollo de aplicaciones o páginas web para producir el contenido HTML que se envía al cliente se emplea un modelo en el que el controlador proporciona los datos que combinados con una plantilla producen el HTML. Este modelo también es el empleado habitualmente en muchos motores de plantillas (<a href="http://www.thymeleaf.org/">thymeleaf</a>, <a href="http://mustache.github.io/">mustache</a>, &hellip;). Sin embargo, hay dos modelos que se pueden seguir para producir un texto como resultado dada una plantilla y datos:</p>
<ul>
<li>Push: este es el modelo comentado. El controlador recupera de antemano todos los datos que necesita la vista, el controlador también determina la vista o plantilla que se usar. Combinando los datos y la plantilla se produce el resultado.</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-push_hu6e494778e33b19912ce2159f71794939_16905_2560x1440_fit_box_3.png" data-gallery="" title="Modelo push"><img src="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-push_hu6e494778e33b19912ce2159f71794939_16905_300x200_fit_box_3.png" width="300" height="176" alt="Modelo push" title="Modelo push" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Los pasos que se siguen en este modelo son:</p>
<ol>
<li>La petición llega al servidor</li>
<li>El dispatcher redirige la petición al controlador</li>
<li>El controlador solicita los datos a la base de datos</li>
<li>El controlador obtiene los datos de la base de datos</li>
<li>El controlador redirige a la vista y le envía los datos que necesita</li>
<li>La vista genera el contenido y se envía al cliente</li>
</ol>
<ul>
<li>Pull: en este modelo el controlador no conoce los datos que usará la vista y es esta la que los solicita según necesita. La vista tira del controlador, el controlador solo debe ofrecer el soporte par que la vista pueda recuperar los datos que necesite.</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-pull_hued438e41b6c5cffc6a748be7abce3995_16763_2560x1440_fit_box_3.png" data-gallery="" title="Modelo pull"><img src="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-pull_hued438e41b6c5cffc6a748be7abce3995_16763_300x200_fit_box_3.png" width="300" height="185" alt="Modelo pull" title="Modelo pull" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Los pasos que se siguen en este modelo varían ligeramente del modelo push pero de forma importante, son:</p>
<ol>
<li>La petición llega al servidor</li>
<li>El dispatcher redirige la petición al controlador</li>
<li>El controlador redirige a la vista</li>
<li>La vista pide los datos que necesita al controlador y el controlador los pide a la base de datos</li>
<li>La vista obtiene los datos que ha pedido del controlador</li>
<li>La vista genera el contenido y se envía al cliente</li>
</ol>
<p>El modelo push es empleado en muchos de los <em>frameworks</em> web más usados, algunos ejemplos son <a href="http://symfony.com/">Symfony</a>, <a href="https://www.djangoproject.com/">Django</a>, <a href="https://grails.org/">Grails</a> o <a href="http://www.asp.net/mvc">ASP.NET MVC</a>. En la categoría de <em>frameworks</em> que usan un modelo pull está <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>
<p>Al modelo push le encuentro algunos problemas. Un problema es que el controlador debe conocer que datos necesita la vista y si la vista tiene cierta lógica esta la tendremos duplicada tanto en en controlador como en la vista. Supongamos que en una aplicación tenemos un usuario y dirección con una relación de 1 a 1 entre ambos y que debemos mostrar en una página el usuario y su dirección solo si solo si es un usuario VIP. En el controlador tendremos que recuperar el usuario, comprobar si es VIP y si lo es recuperar su dirección. El problema está que en la vista deberemos hacer también una comprobación si el cliente es VIP o al menos si a la vista se le ha proporcionado una dirección, como resultado la comprobación la tendremos duplicada tanto en el controlador como en la vista, como sabemos la duplicación de código y lógica habitualmente no es buena idea ya que a la larga dificulta el mantenimiento de la aplicación.</p>
<p>En Grails (pero podría ser cualquier otro <em>framework</em> o motor de plantillas push) podríamos visualizar el usuario y su dirección si es VIP de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">// Grails&#10;</span></span><span class="line"><span class="cl">// Controlador (groovy)&#10;</span></span><span class="line"><span class="cl">def showUsuario() {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;def usuario = Usuario.get(params.long(&#39;id&#39;))&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;def direccion = null&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;if (usuario.isVIP()) {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direccion = usuario.direccion&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;render(view:&#39;show&#39;, model: [usuario:usuario, direccion:direccion])&#10;</span></span><span class="line"><span class="cl">}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">// Vista (gsp)&#10;</span></span><span class="line"><span class="cl">Nombre: ${usuario.nombre}&#10;</span></span><span class="line"><span class="cl">&lt;g:if test=&#34;${usuario.vip}&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;Dirección: ${direccion.toString()}&#10;</span></span><span class="line"><span class="cl">&lt;/g:if&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>push.txt</span>
    </div>
</div>
<p>Si usamos <a href="http://hibernate.org/">hibernate</a> la recuperación de la dirección podemos hacerla navegando la relación pero he querido recuperarla en el controlador expresamente para el ejemplo, si no pudiésemos usar hibernate para recuperar el dato relacionado probablemente lo que haríamos es recuperar el dato en el controlador como en el ejemplo.</p>
<p>Otro problema del modelo push es que si la vista es usada en múltiples controladores, y precisamente la separación entre vistas y controladores uno de sus motivos es para esto, todos estos controladores van a compartir el código para recuperar los datos que necesite la vista, dependiendo del número de datos y de veces que empleemos una vista en múltiples controladores quizá debamos hacer una clase asociada a la vista que recupere los datos para evitar tener código duplicado (y exactamente esto es lo que se hace en Tapestry).</p>
<p>En el modelo pull el controlador no debe conocer que datos necesita la vista y si hay lógica para mostrar ciertos datos está lógica solo la tendremos en la vista. Aunque el controlador no deba conocer que datos en concreto necesite la vista si debe ofrecer el soporte para que la vista los recupere cuando necesite. Como se puede ver el código en el siguiente ejemplo la comprobación de si el usuario es VIP solo está en la vista. En Tapestry cada vista tiene asociado una clase Java que es la encargada de ofrecer el soporte para que la vista pueda recuperar los datos, el conjunto de controlador más vista es lo que en Tapestry se conoce como componente, si el componente se usa varias veces en el mismo proyecto no necesitamos duplicar código.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">// Tapestry&#10;</span></span><span class="line"><span class="cl">// Controlador (java)&#10;</span></span><span class="line"><span class="cl">public Usuario getUsuario() {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;return usuarioDAO.get(id);&#10;</span></span><span class="line"><span class="cl">}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">public Direccion getDirecion() {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;return getUsuario().getDireccion();&#10;</span></span><span class="line"><span class="cl">}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">// Vista (tml)&#10;</span></span><span class="line"><span class="cl">Nombre: ${usuario.nombre}&#10;</span></span><span class="line"><span class="cl">&lt;t:if test=&#34;usuario.vip&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;Direccion: ${direccion.toString()}&#10;</span></span><span class="line"><span class="cl">&lt;t:if&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pull.txt</span>
    </div>
</div>
<p>¿Podemos emplear un modelo pull en un <em>framework</em> que normalmente se suele usar un modelo push? Sí, basta que en el modelo de la vista pasemos un objeto que le permita recuperar los datos que necesite. En Grails empleando un modelo pull el código podría quedarnos de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">// Grails&#10;</span></span><span class="line"><span class="cl">// Controlador (groovy)&#10;</span></span><span class="line"><span class="cl">def showUsuario() {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;render(view:&#39;show&#39;, model: [view:new View(params)])&#10;</span></span><span class="line"><span class="cl">}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">private class View {&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;Map params&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;View(Map params) {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.params = params&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;def getUsuario() {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Usuario.get(params.long(&#39;id&#39;))&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;def getDireccion() {&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return usuario.direccion&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span><span class="line"><span class="cl">}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">// Vista (gsp)&#10;</span></span><span class="line"><span class="cl">Nombre: ${view.usuario.nombre}&#10;</span></span><span class="line"><span class="cl">&lt;g:if test=&#34;${view.usuario.vip}&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;Dirección: ${view.direccion.toString()}&#10;</span></span><span class="line"><span class="cl">&lt;/g:if&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pull-in-push.txt</span>
    </div>
</div>
<p>Como se ve el if de comprobación en el controlador desaparece, a pesar de todo si la vista fuese usada por varios controladores deberíamos crear algo para evitar tener duplicado el código que permite recuperar los datos a la vista. Aunque esto es perfectamente posible no es la forma habitual de usar los modelos push.</p>
<p>Este ejemplo es muy sencillo y empleando cualquiera de los dos modelos es viable, pero cuando el número de datos a recuperar en las vistas y el número de veces que se reutiliza una vista aumenta (y en teoría la separación entro controlador y vista uno de sus motivos es posiblemente para reutilizarlas) el modelo push presenta los problemas que he comentado que el modelo pull no tiene.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://www.guyrutenberg.com/2008/04/26/pull-vs-push-mvc-architecture/">Pull vs. Push MVC Architecture</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/hemeroteca-5/</id>
        <title>Hemeroteca #5</title>
        <updated>2014-12-24T17:00:00+02:00</updated>
        <published>2014-06-27T21:10:29+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/hemeroteca-5/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/octopress.webp" width="300" height="300" alt="Octopress" title="Octopress" class="" loading="false&#34;"></p>
</div>
<p>Cada seis meses hago un recopilatorio de los artículos que he publicado durante este periodo de tiempo. En estos seis meses he mantenido mi ritmo de publicación de una entrada a la semana que publico casi siempre los viernes a la tarde, en total han sido 26 nuevos artículos con este. Los temas tratados durante este tiempo han sido en gran medida la programación, un poco de linux y la Raspberry Pi y el análisis de un SSD.</p>
<p>A destacar durante este semestre ha sido que he publicado un proyecto personal, Blog Stack. <a href="http://www.blogstack.info/">Blog Stack</a> es una agregador o planeta de bitácoras sobre desarrollo, programación, gnu/linux y tecnología. A casi todos los bloggeros que le he propuesto agregarle a Blog Stack me han contestado positivamente. 17 son las bitácoras agregadas actualmente y aunque no son muchas hacen que prácticamente todos los días haya algo nuevo que leer. En un artículo hacía la presentación del proyecto y en otro explicaba cual es el funcionamiento en cuanto a hospedaje y arquitectura (interesante para aquellos que quieran realizar un proyecto en internet con un coste mínimo). Son los siguientes artículos:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/">Presentación de Blog Stack</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/">Arquitectura y hospedaje de Blog Stack</a></li>
</ul>
<p>En las últimas semanas del semestre he publicado unos cuantos artículos obre el <em>framework</em> de desarrollo de aplicaciones web <a href="http://tapestry.apache.org/">Apache Tapestry</a>. Con estas entradas y otras cuantas que tengo preparadas actualizaré y revisaré el libro <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry</a> y seguirá siendo totalmente gratuito.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/">Iniciar rápidamente aplicación con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/">Página Dashboard de Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly/">Ejecutar Apache Tapestry en el servidor de aplicaciones WildFly</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro sobre desarrollo de aplicaciones con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/">Presentación sobre Apache Tapestry</a></li>
</ul>
<p>En otro par de artículos he comentado sobre <a href="https://grails.org/">Grails</a>. Ambas cosas que ofrece ya Tapestry de por si y que son muy útiles en una aplicación disponer de ellas por eso aporté estas dos soluciones a Grails.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">Detectar problema N+1 y obtener estadísticas de Hibernate con Grails</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/">Página de excepción de Grails</a></li>
</ul>
<p>En la sección de programación están las novedades de Java 8 que recoge las interesantes novedades de esta nueva versión, también un nuevo artículo en la serie sobre JavaScript con la lista de tareas empleando <a href="http://backbonejs.org/">Backbone</a> y <a href="https://reactjs.org/">React</a> que empecé algo más de tiempo, una pequeña introducción a <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>, otro ejemplo práctico de un patrón de diseño en programación en este caso del No Operation y algunos otros temas sobre Java.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/">Introducción a Elasticsearch</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/">Introducción y ejemplo sencillo de Java Message Service (JMS)</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/">Servidor de aplicaciones JBoss/WildFly</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/">Logging usando marcadores con slf4j y logback</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/">Ejemplo del patrón de diseño No Operation</a></li>
</ul>
<p>Respecto a gnu/linux he actualizado la guía de instalación de <a href="https://www.archlinux.org/">Arch Linux</a>, he analizado un disco de estado sólido (SSD) que aumentan notablemente el rendimiento de un equipo, algún artículo sobre la <a href="https://www.raspberrypi.org/">Raspberry Pi</a>, otras sobre como configurar SSL en los servidores web y de aplicaciones más populares, los últimos artículos de esta lista son comentado mi experiencia con <a href="http://octopress.org/">Octopress</a> como sistema de <em>blogging</em> y que empecé a usar a principios de diciembre.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/anexo-a-la-guia-de-instalacion-y-del-principiante-de-arch-linux/">Anexo a la guía de instalación y del principiante de Arch Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/desempaquetado-y-analisis-samsung-840-evo-ssd-250-gb/">Desempaquetado y análisis Samsung SSD 840 EVO 250 GB</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Generar y convertir claves y certificados con OpenSSL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/iniciar-la-raspberry-pi-desde-un-disco-o-memoria-usb/">Iniciar la Raspberry Pi desde un disco o memoria USB</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/raspberry-pi-como-media-center-con-geexbox/">Raspberry Pi como Media Center con GeeXboX</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress/">Guía para la creación de un blog con Octopress</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog/">Mi experiencia y consejos para un blog</a></li>
</ul>
<p>En el siguiente semestre seguiré escribiendo nuevos artículos sobre estos mismos temas y publicando uno nuevo cada semana de los que ya tengo preparados. Feliz lectura (o relectura)!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/06/hemeroteca-3.html">Hemeroteca #3</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/12/el-blog-de-picodev-te-desea-un-2013.html">Hemeroteca #2</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/06/hemeroteca-1.html">Hemeroteca #1</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2011/12/feliz-navidad-y-prospero-2012.html">Hemeroteca #0</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/</id>
        <title>Iniciar rápidamente aplicación con Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-06-20T23:08:07+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>Un proyecto web en Java requiere de unos cuantos archivos con cierta estructura que nos puede llevar un tiempo en crearlos. Normalmente cuando empezamos un nuevo proyecto solemos basarnos en otro existente  copiando y pegando contenido de él. Pero ademas de tiempo podemos cometer errores o no seguir algunas convenciones propias de Java o del <em>framework</em> web que usemos. Para un proyecto grande esa dedicación al inicio del proyecto no nos importará pero para un proyecto pequeño o para hacer una prueba puede que queramos tener algo más rápido y con menos esfuerzo para estar en disposición de empezar a desarrollar en muy poco tiempo.</p>
<p>Para crear el esqueleto de una aplicación rápidamente en <a href="http://tapestry.apache.org/">Apache Tapestry</a> hay disponible un arquetipo de <a href="http://maven.apache.org/">Maven</a> que puede generar una aplicación en unos pocos minutos. Para usarlo deberemos instalar maven previamente. Una vez instalado Maven basta con que usemos el siguiente comando.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mvn archetype:generate -DarchetypeCatalog<span class="o">=</span>https://repository.apache.org/content/repositories/staging&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>mvn.sh</span>
    </div>
</div>
<p>El comando nos presentará un montón de arquetipos, el propio de Tapestry se corresponde con una opción que deberemos buscar, <em>org.apache.tapestry:quickstart</em>. Además, del arquetipo a usar se nos pedirá el grupo de la aplicación y nombre de artefacto, para el ejemplo usaré como grupo <em>io.github.picodotdev.bitix</em> y como nombre de artefacto inicio rápido. También nos pedirá la versión y finalmente el paquete de las clases, podemos dejar las opciones por defecto.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-maven_hu58ad4778942c6fc9cf18644f90e126a3_88273_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-maven_hu58ad4778942c6fc9cf18644f90e126a3_88273_300x200_fit_box_3.png" width="300" height="164" class="&#34; " loading="lazy"></a>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-tapestry_hu41cb80674e80833ccfda3c9a1ad7ff49_39056_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-tapestry_hu41cb80674e80833ccfda3c9a1ad7ff49_39056_300x200_fit_box_3.png" width="300" height="164" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipo-tapestry_hu1a077e1c8fb5484483a1912666519296_70527_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipo-tapestry_hu1a077e1c8fb5484483a1912666519296_70527_300x200_fit_box_3.png" width="300" height="164" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Aunque el arquetipo lo realizamos con Maven los archivos que genera son válidos tanto para trabajar con Maven como con <a href="http://www.gradle.org/">Gradle</a>, una vez que tenemos la aplicación generada podemos usar el que prefiramos, probablemente mejor Gradle. Los archivos generados son los siguientes:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/archivos-generados_hu8535b26c52dbf86b0a5689e0d96993b9_50287_2560x1440_fit_box_3.png" data-gallery="" title="Terminal al iniciar la aplicación"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/archivos-generados_hu8535b26c52dbf86b0a5689e0d96993b9_50287_300x200_fit_box_3.png" width="300" height="199" alt="Terminal al iniciar la aplicación" title="Terminal al iniciar la aplicación" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Una vez generada la aplicación podemos iniciarla con un servidor embebido <a href="http://www.eclipse.org/jetty/">Jetty</a> con la aplicación desplegada en él ya usando <a href="http://www.gradle.org/">Gradle</a>:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">$</span> <span class="o">./</span><span class="n">gradlew</span> <span class="n">jettyRun</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Y accediendo con el navegador a la URL que nos indica Tapestry al final de las trazas veremos la aplicación en funcionamiento.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-terminal_hu7c5178581b57f1717c22305567786a33_51842_2560x1440_fit_box_3.png" data-gallery="" title="Terminal al iniciar la aplicación"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-terminal_hu7c5178581b57f1717c22305567786a33_51842_300x200_fit_box_3.png" width="294" height="200" alt="Terminal al iniciar la aplicación" title="Terminal al iniciar la aplicación" class="&#34; " loading="lazy"></a>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-navegador_hubf7c9f485ca430abc168c8d2ce6fd790_82910_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación en el navegador"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-navegador_hubf7c9f485ca430abc168c8d2ce6fd790_82910_300x200_fit_box_3.png" width="255" height="200" alt="Aplicación en el navegador" title="Aplicación en el navegador" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Probablemente necesitaremos configurar muchas cosas adicionales como usar <a href="https://github.com/bmuschko/gradle-tomcat-plugin">Tomcat como servidor embebido</a> en vez de Jetty o añadir la <a href="https://elblogdepicodev.blogspot.com.es/2013/06/pruebas-unitarias-y-de-integracion-en-apache-tapestry.html">configuración necesaria para ejecutar los teses unitarios y de integración</a>, Tapestry no es un <em>framework</em> <em>fullstack</em> y será responsabilidad nuestra disponer de esas características si necesitamos. En definitiva, con este arquetipo de Maven en unos pocos minutos y con poco esfuerzo podemos disponer de una aplicación Apache Tapestry a partir de la que empezar a desarrollar.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/</id>
        <title>Página Dashboard de Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-06-13T17:37:24+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>Con la versión 5.4 de Tapestry las <a href="https://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html">páginas PageCatalog, ServiceStatus e HibernateStaticstis</a> han sido unificadas en la página T5Dashboard por lo que ahora en una sóla página tendremos toda la información. Una de las características más importantes de Tapestry es ser muy informativo proporcionando mucha y descriptiva información, esto se nota con la página de <a href="https://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html">informe de error incluso para las peticiones ajax</a>, los mensajes de logging y con estás páginas de información de estado.</p>
<p>La página <a href="http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/corelib/pages/T5Dashboard.html">T5Dashboard</a> está incluida en el propio core de <a href="http://tapestry.apache.org/">Apache Tapestry</a> y disponible en todas las aplicaciones en modo desarrollo y accediendo de forma local al servidor de aplicaciones. Si se incluye en la aplicación la dependencia tapestry-hibernate además en T5Dashboard podremos ver estadísticas de uso de Hibernate. La página T5Dashboard nos puede resultar muy útil ya que nos proporciona mucha información y alguna acción interesante.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-1_hubfb8d8886dece48d49e065fa5374aa71_59968_2560x1440_fit_box_3.png" data-gallery="" title="Estado de la aplicación Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-1_hubfb8d8886dece48d49e065fa5374aa71_59968_300x200_fit_box_3.png" width="300" height="138" alt="Estado de la aplicación Tapestry" title="Estado de la aplicación Tapestry" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Como se ve en la imagen podemos ver las páginas disponibles, cargadas, cuanto tiempo llevó construirlas, que complejidad y por cuantos componentes están formadas. Y algo que nos resultará muy útil es provocar la acción de cargar todas las páginas quizá después de hacer un despliegue para evitar tiempos de inicialización en las primeras peticiones pero tan o más importante nos permitirá descubrir errores en los archivos tml de los componentes ¿cuantas veces te ha ocurrido que en un php, jsp, gsp, &hellip; hasta que no se usa esa plantilla no descubres un error digamos &ldquo;de compilación&rdquo; (variable con nombre que no existe, atributo mal entrecomillado, &hellip;) ? Seguramente como a mi, muchas. Los archivos de plantilla tml son xml válido con lo que si no están bien formados se nos notificará del error, nuevamente ¿te ha ocurrido alguna vez tener un php, jsp o gsp que no genera html bien balanceado? Pero también si se está usando un componente que no existe, varios componentes con el mismo nombre, &hellip; . Aunque parezca que no estos tipos de errores se pueden producir con relativa facilidad tanto en desarrollo y con mayor peligro si tenemos un flujo de trabajo con varias ramas donde vamos mergeando los cambios de trunk a la rama que se despliega en producción y nos ocurren conflictos en los merges que tenemos que resolver manualmente con la posibilidad de cometer un error.</p>
<p>En otra sección también podemos ver el estado de los servicios que puede ser:</p>
<ul>
<li>Builtin: A servicio fundamentar que existe incluso antes de la creación del registro.</li>
<li>Defined: El servicio está definido pero aún no ha sido referenciado.</li>
<li>Virtual: El servicio ha sido referenciado (normalmente como ejecución de otro servicio) pero aún no ha sido hecho efectivo con una instancia del servicio. El hacerse efectivo ocurre con la primera invocación en el proxy del servicio.</li>
<li>Real: El servicio se ha hecho efectivo: se ha instanciado, las dependencias han sido inyectadas, se ha decorado con interceptores y el totalmente operacional.</li>
</ul>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-2_hu8430a9ea5cfa5b5c6124c0efdd80306e_74535_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-2_hu8430a9ea5cfa5b5c6124c0efdd80306e_74535_300x200_fit_box_3.png" width="300" height="138" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Finalmente, en la sección HibernateStatistics podemos obtener un montón de datos que nos pueden servir para detectar situaciones anómalas en la aplicación como un gran número de sql que se lanzan en una página como podría ser en un problema de carga N+1 en una relación entre dos entidades, el estado de la cache de segundo nivel que nos permitirá optimizar las caches, la cache de queries, número de transacciones realizadas y otra gran cantidad de información.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-3_huca4080c691f8d3f148defb949f85ee44_64921_2560x1440_fit_box_3.png" data-gallery="" title="Estadísticas de Hibernate en Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-3_huca4080c691f8d3f148defb949f85ee44_64921_300x200_fit_box_3.png" width="300" height="138" alt="Estadísticas de Hibernate en Tapestry" title="Estadísticas de Hibernate en Tapestry" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Para que hibernate genere estadísticas es necesario indica en el archivo hibernate.cfg.xml la propiedad hibernate.generate_statistics:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE hibernate-configuration PUBLIC&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;-//Hibernate/Hibernate Configuration DTD 3.0//EN&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="cp">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;http://www.hibernate.org/dtd//hibernate-configuration-3.0.dtd&#34;&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;hibernate-configuration&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;session-factory&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.driver_class&#34;</span><span class="nt">&gt;</span>org.h2.Driver<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.url&#34;</span><span class="nt">&gt;</span>jdbc:h2:mem:test<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.username&#34;</span><span class="nt">&gt;</span>sa<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.password&#34;</span><span class="nt">&gt;</span>sa<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.dialect&#34;</span><span class="nt">&gt;</span>org.hibernate.dialect.H2Dialect<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.hbm2ddl.auto&#34;</span><span class="nt">&gt;</span>update<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.generate_statistics&#34;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/property&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/session-factory&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;/hibernate-configuration&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>hibernate.cfg.xml</span>
    </div>
</div>
<p>Y para activar la cache de segundo nivel añadir la propiedad del proveedor de cache (hibernate.cache.provider_class) y usar en las entidades la anotación @Cache, como se indica en la <a href="https://docs.jboss.org/hibernate/orm/4.3/devguide/en-US/html/ch06.html">documentación de hibernate</a>.</p>
<p>Está página de Tapestry es similar a <a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">una que podemos crear en Grails con información similar</a>.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly/</id>
        <title>Ejecutar Apache Tapestry en el servidor de aplicaciones WildFly</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-06-06T20:58:25+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/wildfly.svg" width="200" height="200" alt="WildFly" title="WildFly" class="" loading="false&#34;"></p>
</div>
<p>Los class loaders del <a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/">servidor de aplicaciones JBoss/WildFly</a> habitualmente han dado algún problema en la ejecución de las aplicaciones y la carga de clases. En versiones antiguas como la 4 se podían producir conflictos entre las librerías de las aplicaciones y las librerías instaladas en el servidor ya que en <a href="http://jbossas.jboss.org/">JBoss</a> se buscaba las clases por defecto y primero en el class loader del servidor en vez de en el <em>classloader</em> de la aplicación (war). Ya en las últimas versiones como JBoss 7 y <a href="http://wildfly.org/">WildFly</a> la forma de cargar las clases es más parecido al modelo habitual que se sigue en las aplicaciones Java EE y en servidores como Tomcat buscando primero en el directorio classes WEB-INF/classes y entre las librerías de la carpeta WEB-INF/lib del archivo war. Además, con la inclusión de JBoss Modules se puede seguir un esquema OSGi con lo que incluso podríamos usar simultáneamente en el servidor diferentes versiones de la misma librería.</p>
<p>Sin embargo, a pesar de seguir el esquema estándar de buscar las clases y usar OSGi para que Tapestry encuentre los archivos que necesita, como plantillas, imágenes, literales que pueden estar embebidos en los archivos jar de librerías es necesario hacer algunas modificaciones. En una <a href="http://wiki.apache.org/tapestry/HowToRunTapestry5OnJBoss7Dot1">guía de uso de Tapestry con JBoss</a> se explica como conseguir hacer funcionar una aplicación Tapestry tanto en JBoss 7 como en WildFly 8. La solución consiste en proporcionar una clase para que encuentre correctamente los archivos que Tapestry necesita y esta clase será la que veremos en el siguiente ejemplo.</p>
<p>Con la clase que permite funcionar las aplicaciones Tapestry en JBoss/WildFly junto con un poco de configuración para el contenedor de dependencias definido en un módulo será suficiente. La clase es la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.misc</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLConnection</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.services.ClasspathURLConverter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jboss.vfs.VFSUtils</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jboss.vfs.VirtualFile</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WildFlyClasspathURLConverter</span> <span class="kd">implements</span> <span class="n">ClasspathURLConverter</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">WildFlyClasspathURLConverter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">URL</span> <span class="nf">convert</span><span class="o">(</span><span class="kd">final</span> <span class="n">URL</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">url</span><span class="o">.</span><span class="na">getProtocol</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&#34;vfs&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="kd">final</span> <span class="n">URL</span> <span class="n">realURL</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="kd">final</span> <span class="n">String</span> <span class="n">urlString</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">				<span class="c1">// If the virtual URL involves a JAR file,&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// we have to figure out its physical URL ourselves because&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// in JBoss 7.0.2 the JAR files exploded into the VFS are empty&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// (see https://issues.jboss.org/browse/JBAS-8786).&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// Our workaround is that they are available, unexploded,&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// within the otherwise exploded WAR file.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="o">(</span><span class="n">urlString</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;.jar&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="c1">// An example URL:&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// &#34;vfs:/devel/jboss-as-7.1.1.Final/standalone/deployments/myapp.ear/myapp.war/WEB-INF/\&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// lib/tapestry-core-5.3.2.jar/org/apache/tapestry5/corelib/components/&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// Break the URL into its WAR part, the JAR part,&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// and the Java package part.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="kd">final</span> <span class="kt">int</span> <span class="n">warPartEnd</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&#34;.war&#34;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">4</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">String</span> <span class="n">warPart</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">warPartEnd</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="kt">int</span> <span class="n">jarPartEnd</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&#34;.jar&#34;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">4</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">String</span> <span class="n">jarPart</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">warPartEnd</span><span class="o">,</span> <span class="n">jarPartEnd</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">String</span> <span class="n">packagePart</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">jarPartEnd</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="c1">// Ask the VFS where the exploded WAR is.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="kd">final</span> <span class="n">URL</span> <span class="n">warURL</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">warPart</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">URLConnection</span> <span class="n">warConnection</span> <span class="o">=</span> <span class="n">warURL</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">VirtualFile</span> <span class="n">jBossVirtualWarDir</span> <span class="o">=</span> <span class="o">(</span><span class="n">VirtualFile</span><span class="o">)</span> <span class="n">warConnection</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">File</span> <span class="n">physicalWarDir</span> <span class="o">=</span> <span class="n">jBossVirtualWarDir</span><span class="o">.</span><span class="na">getPhysicalFile</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">String</span> <span class="n">physicalWarDirStr</span> <span class="o">=</span> <span class="n">physicalWarDir</span><span class="o">.</span><span class="na">toURI</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="c1">// Return a &#34;jar:&#34; URL constructed from the parts&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// eg.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// &#34;jar:file:/devel/jboss-as-7.1.1.Final/standalone/tmp/vfs/deployment40a6ed1db5eabeab/\&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// myapp.war-43e2c3dfa858f4d2/WEB-INF/lib/tapestry-core-5.3.2.jar!/org/apache/tapestry5/corelib/components/&#34;.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="kd">final</span> <span class="n">String</span> <span class="n">actualJarPath</span> <span class="o">=</span> <span class="s">&#34;jar:&#34;</span> <span class="o">+</span> <span class="n">physicalWarDirStr</span> <span class="o">+</span> <span class="n">jarPart</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span> <span class="o">+</span> <span class="n">packagePart</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">actualJarPath</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="c1">// Otherwise, ask the VFS what the physical URL is...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="kd">final</span> <span class="n">URLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">final</span> <span class="n">VirtualFile</span> <span class="n">virtualFile</span> <span class="o">=</span> <span class="o">(</span><span class="n">VirtualFile</span><span class="o">)</span> <span class="n">connection</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">realURL</span> <span class="o">=</span> <span class="n">VFSUtils</span><span class="o">.</span><span class="na">getPhysicalURL</span><span class="o">(</span><span class="n">virtualFile</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="n">realURL</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Unable to convert URL&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">url</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>WildFlyClasspathURLConverter.java</span>
    </div>
</div>
<p>La configuración adicional para el contenedor de dependencias es para que Tapestry use esta nueva clase:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeServiceOverride</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">,</span> <span class="nd">@Local</span> <span class="n">HibernateSessionSource</span> <span class="n">hibernateSessionSource</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">HibernateSessionSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">hibernateSessionSource</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isServidorJBoss</span><span class="o">(</span><span class="n">ContextListener</span><span class="o">.</span><span class="na">SERVLET_CONTEXT</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ClasspathURLConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">WildFlyClasspathURLConverter</span><span class="o">());</span>			&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isServidorJBoss</span><span class="o">(</span><span class="n">ServletContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">si</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getServerInfo</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;WildFly&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="n">si</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;JBoss&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule.java</span>
    </div>
</div>
<p>El <em>ContextListener</em> que nos permite acceder al <em>ServletContext</em> es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.misc</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletContextEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletContextListener</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContextListener</span> <span class="kd">implements</span> <span class="n">ServletContextListener</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">ServletContext</span> <span class="n">SERVLET_CONTEXT</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">sce</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">SERVLET_CONTEXT</span> <span class="o">=</span> <span class="n">sce</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextDestroyed</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">sce</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ContextListener.java</span>
    </div>
</div>
<p>Además hemos de incluir en el proyecto un par de librerías y usar al menos la versión 16 de guava si se incluye como dependencia en el war:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span> <span class="s1">&#39;com.google.guava:guava:16.0.1&#39;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">providedCompile</span> <span class="s1">&#39;org.jboss:jboss-vfs:3.2.1.Final&#39;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">runtime</span> <span class="s1">&#39;org.jboss.logging:jboss-logging:3.1.4.GA&#39;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>En la <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/PlugInTapestry">aplicación de ejemplo</a> también deberemos actualizar la versión de guava al menos a la versión 16. Y esta clase y configuración es suficiente para que &ldquo;mágicamente&rdquo; se solucionen los problemas de las aplicaciones Tapestry con el servidor de aplicaciones JBoss/WildFly. Si no usamos lo indicado en este artículo al acceder al acceder a la aplicación fallaría con una excepción.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
<li><a href="http://wiki.apache.org/tapestry/HowToRunTapestry5OnJBoss7Dot1">http://wiki.apache.org/tapestry/HowToRunTapestry5OnJBoss7Dot1</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/</id>
        <title>Libro sobre desarrollo de aplicaciones con Apache Tapestry</title>
        <updated>2015-04-10T20:00:00+02:00</updated>
        <published>2014-02-14T20:10:34+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>Hace unos meses publiqué el libro PlugIn Tapestry, un libro acerca del desarrollo de aplicaciones y páginas web en el lenguaje Java y con el <em>framework</em> <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>
<h3 id="plugin-tapestry">PlugIn Tapestry</h3>
<p>Apache Tapestry es un <em>framework</em> orientado a componentes para crear aplicaciones web rápidas, dinámicas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como <a href="http://projects.spring.io/spring-framework/">Spring</a>, <a href="https://grails.org/">Grails</a> y <a href="http://www.playframework.com/">Play!</a> y también de los muchos otros en los que la principal diferencia es el lenguaje como <a href="https://www.djangoproject.com/">Django</a> (Python), <a href="http://symfony.com/">Symfony</a> (PHP), <a href="http://www.asp.net/mvc">ASP.NET MVC</a> (C#) o <a href="http://rubyonrails.org/">Ruby On Rails</a> (Ruby).</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/images/portada-plugintapestry_hudd958694a9c7fbaaf2a5b065abe3f288_268557_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/images/portada-plugintapestry_hudd958694a9c7fbaaf2a5b065abe3f288_268557_300x200_fit_box_3.png" width="141" height="200" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Incluyendo la descripción de las características del <em>framework</em> el libro trata la mayoría de aspectos que puede necesitar una aplicación o página web, entre ellos:</p>
<ul>
<li>Introducción, principios y características</li>
<li>Inicio rápido</li>
<li>Páginas y componentes</li>
<li>Contenedor de dependencias (IoC)</li>
<li>Assets (imágenes, estilos, javascript) y módulos RequireJS</li>
<li>Formularios</li>
<li>Internacionalización (i18n) y localización (l10n)</li>
<li>Persistencia web</li>
<li>Persistencia en bases de datos</li>
<li>Ajax</li>
<li>Seguridad (autenticación, autorización, XSS, Inyección SQL, HTTPS)</li>
<li>Librerías de componentes</li>
<li>Pruebas unitarias, de integración y funcionales (<a href="http://junit.org/">JUnit</a>/<a href="http://code.google.com/p/mockito/">Mockito</a>, <a href="http://code.google.com/p/spock/">Spock</a>, <a href="http://www.gebish.org/">Geb</a>)</li>
<li>Y algunas cosas más sin entrar en muchos detalles como envió de correos, generación de informes, gráficas, una API REST, analizadores estáticos de código, CDN, &hellip;</li>
</ul>
<p>El libro está basado en la siguiente versión de Tapestry, la 5.4, que actualmente está en estado beta (aunque la mayoría servirá para la versión final y para la versión 5.3 actual). Esta nueva versión tiene como principal novedad la parte cliente de las aplicaciones con la inclusión de RequireJS y la definición de los archivos JavaScript mediante módulos. También incorpora una capa de abstracción que permite usar cualquier librería como apoyo a la funcionalidad que necesita proporcionar ya sea Prototype, jQuery o cualquier otra que prefiramos o nueva que se desarrolle en un futuro.</p>
<p>Además del libro he desarrollado una <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">pequeña aplicación con unos pocos ejemplos</a> (disponible en mi repositorio de GitHub) que puedes probar en tu equipo sin necesidad de instalar nada previamente, salvo Git y el JDK. Más de 250 páginas de documentación que permitirán al lector descubrir mucha de la magia que puede ofrecer este <em>framework</em>. Además en <a href="https://picodotdev.github.io/blog-bitix/">mi blog</a> (y <a href="https://elblogdepicodev.blogspot.com.es">elblogdepicodev</a>) puedes encontrar varias entradas sobre muchos de los temas tratados de forma individual y que he utilizado para escribir el libro.</p>
<p>Puedes obtenerlo desde los enlaces que proporciono de forma totalmente libre y al inmejorable precio de 0,00 € impuestos incluidos. Por si fuera poco puedes conseguirlo en el formato electrónico PDF. Tienes mi permiso (es más, animo a ello) para compartirlo, distribuirlo en redes P2P, subirlo a cualquier página web o «piratearlo» cuantas veces quieras, siempre que respetes la licencia Creative Commons bajo la cual lo he publicado.</p>
<div class="buttons">
    <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">Descargar el libro (PDF)</a>
    <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Obtener código fuente ejemplos</a>
</div>
<div class="share-this" style="text-align: center; margin-bottom: 20px">
  <h3>¡Y luego compártelo!</h3>
  <div class="sharethis-inline-share-buttons">
  <span class="st_twitter_vcount" st_title="He descargado el libro sobre desarrollo de apps web con Apache Tapestry. ¡Obtén tu copia! #PlugIn" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" st_via="picodotdev"></span>
  <span class="st_facebook_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icontext-600.png"></span>
  <span class="st_googleplus_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icontext-600.png"></span>
  <span class="st_linkedin_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icontext-600.png"></span>
  </div>
</div>
<h3 id="apache-tapestry">Apache Tapestry</h3>
<p>Algunas características destacadas de Apache Tapestry son:</p>
<h4 id="java">Java</h4>
<p>Normalmente se usa el lenguaje Java con lo que el compilador y el asistente de código de tu IDE te ayudarán.</p>
<h4 id="políglota">Políglota</h4>
<p>Si prefieres puedes utilizar Groovy, Scala o cualquier otro lenguaje soportado por la JVM.</p>
<h4 id="productivo">Productivo</h4>
<p>La recarga de clases en caliente evitará que tengas que reiniciar el servidor para ver tus cambios aplicados. Simplemente actualiza el navegador.</p>
<h4 id="rápido">Rápido</h4>
<p>El <em>framework</em> está programado en Java sin hacer uso de reflection. Incorpora varias optimizaciones que harán tu aplicación más eficiente sin trabajo por tu parte como compresión gzip, minificación y agregación css/javascript, cacheo agresivo en el cliente de assets, supresión de espacios en blanco innecesarios, &hellip;</p>
<h4 id="basado-en-componentes">Basado en componentes</h4>
<p>Los componentes son piezas autónomas y resusables de código. Para usar uno simplemente necesitarás conocer sus parámetros todo lo demás como archivos javascript, hojas de estilo y mensajes localizados son proporcionados por el componente. Los componentes pueden lanzar eventos y diferentes contenedores comportarse de diferente forma ante el mismo evento.</p>
<h4 id="informe-de-error-avanzado">Informe de error avanzado</h4>
<p>El informe te proporciona mucha más información que simplemente la traza de la excepción, verás que se estaba haciendo, que fué mal y como corregirlo. Con toda esta información solucionar las excepciones será mucho más rápido y fácil. El informe de error también es presentado en caso de errores en las peticiones AJAX.</p>
<h4 id="testable">Testable</h4>
<p>Puedes probar los componentes de forma unitaria, el html generado o hacer pruebas de integración y funcionales. Los componentes son POJOs que no necesitan heredar ni implementar ninguna clase del <em>framework</em>. Podrás utilizar la herramienta que desees JUnit/Mockito, Spock, Geb, &hellip;</p>
<h4 id="extensible-adaptable-y-modular">Extensible, adaptable y modular</h4>
<p>Gracias al contenedor de dependencias y a que los servicios están programados en base a interfaces puedes definir una nueva implementación que modifique el comportamiento del <em>framework</em>. Todo servicio en el contenedor de dependencias puede ser redefinido, la mayoría de las cosas son servicios. Existen módulos para Hibernate, Apache Shiro, Quartz, &hellip; y si no existe puedes usar cualquier librería como RESTEasy, JasperReports, EHCache, JFreeChart, RestFB&hellip;</p>
<h4 id="i18n-y-l10n">i18n y l10n</h4>
<p>Puedes tener catálogos de mensajes por componente o de manera global en la aplicación. Los assets (imágenes, css, &hellip;) también son localizables y tener una plantilla con un contenido totalmente diferente según el idioma del usuario.</p>
<h4 id="convención-sobre-configuración">Convención sobre configuración</h4>
<p>Las convenciones permiten evitar la configuración y los posibles errores que podemos cometer al realizarla. Pero más importante, hace que cualquier programador que conozca las convenciones sepa inmediatamente como están organizadas todas las cosas con lo que el tiempo de aprendizaje se reduce considerablemente.</p>
<h4 id="librerías-de-componentes">Librerías de componentes</h4>
<p>Los componentes comunes a varios proyectos pueden ser agregados en una librería de componentes (no es más que un archivo jar) para ser reutilizados. Nuevamente para usar los componentes solo tendrás que preocuparte de los parámetros, todos los recursos que necesiten serán extraídos de la librería. No necesitarás copiar y pegar archivos de un proyecto a otro, solo agregar una dependencia o jar a tu proyecto.</p>
<p>Según su principal desarrollador (Howard Lewis Ship, que obtuvo el premio Java Champion en 2010 <a href="https://java.net/website/java-champions/bios.html#Ship">[1]</a> y Duke&rsquo;s Choice Award por el <em>framework</em> <a href="https://www.java.net/dukeschoice/2006">[2]</a> en la categoría <em>open source</em>), y modestia aparte, piensa que Tapestry ha sido un líder desde una perspectiva puramente tecnológica. Estas son algunas cosas que cree que hizo primero y todavía piensa que lo hace mejor que nadie:</p>
<ul>
<li>Componentes reusables (2001)</li>
<li>Informe de excepción detallado y útil (2001)</li>
<li>Instrumentación invisible en las plantillas (2002)</li>
<li>Informe de error con precisión de linea (2004)</li>
<li>Metaprogramación y modificación de bytecode (2005)</li>
<li>Recarga de clases en caliente (2006)</li>
<li>Informe de error completo para peticiones Ajax (2012)</li>
<li>Integración con RequireJS, less/sass y CoffeeScript (2013)</li>
</ul>
<p>¿Te ha parecido poco? <a href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/">¡Descubre alguna más en una presentación!</a>.</p>
<p>¡Que lo disfrutéis!, usar el siguiente <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf">enlace para ¡descargarlo!</a></p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a> (elblogdepicodev)</li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/</id>
        <title>Presentación sobre Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-02-14T16:05:53+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>El 10 de febrero tuve la oportunidad de dar una charla, la primera, sobre <a href="http://tapestry.apache.org/">Apache Tapestry</a> para el equipo de desarrolladores de la empresa en la que trabajo. Que en el equipo de desarrollo tengamos la posibilidad de vez en cuando dedicar un par de horas para juntarnos y compartir conocimiento es una buena iniciativa ya que siendo ya un equipo bastante grande de personas y con un nivel técnico elevado cada uno tiene un conocimiento que los demás pueden estar interesados en conocer al menos a nivel superficial, es motivador tener estas oportunidades.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/images/presentacion-apache-tapestry_hu5813c80b678e047881b7600768eec1cc_49900_2560x1440_fit_q90_box.jpg" data-gallery="" title="Presentación sobre Apache Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/images/presentacion-apache-tapestry_hu5813c80b678e047881b7600768eec1cc_49900_300x200_fit_q90_box.jpg" width="300" height="200" alt="Presentación sobre Apache Tapestry" title="Presentación sobre Apache Tapestry" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Fue una charla simplemente como cultura general ya que el <em>framework</em> y el lenguaje que usamos como pila tecnológica es <a href="https://grails.org/">Grails</a> y <a href="https://www.groovy-lang.org/">Groovy</a> y eso es complicado que cambie. Otro motivo fue poder compartir el conocimiento de este <em>framework</em> para el desarrollo de aplicaciones y páginas web que a mi me gusta mucho. Si estás suscrito al <a href="http://feeds.feedburner.com/blog-bitix/">feed de mi blog</a> ya conocerás que de vez en cuando publico alguna entrada comentando algún aspecto sobre él (tengo ya algunas preparadas y otras en mente) y si estás suscrito desde hace unos meses conocerás que escribí un libro. La charla fue para comentar los «porque» alguien podría elegir este <em>framework</em> y no tanto el «como» se hacen las cosas en él, para esto último ya esta el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a>, <a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">otra documentación</a> y la propia <a href="http://tapestry.apache.org/documentation.html">documentación del proyecto</a>.</p>
<p>Probablemente la charla podría haberla explicado mucho mejor, fue lo mejor que fui capaz. También ya después de unas horas me dí cuenta de los detalles menores pero interesantes que se me pasaron comentar, unos cuantos. Pero teniendo en cuenta que es de las primeras charlas técnicas que doy, en general quedé satisfecho y por lo menos me servirá de experiencia para las siguientes. Dar una charla require tanto o mas esfuerzo que crear una entrada en el blog. Requiere crear una presentación, incluir en ella la información relevante que se quiere comentar según el objetivo y tener en cuenta el público al que va dirigida, poner la información de una forma que explique de forma coherente lo importante, tener cierta habilidad comunicativa (que creo no tengo) y ensayar la charla para ajustarla al tiempo del que se dispone y otras tantas cosas como estas. A pesar de que fue una charla de dos horas hay muchos detalles que se quedaron fuera, solo vimos la superficie de todo lo que tiene que ofrecer este <em>framework</em>.</p>
<p>En la charla surgió alguna pregunta interesante como ¿por que teniendo Tapestry ya más de 10 años de vida no es un <em>framework</em> más usado? Algunos de los motivos que dí fueron que Tapestry tiene una curva de aprendizaje mayor que otros <em>frameworks</em> ya que cambia el modelo de desarrollo de los <em>frameworks</em> basados en acciones a uno basado en componentes. El modelo basado en acciones lleva usándose desde Struts y es ampliamente usado en diversos <em>frameworks</em>. Struts fué uno de los <em>frameworks</em> más utilizados en su momento y por tanto usar otro <em>framework</em> basado en acciones en el que en muchos casos lo único que cambia en esencia es el lenguaje de programación, es más rápido y no require adquirir tanto conocimiento nuevo para usar uno que siga los mismos principios. Desde entonces han surgido nuevos <em>frameworks</em> <a href="https://grails.org/">Grails</a>, <a href="http://www.playframework.com/">Play!</a>, <a href="http://symfony.com/">Symfony</a>, <a href="https://www.djangoproject.com/">Django</a>, <a href="http://www.asp.net/mvc">ASP.NET MVC</a>, <a href="http://rubyonrails.org/">Ruby on Rails</a>, &hellip; como digo en esencia en todos ellos el principal cambio es el lenguaje de programación. Otro motivo puede ser que los desarrolladores de Tapestry no tienen detrás a una compañía que les apoya finaciandoles para promover su uso y evangelizar a tiempo completo, aunque de vez en cuando lo hacen, el proyecto está dentro de la <a href="http://www.apache.org/">fundación Apache</a> y los desarrolladores viven de la consultoría o proyectos que realizan. A pesar de tener unas características muy notables (IMHO), que se superan en cada nueva versión siguiendo la tendencia de las aplicaciones e innovando, a veces una buena solución no tiene por que ser la que más éxito tenga o sea la más usada, ¿por que linux no es un sistema operativo más usado en el escritorio? Los motivos serán diferentes en este caso pero el resultado es que lo que unos consideran la mejor opción no no tiene por que ser la más ampliamente usada.</p>
<p>Otra pregunta interesante que surgió fue que parte de lo que comenté sobre Tapestry también puede realizarse con el <em>framework</em> en concreto con el que lo comparamos, Grails aunque podría ser otro. Sí, probablemente estructurando las cosas de cierta forma en Grails se puede conseguir algunas cosas parecidas como reutilización de controladores, acciones y elementos visuales comunes (en el mismo proyecto, página y diferentes proyectos) pero desde luego habría que buscar una solución propia y resolver algunos problemas que ya resuelve Tapestry por nosotros como generación de ids únicos para los elementos visuales (ids de las etiquetas) de forma que no haya conflictos, inclusión de recursos según los componentes de la página, internacionalización (i18n) de assets (imágenes, plantillas), sin lógica en las plantillas y siguiendo el modelo pull en las vistas, reutilización en diferentes proyectos con librerías, configuración distribuida para el contenedor de dependencias, detección de errores de compilación en las plantillas, página de excepción informativa y para peticiones ajax, actualización de zonas de una página con cero javascript, actualización de multiples zonas de una página en una única petición ajax, servicios mutuamente dependientes, instrumentación invisible en las plantillas, integración de RequireJS en el lado del servidor y cliente, eventos y comportamiento diferente según el elemento contenedor ante un mismo evento, escalabilidad &hellip;. Algunas serían posibles, otras quizá no y posiblemente en las posibles tendríamos que implementar nosotros alguna solución propia, no seguirían las indicaciones que se proporcionan en el manual de Grails y quizá las cosas no serían manejables ni quedarían de una forma que quedásemos a gusto con el código. A pesar de todo la herramienta utilizada no es lo más importante, pero si es cierto que utilizar una u otra si puede contribuir a hacer ciertas cosas más de forma más sencilla y cuando las cosas alcanzan un volumen grande sigan siendo manejables (no haya duplicación, no se produzcan muchos errores al hacer cambios, reutilización) que es cuando Tapestry en teoría empieza a mostrar sus virtudes. Lo mismo que se puede hacer con Grails o Tapestry también se puede hacer con <em>servlets</em> y JSP pero probablemente acabaríamos simulando un nuevo Grails o Tapestry, mejor usar el que más nos facilite las tareas y uno que probablemente será mejor que cualquier cosa que podamos hacer nosotros además de no tener que encargarnos de hacerla ni mantenerla. Grails también tienen algunas cosas destacables «built-in» que en Tapestry hay que proporcionarlas con alguna librería, como GORM. Si hay tantos <em>frameworks</em>, librerías, etc ahí fuera probablemente sea porque hay diferentes necesidades, puntos de vista diferentes de como resolverlos, &hellip; en definitiva es cuestión de elegir el que más nos convenza por diferentes motivos y la elección puede ser subjetiva.</p>
<p>Y otra pero no menos interesante pregunta es por que tapestry se llama tapestry o por que el logo de tapestry es un unicornio, anteriormente fue similar a una T en la versión 3, para el nombre no tengo respuesta. Leyendo un <a href="http://mail-archives.apache.org/mod_mbox/tapestry-users/200605.mbox/%3Cop.s9k7abmko3wyor@liigo%3E">hilo en la lista de destribución</a> en la que se discutía el asunto se da algunas ideas pero no me ha quedado una clara.</p>
<p>A continuación la <a href="https://speakerdeck.com/picodotdev/plugin-tapestry">presentación completa de la charla</a> que dí y que contiene de forma más explícita todo lo que está incluido en el libro <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry</a>.</p>
<div class="media">
    <script async class="speakerdeck-embed" data-id="94de4cc06da70131c6665e5071095c76&#34;" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
    <noscript>$TODO</noscript>
</div>
<p>Un par de gracias, la sensación de haber aportado algo (o al menos haberlo intentado), el ruido que hicimos en twitter con el <em>hastag</em> <a href="https://twitter.com/search?q=tapestry5">#tapestry5</a>, unos pocos seguidores adicionales y algunos retweets incluido el del principal hacedor de Tapestry fue suficiente recompensa.</p>
<p>Un blog desde hace ya 4 años, un libro el año pasado, una charla este ¿que será lo siguiente? «Non gogoa, han zangoa».</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="software"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
</feed>
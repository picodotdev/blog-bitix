<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/java/</id>
    <updated>2021-09-30T23:00:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/</id>
        <title>Hemeroteca #7</title>
        <updated>2015-06-27T22:00:00+02:00</updated>
        <published>2015-06-27T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Pasado un nuevo semestre he escrito principalmente sobre temas de programación, Java y poco sobre Linux o software libre. Incluyo aquí el listado completo de los artículos que he escrito.</strong></p>]]>
        <![CDATA[<p>Otros seis meses que han pasado y estos especialmente para mi muy rápido. Como suelo hacer cada este periodo de tiempo recopilo en un artículo <em>Hemeroteca</em> los artículos que he publicado al ritmo que mantengo de uno por semana. Este ya es el séptimo contando los de <a href="https://elblogdepicodev.blogspot.com.es">El blog de pico.dev</a> y de <a href="https://picodotdev.github.io/blog-bitix/">Blog Bitix</a>.</p>
<p>Como resumen de estas 26 semanas he publicado 27 artículos destacando que he cambiado de herramienta con la que mantengo la bitácora pasando de usar <a href="http://octopress.org/">Octopress</a> a <a href="https://gohugo.io/">Hugo</a> que me ha permitido cambiar el diseño completamente personalizándolo enteramente a mi gusto y agregar algunas nuevas funcionalidades como un mejor previsualizador de imágenes, resúmenes al inicio de los artículos, o un nuevo menú con las categorías principales de las que escribo. De lo que más he escrito ha sido sobre programación y como no pueden faltar en este <em>blog</em> algún artículo sobre <a href="https://tapestry.apache.org/">Apache Tapestry</a>.</p>
<p>De los artículos que he escrito destacaré los siguientes, son con los que más a gusto he quedado después de escribirlos y me parece que merecen una lectura, por orden cronológico:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/conferencia-bilbostack-2015/">Conferencia BilboStack 2015</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/5-aniversario-del-blog/">5º aniversario del blog</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring/">Listener de eventos de Hibernate con servicios de Spring</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/">Datos de sesión externalizados con Spring Session</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/">Aplicación web Java autocontenida con Tomcat Embedded</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/">Productividad y errores de compilación con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/">Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/nueva-visita-a-5-plus-opciones-de-hosting-para-aplicaciones/">Nueva visita a 5+ opciones de «hosting» para aplicaciones</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/">Certificado SSL de empresa wildcard y de validación extendida</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/">Programación de juegos y 3D en Java con jMonkeyEngine</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/">Nuevo diseño en Blog Bitix</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/">10 razones para seguir usando Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">Alternativa a Hibernate u ORM y ejemplo de jOOQ</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java/">Nueva visita a herramientas para un proyecto Java</a></li>
</ul>
<p>El resto de artículos son los siguientes, también interesantes:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/instalar-y-usar-plugin-agil-en-redmine/">Instalar y usar plugin ágil en Redmine</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/introduccion-e-inicio-a-drupal/">Introducción e inicio a Drupal</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/">Como hacer un substring de una cadena HTML</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/">Fechas y usos horarios en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/como-hacer-un-downgrade-de-un-paquete-en-arch-linux/">Cómo hacer un «downgrade» de un paquete en Arch Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/la-palabra-clave-assert-de-java-y-un-ejemplo/">La palabra clave assert de Java y un ejemplo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/ejemplo-de-listener-de-eventos-de-hibernate/">Ejemplo de listener de eventos de Hibernate</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/">Introducción y ejemplo de API RPC con Apache Thrift</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos/">Evitar iniciar varias veces la máquina virtual Java para procesos cortos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/escribir-en-varios-writer-a-la-vez/">Escribir en varios writer a la vez</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/">Patrón múltiples vistas de un mismo dato en Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/">Servicio para obtener ratios de conversión entre divisas</a></li>
</ul>
<p>Cada mes sigo aumentando ligeramente o manteniendo el número de visitas del mes anterior, la mayoría procedentes del buscador Google. En enero andaba en unas 1125 sesiones y 1400 páginas vistas semanales, hoy en unas 1450 sesiones y 2000 páginas vistas, siguen siendo pocas comparadas con algunos otras bitácoras de temática similar. De vez en cuando tengo algún nuevo seguidor en twitter y son pocos los comentarios que recibo probablemente esté haciendo algo que podría hacer mejor. Los artículos que publico suelen ser para un público de nivel medio y uno a la semana, <a href="http://www.marketingguerrilla.es">recomiendan escribir artículos de un nivel básico</a> y probablemente si siguiese esta recomendación recibiría más visitas o más comentarios pero me suele gustar escribir de algo que incluso yo aprenda algo y que no esté ya en un millardo de sitios y sea medianamente fácil de encontrar con una búsqueda sencilla, aunque igual me planteo de vez en cuando seguir esta recomendación.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/images/analytics_hu1ac75864dcb350a7d40e492d9b491358_64582_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Visitas semanales de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/images/analytics_hu1ac75864dcb350a7d40e492d9b491358_64582_300x200_fit_box_3.png" width="300" height="111" alt="Visitas semanales de Blog Bitix" title="Visitas semanales de Blog Bitix"  class="lozad "></a></p>
<figcaption>Evolución de sesiones semanales en Blog Bitix</figcaption>
</figure>
</div>
<p>Sigo teniendo pendiente de publicar unos cuantos nuevos artículos que continúen la <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie sobre Docker</a> que ya publiqué, también tengo más artículos preparados sobre programación con Java y bastantes ideas ya listadas para seguir escribiendo. Pero si te interesa un determinado tema y quisieras que explicase o hablase de algo relacionado con lo que suelo escribir añade un comentario y trataré de ver si me es posible, ¡comenta, pregunta lo que quieras o hazme la recomendación que estés pensando!.</p>
<p>Para finalizar agradecer a varios usuarios de twitter que aunque no conozco suelen compartir muchos de los artículos que escribo y me ayudan enormemente a hacer que el contenido de Blog Bitix llegue a más personas. <a href="https://twitter.com/jbravo">Joaquin Bravo</a>, <a href="https://twitter.com/Statick_ds">Diego Saavedra</a>, <a href="https://twitter.com/Mr_Prometheus">Camilo Bernal</a>, <a href="https://twitter.com/pereyrada">A. Daniel Pereyra</a> y otros en la <a href="https://twitter.com/search?q=%22Blog%20Bitix%22&amp;src=typd">linea de tiempo de Blog Bitix</a>, ¡gracias!.</p>
]]>
        </content>
        
            
                <category term="blog"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/</id>
        <title>Servicio para obtener ratios de conversión entre divisas</title>
        <updated>2015-07-24T23:00:00+02:00</updated>
        <published>2015-06-20T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>¿Trabajas con importes en diferentes divisas y necesitas hacer conversiones entre ellas? Si es el caso necesitas obtener los ratios de conversión entre divisas de alguna fuente de forma regular y de forma automatizada ya que se varían constantemente (en minutos) según diversos factores. Hay diferentes fuentes para obtenerlos y empresas que ofrecen las cotizaciones como producto, en este artículo comentaré una con suficiente detalle como para integrarla en cualquier aplicación.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En una aplicación de comercio electrónico que venda sus productos o servicios a nivel internacional probablemente necesitará mostrar los precios en la moneda local del comprador. En estos casos será necesario hacer una conversión entre la divisa en la que está el importe del producto y la divisa del usuario con la que realizará el pago. Para hacer la conversión necesitaremos un ratio de conversión reciente entre la divisa origen y la divisa destino del importe o <em>pivotar</em> sobre una divisa entre ambas. Los <a href="http://www.investopedia.com/ask/answers/08/how-often-to-exchange-rates-fluctuate.asp">ratios se actualizan constantemente cada día</a> según diversos factores variando ligeramente su cotización en la economía global. En este artículo presentaré <a href="https://openexchangerates.org">Open Exchange Rates</a>, el mejor servicio de ratios de divisas que he encontrado.</p>
<p>Open Exchange Rates dispone de una API REST que podemos utilizar para automatizar la obtención de los ratios de conversión en nuestra aplicación, ofrecen los ratios para 165 divisas por supuesto incluyendo algunas dólares americanos (USD), euros (EUR), libras (GBP), yenes (JPY), rublos (RUB), países del este de europa, países asiáticos, latinoamericanos y del oriente medio. Para acceder a la API deberemos <a href="https://openexchangerates.org/signup">registrarnos</a> momento en el que se nos proporcionará un identificativo para nuestra aplicación que usaremos al realizar consultas.</p>
<p>En el plan gratuito nos ofrecen los ratios respecto a USD, esto es, una dólar norteamericano equivale al valor del ratio en la moneda en concreto, en el momento de escribir el artículo la API devuelve los siguientes datos, en la que se ve que un USD ($) equivale a 0.880435 EUR (€). Disponemos de varios <em>endpoints</em>:</p>
<ul>
<li><em>latest.json</em>: para obtener los ratios de conversión más recientes.</li>
<li>historical/YYYY-MM-DD.json: para obtener los ratios de un día específico.</li>
<li><em>currencies.json</em>: para obtener la lista de divisas y sus descripciones.</li>
<li><em>time-series.json</em>: para obtener datos históricos durante un periodo de varios días.</li>
</ul>
<p>Usando el primero de ellos junto con el <em>api-key</em> que nos han asignado <a href="https://openexchangerates.org/api/latest.json?app_id=[api-key]">https://openexchangerates.org/api/latest.json?app_id=[api-key]</a> obtenemos los ratios en formato JSON, en el dato <em>base</em> está la divisa de referencia, en este caso dólares estadounidenses (USD):</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>&#10;  <span class="nt">&#34;disclaimer&#34;</span><span class="p">:</span> <span class="s2">&#34;Exchange rates are provided for informational purposes only, and do not constitute financial advice of any kind. Although every attempt is made to ensure quality, NO guarantees are given whatsoever of accuracy, validity, availability, or fitness for any purpose - please use at your own risk. All usage is subject to your acceptance of the Terms and Conditions of Service, available at: https://openexchangerates.org/terms/&#34;</span><span class="p">,</span>&#10;  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;Data sourced from various providers with public-facing APIs; copyright may apply; resale is prohibited; no warranties given of any kind. Bitcoin data provided by http://coindesk.com. All usage is subject to your acceptance of the License Agreement available at: https://openexchangerates.org/license/&#34;</span><span class="p">,</span>&#10;  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="mi">1434740463</span><span class="p">,</span>&#10;  <span class="nt">&#34;base&#34;</span><span class="p">:</span> <span class="s2">&#34;USD&#34;</span><span class="p">,</span>&#10;  <span class="nt">&#34;rates&#34;</span><span class="p">:</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;EUR&#34;</span><span class="p">:</span> <span class="mf">0.880435</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;JPY&#34;</span><span class="p">:</span> <span class="mf">122.6964</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;RUB&#34;</span><span class="p">:</span> <span class="mf">53.99557</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;USD&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>latest.json</span>
    </div>
</div>
<p>Estas son las 165 divisas soportadas:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">{&#10;	&#34;AED&#34;: &#34;United Arab Emirates Dirham&#34;,&#10;	&#34;AFN&#34;: &#34;Afghan Afghani&#34;,&#10;	&#34;ALL&#34;: &#34;Albanian Lek&#34;,&#10;	&#34;AMD&#34;: &#34;Armenian Dram&#34;,&#10;	&#34;ANG&#34;: &#34;Netherlands Antillean Guilder&#34;,&#10;	&#34;AOA&#34;: &#34;Angolan Kwanza&#34;,&#10;	&#34;ARS&#34;: &#34;Argentine Peso&#34;,&#10;	&#34;AUD&#34;: &#34;Australian Dollar&#34;,&#10;	&#34;AWG&#34;: &#34;Aruban Florin&#34;, &#10;	&#34;AZN&#34;: &#34;Azerbaijani Manat&#34;,&#10;	&#34;BAM&#34;: &#34;Bosnia-Herzegovina Convertible Mark&#34;,&#10;	&#34;BBD&#34;: &#34;Barbadian Dollar&#34;,&#10;	&#34;BDT&#34;: &#34;Bangladeshi Taka&#34;,&#10;	&#34;BGN&#34;: &#34;Bulgarian Lev&#34;,&#10;	&#34;BHD&#34;: &#34;Bahraini Dinar&#34;,&#10;	&#34;BIF&#34;: &#34;Burundian Franc&#34;,&#10;	&#34;BMD&#34;: &#34;Bermudan Dollar&#34;,&#10;	&#34;BND&#34;: &#34;Brunei Dollar&#34;,&#10;	&#34;BOB&#34;: &#34;Bolivian Boliviano&#34;,&#10;	&#34;BRL&#34;: &#34;Brazilian Real&#34;,&#10;	&#34;BSD&#34;: &#34;Bahamian Dollar&#34;,&#10;	&#34;BTC&#34;: &#34;Bitcoin&#34;,&#10;	&#34;BTN&#34;: &#34;Bhutanese Ngultrum&#34;,&#10;	&#34;BWP&#34;: &#34;Botswanan Pula&#34;,&#10;	&#34;BYR&#34;: &#34;Belarusian Ruble&#34;,&#10;	&#34;BZD&#34;: &#34;Belize Dollar&#34;,&#10;	&#34;CAD&#34;: &#34;Canadian Dollar&#34;,&#10;	&#34;CDF&#34;: &#34;Congolese Franc&#34;,&#10;	&#34;CHF&#34;: &#34;Swiss Franc&#34;,&#10;	&#34;CLF&#34;: &#34;Chilean Unit of Account (UF)&#34;,&#10;	&#34;CLP&#34;: &#34;Chilean Peso&#34;,&#10;	&#34;CNY&#34;: &#34;Chinese Yuan&#34;,&#10;	&#34;COP&#34;: &#34;Colombian Peso&#34;,&#10;	&#34;CRC&#34;: &#34;Costa Rican Colón&#34;,&#10;	&#34;CUC&#34;: &#34;Cuban Convertible Peso&#34;,&#10;	&#34;CUP&#34;: &#34;Cuban Peso&#34;,&#10;	&#34;CVE&#34;: &#34;Cape Verdean Escudo&#34;,&#10;	&#34;CZK&#34;: &#34;Czech Republic Koruna&#34;,&#10;	&#34;DJF&#34;: &#34;Djiboutian Franc&#34;,&#10;	&#34;DKK&#34;: &#34;Danish Krone&#34;,&#10;	&#34;DOP&#34;: &#34;Dominican Peso&#34;,&#10;	&#34;DZD&#34;: &#34;Algerian Dinar&#34;,&#10;	&#34;EEK&#34;: &#34;Estonian Kroon&#34;,&#10;	&#34;EGP&#34;: &#34;Egyptian Pound&#34;,&#10;	&#34;ERN&#34;: &#34;Eritrean Nakfa&#34;,&#10;	&#34;ETB&#34;: &#34;Ethiopian Birr&#34;,&#10;	&#34;EUR&#34;: &#34;Euro&#34;,&#10;	&#34;FJD&#34;: &#34;Fijian Dollar&#34;,&#10;	&#34;FKP&#34;: &#34;Falkland Islands Pound&#34;,&#10;	&#34;GBP&#34;: &#34;British Pound Sterling&#34;,&#10;	&#34;GEL&#34;: &#34;Georgian Lari&#34;,&#10;	&#34;GGP&#34;: &#34;Guernsey Pound&#34;,&#10;	&#34;GHS&#34;: &#34;Ghanaian Cedi&#34;,&#10;	&#34;GIP&#34;: &#34;Gibraltar Pound&#34;,&#10;	&#34;GMD&#34;: &#34;Gambian Dalasi&#34;,&#10;	&#34;GNF&#34;: &#34;Guinean Franc&#34;,&#10;	&#34;GTQ&#34;: &#34;Guatemalan Quetzal&#34;,&#10;	&#34;GYD&#34;: &#34;Guyanaese Dollar&#34;,&#10;	&#34;HKD&#34;: &#34;Hong Kong Dollar&#34;,&#10;	&#34;HNL&#34;: &#34;Honduran Lempira&#34;,&#10;	&#34;HRK&#34;: &#34;Croatian Kuna&#34;,&#10;	&#34;HTG&#34;: &#34;Haitian Gourde&#34;,&#10;	&#34;HUF&#34;: &#34;Hungarian Forint&#34;,&#10;	&#34;IDR&#34;: &#34;Indonesian Rupiah&#34;,&#10;	&#34;ILS&#34;: &#34;Israeli New Sheqel&#34;,&#10;	&#34;IMP&#34;: &#34;Manx pound&#34;,&#10;	&#34;INR&#34;: &#34;Indian Rupee&#34;,&#10;	&#34;IQD&#34;: &#34;Iraqi Dinar&#34;,&#10;	&#34;IRR&#34;: &#34;Iranian Rial&#34;,&#10;	&#34;ISK&#34;: &#34;Icelandic Króna&#34;,&#10;	&#34;JEP&#34;: &#34;Jersey Pound&#34;,&#10;	&#34;JMD&#34;: &#34;Jamaican Dollar&#34;,&#10;	&#34;JOD&#34;: &#34;Jordanian Dinar&#34;,&#10;	&#34;JPY&#34;: &#34;Japanese Yen&#34;,&#10;	&#34;KES&#34;: &#34;Kenyan Shilling&#34;,&#10;	&#34;KGS&#34;: &#34;Kyrgystani Som&#34;,&#10;	&#34;KHR&#34;: &#34;Cambodian Riel&#34;,&#10;	&#34;KMF&#34;: &#34;Comorian Franc&#34;,&#10;	&#34;KPW&#34;: &#34;North Korean Won&#34;,&#10;	&#34;KRW&#34;: &#34;South Korean Won&#34;,&#10;	&#34;KWD&#34;: &#34;Kuwaiti Dinar&#34;,&#10;	&#34;KYD&#34;: &#34;Cayman Islands Dollar&#34;,&#10;	&#34;KZT&#34;: &#34;Kazakhstani Tenge&#34;,&#10;	&#34;LAK&#34;: &#34;Laotian Kip&#34;,&#10;	&#34;LBP&#34;: &#34;Lebanese Pound&#34;,&#10;	&#34;LKR&#34;: &#34;Sri Lankan Rupee&#34;,&#10;	&#34;LRD&#34;: &#34;Liberian Dollar&#34;,&#10;	&#34;LSL&#34;: &#34;Lesotho Loti&#34;,&#10;	&#34;LTL&#34;: &#34;Lithuanian Litas&#34;,&#10;	&#34;LVL&#34;: &#34;Latvian Lats&#34;,&#10;	&#34;LYD&#34;: &#34;Libyan Dinar&#34;,&#10;	&#34;MAD&#34;: &#34;Moroccan Dirham&#34;,&#10;	&#34;MDL&#34;: &#34;Moldovan Leu&#34;,&#10;	&#34;MGA&#34;: &#34;Malagasy Ariary&#34;,&#10;	&#34;MKD&#34;: &#34;Macedonian Denar&#34;,&#10;	&#34;MMK&#34;: &#34;Myanma Kyat&#34;,&#10;	&#34;MNT&#34;: &#34;Mongolian Tugrik&#34;,&#10;	&#34;MOP&#34;: &#34;Macanese Pataca&#34;,&#10;	&#34;MRO&#34;: &#34;Mauritanian Ouguiya&#34;,&#10;	&#34;MTL&#34;: &#34;Maltese Lira&#34;,&#10;	&#34;MUR&#34;: &#34;Mauritian Rupee&#34;,&#10;	&#34;MVR&#34;: &#34;Maldivian Rufiyaa&#34;,&#10;	&#34;MWK&#34;: &#34;Malawian Kwacha&#34;,&#10;	&#34;MXN&#34;: &#34;Mexican Peso&#34;,&#10;	&#34;MYR&#34;: &#34;Malaysian Ringgit&#34;,&#10;	&#34;MZN&#34;: &#34;Mozambican Metical&#34;,&#10;	&#34;NAD&#34;: &#34;Namibian Dollar&#34;,&#10;	&#34;NGN&#34;: &#34;Nigerian Naira&#34;,&#10;	&#34;NIO&#34;: &#34;Nicaraguan Córdoba&#34;,&#10;	&#34;NOK&#34;: &#34;Norwegian Krone&#34;,&#10;	&#34;NPR&#34;: &#34;Nepalese Rupee&#34;,&#10;	&#34;NZD&#34;: &#34;New Zealand Dollar&#34;,&#10;	&#34;OMR&#34;: &#34;Omani Rial&#34;,&#10;	&#34;PAB&#34;: &#34;Panamanian Balboa&#34;,&#10;	&#34;PEN&#34;: &#34;Peruvian Nuevo Sol&#34;,&#10;	&#34;PGK&#34;: &#34;Papua New Guinean Kina&#34;,&#10;	&#34;PHP&#34;: &#34;Philippine Peso&#34;,&#10;	&#34;PKR&#34;: &#34;Pakistani Rupee&#34;,&#10;	&#34;PLN&#34;: &#34;Polish Zloty&#34;,&#10;	&#34;PYG&#34;: &#34;Paraguayan Guarani&#34;,&#10;	&#34;QAR&#34;: &#34;Qatari Rial&#34;,&#10;	&#34;RON&#34;: &#34;Romanian Leu&#34;,&#10;	&#34;RSD&#34;: &#34;Serbian Dinar&#34;,&#10;	&#34;RUB&#34;: &#34;Russian Ruble&#34;,&#10;	&#34;RWF&#34;: &#34;Rwandan Franc&#34;,&#10;	&#34;SAR&#34;: &#34;Saudi Riyal&#34;,&#10;	&#34;SBD&#34;: &#34;Solomon Islands Dollar&#34;,&#10;	&#34;SCR&#34;: &#34;Seychellois Rupee&#34;,&#10;	&#34;SDG&#34;: &#34;Sudanese Pound&#34;,&#10;	&#34;SEK&#34;: &#34;Swedish Krona&#34;,&#10;	&#34;SGD&#34;: &#34;Singapore Dollar&#34;,&#10;	&#34;SHP&#34;: &#34;Saint Helena Pound&#34;,&#10;	&#34;SLL&#34;: &#34;Sierra Leonean Leone&#34;,&#10;	&#34;SOS&#34;: &#34;Somali Shilling&#34;,&#10;	&#34;SRD&#34;: &#34;Surinamese Dollar&#34;,&#10;	&#34;STD&#34;: &#34;São Tomé and Príncipe Dobra&#34;,&#10;	&#34;SVC&#34;: &#34;Salvadoran Colón&#34;,&#10;	&#34;SYP&#34;: &#34;Syrian Pound&#34;,&#10;	&#34;SZL&#34;: &#34;Swazi Lilangeni&#34;,&#10;	&#34;THB&#34;: &#34;Thai Baht&#34;,&#10;	&#34;TJS&#34;: &#34;Tajikistani Somoni&#34;,&#10;	&#34;TMT&#34;: &#34;Turkmenistani Manat&#34;,&#10;	&#34;TND&#34;: &#34;Tunisian Dinar&#34;,&#10;	&#34;TOP&#34;: &#34;Tongan Paʻanga&#34;,&#10;	&#34;TRY&#34;: &#34;Turkish Lira&#34;,&#10;	&#34;TTD&#34;: &#34;Trinidad and Tobago Dollar&#34;,&#10;	&#34;TWD&#34;: &#34;New Taiwan Dollar&#34;,&#10;	&#34;TZS&#34;: &#34;Tanzanian Shilling&#34;,&#10;	&#34;UAH&#34;: &#34;Ukrainian Hryvnia&#34;,&#10;	&#34;UGX&#34;: &#34;Ugandan Shilling&#34;,&#10;	&#34;USD&#34;: &#34;United States Dollar&#34;,&#10;	&#34;UYU&#34;: &#34;Uruguayan Peso&#34;,&#10;	&#34;UZS&#34;: &#34;Uzbekistan Som&#34;,&#10;	&#34;VEF&#34;: &#34;Venezuelan Bolívar Fuerte&#34;,&#10;	&#34;VND&#34;: &#34;Vietnamese Dong&#34;,&#10;	&#34;VUV&#34;: &#34;Vanuatu Vatu&#34;,&#10;	&#34;WST&#34;: &#34;Samoan Tala&#34;,&#10;	&#34;XAF&#34;: &#34;CFA Franc BEAC&#34;,&#10;	&#34;XAG&#34;: &#34;Silver (troy ounce)&#34;,&#10;	&#34;XAU&#34;: &#34;Gold (troy ounce)&#34;,&#10;	&#34;XCD&#34;: &#34;East Caribbean Dollar&#34;,&#10;	&#34;XDR&#34;: &#34;Special Drawing Rights&#34;,&#10;	&#34;XOF&#34;: &#34;CFA Franc BCEAO&#34;,&#10;	&#34;XPF&#34;: &#34;CFP Franc&#34;,&#10;	&#34;YER&#34;: &#34;Yemeni Rial&#34;,&#10;	&#34;ZAR&#34;: &#34;South African Rand&#34;,&#10;	&#34;ZMK&#34;: &#34;Zambian Kwacha (pre-2013)&#34;,&#10;	&#34;ZMW&#34;: &#34;Zambian Kwacha&#34;,&#10;	&#34;ZWL&#34;: &#34;Zimbabwean Dollar&#34;&#10;}</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>divisas-soportadas.txt</span>
    </div>
</div>
<p>Teniendo esta API podemos automatizar en nuestra aplicación la obtención de los ratios con un límite de 1000 consultas al mes en el plan gratuito, por ejemplo una vez al día o cada seis horas dependiendo del grado de precisión que nos parezca suficiente para la aplicación. En los <a href="https://openexchangerates.org/signup">planes de pago disponibles</a> las posibilidades de la API son más permitiendo por ejemplo aumentar el límite de consultas, obtener los ratios referenciados a otra moneda distinta al dólar estadounidense u otras consultas y funcionalidades.</p>
<p>Basta usar la librería cliente de <a href="https://hc.apache.org/">Apache HttpComponents</a> para hacer la petición HTTP y un parseador JSON como <a href="http://www.json.org/java/index.html">JSON in Java</a> para acceder a los datos obtenidos.</p>
<p>Hay otras posibilidades como un <a href="http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml">servicio proporcionado por el banco central europeo</a> pero que ofrece únicamente los ratios de 28 monedas y que solo se actualiza diariamente. Otra posibilidad es <a href="http://finance.yahoo.com/d/quotes.csv?s=EURUSD=X&amp;f=l1">Yahoo Finance</a>, en el parámetro de este enlace indicamos primeramente el código de la moneda origen y el código de la divisa destino en este caso de EUR a USD pero Open Exchange Rates me ha parecido mejor y de mayor confianza.</p>
<p>Si te ha interesado este artículo puede que también te interese <a href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/">Cómo trabajar con importes, ratios y divisas en Java</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://openexchangerates.org">Open Exchange Rates</a></li>
<li><a href="https://stackoverflow.com/questions/3139879/how-do-i-get-currency-exchange-rates-via-an-api-such-as-google-finance">How do I get currency exchange rates via an API?</a></li>
<li><a href="http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml">European Central Bank Rates</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/">Cómo trabajar con importes, ratios y divisas en Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java/</id>
        <title>Nueva visita a Herramientas para un proyecto Java</title>
        <updated>2020-08-24T19:30:00+02:00</updated>
        <published>2015-06-12T20:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Las tecnologías para desarrollar una aplicación son un medio para resolver las necesidades del negocio o un cliente, no un fin. Pero esto no quiere decir que la elección sea trivial o poco importante, realizar las elecciones adecuadas según lo requisitos puede evitar complicaciones en un futuro. Para un proyecto basado en la plataforma Java esta es mi selección de herramientas de las que conozco.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Hace 5 años escribí un <a href="https://elblogdepicodev.blogspot.com.es/2011/06/elegir-herramientas-para-un-proyecto.html">artículo comentando que tecnologías elegiría</a> para un proyecto Java si tuviese posibilidad. Al ritmo que avanza la tecnología cuatro años es un tiempo bastante largo, también es un tiempo en el que he podido aprender y añadir a mi «caja de herramientas» nuevas opciones que después de evaluarlas me han gustado. En este artículo haré una nueva visita al artículo anterior y comentaré algunas nuevas herramientas.</p>
<h3 id="lenguaje-de-programación">Lenguaje de programación</h3>
<p>Como lenguaje de programación seguiría usando Java, en mi caso es el lenguaje que más conozco y sigue siendo una de las opciones más válidas. Pero con la salida de una nueva versión usaría Java 8. La <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">publicación de Java 8 incorporando varias novedades importantes</a> han mejorado varios aspectos de este lenguaje, por mencionar los más relevantes están la incorporación de <em>lambdas</em> que proporciona una cierta forma de programación funcional, también destaca los <em>streams</em> que permite describir los algoritmos que procesan datos de una forma más expresiva y legible además de aprovechar mejor los procesadores multinúcleo, métodos por defecto en interfaces que permite mantener compatibilidad hacia atrás (aunque esto interesa más a los desarrolladores que hacen APIs para que sean usadas por terceras partes), una nueva API para el manejo de fechas eliminando una de las críticas de versiones anteriores y algunas cosas más. El futuro con Java 9 es prometedor si presenta la interesante modularidad.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/">Novedades y nuevas características de Java 11</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/">10 razones para seguir usando Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/">Introducción y nuevas características de Java EE 7</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/series/java-platform/">Novedades de la plataforma Java</a></li>
</ul>
<h3 id="persistencia-en-base-de-datos">Persistencia en base de datos</h3>
<p>Las librerías más populares de persistencia en Java son <a href="https://hibernate.org/">Hibernate</a> aunque para algunos casos usaría o como complemento <a href="https://www.jooq.org/">jOOQ</a>, <a href="https://spring.io/projects/spring-data">Spring Data</a> ofrece varias utilidades para facilitar crear las clases repositorio usando Hibernate.</p>
<p>jOOQ es una librería que no tienen tanta magia como Hibernate que en muchas ocasiones produce errores complicados de resolver y no tenemos tanto control de lo que hace, por otro lado jOOQ devuelve a la base de datos y al lenguaje SQL la relevancia que con Hibernate queda abstraída con el mapeado del modelo de datos a objetos y el lenguaje HQL. jOOQ permite construir las sentencias SQL de forma programática con lo que el compilador nos indicará errores de compilación y nos validará los tipos que usemos, ambas cosas son importantes cuando hacemos un <em>refactor</em> en alguna parte de la aplicación. En el artículo <a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">alternativa a Hibernate y ejemplo jOOQ</a> entro en más detalles.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">Alternativa a Hibernate y ejemplo jOOQ</a></li>
</ul>
<p>Al persistir datos si es necesario realizar auditoría de datos dos posibilidades son <a href="https://hibernate.org/orm/envers/">Envers</a> específica para Hibernate y <a href="https://javers.org/">Javers</a> usable con cualquier librería de persistencia. Permiten guarda los típicos campos fecha creación, usuario creación, fecha modificación y última modificación asi como mantener un histórico completo de todos los cambios realizados a una entidad.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/">Histórico de datos, auditoría y diferencias entre objetos con Javers en Java</a></li>
</ul>
<h3 id="modificaciones-de-la-base-de-datos">Modificaciones de la base de datos</h3>
<p>En un proyecto de larga duración y en el que se realicen mejoras probablemente necesitaremos modificar el modelo de la base de datos. Empleando la herramienta <a href="https://www.liquibase.org/">Liquibase</a> podremos <a href="https://elblogdepicodev.blogspot.com.es/2013/05/modificar-la-base-de-datos-con-liquibase.html">automatizar la actualización del esquema de la base de datos</a> ya necesitemos añadir campos, cambiarlos de nombre, eliminarlos, crear o eliminar tablas, insertar, eliminar o actualizar datos. Estas actualizaciones de la base de datos se indican en un archivo que podemos guardar en nuestro repositorio de control de versiones de forma que podamos ver y reproducir los cambios que se han hecho a la base de datos a lo largo del tiempo.</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/modificar-la-base-de-datos-con-liquibase.html">Modificar la base de datos con Liquibase</a></li>
</ul>
<h3 id="pruebas">Pruebas</h3>
<p>Para pruebas unitarias dos buenas posibilidades son <a href="https://junit.org/junit5/">JUnit</a>, <a href="https://code.google.com/p/spock/">Spock</a> y <a href="https://gebish.org/">Geb</a>. Spock permite realizar los teses unitarias con un DSL bastante descriptivo que facilita la lectura posteriormente de la prueba, sin embargo, JUnit ofrece las mismas ventajas para los teses que el para el código de la aplicación al usar Java. Por otro lado Geb permite automatizar las pruebas de las aplicaciones web proporcionando facilidades, se puede integrar con Spock.</p>
<p>Otra herramienta muy útil es <a href="https://www.testcontainers.org/">Testcontainers</a> que permite hacer pruebas de integración usando el mismo software de producción como puede ser una base de datos <a href="https://www.mysql.com/">MySQL</a> o <a href="https://www.postgresql.org/">PostgreSQL</a> en vez de una base de datos en memoria.</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/07/pruebas-unitarias-con-spock-y-mockito.html">Pruebas unitarias con Spock y Mockito</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/pruebas-funcionales-con-geb-en-una-aplicacion-web-java/">Pruebas funcionales con Geb en una aplicación web Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/10/cobertura-de-codigo-y-mutation-testing-en-pruebas-unitarias-con-jacoco-y-pit-en-java/">Cobertura de código y mutation testing en pruebas unitarias con JaCoCo y PIT en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/">Pruebas de carga y rendimiento de un servicio web con Apache Bench</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/06/teses-unitarios-parametrizados-con-junit/">Teses unitarios parametrizados con JUnit</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/pruebas-de-integracion-con-testcontainers-ejemplo-de-jpa-con-la-base-de-datos-postgresql/">Pruebas de integración con Testcontainers, ejemplo de JPA con la base de datos PostgreSQL</a></li>
</ul>
<h3 id="cliente">Cliente</h3>
<p>En el lado cliente de una aplicación web usaría la combinación de varias tecnologías, <a href="https://jquery.com/">jQuery</a> para acceder y manipular el DOM de la página web, <a href="https://requirejs.org/">RequireJS</a> para cargar los archivos necesarios en la página y evitar la polución del ámbito global JavaScript.</p>
<p>Si la aplicación tiene una carga importante en el lado cliente evaluaría usar <a href="https://www.typescriptlang.org/">TypeScript</a> como lenguaje por ser un compilado con sus ventajas en bases de código grandes, <a href="https://webpack.js.org/">Webpack</a> para gestionar los recursos, empaquetarlos y realizar transformaciones como alternativa a RequireJS y <a href="https://reactjs.org/">React</a> para crear componentes en el lado cliente. <a href="https://jestjs.io/">Jest</a> o <a href="https://jasmine.github.io/">Jasmine</a> para hacer pruebas unitarias en JavaScript.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/">Componentes en el cliente con Web Components usando JavaScript, HTML y CSS</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/03/usar-un-paquete-npm-con-webpack-creado-con-storybook-react-y-typescript/">Usar un paquete npm con Webpack creado con Storybook, React y TypeScript</a></li>
</ul>
<h3 id="_framework_-web"><em>Framework</em> web</h3>
<p>Para el desarrollo de una página o aplicación web seguiría usando <a href="https://tapestry.apache.org/">Apache Tapestry</a> por la productividad y alta reutilización que se puede conseguir, también por la flexibilidad, extensibilidad y adaptabilidad del <em>framework</em> si necesita recursos de cliente añadiendo dependencias con <a href="https://www.webjars.org/">Webjars</a>. Descargando el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapesty</a> puedes conocer muchos más detalles.</p>
<p>Si se tratase de una aplicación REST evaluaría [Spring Boot][springboot] o <a href="https://graphql.org/">GraphQL</a> para proporcionar la interfaz exterior de los microservicios y quizá evaluaría <a href="https://thrift.apache.org/">Apache Thrift</a> o <a href="https://grpc.io/">gRPC</a> para consumirlos internamente, Thrift permite acceder a la API de una forma programática más sencillamente que consumir una interfaz REST o GraphQL cruda.</p>
<p>La tendencia actual es desarrollar microservicios y esto en las aplicaciones web supone que sean capaces de ofrecer su servicio por si mismas no usando un servidor de aplicaciones que hay que instalar previamente simplificando el despliegue a los administradores de sistemas, esto también se puede conseguir en parte usando <a href="https://www.docker.com/">Docker</a>. En vez de usar un <a href="https://tomcat.apache.org/">Tomcat</a> tradicional podemos usar la versión embebible o Spring Boot.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro sobre desarrollo de aplicaciones con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/">Introducción y ejemplo de API RPC con Apache Thrift</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/introduccion-a-grpc-y-ejemplo-con-java/">Introducción a gRPC y ejemplo con Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/">Aplicación web Java autocontenida con Tomcat Embedded</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/02/ejemplo-sencillo-de-web-service-con-resteasy.html">Ejemplo sencillo de servicio web con RESTEasy</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">Aplicación Java autocontenida con Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/11/que-es-graphql-y-ejemplo-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/">Qué es GraphQL y ejemplo para una interfaz de un servicio con Spring Boot y Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/06/dependencias-sobre-librerias-de-lado-de-cliente-con-webjars-en-una-aplicacion-web-java/">Dependencias sobre librerías de lado de cliente con Webjars en una aplicación web Java</a></li>
</ul>
<h3 id="base-de-datos">Base de datos</h3>
<p>Para una base de datos relacional en vez de <a href="https://www.mysql.com/">MySQL</a> usaría <a href="https://www.postgresql.org/">PostgreSQL</a>. PostgreSQL posee numerosas opciones avanzadas y es una de las bases de datos libres más reconocidas. El futuro de MySQL con Oracle y su escisión en MariaDB es más incierto además de no poseer algunas características que PostgreSQL sí.</p>
<p>Dependiendo del causística de la aplicación otras opciones complementarias son <a href="https://redis.io/">Redis</a> y <a href="https://www.mongodb.com/">MongoDB</a>, una base de datos clave-valor, una base de datos de documentos y en caso de tener que hacer búsquedas de texto completo con <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-relacional-postgresql/">Introducción a la base de datos relacional PostgreSQL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/">Introducción a la base de datos NoSQL MongoDB</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/">Introducción a Elasticsearch</a></li>
</ul>
<h3 id="entorno-de-desarrollo">Entorno de desarrollo</h3>
<p>Para el entorno de desarrollo o <em>devbox</em> usaría <a href="https://www.docker.com/">Docker</a> y <a href="https://docs.docker.com/compose/">Compose</a> que permiten disponer de un entorno más parecido al entorno de producción y en menos tiempo que instalando todo lo necesario en la máquina física. También podemos usar Docker para el entorno de producción. Para automatizar la tareas de configuración o despliegue usaría <a href="https://www.ansible.com/">Ansible</a> ya que al contrario de otras opciones no requiere instalar un agente en las máquinas a administrar, con un acceso SSH es suficiente.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/10/introduccion-y-caracteristicas-de-docker/">Introducción y características de Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/como-instalar-y-guia-de-inicio-basica-de-docker/">Inicio básico de Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/como-crear-una-imagen-para-docker-usando-un-dockerfile/">Cómo crear una imagen para Docker usando un Dockerfile</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/introduccion-a-ansible/">Introducción a Ansible</a></li>
</ul>
<h3 id="hospedaje">Hospedaje</h3>
<p>En cuanto al alojamiento para la aplicación la nube es otra tendencia por su flexibilidad. La <a href="https://aws.amazon.com/es/ec2/">nube de Amazon</a> proporciona muchos servicios que pueden sernos útiles sin embargo si nuestra aplicación no los necesita y no es demasiado complicada podemos optar por otras opciones más baratas. Dos opciones más baratas son <a href="https://www.linode.com/">Linode</a> o <a href="https://www.digitalocean.com/">Digital Ocean</a> con las que por unos 5 o 10 € al mes podemos disponer de una máquina con 1 GIB de RAM, unos 30 GiB de discos SSD y una amplia transferencia de datos entrantes y salientes.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/nueva-visita-a-5-plus-opciones-de-hosting-para-aplicaciones/">Nueva visita a 5+ opciones de «hosting» para aplicaciones</a></li>
</ul>
<p>Aún usando un servicio en la nube para no encadenarse a uno determinado y disponer un centro de datos están <a href="https://www.consul.io/">Consul</a> como sistema de registro, descubrimiento, gestión de configuración y conexión entre servicios, <a href="https://www.vaultproject.io/">Vault</a> para usar seguridad como servicio, <a href="https://www.nomadproject.io/">Nomad</a> como orquestador de las aplicaciones con posibilidad de hacer despliegues <em>blue/greeen</em> o <em>canary</em> asi com volver a una versión anterior fácilmente y <a href="https://www.terraform.io/">Terraform</a> para aprovisionar el entorno en la nube independiente del proveedor y haciendo que la infraestructura este bajo el control de versiones al usar infraestructura como código.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/">Microservicios con Spring Cloud, Consul, Nomad y Traefik</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/">Administrar secretos y proteger datos sensibles con Vault</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/">Estrategias de despliegue para microservicios con Nomad</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/07/revertir-a-una-version-anterior-de-un-servicio-con-nomad/">Revertir un servicio a una versión anterior con Nomad</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/arquitectura-de-referencia-de-consul-vault-y-nomad-para-un-centro-de-datos/">Arquitectura de referencia de Consul, Vault y Nomad para un centro de datos</a></li>
</ul>
<h3 id="otras">Otras</h3>
<p>Otras funcionalidades que necesita algunas aplicaciones son:</p>
<ul>
<li>Trazabilidad con <a href="https://spring.io/projects/spring-cloud-sleuth">Sleuth</a>.</li>
<li>Tolerancia a fallos con <a href="https://github.com/resilience4j/resilience4j">Resilience4j</a>.</li>
<li>Búsquedas a texto completo con <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>.</li>
<li>Métricas y monitorización con <a href="https://micrometer.io/">Micrometer</a>, <a href="https://prometheus.io/">Prometheus</a> y <a href="https://grafana.com/">Grafana</a>.</li>
<li>Autenticación y autorización con <a href="https://www.keycloak.org/">Keycloak</a>, <a href="https://oauth.net/">OAuth</a>, <a href="https://jwt.io/">JWT</a> y <a href="https://www.pac4j.org/">pac4j</a>.</li>
<li>Bus de eventos con Spring Events o <a href="https://github.com/google/guava">Guava</a>.</li>
<li>Comunicación desacoplada entre aplicaciones basado en mensajes con <a href="https://www.rabbitmq.com/">RabbitMQ</a>.</li>
<li><a href="https://quartz-scheduler.org/">Quartz</a> para la programación de tareas de forma periódica.</li>
<li><a href="https://community.jaspersoft.com/project/jasperreports-library">JasperReports</a> y <a href="https://pdfbox.apache.org/">PDFBox</a> para informes complejos o documentos CSV, Excel o PDF sencillos.</li>
<li><a href="https://logging.apache.org/log4j/2.x/">Log4j 2</a> para emitir trazas.</li>
<li>Preprocesador CSS con <a href="https://lesscss.org/">Less</a> para facilitar la escritura de hojas de estilo CSS y <a href="https://getbootstrap.com/">Bootstrap</a> como estilos por defecto para una aplicación.</li>
<li><a href="https://pmd.github.io/">PMD</a> y <a href="https://checkstyle.sourceforge.net/">Checkstyle</a> para analizar el código fuente.</li>
<li>Repositorio de artefactos privado con <a href="https://www.sonatype.com/nexus/repository-oss">Nexus</a>.</li>
</ul>
<p>De algunas de estas herramientas he escrito de forma individualizada.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/trazabilidad-en-microservicios-con-spring-cloud-sleuth/">Trazabilidad en microservicios con Spring Cloud Sleuth</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/08/implementar-tolerancia-a-fallos-con-resilience4j/">Implementar tolerancia a fallos con Resilience4j</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/">Introducción a Elasticsearch</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/">Monitorizar una aplicación Java de Spring Boot con Micrometer, Prometheus y Grafana</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/">Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/02/servidor-oauth-gateway-y-servicio-rest-utilizando-tokens-jwt-con-spring/">Servidor OAuth, gateway y servicio REST utilizando tokens JWT con Spring</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/publicacion-y-suscripcion-de-eventos-con-guava-eventbus-en-una-aplicacion-java/">Publicación y suscripción de eventos con Guava EventBus en una aplicación Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/">Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/07/tareas-programadas-de-forma-periodica-con-quartz-y-spring-en-java/">Tareas programadas de forma periódica con Quartz y Spring en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/05/ejemplo-sencillo-de-como-crear-un-excel-o-csv-en-java-con-apache-poi-y-opencsv/">Ejemplo sencillo de como crear un Excel o CSV en Java con Apache POI y OpenCSV</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/08/ejemplo-sencillo-de-como-crear-un-documento-pdf-con-java-y-pdfbox/">Ejemplo sencillo de como crear un documento PDF con Java y PDFBox</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/12/generar-documentos-informes-y-facturas-en-formato-pdf-con-jasperreports-y-java/">Generar documentos, informes y facturas en formato PDF con JasperReports y Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/la-libreria-log4j-para-emitir-trazas-en-aplicaciones-java/">La librería Log4j para emitir trazas en aplicaciones Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/que-hace-y-ventajas-de-un-preprocesador-de-estilos-css/">Qué hace y ventajas de un preprocesador de estilos CSS</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/02/analisis-estatico-de-codigo-con-pmd-y-un-ejemplo/">Análisis estático de código con PMD y un ejemplo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2021/03/repositorio-de-artefactos-privado-con-nexus/">Repositorio de artefactos privado con Nexus</a></li>
</ul>
<p>Hay otras herramientas aún pasado este tiempo seguiría usando como <a href="https://git-scm.com/">Git</a> para el control de versiones, <a href="https://about.gitlab.com/">GitLab</a> como plataforma para desarrollo que incluye repositorio de git, gestión de peticiones e integración continua además de otras funcionalidades en una única herramienta. <a href="https://sdkman.io/">SDKMAN</a> para gestionar las versiones de librerías Java en el entorno de desarrollo, <a href="https://gradle.org/">Gradle</a> como herramienta de construcción, <a href="https://www.linux.com/">GNU/Linux</a> tanto para desarrollar como para el servidor en el que desplegar la aplicación, <a href="https://www.jetbrains.com/idea/">IntelliJ</a> como IDE para editar código Java o <a href="https://code.visualstudio.com/">Visual Studio Code</a> para editar archivos no Java.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/12/gitlab-la-completa-herramienta-integrada-para-desarrollo-de-software/">GitLab, la completa herramienta integrada para desarrollo de software</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html">Herramienta de construcción Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/la-herramienta-sdkman-para-instalar-varias-versiones-del-jdk-y-software-de-la-plataforma-java/">La herramienta SDKMAN para instalar varias versiones del JDK y software de la plataforma Java</a></li>
</ul>
<p>Usar herramientas adecuadas para un proyecto es importante aunque independientemente de las herramientas también es importante la metodología, <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Divern Design</a> o DDD propone numerosas pautas para organizar y modelar aplicaciones complejas con reglas de negocio de mofo que las diferentes partes estén desacopladas y el mantenimiento sea más sencillo. Los patrones de diseño aplicados de forma adecuada simplifican enormemente el código.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/generar-en-el-dominio-los-identificativos-de-las-entidades-aplicando-ddd-antes-de-persistirlas-en-la-base-de-datos/">Generar en el dominio los identificativos de las entidades aplicando DDD antes de persistirlas en la base de datos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/el-patron-de-diseno-specification-ejemplo-de-implementacion-y-uso-en-jpa-con-spring-data/">El patrón de diseño Specification, ejemplo de implementación y uso en JPA con Spring Data</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/">Ejemplo del patrón de diseño Builder</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/">Ejemplo del patrón de diseño No Operation</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/03/ejemplo-de-maquina-de-estados-con-spring-statemachine/">Ejemplo de máquina de estados con Spring Statemachine</a></li>
</ul>
<p>Para cada un de estas herramientas en muchos casos tendremos varias alternativas similares para elegir, a veces elegir una u otra es algo subjetivo. Estas herramientas en muchos casos son de lo mejor que hay disponible pero perfectamente se pueden usar alternativas similares.</p>
<p>¿Cuales serán las herramientas que formarán el «estado del arte» dentro de otros cuatro años? ¿Cuales sobrevivirán y cuales perecerán en el camino? ¡Apasionante!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2011/06/elegir-herramientas-para-un-proyecto.html">Elegir herramientas para un proyecto</a></li>
<li><a href="http://nealford.com/memeagora/2013/05/28/build_your_own_technology_radar.html">Build Your Own Technology Radar</a></li>
<li><a href="http://www.thoughtworks.com/radar">Technology Radar</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/</id>
        <title>Patrón múltiples vistas de un mismo dato en Tapestry</title>
        <updated>2015-12-11T23:00:00+01:00</updated>
        <published>2015-06-06T10:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Un proyecto grande contendrá muchos archivos de código fuente, poseer gran cantidad de archivos puede ser una molestia al trabajar con ellos al tener que buscarlos o abrilos. En el caso de las aplicaciones web puede darse el caso de que un mismo dato tenga un archivo diferente por cada forma de visualizarlo, para reducir el número de archivos en estos casos uso el siguiente patrón cuando trabajo con Apache Tapestry con el soporte que ofrece pero que puede ser igualmente aplicado de forma similar a otros <em>frameworks</em>.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Al desarrollar una aplicación web puede que necesitemos mostrar un mismo dato de diferentes formas. Una posibilidad es crear una vista por cada forma diferente que se haya de mostrar el dato. Sin embargo, de esta forma tendremos que crear un archivo diferente por cada forma a visualizar, si esto mismo nos ocurre en múltiples datos nos encontraremos en la situación de que el número de archivos del proyecto crecerá suponiendo una pequeña molestia tener que trabajar con tantos, también y peor aún es que múltiples archivos relacionados no lo estarán salvo que les demos una nomenclatura similar para mantenerlos ordenados por nombre y sean fáciles de encontrar si queremos abrir varios.</p>
<p>Tener tantos archivos puede ser una molestia que denomino de <em>microgestión</em>, esto es, tener muchos archivos pequeñitos. Para evitar <em>microgestionar</em> podemos tener una única vista que con un parámetro determine la forma de representar el dato, mientras que el contenido del archivo tenga alta cohesión me parece adecuado e incluso mejor ya que las diferentes vistas muy posiblemente serán parecidas con lo que quizá dupliquemos algo de código que será mejor tenerlo en un mismo archivo que en varios diferentes.</p>
<p>En este artículo comentaré una forma de como realizar esto usando el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> con las posibilidad que ofrece que a mi me ha resultado muy práctica, algo similar podría usarse en otros <em>frameworks</em>.</p>
<p>En Tapestry en una vista se pueden tener múltiples <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/Block.html">componentes Block</a> cuya misión es agrupar otros componentes que como resultado de procesarse producirán el html. Por otra parte está el <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Delegate.html">componente Delegate</a> que indicándole en el parámetro <em>to</em> un componente <em>Block</em> lo procesa emitiendo el contenido html que generen los componentes que contenga. Teniendo en el código Java asociado al componente que mostrará el dato de diferentes formas un método que con cierta lógica devuelva un componente <em>Block</em> a visualizar podemos conseguir el objetivo.</p>
<p>En la siguiente vista de un artículo usada en el <a href="https://twitter.com/blogstackinfo">agregador de bitácoras Blog Stack</a> se ve que en el archivo <em>tml</em> de la vista hay varios componentes <em>Block</em> y un componente <em>Delegate</em> tal y como he comentado que se puede hacer. El componente bloque <em>excerptBlock</em> es muy similar al componente <em>fullBlock</em> diferenciándose en que el primero emite un extracto del contenido del artículo con <em>${contentExcerpt} [&hellip;]</em> y el segundo el artículo completo con <em>&lt;t:outputraw value=&ldquo;content&rdquo;/&gt;</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">t:container</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&#34;http://www.w3.org/1999/xhtml&#34;</span> <span class="na">xmlns:t</span><span class="o">=</span><span class="s">&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34;</span> <span class="na">xmlns:p</span><span class="o">=</span><span class="s">&#34;tapestry:parameter&#34;</span><span class="p">&gt;</span>&#10;&#10;<span class="p">&lt;</span><span class="nt">t:delegate</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;block&#34;</span><span class="p">/&gt;</span>&#10;&#10;<span class="p">&lt;</span><span class="nt">t:block</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;excerptBlock&#34;</span><span class="p">&gt;</span>&#10;	<span class="p">&lt;</span><span class="nt">article</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">itemscope</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">itemtype</span><span class="o">=</span><span class="s">&#34;http://schema.org/BlogPosting&#34;</span><span class="p">&gt;</span>&#10;		<span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;open&#39;)&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${post.url}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;sameAs&#34;</span><span class="p">&gt;</span>${post.title}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;close&#39;)&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>&#10;&#10;		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;post-info&#34;</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;dateModified&#34;</span> <span class="na">datetime</span><span class="o">=</span><span class="s">&#34;${data.get(&#39;microdataDate&#39;)}&#34;</span><span class="p">&gt;</span>${data.get(&#39;date&#39;)}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>,&#10;			<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>fuente <span class="p">&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${source.pageUrl}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span><span class="p">&gt;</span>${source.name}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>,<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>&#10;				etiquetas&#10;				<span class="p">&lt;</span><span class="nt">t:loop</span> <span class="na">source</span><span class="o">=</span><span class="s">&#34;labels&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;label&#34;</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;pagelink&#34;</span> <span class="na">page</span><span class="o">=</span><span class="s">&#34;label&#34;</span> <span class="na">context</span><span class="o">=</span><span class="s">&#34;labelContext&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;articleSection&#34;</span><span class="p">&gt;</span>${label.name}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span><span class="ni">&amp;nbsp;</span><span class="p">&lt;/</span><span class="nt">t:loop</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;&#10;		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;text-justify&#34;</span><span class="p">&gt;</span>&#10;			${contentExcerpt} [...]&#10;		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;		<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${post.url}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;sameAs&#34;</span><span class="p">&gt;</span>Leer artículo completo<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>&#10;		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;	<span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>&#10;<span class="p">&lt;/</span><span class="nt">t:block</span><span class="p">&gt;</span>&#10;&#10;<span class="p">&lt;</span><span class="nt">t:block</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;fullBlock&#34;</span><span class="p">&gt;</span>&#10;	<span class="p">&lt;</span><span class="nt">article</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">itemscope</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">itemtype</span><span class="o">=</span><span class="s">&#34;http://schema.org/BlogPosting&#34;</span><span class="p">&gt;</span>&#10;		<span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;open&#39;)&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${post.url}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;sameAs&#34;</span><span class="p">&gt;</span>${post.title}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;close&#39;)&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>&#10;&#10;		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;post-info&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;font-weight: bold;&#34;</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;dateModified&#34;</span> <span class="na">datetime</span><span class="o">=</span><span class="s">&#34;${data.get(&#39;microdataDate&#39;)}&#34;</span><span class="p">&gt;</span>${data.get(&#39;date&#39;)}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>,&#10;			<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>fuente <span class="p">&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${source.pageUrl}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span><span class="p">&gt;</span>${source.name}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>,<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>&#10;				etiquetas&#10;				<span class="p">&lt;</span><span class="nt">t:loop</span> <span class="na">source</span><span class="o">=</span><span class="s">&#34;labels&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;label&#34;</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${labelAbsoluteUrl}&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;articleSection&#34;</span><span class="p">&gt;</span>${label.name}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span><span class="ni">&amp;nbsp;</span><span class="p">&lt;/</span><span class="nt">t:loop</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;&#10;		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;text-justify&#34;</span><span class="p">&gt;</span>&#10;			<span class="p">&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="p">/&gt;</span>&#10;		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;	<span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>&#10;<span class="p">&lt;/</span><span class="nt">t:block</span><span class="p">&gt;</span>&#10;&#10;<span class="p">&lt;/</span><span class="nt">t:container</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PostComponent.tml</span>
    </div>
</div>
<p>En la clase Java asociada al componente está el método <em>getBlock</em> que determina el bloque a mostrar. En este caso la lógica es muy sencilla, en base a un parámetro que recibe el componente (<em>mode</em>) indicando la vista del dato que se quiere se devuelve el componente <em>Block</em> adecuado. Las referencias a los componentes <em>Block</em> presentes en la vista se puede inyectar usando la anotación <em>@Inject</em> junto con <em>@Component</em> usando el mismo identificativo en la vista y en el nombre de la propiedad para la referencia del componente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">info.blogstack.components</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">info.blogstack.misc.Globals</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.misc.Utils</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.Keys</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.LabelRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.PostRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.SourceRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.records.AppPostRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.services.MainService</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.BindingConstants</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.Block</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Cached</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Property</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.internal.services.LinkSource</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.joda.time.format.DateTimeFormat</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.joda.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostComponent</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="n">DateTimeFormatter</span> <span class="n">DATETIME_FORMATTER</span> <span class="o">=</span> <span class="n">DateTimeFormat</span><span class="o">.</span><span class="na">forPattern</span><span class="o">(</span><span class="s">&#34;EEEE, dd &#39;de&#39; MMMM &#39;de&#39; yyyy&#34;</span><span class="o">).</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">LOCALE</span><span class="o">);</span>&#10;	<span class="kd">private</span> <span class="n">DateTimeFormatter</span> <span class="n">MICRODATA_DATETIME_FORMATTER</span> <span class="o">=</span> <span class="n">DateTimeFormat</span><span class="o">.</span><span class="na">forPattern</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd&#39;T&#39;HH:mm&#34;</span><span class="o">);</span>&#10;	&#10;	<span class="kd">enum</span> <span class="n">Mode</span> <span class="o">{</span>&#10;		<span class="n">HOME</span><span class="o">,</span> <span class="n">POST</span><span class="o">,</span> <span class="n">ARCHIVE</span><span class="o">,</span> <span class="n">NEWSLETTER</span><span class="o">,</span> <span class="n">DEFAULT</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">NUMBER_LABELS</span> <span class="o">=</span> <span class="n">4</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">PostRecord</span> <span class="n">post</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;default&#34;</span><span class="o">,</span> <span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">Mode</span> <span class="n">mode</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">LabelRecord</span> <span class="n">label</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Inject</span>&#10;	<span class="kd">private</span> <span class="n">MainService</span> <span class="n">service</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Inject</span>&#10;	<span class="kd">private</span> <span class="n">LinkSource</span> <span class="n">linkSource</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Inject</span>&#10;	<span class="kd">private</span> <span class="n">Block</span> <span class="n">excerptBlock</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Inject</span>&#10;	<span class="kd">private</span> <span class="n">Block</span> <span class="n">fullBlock</span><span class="o">;</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getContext</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getContext</span><span class="o">(</span><span class="n">post</span><span class="o">,</span> <span class="n">post</span><span class="o">.</span><span class="na">fetchParent</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">POST_SOURCE_ID</span><span class="o">));</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">Block</span> <span class="nf">getBlock</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">switch</span> <span class="o">(</span><span class="n">mode</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">case</span> <span class="n">HOME</span><span class="o">:</span>			&#10;			<span class="k">case</span> <span class="n">ARCHIVE</span><span class="o">:</span>&#10;			<span class="k">case</span> <span class="n">POST</span><span class="o">:</span>&#10;			<span class="k">case</span> <span class="n">DEFAULT</span><span class="o">:</span>&#10;				<span class="k">return</span> <span class="n">excerptBlock</span><span class="o">;</span>&#10;			<span class="k">case</span> <span class="n">NEWSLETTER</span><span class="o">:</span>&#10;				<span class="k">return</span> <span class="n">fullBlock</span><span class="o">;</span>&#10;			<span class="k">default</span><span class="o">:</span>&#10;				<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>&#10;			&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTag</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>&#10;		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h1:open&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;h1&gt;&#34;</span><span class="o">);</span>&#10;		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h1:close&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;/h1&gt;&#34;</span><span class="o">);</span>&#10;		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h2:open&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;h2&gt;&#34;</span><span class="o">);</span>&#10;		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h2:close&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;/h2&gt;&#34;</span><span class="o">);</span>&#10;&#10;		<span class="n">String</span> <span class="n">tag</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;		<span class="k">switch</span> <span class="o">(</span><span class="n">mode</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">case</span> <span class="n">HOME</span><span class="o">:</span>			&#10;			<span class="k">case</span> <span class="n">ARCHIVE</span><span class="o">:</span>&#10;			<span class="k">case</span> <span class="n">NEWSLETTER</span><span class="o">:</span>&#10;			<span class="k">case</span> <span class="n">DEFAULT</span><span class="o">:</span>&#10;				<span class="n">tag</span> <span class="o">=</span> <span class="s">&#34;h2&#34;</span><span class="o">;</span>&#10;				<span class="k">break</span><span class="o">;</span>&#10;			<span class="k">case</span> <span class="n">POST</span><span class="o">:</span>&#10;				<span class="n">tag</span> <span class="o">=</span> <span class="s">&#34;h1&#34;</span><span class="o">;</span>&#10;				<span class="k">break</span><span class="o">;</span>&#10;			<span class="k">default</span><span class="o">:</span>&#10;				<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>&#10;			&#10;		<span class="o">}</span>&#10;		&#10;		<span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s:%s&#34;</span><span class="o">,</span> <span class="n">tag</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">LabelRecord</span><span class="o">&gt;</span> <span class="nf">getLabels</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getLabelDAO</span><span class="o">().</span><span class="na">findByPost</span><span class="o">(</span><span class="n">post</span><span class="o">,</span> <span class="n">NUMBER_LABELS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentExcerpt</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">AppPostRecord</span> <span class="n">apost</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">into</span><span class="o">(</span><span class="n">AppPostRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">apost</span><span class="o">.</span><span class="na">getContentExcerpt</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">AppPostRecord</span> <span class="n">apost</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">into</span><span class="o">(</span><span class="n">AppPostRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">apost</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">AppPostRecord</span> <span class="n">apost</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">into</span><span class="o">(</span><span class="n">AppPostRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">datos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getPublishdate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="n">DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getPublishdate</span><span class="o">()));</span>&#10;			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;microdataDate&#34;</span><span class="o">,</span> <span class="n">MICRODATA_DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getPublishdate</span><span class="o">()));</span>&#10;		<span class="o">}</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getUpdatedate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="n">DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getUpdatedate</span><span class="o">()));</span>&#10;			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;microdataDate&#34;</span><span class="o">,</span> <span class="n">MICRODATA_DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getUpdatedate</span><span class="o">()));</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">datos</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTarget</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="o">(</span><span class="n">mode</span> <span class="o">==</span> <span class="n">Mode</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">&#34;_blank&#34;</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">SourceRecord</span> <span class="nf">getSource</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">post</span><span class="o">.</span><span class="na">fetchParent</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">POST_SOURCE_ID</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getLabelContext</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getContext</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getLabelAbsoluteUrl</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">linkSource</span><span class="o">.</span><span class="na">createPageRenderLink</span><span class="o">(</span><span class="s">&#34;label&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">getLabelContext</span><span class="o">()).</span><span class="na">toAbsoluteURI</span><span class="o">();</span>		&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PostComponent.java</span>
    </div>
</div>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/tapestry/">Artículos sobre Tapestry en Blog Bitix</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/search/label/tapestry">Artículos sobre Tapestry en El blog de pico.dev</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/</id>
        <title>Alternativa a Hibernate u ORM y ejemplo de jOOQ</title>
        <updated>2017-06-18T12:00:00+02:00</updated>
        <published>2015-05-29T20:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los ORMs nos han facilitado el acceso a los datos de una base de datos relacional. Han solucionado algunos problemas pero traído consigo otros nuevos como el problema N+1 o la pérdida de control del modelo relacional. jOOQ forma parte de una nueva generación de herramientas que puede sustituir o complementar a otras como Hibernate. Y después de haberlo usado considero que puede ser factible.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/jooq.png" width="200" height="200" alt="jOOQ" title="jOOQ"  class=""></p>
</div>
<p>Con el auge de los lenguajes de programación orientados a objetos han surgido varias herramientas que intentan hacer que el trabajo de unir el mundo orientado a objetos del lenguaje que empleemos y el modelo relacional de las bases de datos sea más transparente, estas herramientas son conocidas como <a href="https://es.wikipedia.org/wiki/Mapeo_objeto-relacional">Object Realtional Mapping</a> (ORM). Una de las más conocidas y usada en la plataforma Java es <a href="https://hibernate.org/">Hibernate</a>. Sin embargo, aunque facilitan el acceso a los datos no están exentas de problemas y están surgiendo nuevas alternativas para tratar de solventar algunos de ellos, una de ellas es <a href="https://www.jooq.org/">jOOQ</a>.</p>
<p>Si hemos usado Hibernate sabremos que aunque este ampliamente usado facilitando la conversión entre el modelo relacional en base de datos y el modelo orientado a objetos del lenguaje Java también presenta problemas. Uno de los problemas es que al abstraer el acceso a base de datos no somos tan conscientes de las sentencias SQL que se envían a la base de datos provocando los problemas <a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">N+1</a> y que la aplicación sea lenta, poco eficiente y sobrecargar la base de datos en el caso de realizar demasiadas consultas SQL. Otro problema es que cuando necesitamos realizar una consulta compleja o avanzada el <a href="https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql">lenguaje HQL</a> no nos ofrezca todo lo que necesitamos haciendo que tengamos que escribir directamente la consulta en lenguaje SQL con lo que perdemos la validación del compilador y si usamos una funcionalidad específica de un motor de base de datos la independencia del mismo. También puede ocurrirnos que diseñamos los modelos para complacer al <em>framework</em> de persistencia ORM.</p>
<p>jOOQ es una herramienta que facilita el acceso a la base de datos usando un enfoque diferente de los ORM, no trata de crear una abstracción sobre la base de datos relacional sino que pone el modelo relacional como elemento central de la aplicación en cuanto a la persistencia. Algunas de las características destacables de jOOQ son:</p>
<ul>
<li>La base de datos primero: los datos son probablemente lo más importante de una aplicación. En los ORM los modelos de objetos dirigen el modelo de base de datos, no siempre es sencillo (más) en bases de datos heredadas que no tienen la estructura necesaria usable por los ORMs. En jOOQ el modelo relacional dirige el modelo de objetos, para jOOQ el modelo relacional es más importante que el modelo de objetos.</li>
<li>jOOQ usa SQL como elemento central: en jOOQ se pueden construir las SQLs usando una API fluida con la que el compilador puede validar la sintaxis, metadatos y tipos de datos. Se evitan y se detectan rápidamente los errores de sintaxis con la ayuda del compilador y con la ayuda de un IDE se ofrece asistencia de código que facilita el uso de la API. Está a un nivel bastante cercano al lenguaje SQL.</li>
<li>SQL con tipado seguro: las sentencias se pueden construir usando código Java con la que el compilador validará el código y que los tipos de los datos usados sean los correctos, los errores los encontraremos en tiempo de compilación en vez de en tiempo de ejecución. jOOQ proporciona un DSL y una API fluida de fácil uso y lectura.</li>
<li>Generación de código: jOOQ genera clases a partir de los metadatos (el modelo relacional) de la base de datos. Cuando se renombre una tabla o campo en base de datos generados los modelos el compilador indicará los errores de compilación. Si en algún momento hay que renombrar una columna de la base de datos deberemos modificar los modelos, jOOQ permite regenerar las clases Java de acceso a la base de datos y el compilador nos avisará de aquello que no esté sincronizado entre la base de datos y el código Java.</li>
<li><em>Multi-Tenancy</em>: permite configurar la base de datos a la que se accederá en desarrollo, pruebas y producción.</li>
<li><em>Active Records</em>: jOOQ puede generar el código de acceso a la base de datos a partir del esquema, estas clases emplean el <a href="https://en.wikipedia.org/wiki/Active_record_pattern">patrón Active Record</a>. La implementación de este patrón ya proporciona las operaciones CRUD (uno de los avances de Hibernate) con lo que no tendremos que escribirlas para cada uno de los modelos de la aplicación, nos ahorraremos mucho código. Este código que se genera es opcional, jOOQ puede usarse simplemente para generar las sentencias SQL y usar JDBC sin la abstracción de los <em>Active Records</em>.</li>
<li>Estandarización: las bases de datos tienen diferencias en los dialectos SQL. jOOQ realiza transformaciones de expresiones SQL comunes a la correspondencia de la base de datos de forma que las SQLs escritas funcionen en todas las bases de datos de forma transparente, esto permite migrar de un sistema de datos sin cambiar el código de la aplicación. Este también era un avance proporcionado por los ORM, incluido Hibernate.</li>
<li>Ciclo de vida de las consultas: proporciona llamadas o <em>hooks</em> de forma que se puedan añadir comportamientos, por ejemplo para <em>logging</em>, manejo de transacciones, generación de identificadores, transformación de SQLs y más cosas.</li>
<li>Procedimientos almacenados: los procedimientos almacenados son ciudadanos de primera clase y pueden usarse de forma simple al contrario de lo que sucede en los ORM. Para algunas tareas los procedimientos almacenados son muy útiles y más eficientes.</li>
</ul>
<p>Los ORMs ofrecen como ventajas sobre el uso directo de JDBC la implementación de las operaciones CRUD, construir las SQLs con una API en vez de concatenando <em>Strings</em> propensos a errores al modificarlos y la independencia del motor de base de datos usado pudiendo cambiar a otro sin afectar al código de la aplicación. La navegación de las relaciones es más explícita que en Hibernate y <a href="https://picodotdev.github.io/blog-bitix/2015/11/obtener-datos-de-multiples-tablas-con-jooq/">obtener datos de múltiples tablas con jOOQ</a> diferente.</p>
<p>Si nos convencen estas características y propiedades de jOOQ podemos empezar leyendo la <a href="http://www.jooq.org/doc/3.6/manual/getting-started/tutorials/jooq-in-7-steps/">guía de inicio</a> donde se comenta los primeros pasos para usarlo. La <a href="http://www.jooq.org/doc/3.6/manual-single-page/">documentación de jOOQ</a> está bastante bien explicada pero no se comentan algunas cosas que al usarlo en un proyecto tendremos que buscar.</p>
<p>En el siguiente ejemplo mostraré como usar jOOQ y la configuración necesaria para emplearlo junto con <a href="https://spring.io/">Spring</a>. En la siguiente configuración de Spring usando únicamente código Java se construye un <em>DataSource</em>, un <em>Datasource</em> con soporte de transacciones para el acceso a la base de datos, un <a href="http://www.jooq.org/javadoc/latest/org/jooq/ConnectionProvider.html"><em>ConnectionProvider</em></a> de jOOQ que usará el <em>DataSource</em> para obtener las conexiones a la base de datos, con la clase <a href="http://www.jooq.org/javadoc/latest/org/jooq/Configuration.html"><em>Configuration</em></a> realizamos la configuración de jOOQ y finalmente <a href="http://www.jooq.org/javadoc/latest/org/jooq/DSLContext.html"><em>DSLContext</em></a> es el objeto que usaremos para construir las sentencias SQL.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">info.blogstack.services.spring</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.AdsenseDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.AdsenseDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.ImportSourceDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.ImportSourceDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.IndexationDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.IndexationDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.LabelDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.LabelDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.NewsletterDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.NewsletterDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.PostDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.PostDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.PostsIndexationsDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.PostsIndexationsDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.PostsLabelsDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.PostsLabelsDAOImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.SourceDAO</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.daos.SourceDAOImpl</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.commons.dbcp.BasicDataSource</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.ConnectionProvider</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.DSLContext</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.SQLDialect</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.impl.DSL</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.impl.DataSourceConnectionProvider</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.impl.DefaultConfiguration</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.transaction.support.ResourceTransactionManager</span><span class="o">;</span>&#10;&#10;<span class="nd">@Configuration</span>&#10;<span class="nd">@ComponentScan</span><span class="o">({</span> <span class="s">&#34;info.blogstack&#34;</span> <span class="o">})</span>&#10;<span class="nd">@EnableTransactionManagement</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfiguration</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Bean</span><span class="o">(</span><span class="n">destroyMethod</span> <span class="o">=</span> <span class="s">&#34;close&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">BasicDataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDataSource</span><span class="o">();</span>&#10;		<span class="n">ds</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">&#34;org.h2.Driver&#34;</span><span class="o">);</span>&#10;		<span class="n">ds</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&#34;jdbc:h2:./misc/database/app&#34;</span><span class="o">);</span>&#10;		<span class="n">ds</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;sa&#34;</span><span class="o">);</span>&#10;		<span class="n">ds</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;sa&#34;</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">ds</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">transactionAwareDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">TransactionAwareDataSourceProxy</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">ResourceTransactionManager</span> <span class="nf">transactionManager</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">ConnectionProvider</span> <span class="nf">connectionProvider</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceConnectionProvider</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">org</span><span class="o">.</span><span class="na">jooq</span><span class="o">.</span><span class="na">Configuration</span> <span class="nf">config</span><span class="o">(</span><span class="n">ConnectionProvider</span> <span class="n">connectionProvider</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">DefaultConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultConfiguration</span><span class="o">();</span>&#10;		<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">connectionProvider</span><span class="o">);</span>&#10;		<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">SQLDialect</span><span class="o">.</span><span class="na">H2</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">config</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">DSLContext</span> <span class="nf">dsl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">jooq</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">DSL</span><span class="o">.</span><span class="na">using</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">AdsenseDAO</span> <span class="nf">adsenseDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">AdsenseDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">ImportSourceDAO</span> <span class="nf">importSourceDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">ImportSourceDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">IndexationDAO</span> <span class="nf">indexationDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">IndexationDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">LabelDAO</span> <span class="nf">labelDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">LabelDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">PostDAO</span> <span class="nf">postDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">PostDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">PostsIndexationsDAO</span> <span class="nf">postsIndexationsDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">PostsIndexationsDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">PostsLabelsDAO</span> <span class="nf">postsLabelsDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">PostsLabelsDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">SourceDAO</span> <span class="nf">sourceDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">SourceDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Bean</span>&#10;	<span class="kd">public</span> <span class="n">NewsletterDAO</span> <span class="nf">newsletterDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">NewsletterDAOImpl</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppConfiguration.java</span>
    </div>
</div>
<p>Una de las cosas que tendremos que resolver es que al generar código y usar el patrón <em>Active Record</em>, si lo usamos ya que podemos usar jOOQ para generar únicamente las sentencias SQL o en los casos que lo hagamos pudiendo combiar <em>Active Records</em> para unos casos y sentencias SQL con JDBC para otros, puede que necesitemos incluir campos adicionales a los presentes en la base de datos que manejen cierta lógica en la aplicación, también puede que necesitemos incluir métodos de lógica de negocio adicionales. Para incluir estos datos y métodos tendremos que extender la clase <em>Active Record</em> que genera jOOQ. En aquellos sitios de la aplicación que necesitemos usar esas propiedades y métodos adicionales deberemos transformar la instancia de la clase que usa jOOQ (<em>PostRecord</em>) por la clase que tenga esos datos adicionales (<em>AppPostRecord</em>). Para ello la API de la clase <a href="http://www.jooq.org/javadoc/3.6.x/org/jooq/Record.html">Record</a> ofrece el método <a href="http://www.jooq.org/javadoc/3.6.x/org/jooq/Record.html#into-java.lang.Class-"><em>into</em></a> o <a href="http://www.jooq.org/javadoc/3.6.x/org/jooq/Record.html#from-java.lang.Object-"><em>from</em></a> como muestro en el código de <em>AppPostRecord</em> a continuación. Esta es la solución que he usado en <a href="https://twitter.com/blogstackinfo">Blog Stack</a>.</p>
<p>jOOQ genera automáticamente las clases que implementa el patrón <em>Active Record</em> y dispondremos de los métodos CRUD heredados de la clase <a href="http://www.jooq.org/javadoc/3.6.x/org/jooq/Record.html">Record</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">info.blogstack.persistence.records</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">info.blogstack.misc.Globals</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.misc.Utils</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.Keys</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.interfaces.IPost</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.PostRecord</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.ByteArrayInputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.StringReader</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.StringWriter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.zip.GZIPInputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.zip.GZIPOutputStream</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.commons.io.IOUtils</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.joda.time.DateTime</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jsoup.Jsoup</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jsoup.nodes.Document</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppPostRecord</span> <span class="kd">extends</span> <span class="n">PostRecord</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">2075090879800194733L</span><span class="o">;</span>&#10;&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Boolean</span> <span class="n">fresh</span><span class="o">;</span>&#10;&#10;	<span class="kd">public</span> <span class="nf">AppPostRecord</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">fresh</span> <span class="o">=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">content</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">getContentcompressed</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">try</span> <span class="o">{</span>&#10;				<span class="n">GZIPInputStream</span> <span class="n">zis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GZIPInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">getContentcompressed</span><span class="o">()));</span>&#10;				<span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>&#10;				<span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">zis</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>&#10;				<span class="n">zis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;				<span class="n">sw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&#10;				<span class="n">content</span> <span class="o">=</span> <span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;				<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>&#10;			<span class="o">}</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">content</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setContent</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>&#10;		<span class="k">try</span> <span class="o">{</span>&#10;			<span class="n">String</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">content</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="n">content</span><span class="o">;</span>&#10;			<span class="n">ByteArrayOutputStream</span> <span class="n">baos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>&#10;			<span class="n">GZIPOutputStream</span> <span class="n">zos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GZIPOutputStream</span><span class="o">(</span><span class="n">baos</span><span class="o">);</span>&#10;			<span class="n">StringReader</span> <span class="n">sr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>&#10;			<span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">sr</span><span class="o">,</span> <span class="n">zos</span><span class="o">);</span>&#10;			<span class="n">sr</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;			<span class="n">zos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&#10;			<span class="n">setContentcompressed</span><span class="o">(</span><span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>&#10;		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentExcerpt</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">getContent</span><span class="o">());</span>&#10;		<span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="na">text</span><span class="o">();</span>&#10;		&#10;		<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Globals</span><span class="o">.</span><span class="na">POST_EXCERPT_LENGHT</span><span class="o">);</span>&#10;		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">&#39; &#39;</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">n</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>&#10;		<span class="o">}</span>&#10;		&#10;		<span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">isFresh</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">fresh</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFresh</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">fresh</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">fresh</span> <span class="o">=</span> <span class="n">fresh</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateHash</span><span class="o">()</span> <span class="o">{</span>		&#10;		<span class="n">setHash</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">getHash</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">fetchParent</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">POST_SOURCE_ID</span><span class="o">)));</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">DateTime</span> <span class="nf">getConsolidatedUpdateDate</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">getUpdatedate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">getUpdatedate</span><span class="o">();</span>&#10;		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">getPublishdate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">getPublishdate</span><span class="o">();</span>&#10;		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">getCreationdate</span><span class="o">();</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="n">DateTime</span> <span class="nf">getConsolidatedPublishDate</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">getPublishdate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">getPublishdate</span><span class="o">();</span>&#10;		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">getCreationdate</span><span class="o">();</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreationdate</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">creationDate</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">.</span><span class="na">setCreationdate</span><span class="o">(</span><span class="n">creationDate</span><span class="o">);</span>&#10;		<span class="n">setDate</span><span class="o">(</span><span class="n">getConsolidatedUpdateDate</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUpdatedate</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">updateDate</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">.</span><span class="na">setUpdatedate</span><span class="o">(</span><span class="n">updateDate</span><span class="o">);</span>&#10;		<span class="n">setDate</span><span class="o">(</span><span class="n">getConsolidatedUpdateDate</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPublishdate</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">publishDate</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">.</span><span class="na">setPublishdate</span><span class="o">(</span><span class="n">publishDate</span><span class="o">);</span>&#10;		<span class="n">setDate</span><span class="o">(</span><span class="n">getConsolidatedUpdateDate</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">from</span><span class="o">(</span><span class="n">IPost</span> <span class="n">from</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">from</span> <span class="k">instanceof</span> <span class="n">AppPostRecord</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">AppPostRecord</span> <span class="n">afrom</span> <span class="o">=</span> <span class="o">(</span><span class="n">AppPostRecord</span><span class="o">)</span> <span class="n">from</span><span class="o">;</span>&#10;			<span class="k">this</span><span class="o">.</span><span class="na">setFresh</span><span class="o">(</span><span class="n">afrom</span><span class="o">.</span><span class="na">isFresh</span><span class="o">());</span>&#10;			<span class="k">this</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">afrom</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppPostRecord.java</span>
    </div>
</div>
<p><a href="https://blog.jooq.org/2014/09/12/why-you-should-not-implement-layered-architecture/">Los desarrolladores de jOOQ abogan por la eliminación de capas</a> en la arquitectura de la aplicación pero puede que aún preferimos desarrollar una capa que contenga las consultas a la base de datos que sea usada y compartida por el resto la aplicación para el acceso los datos, quizá más que una capa en este caso es una forma de organizar el código. Los <em>Active Records</em> proporcionan algunos métodos de consulta pero probablemente necesitaremos más. En el siguiente ejemplo podemos ver como son las consultas con jOOQ. Si necesitamos métodos de búsqueda adicionales a los que por defecto jOOQ proporciona en Blog Stack he creado una clase <a href="https://es.wikipedia.org/wiki/Data_Access_Object">DAO</a> por cada entidad de la base de datos. En el siguiente ejemplo se puede ver como se construyen las sentencias SQL con jOOQ usando su API fluida.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">info.blogstack.persistence.daos</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.LabelRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.NewsletterRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.PostRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.SourceRecord</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PostDAO</span> <span class="o">{</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="n">Pagination</span> <span class="n">pagination</span><span class="o">);</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllBySource</span><span class="o">(</span><span class="n">SourceRecord</span> <span class="n">source</span><span class="o">,</span> <span class="n">Pagination</span> <span class="n">pagination</span><span class="o">);</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllByYearMonth</span><span class="o">(</span><span class="n">Integer</span> <span class="n">year</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">month</span><span class="o">);</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllByLabel</span><span class="o">(</span><span class="n">LabelRecord</span> <span class="n">label</span><span class="o">,</span> <span class="n">Pagination</span> <span class="n">pagination</span><span class="o">);</span>&#10;	&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllByShared</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">shared</span><span class="o">);</span>&#10;	&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findNewsletter</span><span class="o">();</span>&#10;&#10;	<span class="n">PostRecord</span> <span class="nf">findByURL</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">);</span>&#10;&#10;	<span class="n">PostRecord</span> <span class="nf">findByHash</span><span class="o">(</span><span class="n">String</span> <span class="n">hash</span><span class="o">);</span>&#10;&#10;	<span class="n">Long</span> <span class="nf">countAll</span><span class="o">();</span>&#10;&#10;	<span class="n">Long</span> <span class="nf">countBy</span><span class="o">(</span><span class="n">SourceRecord</span> <span class="n">source</span><span class="o">);</span>&#10;&#10;	<span class="n">Long</span> <span class="nf">countBy</span><span class="o">(</span><span class="n">LabelRecord</span> <span class="n">label</span><span class="o">);</span>&#10;	&#10;	<span class="n">Long</span> <span class="nf">countBy</span><span class="o">(</span><span class="n">NewsletterRecord</span> <span class="n">newsletter</span><span class="o">);</span>&#10;&#10;	<span class="n">Long</span> <span class="nf">countAuthors</span><span class="o">();</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveByDates</span><span class="o">();</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveByLabels</span><span class="o">();</span>&#10;&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveBySources</span><span class="o">();</span>&#10;	&#10;	<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveByNewsletter</span><span class="o">(</span><span class="n">NewsletterRecord</span> <span class="n">newsletter</span><span class="o">);</span>&#10;	&#10;	<span class="kt">int</span> <span class="nf">updateNewsletter</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="n">posts</span><span class="o">,</span> <span class="n">NewsletterRecord</span> <span class="n">newslettter</span><span class="o">);</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PostDAO.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">info.blogstack.persistence.daos</span><span class="o">;</span>&#10;&#10;<span class="kn">import static</span> <span class="nn">info.blogstack.persistence.jooq.Tables.LABEL</span><span class="o">;</span>&#10;<span class="kn">import static</span> <span class="nn">info.blogstack.persistence.jooq.Tables.POST</span><span class="o">;</span>&#10;<span class="kn">import static</span> <span class="nn">info.blogstack.persistence.jooq.Tables.POSTS_LABELS</span><span class="o">;</span>&#10;<span class="kn">import static</span> <span class="nn">info.blogstack.persistence.jooq.Tables.SOURCE</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.Post</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.LabelRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.NewsletterRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.PostRecord</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.SourceRecord</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.joda.time.DateTime</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.DSLContext</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jooq.impl.DSL</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostDAOImpl</span> <span class="kd">implements</span> <span class="n">PostDAO</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="n">DSLContext</span> <span class="n">context</span><span class="o">;</span>&#10;&#10;	<span class="kd">public</span> <span class="nf">PostDAOImpl</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">()).</span><span class="na">fetch</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="n">Pagination</span> <span class="n">pagination</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">()).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">pagination</span><span class="o">.</span><span class="na">getFields</span><span class="o">()).</span><span class="na">limit</span><span class="o">(</span><span class="n">pagination</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(),</span> <span class="n">pagination</span><span class="o">.</span><span class="na">getNumberOfRows</span><span class="o">()).</span><span class="na">fetch</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllBySource</span><span class="o">(</span><span class="n">SourceRecord</span> <span class="n">source</span><span class="o">,</span> <span class="n">Pagination</span> <span class="n">pagination</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">SOURCE_ID</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">getId</span><span class="o">()))).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">pagination</span><span class="o">.</span><span class="na">getFields</span><span class="o">())</span>&#10;				<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="n">pagination</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(),</span> <span class="n">pagination</span><span class="o">.</span><span class="na">getNumberOfRows</span><span class="o">()).</span><span class="na">fetch</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllByYearMonth</span><span class="o">(</span><span class="n">Integer</span> <span class="n">year</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">month</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Post</span> <span class="n">p</span> <span class="o">=</span> <span class="n">POST</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="s">&#34;p&#34;</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">p</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="s">&#34;year(\&#34;p\&#34;.publishDate) = ?&#34;</span><span class="o">,</span> <span class="n">year</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="s">&#34;month(\&#34;p\&#34;.publishDate) = ?&#34;</span><span class="o">,</span> <span class="n">month</span><span class="o">)).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">DATE</span><span class="o">.</span><span class="na">desc</span><span class="o">())</span>&#10;				<span class="o">.</span><span class="na">fetch</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllByLabel</span><span class="o">(</span><span class="n">LabelRecord</span> <span class="n">label</span><span class="o">,</span> <span class="n">Pagination</span> <span class="n">pagination</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">select</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">join</span><span class="o">(</span><span class="n">POSTS_LABELS</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">ID</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">POSTS_LABELS</span><span class="o">.</span><span class="na">POST_ID</span><span class="o">)).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="n">POSTS_LABELS</span><span class="o">.</span><span class="na">LABEL_ID</span><span class="o">.</span><span class="na">in</span><span class="o">(</span><span class="n">label</span><span class="o">.</span><span class="na">getId</span><span class="o">())))</span>&#10;				<span class="o">.</span><span class="na">orderBy</span><span class="o">(</span><span class="n">pagination</span><span class="o">.</span><span class="na">getFields</span><span class="o">()).</span><span class="na">limit</span><span class="o">(</span><span class="n">pagination</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(),</span> <span class="n">pagination</span><span class="o">.</span><span class="na">getNumberOfRows</span><span class="o">()).</span><span class="na">fetchInto</span><span class="o">(</span><span class="n">POST</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findAllByShared</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">shared</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">select</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">SHARED</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">shared</span><span class="o">)).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">CREATIONDATE</span><span class="o">.</span><span class="na">asc</span><span class="o">()).</span><span class="na">fetchInto</span><span class="o">(</span><span class="n">POST</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="nf">findNewsletter</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">DateTime</span> <span class="n">friday</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">().</span><span class="na">withDayOfWeek</span><span class="o">(</span><span class="n">5</span><span class="o">).</span><span class="na">withHourOfDay</span><span class="o">(</span><span class="n">7</span><span class="o">);</span>&#10;		<span class="n">DateTime</span> <span class="n">tuesday</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">().</span><span class="na">withDayOfWeek</span><span class="o">(</span><span class="n">2</span><span class="o">).</span><span class="na">withHourOfDay</span><span class="o">(</span><span class="n">7</span><span class="o">);</span>&#10;		<span class="n">DateTime</span> <span class="n">date</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">friday</span><span class="o">.</span><span class="na">isBeforeNow</span><span class="o">())</span> <span class="o">{</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">date</span> <span class="o">=</span> <span class="n">friday</span><span class="o">;</span>&#10;		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tuesday</span><span class="o">.</span><span class="na">isBeforeNow</span><span class="o">())</span> <span class="o">{</span>&#10;			<span class="n">date</span> <span class="o">=</span> <span class="n">tuesday</span><span class="o">;</span>&#10;		<span class="o">}</span>&#10;&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">date</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_LIST</span><span class="o">;</span>&#10;		<span class="o">}</span>&#10;		&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">select</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">NEWSLETTER_ID</span><span class="o">.</span><span class="na">isNull</span><span class="o">()).</span><span class="na">and</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">CREATIONDATE</span><span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="n">date</span><span class="o">)).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">CREATIONDATE</span><span class="o">.</span><span class="na">asc</span><span class="o">()).</span><span class="na">fetchInto</span><span class="o">(</span><span class="n">POST</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">PostRecord</span> <span class="nf">findByURL</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">URL</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">url</span><span class="o">)).</span><span class="na">fetchOne</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">PostRecord</span> <span class="nf">findByHash</span><span class="o">(</span><span class="n">String</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">HASH</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">hash</span><span class="o">)).</span><span class="na">fetchOne</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">Long</span> <span class="nf">countAll</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectCount</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">()).</span><span class="na">fetchOne</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">Long</span> <span class="nf">countBy</span><span class="o">(</span><span class="n">SourceRecord</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectCount</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">SOURCE_ID</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">getId</span><span class="o">()))).</span><span class="na">fetchOne</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">Long</span> <span class="nf">countBy</span><span class="o">(</span><span class="n">LabelRecord</span> <span class="n">label</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectCount</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">join</span><span class="o">(</span><span class="n">POSTS_LABELS</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">ID</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">POSTS_LABELS</span><span class="o">.</span><span class="na">POST_ID</span><span class="o">))</span>&#10;				<span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">.</span><span class="na">isTrue</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="n">POSTS_LABELS</span><span class="o">.</span><span class="na">LABEL_ID</span><span class="o">.</span><span class="na">in</span><span class="o">(</span><span class="n">label</span><span class="o">.</span><span class="na">getId</span><span class="o">()))).</span><span class="na">fetchOne</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">Long</span> <span class="nf">countBy</span><span class="o">(</span><span class="n">NewsletterRecord</span> <span class="n">newsletter</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">selectCount</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">NEWSLETTER_ID</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">newsletter</span><span class="o">.</span><span class="na">getId</span><span class="o">())).</span><span class="na">fetchOne</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">Long</span> <span class="nf">countAuthors</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">DSL</span><span class="o">.</span><span class="na">countDistinct</span><span class="o">(</span><span class="n">DSL</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">SOURCE_ID</span><span class="o">,</span> <span class="n">POST</span><span class="o">.</span><span class="na">AUTHOR</span><span class="o">))).</span><span class="na">from</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">fetchOne</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveByDates</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">context</span>&#10;				<span class="o">.</span><span class="na">fetch</span><span class="o">(</span><span class="s">&#34;select year(p.publishDate) as year, month(p.publishDate) as month, count(*) as posts from BLOGSTACK.POST as p where p.visible = true group by year(p.publishDate), month(p.publishDate) order by year(p.publishDate) desc, month(p.publishDate) desc&#34;</span><span class="o">)</span>&#10;				<span class="o">.</span><span class="na">intoMaps</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveByLabels</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">context</span>&#10;				<span class="o">.</span><span class="na">fetch</span><span class="o">(</span><span class="s">&#34;select l.id as id, count(*) as posts from BLOGSTACK.LABEL as l inner join BLOGSTACK.POSTS_LABELS as pl on l.id = pl.label_id inner join BLOGSTACK.POST as p on pl.post_id = p.id where l.enabled = true and p.visible = true group by l.id order by l.name&#34;</span><span class="o">)</span>&#10;				<span class="o">.</span><span class="na">intoMaps</span><span class="o">();</span>&#10;		<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">:</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">LabelRecord</span> <span class="n">label</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">LABEL</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">LABEL</span><span class="o">.</span><span class="na">ID</span><span class="o">.</span><span class="na">eq</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;ID&#34;</span><span class="o">))).</span><span class="na">fetchOne</span><span class="o">();</span>&#10;			<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;LABEL&#34;</span><span class="o">,</span> <span class="n">label</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">d</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveBySources</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">context</span>&#10;				<span class="o">.</span><span class="na">fetch</span><span class="o">(</span><span class="s">&#34;select s.id as id, count(*) as posts from BLOGSTACK.SOURCE as s inner join BLOGSTACK.POST as p on s.id = p.source_id where p.visible = true group by s.id order by s.name&#34;</span><span class="o">)</span>&#10;				<span class="o">.</span><span class="na">intoMaps</span><span class="o">();</span>&#10;		<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">:</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">SourceRecord</span> <span class="n">source</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">SOURCE</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">SOURCE</span><span class="o">.</span><span class="na">ID</span><span class="o">.</span><span class="na">eq</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;ID&#34;</span><span class="o">))).</span><span class="na">fetchOne</span><span class="o">();</span>&#10;			<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;SOURCE&#34;</span><span class="o">,</span> <span class="n">source</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">d</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getArchiveByNewsletter</span><span class="o">(</span><span class="n">NewsletterRecord</span> <span class="n">newsletter</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">context</span>&#10;				<span class="o">.</span><span class="na">fetch</span><span class="o">(</span><span class="s">&#34;select l.id as id, count(*) as posts from BLOGSTACK.LABEL as l inner join BLOGSTACK.POSTS_LABELS as pl on l.id = pl.label_id inner join BLOGSTACK.POST as p on pl.post_id = p.id where l.enabled = true and p.visible = true and p.newsletter_id = ? group by l.id order by l.name&#34;</span><span class="o">,</span> <span class="n">newsletter</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>&#10;				<span class="o">.</span><span class="na">intoMaps</span><span class="o">();</span>&#10;		<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">:</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">LabelRecord</span> <span class="n">label</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">LABEL</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">LABEL</span><span class="o">.</span><span class="na">ID</span><span class="o">.</span><span class="na">eq</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;ID&#34;</span><span class="o">))).</span><span class="na">fetchOne</span><span class="o">();</span>&#10;			<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;LABEL&#34;</span><span class="o">,</span> <span class="n">label</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">d</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateNewsletter</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">PostRecord</span><span class="o">&gt;</span> <span class="n">posts</span><span class="o">,</span> <span class="n">NewsletterRecord</span> <span class="n">newslettter</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Collection</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">ids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;		<span class="k">for</span> <span class="o">(</span><span class="n">PostRecord</span> <span class="n">post</span> <span class="o">:</span> <span class="n">posts</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">ids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>&#10;		<span class="o">}</span> &#10;		<span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">NEWSLETTER_ID</span><span class="o">,</span> <span class="n">newslettter</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">where</span><span class="o">(</span><span class="n">POST</span><span class="o">.</span><span class="na">ID</span><span class="o">.</span><span class="na">in</span><span class="o">(</span><span class="n">ids</span><span class="o">)).</span><span class="na">execute</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PostDAOImpl.java</span>
    </div>
</div>
<p>Para usar el generador de código de jOOQ con <a href="https://gradle.org/">Gradle</a> debemos añadir la siguiente configuración al archivo de construcción del proyecto, este generador se conectará a la base de datos, obtendrá los datos de esquema y generará todas las clases del paquete <a href="https://github.com/picodotdev/blog-stack/tree/master/src/main/java/info/blogstack/persistence/jooq">info.blogstack.persistence.jooq</a>. Por ejemplo, puede que queramos usar <a href="https://www.joda.org/joda-time/">JodaTime</a> en vez de las clases <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Date.html">Date</a> y <a href="https://docs.oracle.com/javase/8/docs/api/java/sql/Timestamp.html">Timesptamp</a> de la API de Java al menos si no usamos aún <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Java 8 y sus novedades</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="o">...</span>&#10;&#10;<span class="n">task</span> <span class="n">generateJooq</span> <span class="o">{</span>&#10;	<span class="n">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withJdbc</span><span class="o">(</span><span class="k">new</span> <span class="n">Jdbc</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withDriver</span><span class="o">(</span><span class="s1">&#39;org.h2.Driver&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withUrl</span><span class="o">(</span><span class="s1">&#39;jdbc:h2:./misc/database/app&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withUser</span><span class="o">(</span><span class="s1">&#39;sa&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withPassword</span><span class="o">(</span><span class="s1">&#39;sa&#39;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withGenerator</span><span class="o">(</span><span class="k">new</span> <span class="n">Generator</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="o">.</span><span class="na">withGenerate</span><span class="o">(</span><span class="k">new</span> <span class="n">Generate</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;			<span class="o">.</span><span class="na">withInterfaces</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;			<span class="o">.</span><span class="na">withRelations</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.jooq.util.DefaultGenerator&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withDatabase</span><span class="o">(</span><span class="k">new</span> <span class="n">Database</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="o">.</span><span class="na">withCustomTypes</span><span class="o">([</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<span class="k">new</span> <span class="nf">CustomType</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.joda.time.DateTime&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				<span class="o">.</span><span class="na">withConverter</span><span class="o">(</span><span class="s1">&#39;info.blogstack.persistence.records.DateTimeConverter&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="o">])</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="o">.</span><span class="na">withForcedTypes</span><span class="o">([</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<span class="k">new</span> <span class="nf">ForcedType</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.joda.time.DateTime&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				<span class="o">.</span><span class="na">withTypes</span><span class="o">(</span><span class="s1">&#39;TIMESTAMP&#39;</span><span class="o">)</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="o">])</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.jooq.util.h2.H2Database&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withIncludes</span><span class="o">(</span><span class="s1">&#39;.*&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withExcludes</span><span class="o">(</span><span class="s1">&#39;&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withInputSchema</span><span class="o">(</span><span class="s1">&#39;BLOGSTACK&#39;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withTarget</span><span class="o">(</span><span class="k">new</span> <span class="n">Target</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withPackageName</span><span class="o">(</span><span class="s1">&#39;info.blogstack.persistence.jooq&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">.</span><span class="na">withDirectory</span><span class="o">(</span><span class="s1">&#39;src/main/java&#39;</span><span class="o">)));</span>&#10;&#10;	<span class="n">GenerationTool</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">configuration</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Otra alternativa con algunas similitudes a jOOQ es <a href="https://jdbi.org/">JDBI</a> pero en esta las consultas no tienen el soporte del compilador que ofrece jOOQ, otra es <a href="https://scala-slick.org/">Slick</a> para <a href="https://www.scala-lang.org/">Scala</a>. También tiene cierta similitud con <a href="https://mybatis.org/mybatis-3/es/">MyBatis</a> que existe desde hace bastante tiempo aunque jOOQ ofrece más posibilidades.</p>
<p>En el <a href="https://github.com/picodotdev/blog-stack/tree/master">código fuente de Blog Stack</a> está el código completo de uso de jOOQ, en el paquete <a href="https://github.com/picodotdev/blog-stack/tree/master/src/main/java/info/blogstack/persistence">info.blogstack.persistence</a> están las clases relacionadas con la persistencia en una base de datos <a href="https://www.h2database.com/html/main.html">H2</a>, usa Spring para los servicios y la transaccionalidad, en la clase <a href="https://github.com/picodotdev/blog-stack/blob/master/src/main/java/info/blogstack/services/spring/AppConfiguration.java">AppConfiguration</a> se encuentra la definición de ambas cosas y la integración con jOOQ. En  la <a href="https://github.com/picodotdev/blog-stack/releases/tag/0.1">versión 0.1</a> está la misma aplicación pero usando Hibernate.</p>
<p>Como comentan en su propio blog <a href="https://blog.jooq.org/2013/08/06/use-modelmapper-and-jooq-to-regain-control-of-your-domain-model/">usa ModelMapper y jOOQ para recuperar el control de tu modelo de dominio</a> que probablemente no es nada menos que lo más importante de tu aplicación o negocio. Herramientas como jOOQ contribuyen a que haya <a href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/">razones para seguir usando Java</a>.</p>
<p>jOOQ está <a href="http://www.jooq.org/legal/licensing">licenciado</a> de forma dual, <a href="http://www.apache.org/licenses/LICENSE-2.0">ASL</a> para la versión <em>community</em> que ofrece soporte para las bases de datos <a href="https://www.mysql.com/">MySQL</a>, <a href="https://www.postgresql.org/">PostgreSQL</a>, SQLite, H2 y alguna más y una licencia comercial que ofrece soporte para bases de datos como <a href="https://products.office.com/es-ES/access">Microsoft Access</a>, <a href="https://www.oracle.com/database/">Oracle</a> y <a href="https://www.microsoft.com/en-us/sql-server/sql-server-2016">Microsoft SQL Server</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.jooq.org/">jOOQ</a></li>
<li><a href="http://modelmapper.org/">ModelMapper</a></li>
<li><a href="http://modelmapper.org/user-manual/jooq-integration/">Integración entre jOOQ y ModelMapper</a></li>
<li><a href="http://teonos.com/blog/java/development/2014/11/10/experiences-with-jOOQ.html">Experiences with jOOQ</a></li>
<li><a href="https://hibernate.org/">Hibernate</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html">Introducción a Gradle</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/08/jodatime-y-como-integrarlo-con-hibernate.html">Usar DateTime en Hibernate</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/</id>
        <title>10 razones para seguir usando Java</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-05-22T17:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con ya dos décadas de vida y a lo largo de este tiempo Java se ha convertido en uno de los lenguajes más empleados para programar a día de hoy. En este periodo han surgido otros lenguajes en la propia plataforma de la JVM como Groovy, Scala o Clojure y fuera de ella como C#, Python, Ruby, PHP, Go o Dart ofreciendo algunas cosas adicionales o supliendo algunas carencias de Java. Aún con toda esta competencia esta es mi lista de 10 razones por las que creo que Java sigue siendo una de las mejores opciones.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El sábado 23 de mayo de 2015 el lenguaje Java cumple 20 años de historia y aún hoy Java sigue siendo uno de los lenguajes de programación preferidos para desarrollar en un mundo tecnológico en el que unos pocos años pueden darse grandes cambios y en dos décadas ver surgir nuevas tecnologías y verlas languidecer. Algunas personas se jactan y hablan con un tono de desprecio y mofa nada agradable hacia Java mostrando su desconocimiento o prejuicios siguiendo algunos tópicos bastante difundidos la mayoría incorrectos. A otras personas quizá no les gusta Java no tanto por el lenguaje como por los proyectos que ha desarrollado en él, en consultoras cárnicas, para clientes con condiciones laborales paupérrimas, con tecnologías, librerías y <em>frameworks</em> obsoletos o códigos heredados programados por programadores aparentemente con poca experiencia que es un infierno mantener debido a una cantidad importante de errores, uso de tecnologías no adaptadas a la solución, malos funcionamientos y falta de documentación. Pero estas situaciones externas no tiene nada que ver con el lenguaje. Algunas otras personas quizá no les gusta porque no les ofrece el último azúcar sintáctico que han visto y usado en otros lenguajes o porque para propósitos específicos hay alternativas que permiten obtener una solución de una forma más sencilla.</p>
<div class="media">
<figure>
<p>
<img src="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/images/java20_hu18a8be45eb7bd6ca6189ade8d08c6fcb_13926_2560x1440_fit_q90_box.jpg" width="300" height="188" alt="Java 20 años (1995-2015)" title="Java 20 años (1995-2015)"  class="lozad "></p>
</figure>
</div>
<p>En <a href="https://www.javaworld.com/">JavaWorld</a> ha publicado varios artículos para celebrar el aniversario comentando su futuro, su pasado y presente o que notables características reunió en su momento para ser hoy uno de los lenguajes más usados.</p>
<ul>
<li><a href="https://www.javaworld.com/article/2925496/core-java/java-at-20-how-java-changed-programming-forever.html">Java at 20: How it changed programming forever</a></li>
<li><a href="https://www.javaworld.com/article/2924046/scripting-jvm-languages/java-at-20-jvm-javas-other-big-legacy.html">Java at 20: The JVM, Java’s other big legacy</a></li>
<li><a href="https://www.javaworld.com/article/2925306/core-java/java-at-20-oracle-ranks-its-successes-failures-and-future.html">Java at 20: Its successes, failures, and future</a></li>
<li><a href="https://www.javaworld.com/article/2923616/core-java/java-at-20-the-programming-juggernaut-rolls-on.html">Java at 20: The programming juggernaut rolls on</a></li>
<li><a href="https://www.javaworld.com/article/2925060/java-platform/javas-key-to-success-is-simplicity.html">Java’s key to success is simplicity</a></li>
<li><a href="https://www.javaworld.com/article/2926345/java-platform/unfinished-business-java-is-a-20-year-old-grown-up-with-bright-prospects-ahead.html">Java is a 20-year-old grown-up with bright prospects ahead</a></li>
</ul>
<p>Algún otros artículos interesantes son:</p>
<ul>
<li><a href="https://www.infoq.com/news/2015/05/java-20">Java Turns 20</a></li>
<li><a href="http://www.xataka.com/aplicaciones/20-anos-de-java-celebramos-su-tremenda-influencia-en-el-mundo-del-software-y-la-programacion">20 años de Java: ¿En qué quedó el sueño de programar una vez, ejecutar en cualquier lugar?</a></li>
</ul>
<p>Aunque algunos parecen considerar ya hoy a Java el nuevo <a href="https://es.wikipedia.org/wiki/COBOL">COBOL</a> (y este último aún tiene futuro) y no sea lo habitual, en este artículo trataré de exponer algunos argumentos que posee Java para su defensa y por los que en mi caso aún no he tenido necesidad de buscar mayor felicidad programando en otra opción.</p>
<div class="alert alert-warning tableofcontents">
    <h2>Contenido del artículo</h2>
    <toc></toc>
</div>
<h3 id="java-no-es-lento">Java no es lento</h3>
<p>Quizá en las primeras versiones de los 90 fuera así pero la realidad hoy con las mejoras introducidas en cada versión a la <a href="https://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java">Java Virtual Machine</a> (JVM) un programa Java es comparativamente igual de rápido que uno en C o C++, salvo para tareas muy específicas de cálculos intensivos no hay diferencia. Eligiendo las estructuras de datos adecuadas no tendría por qué haber una diferencia de rendimiento considerable y además para la mayoría de las tareas más importante que la rapidez es la legibilidad del código, su fácil desarrollo, mantenimiento o coste.</p>
<h3 id="javadoc">Javadoc</h3>
<p>Java tiene una gran herramienta de documentación que permite embeber la misma en el código fuente de los archivos y generar una serie de documentos html para su posterior consulta. La <a href="https://docs.oracle.com/javase/8/docs/api/">documentación proporcionada en la API</a> es extensa, completa y buena, siendo simple html puede ser alojada en cualquier servidor web y consultada en internet. Sin documentación la tarea de los programadores sería considerablemente más complicada, aún en el caso de falta de documentación javadoc el IDE con la asistencia de código puede ayudarnos gracias a la introspección incorporada en la plataforma.</p>
<h3 id="compilado-tipado-estático">Compilado, tipado estático</h3>
<p>Las metodologías ágiles están siendo ampliamente adoptadas y algunos de sus defensores apuestan por lenguajes que consideran encajan con su metodología agilista confundiéndola con lenguajes dinámicos y menos verbosos, que puede ser acertado en ocasiones o circunstancias pero con Java también se puede ser ágil como el que más. Una de las buenas prácticas de las metodologías ágiles es tener teses unitarios del código al ser posible que lo cubra al 100%, sin embargo, la realidad es que nos será complicado tener el 100% del código cubierto con teses.</p>
<p>Con los lenguajes dinámicos hay que tener especial cuidado ya que por su propia naturaleza hace que algunos errores solo los encontraremos en la ejecución, por experiencia propia no será la primera vez (ni la centésima) que un error tan básico como de compilación por nombre de variable o método mal escrito es descubierto en producción. El IDE es la herramienta que en Java junto con el tipado estático y la ayuda al compilador permite detectar errores de compilación instantáneamente, por otra parte proporciona asistencia de código y a los programadores nos sirve como documentación de los tipos esperados en los argumentos de los métodos o propiedades de las clases. Los compiladores además de para traducir el código fuente a lenguaje máquina (o <em>bytecode</em>) están para capturar errores sintácticos y léxicos ante los cambios de una nueva característica, una refactorización o un <em>merge</em> con conflictos. Se puede pensar en el compilador como un <em>test</em> automatizado que cubre el 100% del código, con un IDE se obtienen los errores al instante después de escribir cada caracter ¿que hay mejor? ¡no lo desprecies!.</p>
<p>Escribir código menos verboso no hace que escribirlo sea más rápido ni necesariamente más legible, Java posee buenos IDEs con asistentes de código que con unas pocas pulsaciones permiten escribir el código igual o más rápido. Java es un lenguaje verboso y explícito en parte propiciado por su poco azúcar sintáctico pero las construcciones sintácticas pueden ser contraproducentes, un alto número de ellas y el código será muy críptico sin un conocimiento amplio del lenguaje. Uno de los éxitos de Java es su relativa simplicidad.</p>
<h3 id="ide">IDE</h3>
<p>Con un IDE el código Java se ve de distinta forma, no como simple texto sino donde los métodos, clases y propiedades tienen entidad propia. La asistencia de código permite obtener métodos disponibles, ver los tipos y nombres de argumentos y retornos, las excepciones lanzadas, si el método es estático o de instancia y la visibilidad de acceso según escribimos. Con la ayuda de un IDE podemos encontrar todos los usos de un método o clase de forma totalmente exacta o cambiar un nombre por otro. Hay IDEs para lenguajes dinámicos como <a href="https://www.groovy-lang.org/">Groovy</a> con IntelliJ IDEA o <a href="https://www.python.org/">Python</a> con PyCharm que proporcionan asistencia de código pero usando las características dinámicas de estos lenguajes el encontrar todos los usos de un método o variable no está garantizado.</p>
<p>Un IDE puede suponer la diferencia entre dedicar un tiempo considerable a tareas de bajo valor a ser mucho más productivo, o mejor aún, ayudando a evitar errores.</p>
<h3 id="refactorizaciones">Refactorizaciones</h3>
<p>Con la ayuda del compilador y de un IDE las refactorizaciones como renombrar una variable, propiedad, método o clase son más sencillas y con más garantías de no romper nada, además de poder realizarlo en unos pocos segundos y sin tener que buscar y sustituir las referencias como texto plano en todo el código del proyecto. En proyectos grandes en los que trabajan más de una persona y tienen un tiempo de vida y de mantenimiento de más de unos pocos meses hace que evitemos muchos problemas y programemos con más seguridad de que las modificaciones que hacemos no introducen errores por cosas tan básicas como la compilación.</p>
<p>Si el uso de un proyecto es prolongado en el tiempo este posiblemente tenga que adaptarse a necesidades inicialmente totalmente desconocidas, en estos casos será tarde o temprano necesario <em>refactorizar</em>. En un negocio en el que el tiempo es importante y en una tecnología en constante evolución realizar refactorizaciones pequeñas o grandes es una necesidad. La mayor certeza es el cambio y se dará en herramientas, <em>frameworks</em>, lenguajes, ideas de negocio, &hellip;.</p>
<h3 id="productividad-y-legibilidad">Productividad y legibilidad</h3>
<p>El compilador e IDE nos indican todos los errores léxicos y sintácticos después de escribir cada caracter sin tener que ejecutar el código o los teses unitarios para descubrirlos evitando que lleguen a producción en cuyo caso nos requerirá dedicar tiempo para corregirlos o con peores consecuencias para los usuarios de nuestro código y para el negocio. Que el IDE nos muestre sugerencias con la asistencia de código según escribimos o mediante <em>refactorizaciones</em> son un gran diferencia de productividad aunque algunos piensen que por ser el código más verboso o por escribir menos líneas de código se tarde en programar más la misma tarea, el compilador y el IDE son factores que permiten aumentar la productividad a pesar de la verbosidad.</p>
<p>Con la llegada de <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Java 8 y sus novedades</a> se ha incorporado al lenguaje la programación funcional que permite expresar de una forma más natural para los humanos la tarea que se desea realizar, esto hace que el código sea más legible. Lo que en un lenguaje imperativo son varias líneas de código con una combinación de sentencias condicionales, bucles, asignaciones y llamadas a métodos con un objetivo poco claro sin un examen detallado del código ahora se puede expresar de forma funcional haciendo uso de los <em>streams</em> y expresiones <em>lambda</em>, también en menor número de líneas de código.</p>
<h3 id="software-disponible">Software disponible</h3>
<p>Java posee gran cantidad de software disponible, de gran calidad y en muchos casos con una licencia de código abierto o de software libre para cualquier tipo de necesidad en una  aplicación de cualquier ámbito. A menudo hay no solo una opción sino varias disponibles y con la libertad de elegir la que más se adecue al proyecto o se prefiera. Ahí está la <a href="https://www.apache.org/">fundación Apache</a>, <a href="https://spring.io/">Spring</a> o <a href="https://www.jboss.org/">JBoss</a> con una buena colección de proyectos ampliamente utilizados.</p>
<p>Los cambios se producirán, por ello no te encadenes a una determinada tecnología que en un futuro te impida adaptarte a nuevas necesidades. En Java hay opciones para cada diferente aspecto de la aplicación (seguridad, persistencia, <em>logging</em>, <em>framework</em> web, &hellip;), por si en un futuro surge una nueva «cojoherramienta», y esto pasará tarde o temprano, diseña tu aplicación de tal forma que sea posible reemplazar una pieza por otra sin tener que reescribir la aplicación entera.</p>
<h3 id="ofertas-de-trabajo-desarrolladores">Ofertas de trabajo, desarrolladores</h3>
<p>Dado que Java unos de los lenguajes más utilizados y es usado ampliamente en muchos ámbitos es más fácil encontrar a personas con conocimientos y expertos en Java. Por ello hay numerosas ofertas de trabajo para diversos ámbitos (web, escritorio, servidor, dispositivos móviles, &hellip;) algunas a considerar, aunque bastantes menos que ofertas.</p>
<h3 id="conservador-no-anticuado">Conservador, no anticuado</h3>
<p>Java tarda en incorporar en el lenguaje algunas de las últimas técnicas de programación que un determinado momento tienen gran relevancia. No porque no pueda sino porque tienen una actitud conservadora, y esto no es malo ya que uno de sus principios hasta el momento es mantener la compatibilidad hacia atrás ¿qué lenguaje que ha ido incorporando nuevas características ha mantenido la compatibilidad de compilación en gran medida durante 20 años? Java pone gran énfasis en este aspecto en cada nueva versión. Esperando cierto tiempo asegura incorporar en el lenguaje aquellas nuevas posibilidades que realmente han demostrado ser útiles y no son simples modas pasajeras que más tarde dificultan la compatibilidad en futuras versiones. Esto no quiere decir que no evolucione, ya en Java 5 incorporó numerosas novedades como <em>generics</em>, … y en Java 8 programación funcional como <em>streams</em> para mejorar la legibilidad del código y aprovechar el procesamiento paralelo de los procesadores multinúcleo. Los métodos por defecto (<em>default methods</em>) en interfaces son una muestra del interés que hay en Java de mantener la compatibilidad hacia atrás. En este enlace está la <a href="https://en.wikipedia.org/wiki/Java_version_history">evolución histórica</a> durante estos años.</p>
<p>Como dijo <a href="https://en.wikipedia.org/wiki/James_Gosling">James Gosling</a> en una conferencia de JavaOne:</p>
<blockquote>
<p><em>We don’t want to do things until we know we can do them right—in Java and on the JVM.</em></p>
</blockquote>
<h3 id="propósito-general">Propósito general</h3>
<p>Java es un lenguaje de propósito general y multiplataforma ejecutable en cualquier dispositivo en el que haya una JVM disponible. No está restringido a un determinado ámbito o tipo de aplicación, el mismo conocimiento del lenguaje sirve para múltiples tipos de aplicaciones desde de escritorio, de servidor, procesamiento de datos, dispositivos móviles, ¿Java para <em>scripting</em>? También, por <a href="https://picodotdev.github.io/blog-bitix/2015/11/java-para-tareas-de-scripting-con-jbang-y-gradle/">las ventajas de un lenguaje compilado con la facilidad de ejecución de un entorno interpretado</a> &hellip; incluso juegos, sí juegos. Hay muestras de algunos impresionantes con buen rendimiento, aunque alguno diría incorrectamente que no. Con <a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/">jMonkeyEngine podemos hacer un juego</a> que tiene poco que envidiar usando otro lenguaje ya que proporciona los mimbres comunes: bucle del juego, colisiones, física, 3D con OpenGL, sonido, entrada, &hellip;. <a href="https://minecraft.net/">Minecraft</a> es una muestra, otras buenas muestras usando jMonkeyEngine son <a href="http://store.steampowered.com/app/321080">PirateHell</a>, <a href="http://mindemia.com/hostilesector/">Hostile Sector</a>, <a href="http://jmonkeyengine.org/project/imperii/">Imperii</a>, <a href="https://ghook.speedrungames.com/">Grappling Hook</a> o <a href="http://store.steampowered.com/app/329770/">4089: Ghost Within</a> y en la <a href="http://jmonkeyengine.org/showcase/">página de ejemplos</a> hay alguno más.</p>
<p>Quizá en un futuro cambie pero hoy Java es el lenguaje en el que se programan las aplicaciones <a href="https://www.android.com/">Android</a> nativas y una de las plataformas móviles con mayor cuota de mercado. El lema <em>“write once, run everywhere”</em> sigue siendo aplicable hoy más que nunca haciéndole ideal para la nueva generación de dispositivos de la <a href="https://es.wikipedia.org/wiki/Internet_de_las_cosas">internet de las cosas</a> (IoT, <em>Internet of things</em>).</p>
<p>Mi escala de preferencias para un lenguaje es de la siguiente forma de mayor a menor (aunque puede variar según la necesidad):</p>
<ul>
<li>Ofertas de trabajo, alguna de Groovy, alguna de Python pero mucho menores que en Java, <a href="https://dotnet.microsoft.com/">C#</a> o <a href="https://secure.php.net/">PHP</a>.</li>
<li>Propósito general, esto permite que el tiempo dedicado a aprender y convertirte en un experto en un lenguaje (que pueden ser de varios años) pueda ser aprovechado en el momento que el avance de la tecnología cambie las reglas de juego como la aparición de los dispositivos móviles. PHP es un lenguaje que fuera del ámbito de desarrollo web tiene poca presencia, dispone de buenas herramientas como <a href="https://wordpress.org/">Wordpress</a>, <a href="https://www.drupal.org/">Drupal</a> o <a href="https://symfony.com/">Symfony</a> y hay ofertas de trabajo. En la plataforma <a href="https://www.android.com/">Android</a> Java es el lenguaje empleado.</li>
<li>Productividad, refactorizaciones y documentación disponible. Poder refactorizar el código de forma segura es un gran punto para la productividad y más importante aún evitar errores, por este motivo y a base de experiencia soy reticente a los lenguajes dinámicos. El tipado estático ayuda a evitar errores y servir como documentación, un buen IDE permite aumentar la productividad. Java es un lenguaje que está bien documentado con su Javadoc.</li>
<li>Software disponible, hay cantidad de lenguajes algunos de los más nombrados son <a href="https://golang.org/">Go</a> o <a href="https://www.dartlang.org/">Dart</a> pero en estos es probable que debiésemos desarrollar nosotros el software para una determinada necesidad que en otros lenguajes ya está implementado y más que probado pudiendo haber incluso varias opciones.</li>
<li>Legibilidad, cualquier añadido al lenguaje que haga más claro el propósito del código o en menos líneas es bienvenido pero como ves esto está abajo en esta lista según importancia.</li>
</ul>
<p>Aunque no lo he puesto el divertirse y programar a gusto con un lenguaje también debería estar en esta lista pero esto en parte se consigue una vez que dominamos el lenguaje y su ecosistema sintiéndonos capaces de realizar cualquier tarea produciendo buen código, ya sea Java o cualquier otro.</p>
<p>Estas son otras listas de <a href="http://zeroturnaround.com/rebellabs/10-reasons-why-java-now-rocks-more-than-ever-part-1-the-java-compiler/">10 razones por las que Java mola más que nunca</a> y otras <a href="https://www.voxxed.com/blog/2015/02/10-reasons-to-love-java-and-the-jvm-reconnecting-with-your-warm-and-fuzzies/">10 razones para querer a Java y la JVM</a>.</p>
<p>Para aprender Java en profundidad son varios libros de los que he leído que me han gustado empezando por <a href="https://amzn.to/2sNCizu">Thinking in Java</a>, <a href="https://amzn.to/31GZwFF">Effective Java</a> y <a href="https://amzn.to/2MXMTi3">Java 8 in Action</a> además de otros <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">buenos libros para mejorar como programadores</a> que son interesantes de leer.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0131872486&amp;linkId=2a437ba4126a093af22af88c893ac407" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0134685997&amp;linkId=3a13c135d5cd40ca21d3f1dd853ab2a3" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291994&amp;linkId=2256857b147eea05bc79aef83d2548fe" title="Amazon" class="lozad"></iframe>
</div>
<p>En Junio de 1997 James Gosling formando parte de Sun Microsystems Inc. escribía el artículo de título <a href="http://www.win.tue.nl/~evink/education/avp/pdf/feel-of-java.pdf">The Feel of Java</a> detallando varias propiedades del lenguaje que hacen del él lo que es y que aún siguen estando vigentes. Y en 1996 junto con Henry McGilton <a href="http://www.stroustrup.com/1995_Java_whitepaper.pdf">The Java Language Environment: A White Paper</a> donde describen los objetivos del lenguaje. Finalmente escrito más recientemente <a href="http://www.oreilly.com/programming/free/java-the-legend.csp">Java The Legend</a> analiza Java, su pasado, aciertos y fallos, comunidad, ecosistema y futuro. Estos tres documentos son piezas valiosas de información.</p>
<p>¡Larga vida a Java!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://zeroturnaround.com/rebellabs/10-reasons-why-java-now-rocks-more-than-ever-part-1-the-java-compiler/">10 Reasons Why Java Now Rocks More Than Ever</a></li>
<li><a href="https://www.voxxed.com/blog/2015/02/10-reasons-to-love-java-and-the-jvm-reconnecting-with-your-warm-and-fuzzies/">10 Reasons to Love Java and the JVM</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/</id>
        <title>Programación de juegos y 3D en Java con jMonkeyEngine</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-05-09T10:18:40+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/jmonkeyengine.png" width="200" height="160" alt="jMonkeyEngine" title="jMonkeyEngine"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Erróneamente se sigue pensado que Java es un lenguaje lento en ejecución, en las primeras versiones era cierto pero hoy la realidad es que con las mejoras introducidas en cada versión de Java y la máquina virtual el rendimiento actual es comparable a C y C++. En la programación de juegos y 3D gran parte del proceso de representación gráfica se ha descargado de la CPU a las cada vez más potentes tarjetas gráficas, la potencia de estas GPU son las que determinan la capacidad de proceso gráfico y la calidad gráfica de los juegos.</p>
<p>Java no suele ser considerado como opción para programar videojuegos triple A pero ahí está <a href="https://minecraft.net/">Minecraft</a> uno de los juegos más populares y un ejemplo de que un juego de buena calidad y rendimiento también se puede hacer en Java. Hay algunos otros ejemplos notables como de variados estilos <em>RPG</em>, <em>Puzzle</em>, <em>MOBA</em>, <em>Rogue</em>, <em>RTS</em>, <em>Card MMOG</em>, <em>FPS</em>, <em>Arcade</em>, <em>Platform</em> ,&hellip;:</p>
<ul>
<li><a href="http://store.steampowered.com/app/329770/">4089: Ghost Within</a></li>
<li><a href="https://www.rising-world.net/">Rising World</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.rampage.seizon">Seizon</a></li>
<li><a href="http://herebeben.com/copod">Copod</a></li>
<li><a href="http://drohtin.org/">Drohtin – Tales of an Old Kingdom</a></li>
<li><a href="http://4realms.net/News/">CHAOS: In the Darkness</a></li>
<li><a href="https://www.indiedb.com/games/just-tactics/">Just Tactics</a></li>
<li><a href="https://gentrieve.wordpress.com/">Gentrieve 2</a></li>
<li><a href="http://steamcommunity.com/sharedfiles/filedetails/?id=354610327">Spermination</a></li>
<li><a href="http://www.indiedb.com/games/herodex">Herodex</a></li>
<li><a href="https://gentrieve.wordpress.com/">Gentrieve 2</a></li>
<li><a href="https://www.indiedb.com/games/makers-tale/videos">Maker’s Tale</a></li>
<li><a href="http://store.steampowered.com/app/263360/">3089</a></li>
<li><a href="http://boardtastic.com/">Boardtastic</a></li>
<li><a href="http://store.steampowered.com/app/321080">PirateHell</a></li>
<li><a href="http://mythruna.com/">Mythruna</a></li>
<li><a href="http://mindemia.com/hostilesector/">Hostile Sector</a></li>
<li><a href="http://store.steampowered.com/app/259620/">3079</a></li>
<li><a href="https://www.tygron.com/">TYGRON</a></li>
<li><a href="https://sourceforge.net/projects/fleshsnatcher/">Fleshsnatcher</a></li>
<li><a href="http://nordgame.com/">Nord</a></li>
<li><a href="https://www.urbangalaxyonline.com/">Urban Galaxy</a></li>
<li><a href="https://ghook.speedrungames.com/">Grappling Hook</a></li>
<li><a href="http://www.madskillsmx.com/">Mad Skills Motocross</a></li>
<li><a href="http://betaville.net/">Betaville</a></li>
<li><a href="http://scriptblocks.com/">Script Blocks</a></li>
<li><a href="http://jmonkeyengine.org/project/windup-baseball/">Windup Baseball</a></li>
<li><a href="https://www.petsvsmonsters.com/">Pets vs Monsters</a></li>
<li><a href="http://www.banghowdy.com/">Bang! Howdy</a></li>
<li><a href="http://jmonkeyengine.org/project/imperii/">Imperii</a></li>
</ul>
<p>Este es un vídeo del juego PirateHell que tiene una pinta muy buena:</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/ODjq7IUkwUg" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>Algunas capturas de imagen de estos juegos, en los enlaces anteriores se pueden encontrar vídeos de algunos de ellos.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/4089_huc314e1f58c93e5ca7f2e870bef5fe70b_75512_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="4089: Ghost Within"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/4089_huc314e1f58c93e5ca7f2e870bef5fe70b_75512_300x200_fit_q90_box.jpg" width="300" height="169" alt="4089: Ghost Within" title="4089: Ghost Within"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/rising-world_hub9d3aa3e89ed7d0c2edfeff327a754e9_87286_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Rising World"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/rising-world_hub9d3aa3e89ed7d0c2edfeff327a754e9_87286_300x200_fit_q90_box.jpg" width="300" height="169" alt="Rising World" title="Rising World"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/seizon_hudc5d5745d9a6a341f377d3be39a5c377_85750_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Seizon"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/seizon_hudc5d5745d9a6a341f377d3be39a5c377_85750_300x200_fit_q90_box.jpg" width="125" height="200" alt="Seizon" title="Seizon"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/copod_huf817f10b5ae3f0c10bd52df2de50fab6_170304_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Copod"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/copod_huf817f10b5ae3f0c10bd52df2de50fab6_170304_300x200_fit_box_3.png" width="300" height="169" alt="Copod" title="Copod"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/drohtin-tales-of-old-kingdom_hu4f0f0f6ba4980a57d3095e3f564a62d7_3943057_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Drohtin – Tales of an Old Kingdom"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/drohtin-tales-of-old-kingdom_hu4f0f0f6ba4980a57d3095e3f564a62d7_3943057_300x200_fit_box_3.png" width="300" height="169" alt="Drohtin – Tales of an Old Kingdom" title="Drohtin – Tales of an Old Kingdom"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/chaos_in-the-darkness_hu2cc3ed8b5763862138707bf0539aaa28_890128_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="CHAOS: In the Darkness"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/chaos_in-the-darkness_hu2cc3ed8b5763862138707bf0539aaa28_890128_300x200_fit_q90_box.jpg" width="300" height="169" alt="CHAOS: In the Darkness" title="CHAOS: In the Darkness"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/just-tactics_hu06e177b9c2399a4d4ecaffd141b20130_193990_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Just Tactics"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/just-tactics_hu06e177b9c2399a4d4ecaffd141b20130_193990_300x200_fit_q90_box.jpg" width="300" height="169" alt="Just Tactics" title="Just Tactics"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/spermination_hu4c8ee83fbd3d68d92ba53c77f18ca64e_428046_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Spermination"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/spermination_hu4c8ee83fbd3d68d92ba53c77f18ca64e_428046_300x200_fit_box_3.png" width="300" height="169" alt="Spermination" title="Spermination"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/makers-tale_hud0ce71c661977a4c732e851d636885db_178699_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Maker’s Tale"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/makers-tale_hud0ce71c661977a4c732e851d636885db_178699_300x200_fit_q90_box.jpg" width="300" height="169" alt="Maker’s Tale" title="Maker’s Tale"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/piratehell_huba629ae6e63484f80b8d079715ae0aca_481858_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="PirateHell"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/piratehell_huba629ae6e63484f80b8d079715ae0aca_481858_300x200_fit_q90_box.jpg" width="300" height="183" alt="PirateHell" title="PirateHell"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/hostile-sector_hu8f55c794346a3bd1d55d2359b00f859b_78093_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Hostile Sector"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/hostile-sector_hu8f55c794346a3bd1d55d2359b00f859b_78093_300x200_fit_q90_box.jpg" width="267" height="200" alt="Hostile Sector" title="Hostile Sector"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/3079_hu3ec15271a03555294e666b6c6d872c16_768582_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="3079"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/3079_hu3ec15271a03555294e666b6c6d872c16_768582_300x200_fit_box_3.png" width="267" height="200" alt="3079" title="3079"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/urban-galaxy_hufca53ee84e4a62a25cc1605741e9d95f_255385_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Urban Galaxy"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/urban-galaxy_hufca53ee84e4a62a25cc1605741e9d95f_255385_300x200_fit_q90_box.jpg" width="291" height="200" alt="Urban Galaxy" title="Urban Galaxy"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/grapplinghook_hu460719c85460277e42053f4bf2bd7480_139409_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Grappling Hook"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/grapplinghook_hu460719c85460277e42053f4bf2bd7480_139409_300x200_fit_q90_box.jpg" width="267" height="200" alt="Grappling Hook" title="Grappling Hook"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/mad-skills-motocross_huacfde71bb93c1f1c718bd76696813d3c_98314_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Mad Skills Motocross"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/mad-skills-motocross_huacfde71bb93c1f1c718bd76696813d3c_98314_300x200_fit_q90_box.jpg" width="267" height="200" alt="Mad Skills Motocross" title="Mad Skills Motocross"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/pets-vs-monsters_hucd3eafebcfc1d641661a57a0bbed24d4_167912_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Pets vs Monsters"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/pets-vs-monsters_hucd3eafebcfc1d641661a57a0bbed24d4_167912_300x200_fit_q90_box.jpg" width="267" height="200" alt="Pets vs Monsters" title="Pets vs Monsters"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/bang-howdy_hu28e2506b2fc5745b07d0f14b5b032521_201468_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Bang! Howdy"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/bang-howdy_hu28e2506b2fc5745b07d0f14b5b032521_201468_300x200_fit_q90_box.jpg" width="250" height="200" alt="Bang! Howdy" title="Bang! Howdy"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/imperii_hueb887ddf8ba63d0473841d1ac55291ca_104530_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Imperii"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/imperii_hueb887ddf8ba63d0473841d1ac55291ca_104530_300x200_fit_q90_box.jpg" width="267" height="200" alt="Imperii" title="Imperii"  class="lozad "></a></p>
</figure>
</div>
<p>Todos estos juegos están programados utilizando el lenguaje de programación Java y la librería <a href="https://jmonkeyengine.org/">jMonkeyEngine</a> que facilita las tareas de programación de videojuegos proporcionando programación gráfica en 3D usando <a href="https://www.khronos.org/opengl/">OpenGL</a>, manejo de eventos de entrada como teclado o ratón, manejo de sonido, pantallas de menús o red. Usando jMonkeyEngine se pueden hacer cosas muy interesantes como se ve en los ejemplos. En el siguiente enlace se pueden encontrar el <a href="https://github.com/jMonkeyEngine/BookSamples/tree/master/src">código fuente de varios ejemplos</a> que podemos probar.</p>
<p>A continuación mostraré el código y unas capturas de pantalla de algunas las posibilidades de jMonkeyEngine. Primeramente veamos como crear un ejemplo básico con un cubo aplicándole una textura con el que veremos como crear una escena. El segundo ejemplo aplica texturas de diferentes formas que varían la visualización de un elemento geométrico.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.jmonkeyengine</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.jme3.app.SimpleApplication</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.material.Material</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.math.ColorRGBA</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.renderer.RenderManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.scene.Geometry</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.scene.shape.Box</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * &lt;h3&gt;Ejemplo 1: Hola mundo&lt;/h3&gt;&#10;</span><span class="cm"> * &#10;</span><span class="cm"> * &lt;p&gt;Este ejemplo muestra el mínimo necesario para empezar con una aplicación&#10;</span><span class="cm"> * que use jMonkeyEngine. Sirve cmo punto de partida para comprobar que  &#10;</span><span class="cm"> * disponemos del entorno instalado correctamente que principalmente en extender&#10;</span><span class="cm"> * de la clase SimpleApplication y disponer de las librerías jar de jMonkeyEngine&#10;</span><span class="cm"> * en el classpath.&lt;/p&gt;&#10;</span><span class="cm"> * &#10;</span><span class="cm"> * &lt;p&gt;También muestra lo mínimo necesario para añadir elementos geométricos y que se&#10;</span><span class="cm"> * visualicen en la escena 3D.&lt;/&gt;&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HolaMundoJMonkeyEngine</span> <span class="kd">extends</span> <span class="n">SimpleApplication</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">HolaMundoJMonkey</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HolaMundoJMonkey</span><span class="o">();</span>&#10;		<span class="n">app</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleInitApp</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="n">buildBox</span><span class="o">();</span>&#10;&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleUpdate</span><span class="o">(</span><span class="kt">float</span> <span class="n">tpf</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleRender</span><span class="o">(</span><span class="n">RenderManager</span> <span class="n">rm</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildBox</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;		&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Misc/Unshaded.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Color&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Blue</span><span class="o">);</span>&#10;&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="s">&#34;Box&#34;</span><span class="o">,</span> <span class="n">box</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;		&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HolaMundoJMonkeyEngine.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span><span class="lnt">172&#10;</span><span class="lnt">173&#10;</span><span class="lnt">174&#10;</span><span class="lnt">175&#10;</span><span class="lnt">176&#10;</span><span class="lnt">177&#10;</span><span class="lnt">178&#10;</span><span class="lnt">179&#10;</span><span class="lnt">180&#10;</span><span class="lnt">181&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.jmonkeyengine</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.jme3.app.SimpleApplication</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.light.AmbientLight</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.light.DirectionalLight</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.material.Material</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.material.RenderState.BlendMode</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.math.ColorRGBA</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.math.Vector3f</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.renderer.RenderManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.renderer.queue.RenderQueue.Bucket</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.scene.Geometry</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.scene.shape.Box</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.jme3.scene.shape.Sphere</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * Aplicando texturas y materiales a geometrías.&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Materiales</span> <span class="kd">extends</span> <span class="n">SimpleApplication</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Materials</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Materials</span><span class="o">();</span>&#10;		<span class="n">app</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleInitApp</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">flyCam</span><span class="o">.</span><span class="na">setMoveSpeed</span><span class="o">(</span><span class="n">15</span><span class="o">);</span>&#10;		<span class="n">initializeLight</span><span class="o">();</span>&#10;&#10;		<span class="n">Geometry</span> <span class="n">geometry1</span> <span class="o">=</span> <span class="n">buildBoxUnshaded</span><span class="o">(</span><span class="s">&#34;Box&#34;</span><span class="o">);</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry2</span> <span class="o">=</span> <span class="n">buildBoxShaded</span><span class="o">(</span><span class="s">&#34;Box Shaded&#34;</span><span class="o">);</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry3</span> <span class="o">=</span> <span class="n">buildBoxTransparent</span><span class="o">(</span><span class="s">&#34;Box Transparent&#34;</span><span class="o">);</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry4</span> <span class="o">=</span> <span class="n">buildBoxWireframe</span><span class="o">(</span><span class="s">&#34;Box Wireframe&#34;</span><span class="o">);</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry5</span> <span class="o">=</span> <span class="n">buildSphereLighting</span><span class="o">(</span><span class="s">&#34;Sphere Lighting&#34;</span><span class="o">);</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry6</span> <span class="o">=</span> <span class="n">buildSphereShiny</span><span class="o">(</span><span class="s">&#34;Sphere Shiny&#34;</span><span class="o">);</span>&#10;		<span class="n">Geometry</span> <span class="n">geometry7</span> <span class="o">=</span> <span class="n">buildWindow</span><span class="o">(</span><span class="s">&#34;window&#34;</span><span class="o">);</span>&#10;&#10;		<span class="n">geometry1</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(-</span><span class="n">5</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;		<span class="n">geometry2</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(-</span><span class="n">2</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;		<span class="n">geometry3</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;		<span class="n">geometry4</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(</span><span class="n">4</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;		<span class="n">geometry5</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(</span><span class="n">7</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;		<span class="n">geometry6</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(</span><span class="n">10</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;		<span class="n">geometry7</span><span class="o">.</span><span class="na">setLocalTranslation</span><span class="o">(</span><span class="n">13</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry1</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry2</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry3</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry4</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry5</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry6</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">attachChild</span><span class="o">(</span><span class="n">geometry7</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleUpdate</span><span class="o">(</span><span class="kt">float</span> <span class="n">tpf</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleRender</span><span class="o">(</span><span class="n">RenderManager</span> <span class="n">rm</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildBoxUnshaded</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Box</span> <span class="n">sphere</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Misc/Unshaded.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Color&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">White</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setTexture</span><span class="o">(</span><span class="s">&#34;ColorMap&#34;</span><span class="o">,</span> <span class="n">assetManager</span><span class="o">.</span><span class="na">loadTexture</span><span class="o">(</span><span class="s">&#34;assets/interface/Monkey.png&#34;</span><span class="o">));</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setTexture</span><span class="o">(</span><span class="s">&#34;LightMap&#34;</span><span class="o">,</span> <span class="n">assetManager</span><span class="o">.</span><span class="na">loadTexture</span><span class="o">(</span><span class="s">&#34;assets/interface/Monkey_light.png&#34;</span><span class="o">));</span>&#10;&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sphere</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildBoxShaded</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Light/Lighting.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setBoolean</span><span class="o">(</span><span class="s">&#34;UseMaterialColors&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Diffuse&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">White</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Ambient&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Gray</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setTexture</span><span class="o">(</span><span class="s">&#34;DiffuseMap&#34;</span><span class="o">,</span> <span class="n">assetManager</span><span class="o">.</span><span class="na">loadTexture</span><span class="o">(</span><span class="s">&#34;assets/interface/Monkey.png&#34;</span><span class="o">));</span>&#10;&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">box</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;		&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildBoxTransparent</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Light/Lighting.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setBoolean</span><span class="o">(</span><span class="s">&#34;UseMaterialColors&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Diffuse&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">White</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Ambient&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Gray</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setTexture</span><span class="o">(</span><span class="s">&#34;DiffuseMap&#34;</span><span class="o">,</span> <span class="n">assetManager</span><span class="o">.</span><span class="na">loadTexture</span><span class="o">(</span><span class="s">&#34;assets/interface/Monkey.png&#34;</span><span class="o">));</span>&#10;&#10;		<span class="n">material</span><span class="o">.</span><span class="na">getAdditionalRenderState</span><span class="o">().</span><span class="na">setAlphaTest</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">getAdditionalRenderState</span><span class="o">().</span><span class="na">setAlphaFallOff</span><span class="o">(</span><span class="n">0</span><span class="o">.</span><span class="na">5f</span><span class="o">);</span>&#10;		&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">box</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;		&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setQueueBucket</span><span class="o">(</span><span class="n">Bucket</span><span class="o">.</span><span class="na">Transparent</span><span class="o">);</span>&#10;&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildBoxWireframe</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Misc/Unshaded.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">getAdditionalRenderState</span><span class="o">().</span><span class="na">setWireframe</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>&#10;&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">box</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;		&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setQueueBucket</span><span class="o">(</span><span class="n">Bucket</span><span class="o">.</span><span class="na">Transparent</span><span class="o">);</span>&#10;&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildSphereLighting</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Sphere</span> <span class="n">sphere</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sphere</span><span class="o">(</span><span class="n">32</span><span class="o">,</span> <span class="n">32</span><span class="o">,</span> <span class="n">1f</span><span class="o">);</span>&#10;&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Light/Lighting.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setBoolean</span><span class="o">(</span><span class="s">&#34;UseMaterialColors&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Diffuse&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Blue</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Ambient&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Gray</span><span class="o">);</span>&#10;&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sphere</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildSphereShiny</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Sphere</span> <span class="n">sphere</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sphere</span><span class="o">(</span><span class="n">32</span><span class="o">,</span> <span class="n">32</span><span class="o">,</span> <span class="n">1f</span><span class="o">);</span>&#10;&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Light/Lighting.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setBoolean</span><span class="o">(</span><span class="s">&#34;UseMaterialColors&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Diffuse&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Blue</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Ambient&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">Gray</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="s">&#34;Specular&#34;</span><span class="o">,</span> <span class="n">ColorRGBA</span><span class="o">.</span><span class="na">White</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setFloat</span><span class="o">(</span><span class="s">&#34;Shininess&#34;</span><span class="o">,</span> <span class="n">64f</span><span class="o">);</span>&#10;		&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sphere</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;		&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Geometry</span> <span class="nf">buildWindow</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">Box</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;				&#10;		<span class="n">Material</span> <span class="n">material</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="o">(</span><span class="n">assetManager</span><span class="o">,</span> <span class="s">&#34;Common/MatDefs/Light/Lighting.j3md&#34;</span><span class="o">);</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">setTexture</span><span class="o">(</span><span class="s">&#34;DiffuseMap&#34;</span><span class="o">,</span> <span class="n">assetManager</span><span class="o">.</span><span class="na">loadTexture</span><span class="o">(</span><span class="s">&#34;assets/interface/mucha-window.png&#34;</span><span class="o">));</span>&#10;		<span class="n">material</span><span class="o">.</span><span class="na">getAdditionalRenderState</span><span class="o">().</span><span class="na">setBlendMode</span><span class="o">(</span><span class="n">BlendMode</span><span class="o">.</span><span class="na">Alpha</span><span class="o">);</span>&#10;		&#10;		<span class="n">Geometry</span> <span class="n">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Geometry</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">box</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setMaterial</span><span class="o">(</span><span class="n">material</span><span class="o">);</span>&#10;		<span class="n">geometry</span><span class="o">.</span><span class="na">setQueueBucket</span><span class="o">(</span><span class="n">Bucket</span><span class="o">.</span><span class="na">Transparent</span><span class="o">);</span>&#10;		&#10;		<span class="k">return</span> <span class="n">geometry</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">initializeLight</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">DirectionalLight</span> <span class="n">sun</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DirectionalLight</span><span class="o">();</span>&#10;		<span class="n">sun</span><span class="o">.</span><span class="na">setDirection</span><span class="o">(</span><span class="k">new</span> <span class="n">Vector3f</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">-</span><span class="n">2</span><span class="o">));</span>&#10;		<span class="n">sun</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">ColorRGBA</span><span class="o">.</span><span class="na">White</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">addLight</span><span class="o">(</span><span class="n">sun</span><span class="o">);</span>&#10;&#10;		<span class="n">AmbientLight</span> <span class="n">ambient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AmbientLight</span><span class="o">();</span>&#10;		<span class="n">ambient</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">ColorRGBA</span><span class="o">.</span><span class="na">White</span><span class="o">);</span>&#10;		<span class="n">rootNode</span><span class="o">.</span><span class="na">addLight</span><span class="o">(</span><span class="n">ambient</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Materiales.java</span>
    </div>
</div>
<p>Se pueden crear objetos con texturas transparentes, efectos de luz, <em>ray casting</em>, sistemas de partículas con las que simular fuego, chispas, polvo, establecer animaciones a objetos como cuando un personaje está descansando, terrenos, paisajes, aplicar efectos simulando la física del mundo real, sonido ambiental y posicional y más cosas. En las siguientes imágenes se pueden ver algunos ejemplos de las anteriores posibilidades (la tasa de <em>fps</em> normal es de 60, al tomar las capturas baja).</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/cubo_hu40168a156f4b585e07dc1f1ccb224b45_10822_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="¡Hola mundo!"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/cubo_hu40168a156f4b585e07dc1f1ccb224b45_10822_300x200_fit_box_3.png" width="248" height="200" alt="¡Hola mundo!" title="¡Hola mundo!"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/cubos_hu88f586269f44544d23921fc8f9205b31_41570_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Texturas y materiales"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/cubos_hu88f586269f44544d23921fc8f9205b31_41570_300x200_fit_box_3.png" width="248" height="200" alt="Texturas y materiales" title="Texturas y materiales"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/particulas-fuego_hu2621290be09c287ae7b2b1b9aad5c13a_54988_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Sistemas de partículas, fuego"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/particulas-fuego_hu2621290be09c287ae7b2b1b9aad5c13a_54988_300x200_fit_box_3.png" width="248" height="200" alt="Sistemas de partículas, fuego" title="Sistemas de partículas, fuego"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/agua_hu35c342832163dc11f5dfea575b2d79cf_293219_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Agua"><img src="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/images/agua_hu35c342832163dc11f5dfea575b2d79cf_293219_300x200_fit_box_3.png" width="248" height="200" alt="Agua" title="Agua"  class="lozad "></a></p>
</figure>
</div>
<p>Un videojuego se compone de múltiples recursos como imágenes, modelos 3D, música, <em>sprites</em>, texturas, fuentes de texto, sonidos, iconos&hellip; en la página <a href="http://opengameart.org">Open Game Art</a> podemos encontrar todo este tipo de material sin necesidad de tener que crearlo desde la nada.</p>
<p>jMonkeyEngine ofrece un entorno de desarrollo (IDE) basado <a href="https://netbeans.apache.org/">NetBeans</a>. Descargando el paquete de jMonkeyEngine y copiando las librerías .jar los programas se puede ejecutar perfectamente independientemente del IDE y desarrollar con <a href="https://eclipse.org">eclipse</a> y usar la <a href="https://gradle.org/">herramienta de construcción gradle</a>.</p>
<p>Para instalar jMonkeyEngine debemos <a href="http://jmonkeyengine.org/downloads/">descargar el SDK</a> adecuado para la plataforma que usemos ya sea Windows, Linux o Macintosh. En el caso de Linux es un archivo .sh que deberemos ejecutar (dando permisos de ejecución si es necesario), seguimos las instrucciones y seleccionamos el directorio de instalación del SDK. En <em>jmonkeyplatform/libs</em> de la carpeta de instalación encontramos los archivos .jar que deberemos usar en el IDE o en los programas de los ejemplos.</p>
<p>El <a href="https://amzn.to/2ZRNc38">libro jMonkeyEngine 3.0 Beginners Guide</a> me ha resultado muy interesante como punto de introducción a la programación gráfica 3D con Java, pero también si realmente nos interesa la programación de videojuegos es muy recomendable leer el material ofrecido en el <a href="http://www.cedv.es/">Curso de Experto en Desarrollo de Videojuegos</a>, un libro de una extensión de más de 1100 páginas de muy buena calidad, en español y descargables gratuitamente. En la <a href="http://wiki.jmonkeyengine.org/doku.php"><em>wiki</em> de jMonkeyEngine</a> se pueden encontrar <a href="http://wiki.jmonkeyengine.org/doku.php/jme3#tutorials_for_beginners">numerosos tutoriales para principiantes</a>, también numerosos artículos de nivel más avanzado y el <a href="https://javadoc.jmonkeyengine.org/">javadoc de la API</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1849516464&amp;linkId=56dfb3e4672ccdf48e706b39693b3b55" title="Amazon" class="lozad"></iframe>
</div>
<p>Otras librerías como <a href="http://slick.ninjacave.com/">Slick2D</a> permiten hacer videojuegos en 2D como serían los juegos de plataformas, más o menos lo que permite jMonkeyEngine en el 3D aplicado a 2D también usando como lenguaje Java. Sin duda los videojuegos han sido el motivo en parte de que muchos hoy seamos programadores e informáticos aunque en nuestro trabajo nos dediquemos a otro tipo de aplicaciones y entornos.</p>
<p>Que, ¿aún crees que en Java no se pueden hacer juegos que no tienen que envidiar a muchos otros?</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://jmonkeyengine.org/">jMonkeyEngine</a></li>
<li><a href="http://www.cedv.es./">Curso Experto Desarrollo Videojuegos</a></li>
<li><a href="https://amzn.to/2QsiP0q">Libro jMonkeyEngine 3.0 Beginners Guide</a></li>
<li><a href="http://slick.ninjacave.com/">Slick2D</a></li>
<li><a href="https://libgdx.badlogicgames.com/">libGDX</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/04/escribir-en-varios-writer-a-la-vez/</id>
        <title>Escribir en varios «Writer» a la vez</title>
        <updated>2015-04-30T20:00:47+02:00</updated>
        <published>2015-04-30T20:00:47+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/04/escribir-en-varios-writer-a-la-vez/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Hace un tiempo tuve necesidad de generar cierto contenido sobre varios writers, la necesidad en concreto era generar un archivo xml en disco y al mismo tiempo el mismo contenido para un correo electrónico. Para no escribir lo mismo en dos <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Writer.html">Writer</a> diferentes la solución fue crear un writer y este fuese el que escribiese el contenido que se le enviaba sobre varios writers. En la API de Java no hay una clase específica que haga esto pero es muy sencillo hacer una implementación que lo haga, esto va a ser lo que explicaré en el siguiente artículo.</p>
<p>Para hacer que el contenido de un writer se escriba a varios deberemos extender la clase Writer de esta manera su uso será como la de cualquier otro Writer. Lo especial de la implementación del writer es que su misión será realizar la misma operación que se haga sobre él sobre los writers que en este caso se pasan como parámetros en el constructor en forma de <em>varargs</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.writer</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.Writer</span><span class="o">;</span>&#10;&#10;<span class="kd">class</span> <span class="nc">MultipleWriter</span> <span class="kd">extends</span> <span class="n">Writer</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Writer</span><span class="o">[]</span> <span class="n">writers</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">MultipleWriter</span><span class="o">(</span><span class="n">Writer</span><span class="o">...</span> <span class="n">writers</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">writers</span> <span class="o">=</span> <span class="n">writers</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Writer</span> <span class="nf">append</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Writer</span> <span class="nf">append</span><span class="o">(</span><span class="kd">final</span> <span class="n">CharSequence</span> <span class="n">csq</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">csq</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Writer</span> <span class="nf">append</span><span class="o">(</span><span class="kd">final</span> <span class="n">CharSequence</span> <span class="n">csq</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">csq</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">cbuf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cbuf</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">cbuf</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cbuf</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">doWriters</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Writer</span> <span class="n">w</span> <span class="o">:</span> <span class="n">writers</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">command</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MultipleWriter-1.java</span>
    </div>
</div>
<p>El bucle <em>for</em> sobre cada uno de los <em>Writer</em> está encapsulado en el método <em>doWriters</em>, el objeto <em>Command</em> es que realmente hace la escritura en el writer usando el método <em>write</em> que se llamó sobre la clase <em>MultipleWriter</em>. A falta de las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">funciones lambda hasta Java 8</a> se usa el objeto <em>Command</em> y el método doWriters_, por contra se crea por cada método _writer_ invocado se crea una instancia de la clase Command.</p>
<p>Con <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">closures y las novedades de Java 8 en la API</a> no sería necesario usar una clase <em>Command</em>, el código es más sencillo, breve y más legible.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.writer</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.Writer</span><span class="o">;</span>&#10;&#10;<span class="kd">class</span> <span class="nc">MultipleWriter</span> <span class="kd">extends</span> <span class="n">Writer</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Writer</span><span class="o">[]</span> <span class="n">writers</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">MultipleWriter</span><span class="o">(</span><span class="n">Writer</span><span class="o">...</span> <span class="n">writers</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">writers</span> <span class="o">=</span> <span class="n">writers</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Writer</span> <span class="nf">append</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Writer</span> <span class="nf">append</span><span class="o">(</span><span class="kd">final</span> <span class="n">CharSequence</span> <span class="n">csq</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">csq</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Writer</span> <span class="nf">append</span><span class="o">(</span><span class="kd">final</span> <span class="n">CharSequence</span> <span class="n">csq</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">csq</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">cbuf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cbuf</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">cbuf</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cbuf</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doWriters</span><span class="o">(</span><span class="n">writer</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;   &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">doWriters</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Writer</span> <span class="n">w</span> <span class="o">:</span> <span class="n">writers</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">command</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MultipleWriter-2.java</span>
    </div>
</div>
<p>Independiente de la implementación con Java 7 o con a Java 8 el uso sería el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">Writer</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultipleWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">),</span> <span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;¡Hola mundo!\n&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">w</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/04/escribir-en-varios-writer-a-la-vez/images/multiplewriter-consola_hu2eda3dd53158254d2eab39f6bfce9dba_20797_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Salida en la consola"><img src="https://picodotdev.github.io/blog-bitix/2015/04/escribir-en-varios-writer-a-la-vez/images/multiplewriter-consola_hu2eda3dd53158254d2eab39f6bfce9dba_20797_300x200_fit_box_3.png" width="300" height="101" alt="Salida en la consola" title="Salida en la consola"  class="lozad "></a></p>
</figure>
</div>
<p>Con <a href="https://www.groovy-lang.org/">Groovy</a> además de las <em>closures</em> no será necesario que declararemos de forma explícita el lanzamiento de las excepciones sin embargo al usarlo perderíamos la ayuda que ofrece el compilador.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/java/">Otros artículos sobre Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/</id>
        <title>Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas</title>
        <updated>2019-10-02T21:00:00+02:00</updated>
        <published>2015-04-10T18:55:04+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-shiro.png" width="300" height="106" alt="Apache Shiro" title="Apache Shiro"  class=""></p>
</div>
<p>Para cada servicio deberíamos emplear una contraseña de una longitud de al menos 8 caracteres que incluya letras en minúscula, mayúscula, números y símbolos, una herramienta que podemos utilizar para generar contraseñas más seguras con los criterios que indiquemos es <a href="https://strongpasswordgenerator.com/">Strong Password Generator</a>. Sin embargo, recordar cada una de estas contraseñas es muy difícil de modo que es habitual que utilicemos la misma contraseña para varios o todos los servicios y no empleando todos los criterios anteriores o usar una herramienta con la que <a href="https://picodotdev.github.io/blog-bitix/2016/11/guardar-contrasenas-de-forma-segura-con-keepassxc/">Guardar contraseñas de forma segura con KeePassXC</a>. Por otro lado, los desarrolladores no deberíamos guardar en la base de datos las contraseñas que nos entregan los usuarios en texto plano, para evitar guardalas en texto plano hace un tiempo se utilizaba únicamente una función de <em>hashing</em> unidireccional como MD5 o SHA, de este modo si la base de datos fuese comprometida en teoría no podrían conocer la contraseña original. En este artículo comentaré que aún guardando las contraseñas con una función de <em>hashing</em> no es suficiente para hacerlas seguras y comentaré una implementación con <a href="https://shiro.apache.org/">Apache Shiro</a> de una de las ideas propuestas, también con <a href="https://spring.io/projects/spring-security">Spring Security</a> es posible.</p>
<h3 id="algo-de-teoría-y-algunas-explicaciones">Algo de teoría y algunas explicaciones</h3>
<p>Aunque guardemos las contraseñas con MD5 o alguna variante de SHA hoy en día no es suficiente para que en caso de que alguien obtenga los <em>hashes</em> de las contraseñas de la base de datos pueda averiguarlas o dar con una que genere el mismo <em>hash</em>, usando estas funciones se pueden encontrar colisiones en un tiempo razonable y por tanto ya no se consideran seguras. Dada la computación actual de los procesadores y las tarjetas gráficas una contraseña débil puede romperse usando un <a href="https://es.wikipedia.org/wiki/Ataque_de_fuerza_bruta">ataque de fuerza bruta</a> y quizá antes con un <a href="https://es.wikipedia.org/wiki/Ataque_de_diccionario">ataque de diccionario</a> que pruebe las más comunes. Muchos usuarios no tienen contraseñas largas ni utilizan letras en minúscula, mayúscula, números y símbolos, muchos usuarios utilizan contraseñas sencillas para ser recordadas más fácilmente, y aún <em>hasheando</em> las contraseñas pueden ser averiguadas. También se pueden usar <a href="https://es.wikipedia.org/wiki/Tabla_arco%C3%ADris">tablas arcoiris</a> o <em>rainbow tables</em> con los <em>hashes</em> precalculados de las contraseñas de un diccionario con lo que el tiempo empleado para romper una puede requerir poco tiempo de computación.</p>
<p>También hay que tener en cuenta que muchos usuarios usan la misma contraseña para múltiples servicios por lo que basta que alguien obtenga la contraseña original de un servicio y podrá acceder a otros más interesantes para alguien con malas intenciones por mucha seguridad que tenga esos otros servicios, este es uno de los motivos de la autenticación en dos pasos (que emplea algo que sé, la contraseña, y algo que tengo, como el móvil) y la recomendación de usar una contraseña diferente para cada servicio. Las contraseñas por si solas tienen la seguridad más baja de los diferentes servicios donde se usen.</p>
<p>Con <em>Salted Password Hashing</em> el uso de <em>rainbow tables</em> que aceleren el ataque no serían posibles por la entropía añadida por los <em>salt</em>. Aún así conociendo el <em>salt</em> y la función de <em>hash</em> empleada seguiría siendo posible un ataque de fuerza bruta y de diccionario. Con <em>Salted Password Hashing</em> se usa en la función de <em>hash</em> y un dato variable denominado <em>salt</em> que añade suficiente entropía y es diferente para cada contraseña, en la base de datos se guarda el resultado de la función de <em>hash</em> junto con el <em>salt</em>, esto es, el resultado de SHA-512(contraseña + <em>salt</em>) y también el <em>salt</em>.</p>
<div class="media">
<figure>
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="127" height="218" alt="Java" title="Java"  class="lozad "></p>
</figure>
</div>
<h3 id="ejemplo-de-_salted-password-hashing_-usando-apache-shiro">Ejemplo de <em>Salted Password Hashing</em> usando Apache Shiro</h3>
<p>Antes de comentar alguna opción más que dificulte los ataques de fuerza bruta o de diccionario veamos como implementar <em>Salted Password Hashing</em> empleando Apache Shiro como librería de autenticación y autorización para los usuarios. El ejemplo será simple sin guardar los datos en una base de datos pero suficiente para mostrar que se debe añadir al proyecto para que Shiro compruebe las contraseñas usando una función de <em>hash</em> y un <em>salt</em>. Partiré de un ejemplo que hice para el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a> sobre el desarrollo de aplicaciones web con el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a>. Básicamente deberemos crear un nuevo <em>Realm</em> que devuelva los datos del usuario, el <em>hash</em> y el <em>salt</em>. Una implementación suficiente para el ejemplo sería la siguiente, la parte importante está en el método <em>doGetAuthenticationInfo</em>, las clases <em>SimpleAuthenticationInfo</em> y <em>HashedCredentialsMatcher</em> y en la inicialización <em>static</em> de la clase:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.misc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AccountException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AuthenticationException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AuthenticationInfo</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AuthenticationToken</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.ExpiredCredentialsException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.LockedAccountException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.SimpleAuthenticationInfo</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.UsernamePasswordToken</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authz.AuthorizationException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authz.AuthorizationInfo</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.authz.SimpleAuthorizationInfo</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.cache.MemoryConstrainedCacheManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.crypto.SecureRandomNumberGenerator</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.crypto.hash.Sha512Hash</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.realm.AuthorizingRealm</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.subject.PrincipalCollection</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.util.ByteSource</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.shiro.util.SimpleByteSource</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Realm</span> <span class="kd">extends</span> <span class="n">AuthorizingRealm</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">users</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">permissions</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Para hacer más costoso el cálculo del hash y dificultar un ataque de fuerza bruta&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">HASH_ITERATIONS</span> <span class="o">=</span> <span class="n">5_000_000</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Generar una contraseña de clave «password», con SHA-512 y con «salt» aleatorio.&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ByteSource</span> <span class="n">saltSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecureRandomNumberGenerator</span><span class="o">().</span><span class="na">nextBytes</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">byte</span><span class="o">[]</span> <span class="n">salt</span> <span class="o">=</span> <span class="n">saltSource</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Sha512Hash</span> <span class="n">hash</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sha512Hash</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">,</span> <span class="n">saltSource</span><span class="o">,</span> <span class="n">HASH_ITERATIONS</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">hash</span><span class="o">.</span><span class="na">toHex</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Contraseña codificada en Base64&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//String password = hash.toBase64();&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Permissions (role, permissions)&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">permissions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">permissions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;cuenta:reset&#34;</span> <span class="o">})));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Roles&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">roles</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Usuario (property, value)&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="s">&#34;root&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;salt&#34;</span><span class="o">,</span> <span class="n">salt</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;locked&#34;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;expired&#34;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;roles&#34;</span><span class="o">,</span> <span class="n">roles</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Usuarios&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">users</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Realm</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">super</span><span class="o">(</span><span class="k">new</span> <span class="n">MemoryConstrainedCacheManager</span><span class="o">());</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HashedCredentialsMatcher</span> <span class="n">cm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashedCredentialsMatcher</span><span class="o">(</span><span class="n">Sha512Hash</span><span class="o">.</span><span class="na">ALGORITHM_NAME</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">cm</span><span class="o">.</span><span class="na">setHashIterations</span><span class="o">(</span><span class="n">HASH_ITERATIONS</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//cm.setStoredCredentialsHexEncoded(false);&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">setName</span><span class="o">(</span><span class="s">&#34;local&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">setAuthenticationTokenClass</span><span class="o">(</span><span class="n">UsernamePasswordToken</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">setCredentialsMatcher</span><span class="o">(</span><span class="n">cm</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Proporciona la autenticación de los usuarios.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="n">AuthenticationInfo</span> <span class="nf">doGetAuthenticationInfo</span><span class="o">(</span><span class="n">AuthenticationToken</span> <span class="n">token</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">UsernamePasswordToken</span> <span class="n">atoken</span> <span class="o">=</span> <span class="o">(</span><span class="n">UsernamePasswordToken</span><span class="o">)</span> <span class="n">token</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">atoken</span><span class="o">.</span><span class="na">getUsername</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">username</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">AccountException</span><span class="o">(</span><span class="s">&#34;Null usernames are not allowed by this realm.&#34;</span><span class="o">);</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="n">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">user</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">byte</span><span class="o">[]</span> <span class="n">salt</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span> <span class="o">[])</span> <span class="n">user</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;salt&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">boolean</span> <span class="n">locked</span> <span class="o">=</span> <span class="o">(</span><span class="kt">boolean</span><span class="o">)</span> <span class="n">user</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;locked&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">boolean</span> <span class="n">expired</span> <span class="o">=</span> <span class="o">(</span><span class="kt">boolean</span><span class="o">)</span> <span class="n">user</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;expired&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">locked</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">LockedAccountException</span><span class="o">(</span><span class="s">&#34;Account [&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&#34;] is locked.&#34;</span><span class="o">);</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">expired</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ExpiredCredentialsException</span><span class="o">(</span><span class="s">&#34;The credentials for account [&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&#34;] are expired&#34;</span><span class="o">);</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">SimpleAuthenticationInfo</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="k">new</span> <span class="n">SimpleByteSource</span><span class="o">(</span><span class="n">salt</span><span class="o">),</span> <span class="n">getName</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Proporciona la autorización de los usuarios.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="n">AuthorizationInfo</span> <span class="nf">doGetAuthorizationInfo</span><span class="o">(</span><span class="n">PrincipalCollection</span> <span class="n">principals</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">principals</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">&#34;PrincipalCollection was null, which should not happen&#34;</span><span class="o">);</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">principals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">principals</span><span class="o">.</span><span class="na">fromRealm</span><span class="o">(</span><span class="n">getName</span><span class="o">()).</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Obtener el usuario&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">principals</span><span class="o">.</span><span class="na">fromRealm</span><span class="o">(</span><span class="n">getName</span><span class="o">()).</span><span class="na">iterator</span><span class="o">().</span><span class="na">next</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">username</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="n">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Obtener los roles&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span> <span class="o">=</span> <span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="n">user</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;roles&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Obtener los permisos de los roles&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">role</span> <span class="o">:</span> <span class="n">roles</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">p</span><span class="o">.</span><span class="na">addAll</span><span class="o">((</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="n">permissions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">role</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> &#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Devolver el objeto de autorización&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SimpleAuthorizationInfo</span> <span class="n">ai</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleAuthorizationInfo</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ai</span><span class="o">.</span><span class="na">setRoles</span><span class="o">(</span><span class="n">roles</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ai</span><span class="o">.</span><span class="na">setStringPermissions</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">ai</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">findByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Realm.java</span>
    </div>
</div>
<p>Las contraseñas <em>hasheadas</em> tendrán la siguiente forma, podemos guardarlas codificadas en formato hexadecimal o en formato Base64:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">Hex: 53a8b4b7eb9f5b8a0754916bcf2e11443149e8d0eb933624abf6feec4a8f43799bc177e0817a2a9df204d7c3597a379689f466f9b3bfe14b534c8d824ceeee22&#10;Base64: U6i0t+ufW4oHVJFrzy4RRDFJ6NDrkzYkq/b+7EqPQ3mbwXfggXoqnfIE18NZejeWifRm+bO/4UtTTI2CTO7uIg==&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>hashed-password.txt</span>
    </div>
</div>
<p>En el ejemplo tratándose de una aplicación web usando Apache Tapestry se debe modificar la configuración para que se utilice el nuevo <em>Realm</em> el antiguo guardaba las contraseñas en texto plano (<em>shiro-users.properties</em>).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="o">...</span>&#10;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeWebSecurityManager</span><span class="o">(</span><span class="n">Configuration</span><span class="o">&lt;</span><span class="n">Realm</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Realm básico&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//ExtendedPropertiesRealm realm = new ExtendedPropertiesRealm(&#34;classpath:shiro-users.properties&#34;);&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Realm con «salted password hashing» y «salt»&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Realm</span> <span class="n">realm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">es</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">blogspot</span><span class="o">.</span><span class="na">elblogdepicodev</span><span class="o">.</span><span class="na">plugintapestry</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Realm</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">realm</span><span class="o">);</span>&#10;<span class="o">}</span>&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule.java</span>
    </div>
</div>
<p>El cambio de <em>Realm</em> para el usuario no supone ninguna modificación y podrá seguir autenticandose con su misma contraseña. En el ejemplo con <em>root</em> como usuario y <em>password</em> como contraseña.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/images/formulario-inicio-sesion_hu975b41828809ab2e6b2d69e11258533c_38361_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Formulario de inicio de sesión"><img src="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/images/formulario-inicio-sesion_hu975b41828809ab2e6b2d69e11258533c_38361_300x200_fit_box_3.png" width="300" height="200" alt="Formulario de inicio de sesión" title="Formulario de inicio de sesión"  class="lozad "></a></p>
</figure>
</div>
<p>Este es todo el código que necesitamos para la implementación de contraseñas codificadas con una función de <em>hashing</em>, en este caso SHA-512, y un <em>salt</em>, no es mucho y además es bastante simple la implementación con Shiro y en este caso en una aplicación usando el <em>framework</em> Apache Tapestry. Estas pocas líneas de código pueden aumentar notablemente la seguridad de las contraseñas que guardamos en la base de datos. En el caso de que la base de datos se vea comprometida será más difícil para alguien con malas intenciones obtener las contraseñas originales.</p>
<p>El siguiente ejemplo de <a href="https://github.com/tynamo/tynamo-federatedaccounts/tree/master/tynamo-federatedaccounts-test/src/test/java/org/tynamo/security/federatedaccounts/testapp/services"><em>federatedaccounts</em></a> puede verse como usar está técnica de <em>hash</em> con <em>salt</em> usando una base de datos. Básicamente es lo mismo pero accediendo a base de datos para obtener el <em>hash</em> de la contraseña y el <em>salt</em> con una entidad JPA.</p>
<h3 id="otras-opciones-que-añaden-más-seguridad">Otras opciones que añaden más seguridad</h3>
<p>Aún así como comento este ejemplo de <em>Salted Password Hashing</em> aunque dificulta un ataque aún es viable usar fuerza bruta o un diccionario. En el artículo <a href="https://stormpath.com/blog/password-security-right-way/">Password Security Right Way</a> comentan tres ideas más. Una es usar como función de <em>hash</em> <a href="http://bcrypt.sourceforge.net/">Bcrypt</a> no porque sea más segura que SHA-512 sino porque es más lenta y esto puede hacer inviable la fuerza bruta o de diccionario, hay <a href="https://issues.apache.org/jira/browse/SHIRO-290">planes de proporcionar Bcrypt en Apache Shiro</a> en futuras versiones. En el ejemplo como alternativa a bcrypt se usan varios millones de iteraciones de aplicación de la función para añadir tiempo de cálculo al <em>hash</em>, este tiempo adicional no es significativo en el cálculo de un <em>hash</em> pero en un ataque de fuerza bruta puede aumentarlo de forma tan significativa que sea inviable. La segunda idea interesante es además de <em>hashear</em> la clave es cifrarla de modo que aún habiendo sido comprometida la base de datos se necesite la clave privada de cifrado que también debería ser comprometida para producir el ataque. La tercera es partir el <em>hash</em> y distribuirlo entre varios sistemas de modo que sea necesario romperlos todos para obtener en <em>hash</em> original, lo que dificulta aún más un ataque.</p>
<p>Para implementar la segunda opción deberemos proporcionar implementaciones propias de <a href="https://shiro.apache.org/static/1.2.3/apidocs/org/apache/shiro/authc/credential/CredentialsMatcher.html">CredentialsMatcher</a> y de <a href="https://shiro.apache.org/static/1.2.3/apidocs/org/apache/shiro/crypto/hash/SimpleHash.html">SimpleHash</a>, quizá esto sea tema para otro artículo.</p>
<h3 id="código-fuente-del-ejemplo">Código fuente del ejemplo</h3>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">código fuente completo del ejemplo</a> está alojado en un repositorio de GitHub, es completamente funcional y puedes probarlo en tu equipo. Una vez descargado el siguiente comando e introduciendo en el navegador <em>http://localhost:8080/PlugInTapestry</em>, en la página que se muestra hay un botón para iniciar sesión:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew run&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/images/iniciar-sesion_hu0100868b30eda07619d541fa8f0c283a_4498_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Botón de inicio de sesión"><img src="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/images/iniciar-sesion_hu0100868b30eda07619d541fa8f0c283a_4498_300x200_fit_box_3.png" width="300" height="33" alt="Botón de inicio de sesión" title="Botón de inicio de sesión"  class="lozad "></a></p>
</figure>
</div>
<h3 id="nota-final">Nota final</h3>
<p>En este artículo recomiendo leer los interesantes enlaces del apartado de referencia del final, de ellos los siguientes dos son bastante completos <a href="https://stormpath.com/blog/password-security-right-way/">Password Security the Right Way</a> y <a href="https://crackstation.net/hashing-security.htm">The RIGHT Way: How to Hash Properly</a> aunque todos merecen el tiempo dedicado a una lectura detenida. Para terminar mucho de esto es fútil si se permiten contraseñas sencillas por lo que exigir contraseñas con cierta fortaleza de la forma comentada al principio también es necesario si la seguridad de la aplicación es un requisito importante.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://stormpath.com/blog/password-security-right-way/">Password Security the Right Way</a></li>
<li><a href="http://codahale.com/how-to-safely-store-a-password/">How To Safely Store A Password</a></li>
<li><a href="https://stormpath.com/product/password_security/">Password Security with Stormpath</a></li>
<li><a href="https://stormpath.com/blog/strong-password-hashing-apache-shiro/">Strong Password Hashing With Apache Shiro</a></li>
<li><a href="https://crackstation.net/hashing-security.htm#properhashing">The RIGHT Way: How to Hash Properly</a></li>
<li><a href="http://shiro.apache.org/realm.html#Realm-HashingandCorrespondingMatchers">Apache Shiro, Hashing and Corresponding Matchers</a></li>
<li><a href="http://shiro.apache.org/realm.html#Realm-HashingCredentials">Apache Shiro, Hashing Credentials</a>
http://tynamo.org/tapestry-security+guide<br></li>
<li><a href="http://strongpasswordgenerator.com/">Strong Password Generator</a></li>
<li><a href="http://www.arumeinformatica.es/blog/encriptar-y-guardar-contrasenas-en-base-de-datos/">Encriptar y guardar contraseñas en base de datos</a></li>
<li><a href="http://www.michael-pratt.com/blog/8/Seguridad-en-el-almacenamiento-de-PasswordsContrasenas/">Seguridad en el almacenamiento de Passwords/Contraseñas</a></li>
<li><a href="http://www.osi.es/ca/node/4522">Usuarios con contraseñas repetidas: ciberdelincuentes felices</a></li>
<li><a href="http://www.elladodelmal.com/2015/03/un-hash-md5-en-la-password-no-susituye.html">Un HASH MD5 en la password no sustituye a SSL</a></li>
<li><a href="https://es.wikipedia.org/wiki/Ataque_de_fuerza_bruta">Ataque de fuerza bruta</a></li>
<li><a href="https://es.wikipedia.org/wiki/Ataque_de_diccionario">Ataque de diccionario</a></li>
<li><a href="https://es.wikipedia.org/wiki/Tabla_arco%C3%ADris">Tablas arcoiris o <em>rainbow tables</em></a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="seguridad"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos/</id>
        <title>Evitar iniciar varias veces la máquina virtual Java para procesos cortos</title>
        <updated>2015-04-03T22:22:51+02:00</updated>
        <published>2015-04-03T22:22:51+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Si en una aplicación o proyecto tenemos necesidad de ejecutar uno o varios procesos múltiples veces donde únicamente cambian los parámetros, de forma seguida y el tiempo de ejecución de esos procesos es corto probablemente quizá veamos que la mayor parte del tiempo empleado de los procesos sea empleado en iniciar la máquina virtual Java (JVM). Digo quizá porque usando <a href="https://www.ubuntu.com/">Ubuntu</a> en la <a href="https://aws.amazon.com/es/ec2/">nube de Amazon EC2</a> el tiempo de inicio era de varios segundos, sin embargo, en mi ordenador personal usando <a href="https://www.archlinux.org/">Arch Linux</a> y con un <a href="https://picodotdev.github.io/blog-bitix/2014/03/desempaquetado-y-analisis-samsung-840-evo-ssd-250-gb/">disco SSD de Samsung</a> los tiempos que obtengo son de unos pocos milisegundos, quizá la larga <a href="http://packages.ubuntu.com/trusty/openjdk-7-jdk">lista de dependencias del paquete de Java 7 en Ubuntu</a> (probablemente del paquete <a href="http://packages.ubuntu.com/trusty/openjdk-7-jre">openjdk-7-jre</a>) y ocupando considerablemente más megas en disco tenga algo que ver:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos/images/tiempo-inicio-jvm_hu292e4e2d233c36b085a0c0b7025c999a_23900_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Tiempo de inicio de la JVM"><img src="https://picodotdev.github.io/blog-bitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos/images/tiempo-inicio-jvm_hu292e4e2d233c36b085a0c0b7025c999a_23900_300x200_fit_box_3.png" width="300" height="193" alt="Tiempo de inicio de la JVM" title="Tiempo de inicio de la JVM"  class="lozad "></a></p>
</figure>
</div>
<p>Por ejemplo, supongamos que tenemos unos procesos que tienen que ejecutarse de forma regular cada cierto tiempo variando los parámetros que se indica en cada uno de ellos. La ejecución de los procesos podría ser:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v1 -p2 v2 -p3 v3&#10;$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v4 -p2 v5 -p3 v6&#10;$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v7 -p2 v8 -p3 v9&#10;$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v10 -p2 v11 -p3 v12&#10;$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v13 -p2 v14 -p3 v15&#10;$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v16 -p2 v17 -p3 v18</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-1.sh</span>
    </div>
</div>
<p>A continuación pondré una idea para esta situación, quizá no es algo que se de muy a menudo pero en una ocasión esto me ha servido para evitar que el tiempo de inicio de la JVM sea el mayor tiempo empleado por los programas cortos. Consiste en iniciar una única máquina virtual para todos los procesos, con todos los parámetros de cada uno siendo el programa al iniciarse el que determine los parámetros de cada proceso individual. Por ejemplo, reescribiendo los ejemplos anteriores de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ java -Xms256m -Xmx1536m -classpath <span class="nv">$CLASSPATH</span> io.github.picodotdev.script.Main -p1 v1 -p2 v2 -p3 v3 sep <span class="se">\&#10;</span><span class="se"></span>&nbsp;&nbsp;&nbsp;&nbsp;-p1 v4 -p2 v5 -p3 v6 sep <span class="se">\&#10;</span><span class="se"></span>&nbsp;&nbsp;&nbsp;&nbsp;-p1 v7 -p2 v8 -p3 v9 sep <span class="se">\&#10;</span><span class="se"></span>&nbsp;&nbsp;&nbsp;&nbsp;-p1 v10 -p2 v11 -p3 v12 sep <span class="se">\&#10;</span><span class="se"></span>&nbsp;&nbsp;&nbsp;&nbsp;-p1 v13 -p2 v14 -p3 v15 sep <span class="se">\&#10;</span><span class="se"></span>&nbsp;&nbsp;&nbsp;&nbsp;-p1 v16 -p2 v17 -p3 v18</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-2.sh</span>
    </div>
</div>
<p>Esto iniciará una única máquina virtual en vez de 6 de forma que evitemos mucho del tiempo empleado en el inicio de las JVM, dependiendo del tiempo empleado por los procesos el tiempo total posiblemente se reduzca considerablemente. Pasando todos los parámetros al único proceso deberemos determinar que parámetros son de cada uno, para ello en el ejemplo se usa el parámetro <em>sep</em> y la <em>\</em> para poderlos ponerlos en varias lineas y la llamada sea más legible.</p>
<p>A continuación, el código para obtener los parámetros de cada proceso en el programa que inicia la única máquina virtual Java que se inicia.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SEPARADOR</span> <span class="o">=</span> <span class="s">&#34;sep&#34;</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Obtener los parámetros de cada &#34;proceso&#34;&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Nota: Arrancar la máquina virtual consume mucho tiempo, en algunos casos&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// un tiempo considerable comparado con el programa, para evitar arrancar una JVM&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// por cada proceso pasar una lista de argumentos en una sola ejecución.&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">actual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">arg</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">SEPARADOR</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">actual</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">actual</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">actual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">continue</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">actual</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arg</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">actual</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">actual</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Procesar cada proceso con sus parámetros&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">:</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">procesar</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>El programa Java con el que he medido el tiempo de inicio de la JVM es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Executed&#34;</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Test.java</span>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características sobre Java 8</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/java/">Más artículos sobre Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/</id>
        <title>Productividad y errores de compilación con Apache Tapestry</title>
        <updated>2015-12-11T22:30:00+01:00</updated>
        <published>2015-03-27T19:13:12+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Hace ya unos años comentaba <a href="https://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html">varios motivos para elegir Apache Tapestry</a> como <em>framework</em> para desarrollar una aplicación o página web. Entre las varias razones comentaba la productividad como característica destacada. Uno de los motivos de esta productividad era por la alta reutilización de código que se puede conseguir al usar los componentes múltiples veces en un mismo proyecto o en diferentes proyectos creando una librería de componentes como comento más detalladamente en el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PugIn Tapestry</a>. Otra parte de la productividad que comentaba más ligeramente era poder detectar de forma rápida errores de compilación no solo en el código Java a través del IDE sino porque con <a href="https://tapestry.apache.org/">Tapestry</a> es posible detectar errores de compilación en todas las plantillas tml que generan el html fácil y rápidamente con un botón sin tener que probar manualmente toda la funcionalidad. El tema de este artículo es mostrar más en detalle como detectar los errores de compilación en las vistas con este <em>framework</em>.</p>
<p>Por «errores de compilación» me refiero a ese tipo de errores que hace el código ni siquiera pueda ser interpretado correctamente por el computador, puede ser porque falta un <em>import</em>, un nombre de variable, propiedad o método mal puesto y que no existe&hellip; Poder detectar errores de compilación fácilmente en toda la aplicación es tremendamente útil y evitará que lleguen a producción con las consiguientes molestias para los usuarios y que posteriormente tengamos que dedicar tiempo a corregirlos cuando hemos perdido el contexto de las modificaciones hechas. También tendremos más seguridad de que no introducimos errores al hacer <em>refactorizaciones</em> importantes en el código. Los errores de compilación suelen ser fáciles y rápidos de corregir pero igualmente pueden impedir totalmente el uso de la aplicación. Cuando antes detectemos los errores más fácilmente los corregiremos y más productivos seremos ya que evitaremos corregirlos en un momento posterior en que costará más tiempo y esfuerzo, además de tener que realizar un nuevo despliegue con los cambios corregidos que dependiendo del tiempo que nos lleve puede suponer otro problema.</p>
<p>La errores de compilación no depende de escribir pocas lineas de código o ahorrarnos pulsar unas cuantas teclas, mi experiencia con los lenguajes dinámicos como <a href="https://www.groovy-lang.org/">Groovy</a> y el <em>framework</em> <a href="https://grails.org/">Grails</a> es que se producen ocasionales pero constantes errores de compilación en el código Groovy y en las plantillas de vistas gsp. En parte estos errores se pueden detectar teniendo teses pero la realidad es que en pocos proyectos hay una cobertura del 100% del código sobre todo para esas partes en las que «seguro no se dan errores» o poco relevantes que no merece la pena hacerlos, tener una cobertura completa del código exige tener muchos teses y datos de prueba que los ejerciten para pasar por todas las combinaciones de condiciones y bucles, para detectar errores en las vistas también deberíamos hacer teses y esto ya no suele ser tan habitual hacerlo. Y de forma similar esto se puede extender a algunas otras combinaciones de lenguajes y <em>frameworks</em> web por sus características similares. Si en el proyecto solo participa una persona o el proyecto es pequeño como suele ocurrir en las pruebas de concepto con las que solemos divertirnos el número de errores no debería ser muy elevado ya que el código estará bajo control por esa persona pero cuando en un proyecto real en el que participan unos cuantos programadores haciendo continuamente modificaciones el número de errores de compilación pueden producirse y se producirán en producción. También hay que tener mucho cuidado en <em>merges</em> con conflictos, reemplazos grandes o proyectos grandes con muchos archivos ya que en uno complicado es fácil dejar un código que produce errores de compilación, en un lenguaje dinámico más por no tener la ayuda del compilador que nos avise de los mismos, también hay que resistir la tentación de hacer cambios sin probarlos confiando en que no introduciremos errores.</p>
<p>Con Java y un IDE podremos detectar los errores de compilación que en un lenguaje dinámico solo observaremos en tiempo de ejecución. En Tapestry además podemos detectar los errores de compilación en las plantillas tml que generan el contenido html con un botón en la <a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/">página Dashboard</a> que ofrece incorporada Tapestry. Usando como ejemplo la aplicación que hice para el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a> vamos a ver como detectar estos errores. De forma intencionada introduciré un error en la página que muestra el detalle de un producto en el mantenimiento CRUD del ejemplo. En vez de <em>producto.nombre</em> introduciré el error de compilación poniendo <em>producto.nombra</em>, <em>nombra</em> es una propiedad que no existe en la clase <em>Producto</em>, error que solo detectaremos después de crear un producto en otros <em>frameworks</em> al ejercitar el código pero que en Tapestry detectaremos también desde la página Dashboard. Por otra parte dado que en Tapestry las plantillas tml son xml válido si una etiqueta está mal balanceada también nos avisará.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/producto_hu3a8ae85dbc88bee21e3ebedb7efe3c44_24896_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Edición de un producto"><img src="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/producto_hu3a8ae85dbc88bee21e3ebedb7efe3c44_24896_300x200_fit_box_3.png" width="248" height="200" alt="Edición de un producto" title="Edición de un producto"  class="lozad "></a></p>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">...&#10;<span class="p">&lt;</span><span class="nt">t:form</span> <span class="na">t:id</span><span class="o">=</span><span class="s">&#34;form&#34;</span> <span class="na">context</span><span class="o">=</span><span class="s">&#34;producto.id&#34;</span> <span class="na">validate</span><span class="o">=</span><span class="s">&#34;producto&#34;</span> <span class="na">clientValidation</span><span class="o">=</span><span class="s">&#34;none&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;well&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;form&#34;</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:errors</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;literal:alert alert-danger&#34;</span> <span class="p">/&gt;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:delegate</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;botonesEdicionBlock&#34;</span><span class="p">/&gt;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;margin-top: 10px;&#34;</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">t:label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;nombre&#34;</span> <span class="p">/&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;controls&#34;</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">input</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;textfield&#34;</span> <span class="na">t:id</span><span class="o">=</span><span class="s">&#34;nombre&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;producto.nombra&#34;</span> <span class="na">size</span><span class="o">=</span><span class="s">&#34;100&#34;</span> <span class="na">label</span><span class="o">=</span><span class="s">&#34;Nombre&#34;</span> <span class="p">/&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProductoAdmin.tml</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/error_hu478ad772e941c6035d5313d0f9e83830_51520_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Error de compilación al acceder a la página"><img src="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/error_hu478ad772e941c6035d5313d0f9e83830_51520_300x200_fit_box_3.png" width="300" height="186" alt="Error de compilación al acceder a la página" title="Error de compilación al acceder a la página"  class="lozad "></a></p>
</figure>
</div>
<p>Entrando a la <a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/">página Dashboard</a> y pulsando el botón <em>Load all pages</em> detectaremos el error sin necesidad de crear un producto. El error es el siguiente que nos indicará claramente en que página o componente se ha producido el error y una descripción bastante clara de la causa del problema.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/dashboard_hu7a4427f88e5298cd4e10bad032714427_36714_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Página dashboard"><img src="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/dashboard_hu7a4427f88e5298cd4e10bad032714427_36714_300x200_fit_box_3.png" width="248" height="200" alt="Página dashboard" title="Página dashboard"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/error-dashboard_hu40f3082a8609f6e84cb6a7f770f8b464_43382_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Página dashboard"><img src="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/images/error-dashboard_hu40f3082a8609f6e84cb6a7f770f8b464_43382_300x200_fit_box_3.png" width="262" height="200" alt="Página dashboard" title="Página dashboard"  class="lozad "></a></p>
</figure>
</div>
<p>En la imagen con el mensaje del error se puede ver de forma muy detallada cual es la causa, nos indica que el error está en la página <em>admin/Producto</em> y que la clase <em>es.com.blogspot.elblogdepicodev.plugintapestry.Producto</em> no tiene una propiedad llamada <em>nombra</em>, con este mensaje rápidamente nos damos cuenta del error de escritura que hemos cometido, corregirlo basta con sustituir <em>nombra</em> por <em>nombre</em> y pulsando de nuevo el botón <em>Load all pages</em> comprobamos que no hay más errores en esa misma página o ninguna otra de la aplicación.</p>
<p>Los errores en producción son un problema para los usuarios de la aplicación que no podrán trabajar normalmente y para la productividad de los desarrolladores ya que habremos perdido el contexto de los cambios causantes del fallo y nos costará más corregirlos. En caso de que se nos escape algún error la <a href="https://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html">página de excepción</a> nos dará información detallada y un mensaje que suele ser bastante descriptivo por si solo para descubrir donde está el <em>bug</em>. Otro aspecto que ayuda a la productividad y que ya incorporan varios <em>frameworks</em> es la recarga de clases, en Tapestry es posible para los artefactos del <em>framework</em> (páginas, componentes y servicios, recursos i18n, imágenes, estilos css), sí, incluido código Java, con lo que tenemos las ventajas de los lenguajes de <em>scripting</em> y la ayuda del compilador para detectar errores inmediatamente, lo mejor de ambas opciones sin sus debilidades.</p>
<p>Por supuesto, no evitaremos tener otro tipo de errores en la aplicación pero al menos los de compilación si podremos detectarlos, un error habitual que se puede seguir produciendo son los <em>NullPointerException (NPE)</em> pero que con las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">novedades introducidas en Java 8</a> y usando la <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">clase Optional</a> también deberíamos poder evitarlos. Para mi esto es una gran ayuda tanto para la productividad como para aún mejor evitar que lleguen errores a producción.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/">Página Dashboard de Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/tapestry/">Artículos sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/</id>
        <title>Introducción y ejemplo de API RPC con Apache Thrift</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-03-20T17:03:18+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Las aplicaciones están pasando de ser elementos aislados, grandes y monolíticos a ser desarrolladas como varios microservicios que colaboran entre si para en conjunto ofrecer la funcionalidad deseada. Aunque los microservicios presentan sus propias problemáticas resuelven algunas que poseen los sistemas monolíticos, entre algunas de sus características deseables están: mayor cohesión, menor acoplamiento, menor tamaño, mayor independencia de la tecnología usando la más adecuada en cada situación, más fácilmente reemplazables y despliegues más sencillos. También, la funcionalidad ofrecida por una aplicación puede quererse consumirse desde otra aplicación surgiendo de esta forma una API. Para ofrecer una API de una aplicación que pueda consumirse internamente, desde diferentes dispositivos o por terceras partes podemos usar <a href="https://es.wikipedia.org/wiki/Simple_Object_Access_Protocol">SOAP</a> o <a href="https://es.wikipedia.org/wiki/Representational_State_Transfer">REST</a> pero también han surgido algunas alternativas como <a href="https://thrift.apache.org/">Apache Thrift</a> supliendo algunas carencias de las anteriores aún basándose en el mismo concepto de llamada a código en una máquina remota (<em>Remote Procedure Call</em>, <a href="https://es.wikipedia.org/wiki/Remote_Procedure_Call">RPC</a>) ya visto en algunas opciones más antiguas como la misma SOAP, <a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation">RMI</a> o <a href="https://es.wikipedia.org/wiki/CORBA">CORBA</a>. En este artículo explicaré algunas diferencias entre SOAP, REST y Apache Thrift y mostraré un ejemplo sencillo con código de cómo empezar a usar Apache Thrift.</p>
<p>En los modelos RPC las llamadas a métodos se hacen a través de la red de forma transparente aunque tendremos que tener en cuenta que se utilizando un medio no fiable y con un rendimiento menor que llamadas en la misma máquina que notaremos más si se usan muchas llamadas. SOAP es una forma de RPC en la que se utiliza XML, algunas críticas a SOAP son que el XML utilizado para la comunicación es complejo y los servicios SOAP no son fácilmente consumibles desde por ejemplo un navegador. Por otra parte, las API REST tratan de solventar algunas de las deficiencias de SOAP como por ejemplo estar expuestas como recursos fácilmente accesibles utilizando los mismos mecanismos de la web y un formato para el intercambio de datos como <a href="https://json.org/">JSON</a> más sencillo y fácilmente consumible que XML. Sin embargo, algunas críticas que se le están haciendo REST son:</p>
<ul>
<li>APIs asíncronas: el modelo RESTful de petición y respuesta no se adapta bien a un modelo donde hay necesidad de enviar datos de forma asíncrona evitando sondear continuamente el servidor con peticiones que consumen recursos de red y de servidor. El modelo asíncrono envía nuevos datos únicamente cuando estos se hacen disponibles.</li>
<li>Orquestación y experiencia de la API: la granularidad de una API REST no se adapta correctamente a algunas situaciones haciendo necesario realizar varias peticiones HTTP lo que añade carga al cliente, servidor y la red. Orquestando APIs internas en el servidor y publicando una que esté adaptada a lo que necesitan los diferentes clientes supone un mejor rendimiento y simplicidad.</li>
<li>SDKs vs APIs: los usuarios de las APIs finalmente las consumen desde un lenguaje de alto nivel como <a href="https://es.wikipedia.org/wiki/JavaScript">JavaScript</a>, <a href="https://www.python.org/">Python</a>, <a href="https://www.ruby-lang.org/es/">Ruby</a>, <a href="https://www.oracle.com/technetwork/java/index.html">Java</a>, <a href="https://secure.php.net/">PHP</a>, <a href="https://dotnet.microsoft.com/">C#</a>, etc. con lo que los proveedores de las APIs necesitan ofrecer librerías cliente para algunos de estos lenguajes.</li>
<li>Protocolos binarios: los formatos binarios son más eficientes que el texto plano, lo que es útil en dispositivos limitados como los utilizados en el internet de las cosas (IoT).</li>
<li>Alta latencia: la sobrecarga que introduce el protocolo http en cada petición no lo hace adecuado en situaciones en que una baja latencia es necesaria para proporcionar un rendimiento óptimo.</li>
</ul>
<p>Por otra parte algunos otros puntos a favor de RPC son:</p>
<ul>
<li>Se tiene <em>type safety</em> y puede enviar excepciones que puede ser manejadas con la misma infraestructura ofrecida por el lenguaje de programación usado.</li>
<li>Si se hacen grandes volúmenes de llamadas y datos o hay requerimientos de ancho de banda se pueden usar protocolos de transporte más eficientes que HTTP.</li>
</ul>
<p>Apache Thrift es un <em>framework</em> para desarrollar servicios eficientes e interoperables en diferentes lenguajes. Los lenguajes soportados en cualquier combinación de cliente y servidor son C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml y Delphi y alguno más. Para generar el código del servidor o cliente lo primero que debemos hacer es definir la interfaz del servicio en la que estén incluidas las operaciones, parámetros y retornos junto con sus tipos. A partir de esta interfaz Apache Thrift generará el cliente o servidor en el lenguaje que deseemos. Una vez publicada una versión de la interfaz podremos modificarla sin provocar problemas de compatibilidad en los clientes como ocurría en RMI. Una desventaja de Apache Thrift es que obliga a usar esta tecnología para consumir los servicios, en este sentido una API REST es más agnóstica en la que basta con el protocolo HTTP y JSON. Se puede optar por un modelo en el que de cara al exterior se ofrece una API REST pero internamente se usan APIs RPC. <a href="https://grpc.io/">gRPC</a> es una opción muy parecida con una mayor aceptación que Apache Thrift.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/introduccion-a-grpc-y-ejemplo-con-java/">Introducción a gRPC y ejemplo con Java</a></li>
</ul>
<h3 id="ejemplo-con-apache-thrift">Ejemplo con Apache Thrift</h3>
<p>Primeramente, para usar Apache Thrift debemos instalar el paquete en la distribución que usemos. En Arch Linux con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ sudo pacman -S thrift&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pacman.sh</span>
    </div>
</div>
<p>A continuación deberemos definir la interfaz del servicio, supongamos que queremos hacer un servicio que nos ofrezca un mensaje de ping, la hora del servidor y la suma de dos números. La interfaz de este servicio usando el DSL es:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">namespace java io.github.picodotdev.blogbitix.thrift&#10;&#10;service Service {&#10;&#10;   string ping()&#10;   i32 add(1:i32 op1, 2:i32 op2)&#10;   string date()&#10;}&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Service.thrift</span>
    </div>
</div>
<p>Podemos elegir cualesquiera lenguajes deseemos de la amplia lista soportada anterior, en este caso usaré Java tanto para el servidor como para el cliente. Usando el comando <code>thrift</code> e indicando el lenguaje y la interfaz generamos los artefactos:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ thrift -out src/main/java --gen java src/main/thrift/Service.thrift&#10;$ gradlew trift&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;HolaMundoApacheThrift&#39;</span>&#10;<span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.1&#39;</span>&#10;&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;	<span class="n">compile</span> <span class="s1">&#39;org.apache.thrift:libthrift:0.9.2&#39;</span>&#10;	<span class="n">runtime</span> <span class="s1">&#39;org.apache.logging.log4j:log4j-core:2.1&#39;</span>&#10;	<span class="n">runtime</span> <span class="s1">&#39;org.apache.logging.log4j:log4j-slf4j-impl:2.1&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">wrapper</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Wrapper</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="n">gradleVersion</span> <span class="o">=</span> <span class="s1">&#39;2.3&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">thrift</span><span class="o">()</span> <span class="o">{</span>&#10;	<span class="n">exec</span> <span class="o">{</span>&#10;		<span class="n">commandLine</span> <span class="s1">&#39;thrift&#39;</span><span class="o">,</span> <span class="s1">&#39;-out&#39;</span><span class="o">,</span> <span class="s1">&#39;src/main/java&#39;</span><span class="o">,</span> <span class="s1">&#39;--gen&#39;</span><span class="o">,</span> <span class="s1">&#39;java&#39;</span><span class="o">,</span> <span class="s1">&#39;src/main/thrift/Service.thrift&#39;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Esto nos genera unas clases en Java y una interfaz que implementaremos para proporcionar la funcionalidad del servicio, en el caso del ejemplo la interfaz es <em>Service.Iface</em>. Para que los clientes puedan consumir este servicio debemos iniciar el servidor que no será más que un programa Java que escucha las peticiones de los clientes en un puerto.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.thrift</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.text.SimpleDateFormat</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.TException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.server.TServer</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.server.TServer.Args</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.server.TSimpleServer</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TServerSocket</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TServerTransport</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">try</span> <span class="o">{</span>&#10;			<span class="kd">final</span> <span class="n">Service</span><span class="o">.</span><span class="na">Processor</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">.</span><span class="na">Iface</span><span class="o">&gt;</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Service</span><span class="o">.</span><span class="na">Processor</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">.</span><span class="na">Iface</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">Server</span><span class="o">.</span><span class="na">ServiceImpl</span><span class="o">());</span>&#10;&#10;			<span class="n">Runnable</span> <span class="n">simple</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>&#10;				<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;					<span class="n">simple</span><span class="o">(</span><span class="n">processor</span><span class="o">);</span>&#10;				<span class="o">}</span>&#10;			<span class="o">};</span>&#10;&#10;			<span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">simple</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>&#10;		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simple</span><span class="o">(</span><span class="n">Service</span><span class="o">.</span><span class="na">Processor</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">.</span><span class="na">Iface</span><span class="o">&gt;</span> <span class="n">processor</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">try</span> <span class="o">{</span>&#10;			<span class="n">TServerTransport</span> <span class="n">serverTransport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TServerSocket</span><span class="o">(</span><span class="n">9090</span><span class="o">);</span>&#10;			<span class="n">TServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TSimpleServer</span><span class="o">(</span><span class="k">new</span> <span class="n">Args</span><span class="o">(</span><span class="n">serverTransport</span><span class="o">).</span><span class="na">processor</span><span class="o">(</span><span class="n">processor</span><span class="o">));</span>&#10;&#10;			<span class="c1">// Use this for a multithreaded server&#10;</span><span class="c1"></span>			<span class="c1">// TServer server = new TThreadPoolServer(new&#10;</span><span class="c1"></span>			<span class="c1">// TThreadPoolServer.Args(serverTransport).processor(processor));&#10;</span><span class="c1"></span>&#10;			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Starting the service server...&#34;</span><span class="o">);</span>&#10;			<span class="n">server</span><span class="o">.</span><span class="na">serve</span><span class="o">();</span>&#10;		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ServiceImpl</span> <span class="kd">implements</span> <span class="n">Service</span><span class="o">.</span><span class="na">Iface</span> <span class="o">{</span>&#10;&#10;		<span class="nd">@Override</span>&#10;		<span class="kd">public</span> <span class="n">String</span> <span class="nf">ping</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>&#10;			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Me han llamado ¡que ilusión! ^^&#34;</span><span class="o">);</span>&#10;			&#10;			<span class="k">return</span> <span class="s">&#34;¡Hola mundo!&#34;</span><span class="o">;</span>&#10;		<span class="o">}</span>&#10;&#10;		<span class="nd">@Override</span>&#10;		<span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">op1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">op2</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">op1</span> <span class="o">+</span> <span class="n">op2</span><span class="o">;</span>&#10;		<span class="o">}</span>&#10;&#10;		<span class="nd">@Override</span>&#10;		<span class="kd">public</span> <span class="n">String</span> <span class="nf">date</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&#34;dd-MM-yyyy HH:mm:ss Z&#34;</span><span class="o">).</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Server.java</span>
    </div>
</div>
<p>Una vez están los servicios disponibles podemos consumirlos con las siguientes siguientes líneas de código de una implementación de cliente, basta hacer uso de las clase <em>Service.Client</em> generada a partir de la interfaz del servicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.thrift</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.TException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.protocol.TBinaryProtocol</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.protocol.TProtocol</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TSocket</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TTransport</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">TTransport</span> <span class="n">transport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TSocket</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">,</span> <span class="n">9090</span><span class="o">);</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">transport</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>&#10;&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">TProtocol</span> <span class="n">protocol</span> <span class="o">=</span> <span class="k">new</span>  <span class="n">TBinaryProtocol</span><span class="o">(</span><span class="n">transport</span><span class="o">);</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">Service</span><span class="o">.</span><span class="na">Client</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Service</span><span class="o">.</span><span class="na">Client</span><span class="o">(</span><span class="n">protocol</span><span class="o">);</span>&#10;&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Ping: %s&#34;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">ping</span><span class="o">()));</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Add: %d&#34;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">4</span><span class="o">,</span> <span class="n">7</span><span class="o">)));</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Date: %s&#34;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">date</span><span class="o">()));</span>&#10;&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">transport</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> &#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Client.java</span>
    </div>
</div>
<p>Ejecutando el cliente y llamando a los métodos de la interfaz del servicio veremos en la terminal la siguiente salida:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/images/cliente_hua3c41a702180fba2dc1dce716ba62c61_30485_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Salida de consola del cliente"><img src="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/images/cliente_hua3c41a702180fba2dc1dce716ba62c61_30485_300x200_fit_box_3.png" width="300" height="92" alt="Salida de consola del cliente" title="Salida de consola del cliente"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/images/servidor_hua3854195931b45bf7de0c03e166234e2_29402_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Salida de consola del servidor"><img src="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/images/servidor_hua3854195931b45bf7de0c03e166234e2_29402_300x200_fit_box_3.png" width="300" height="93" alt="Salida de consola del servidor" title="Salida de consola del servidor"  class="lozad "></a></p>
</figure>
</div>
<p>Si te interesan las arquitecturas de aplicaciones con microservicios ya sea con API RPC o REST un libro muy interesante y recomendable es <a href="https://amzn.to/2Fm8ywj">Building Microservices</a>. Proporciona una visión detallada de los diferentes aspectos que deben tratar este tipo de aplicaciones.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491950358&amp;linkId=231228ef7b66c3a75e0547307191c3db" title="Amazon" class="lozad"></iframe>
</div>
<p>Apache Thrift no es la única herramienta para hacer llamadas RPC, una muy similar es <a href="https://grpc.io/">gRPC</a> de <a href="https://www.google.es/">Google</a> e igualmente interesante al hacer uso de HTTP/2 y Protocol Buffers.</p>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoThrift">código fuente completo del ejemplo</a> lo puedes encontrar en mi repositorio de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://www.programmableweb.com/news/rest-losing-its-flair-rest-api-alternatives/analysis/2013/12/19">Is REST losing its flair? REST API Alternatives</a></li>
<li><a href="http://www.quora.com/What-is-the-advantage-of-using-Thrift-as-opposed-to-exposing-an-HTTP-REST-API">What is the advantage of using Thrift, as opposed to exposing an HTTP REST API?</a></li>
<li><a href="http://willwarren.com/2012/01/24/creating-a-public-api-with-apache-thrift/">Creating a public API with Apache Thrift</a></li>
<li><a href="http://es.slideshare.net/IgorAnishchenko/pb-vs-thrift-vs-avro">Thrift vs Protocol Buffers vs Avro - Biased Comparison</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/</id>
        <title>Aplicación web Java autocontenida con Tomcat Embedded</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-03-14T10:32:20+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>La tendencia de las aplicaciones es que sean construidas como múltiples servicios pequeños que colaboran entre si en vez de consistir en una aplicación grande desplegada en un servidor de aplicaciones. La aparición de <a href="https://picodotdev.github.io/blog-bitix/2014/11/como-instalar-y-guia-de-inicio-basica-de-docker/">nuevas tecnologías como Docker</a> facilitan la construcción y despliegue de los microservicios. Los microservicios con su máxima de bajo acoplamiento y alta cohesión tratan de incluir todo lo necesario para funcionar evitando las dependencias de cualquier tipo de elemento fuera de su ámbito no incluyendo el uso de otros servicios. Con <a href="https://www.docker.com/">Docker</a> es posible desplegarlos en cualquier máquina que disponga del servicio, esto evita problemas de configuración al pasar la aplicación de un entorno de desarrollo a uno de producción ya que las características del entorno de desarrollo y el de producción pueden ser idénticos.</p>
<p>Los microservicios pueden ser autocontenidos de tal forma que incluyen todo lo necesario para prestar su servicio evitando por ejemplo sin depender de un servidor de aplicaciones en el que desplegar la aplicación que ha de ser instalado previamente, para ello pueden incluir un servidor embebido de <a href="https://tomcat.apache.org/">Tomcat</a>, de <a href="https://eclipse.org/jetty/">Jetty</a> o usando <a href="https://projects.spring.io/spring-boot/">Spring Boot</a>. Esto evita malos funcionamiento por diferencias en la configuración o de versiones de los servidores en cada uno de los entornos, además hace más fácil el despliegue en una nueva máquina siendo lo único necesario el microservicio, sin necesidad de disponer previamente un servidor externo. Por otra parte si usamos Docker para el microservicio evitamos que configurar la máquina física o virtual directamente, todo lo que necesite el microservicio estará en la imagen Docker, nuevamente evitamos problemas de configuración entre entornos.</p>
<p>Para hacer cualquier aplicación autocontenida sin necesidad de instalar el servidor de aplicaciones como entorno en el que desplegar la aplicación podemos usar Tomcat Embedded o mejor y con el mismo efecto <a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">usar Spring Boot con la posibilidad de usar Tomcat, Jetty o Undertow</a>, realmente Spring Boot usa las versiones embebibles del servidor que se use y además se encarga de inicializar el contenedor IoC de <a href="https://spring.io/">Spring</a>. En este caso usando Tomcat Embedded directamente disponiendo del archivo <em>.war</em> típico de una aplicación web en Java podemos desplegarlo en el servidor embebido, el inicio de la aplicación será como cualquier otra aplicación Java, con su método <em>public static void main</em>(String[] args), usando la API ofrecida por Tomcat podemos iniciar el servidor de forma programática y realizar el despliegue de la aplicación <em>.war</em>.</p>
<p>Para la demostración usaré la aplicación con los ejemplos que hice para el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PulgIn Tapestry</a> que trataba del el <em>framework</em> de desarrollo <a href="https://tapestry.apache.org/">Apache Tapestry</a>. Primeramente deberemos añadir al proyecto la dependencia de tomcat-embedded de forma que podamos importar las clases y paquetes de Tomcat a usar en la clase que iniciará la aplicación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;TomcatEmbedded&#39;</span>&#10;<span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.1&#39;</span>&#10;&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.tomcatEmbedded.Main&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-core:8.0.20&#39;</span><span class="o">)</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-logging-log4j:8.0.20&#39;</span><span class="o">)</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-jasper:8.0.20&#39;</span><span class="o">)</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;junit:junit:4.12&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">jar</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">manifest</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">attributes</span><span class="o">(</span><span class="s1">&#39;Main-Class&#39;</span><span class="o">:</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.tomcatEmbedded.Main&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">wrapper</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Wrapper</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="n">gradleVersion</span> <span class="o">=</span> <span class="s1">&#39;2.3&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">applicationDistribution</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="s1">&#39;tomcat/webapps/PlugInTapestry.war&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">into</span> <span class="s2">&#34;tomcat/webapps/&#34;</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Posteriormente crearemos una clase Java con su método main que inicie el servidor de aplicaciones embebido con la aplicación web desplegada en él, podemos indicar el puerto que queremos que escuche y las configuraciones que necesitemos tal como si lo configurásemos el archivo <em>server.xml</em> o <em>context.xml</em> pero usando código Java, usaremos la API ofrecida por las clases incluidas en las dependencias anteriores (<em>org.apache.catalina.startup.Tomcat</em>).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.tomcatEmbedded</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tomcat</span><span class="o">();</span>&#10;		<span class="n">tomcat</span><span class="o">.</span><span class="na">setBaseDir</span><span class="o">(</span><span class="s">&#34;tomcat&#34;</span><span class="o">);</span>&#10;		<span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">8080</span><span class="o">);</span>&#10;		&#10;		<span class="c1">// Para configurar el puerto seguro&#10;</span><span class="c1"></span>		<span class="c1">// http://www.copperykeenclaws.com/adding-an-https-connector-to-embedded-tomcat-7/&#10;</span><span class="c1"></span>		<span class="c1">// Connector httpsConnector = new Connector();&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setPort(443);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setSecure(true);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setScheme(&#34;https&#34;);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setAttribute(&#34;keyAlias&#34;, keyAlias);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setAttribute(&#34;keystorePass&#34;, password);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setAttribute(&#34;keystoreFile&#34;, keystorePath);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setAttribute(&#34;clientAuth&#34;, &#34;false&#34;);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setAttribute(&#34;sslProtocol&#34;, &#34;TLS&#34;);&#10;</span><span class="c1"></span>		<span class="c1">// httpsConnector.setAttribute(&#34;SSLEnabled&#34;, true);&#10;</span><span class="c1"></span>		<span class="c1">//&#10;</span><span class="c1"></span>		<span class="c1">// Tomcat tomcat = new Tomcat();&#10;</span><span class="c1"></span>		<span class="c1">// Service service = tomcat.getService();&#10;</span><span class="c1"></span>		<span class="c1">// service.addConnector(httpsConnector);&#10;</span><span class="c1"></span>		<span class="c1">//&#10;</span><span class="c1"></span>		<span class="c1">// Connector defaultConnector = tomcat.getConnector();&#10;</span><span class="c1"></span>		<span class="c1">// defaultConnector.setRedirectPort(443);&#10;</span><span class="c1"></span>&#10;		<span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span><span class="s">&#34;/PlugInTapestry&#34;</span><span class="o">,</span> <span class="s">&#34;tomcat/webapps/PlugInTapestry.war&#34;</span><span class="o">);</span>&#10;		<span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;		&#10;		<span class="c1">// Puerto para enviar el comando SHUTDOWN&#10;</span><span class="c1"></span>		<span class="c1">// telnet localhost 8005&#10;</span><span class="c1"></span>		<span class="c1">// SHUTDOWN&#10;</span><span class="c1"></span>		<span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">setPort</span><span class="o">(</span><span class="n">8005</span><span class="o">);</span>&#10;		<span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>Generamos el war de la aplicación que queremos desplegar embebida, e iniciamos la aplicación con la clase que contiene el método main con <a href="https://gradle.org/">Gradle</a> o desde la linea de comandos con java, necesitaremos descargar las librerías de Tomcat Embedded y en este ejemplo copiarlas al directorio <em>lib/</em> junto con la librería <em>TomcatEmbedded-0.1.jar</em> que contiene la clase <em>Main</em> construida con el comando <code>gradlew build</code>:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew build&#10;&#10;$ ./gradlew run&#10;$ java -classpath <span class="s2">&#34;lib/*&#34;</span> io.github.picodotdev.blogbitix.tomcatEmbedded.Main&#10;$ ./TomcatEmbedded</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>startup.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/images/tomcat-embedded-comando_hu2a81baecfac28003f8af03ed3ff8ec4f_100146_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Iniciando TomcatEmbedded"><img src="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/images/tomcat-embedded-comando_hu2a81baecfac28003f8af03ed3ff8ec4f_100146_300x200_fit_box_3.png" width="300" height="136" alt="Iniciando TomcatEmbedded" title="Iniciando TomcatEmbedded"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/images/tomcat-embedded-app_hubc1f47b076112f9a82b99ea685ef07eb_50649_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="TomcatEmbedded iniciado"><img src="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/images/tomcat-embedded-app_hubc1f47b076112f9a82b99ea685ef07eb_50649_300x200_fit_box_3.png" width="300" height="136" alt="TomcatEmbedded iniciado" title="TomcatEmbedded iniciado"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/images/app_hudef19aff312b1cc45068ef77244cbf2a_62966_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Aplicación web en TomcatEmbedded"><img src="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/images/app_hudef19aff312b1cc45068ef77244cbf2a_62966_300x200_fit_box_3.png" width="294" height="200" alt="Aplicación web en TomcatEmbedded" title="Aplicación web en TomcatEmbedded"  class="lozad "></a></p>
</figure>
</div>
<p>La tendencia actual es que las aplicaciones evolucionen hacia microservicios por varias características deseables que ofrecen como al ser más pequeñas las funcionalidades sean más manejables, sean reemplazables, posibilidad de usar la tecnología más adecuada según el servicio desde lenguaje de programación al sistema de persistencia (relacional o noSQL), facilidad de despliegue, &hellip;. Si te interesan los microservicios un libro muy interesante y recomendable es <a href="https://amzn.to/2MTStSv">Building Microservices</a>. Proporciona una visión detallada de los diferentes aspectos que deben tratar las aplicaciones construidas según esta arquitectura.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491950358&amp;linkId=ba7a81c43f55a67e1268c7b9969806b1" title="Amazon" class="lozad"></iframe>
</div>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/TomcatEmbedded">código fuente completo del ejemplo</a> y el <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/PlugInTapestry">código fuente de la aplicación web</a> usada los puedes encontrar en mi repositorio de GitHub. Finalmente he de decir que la aplicación usada aunque es un ejemplo no es simple (usa <a href="https://tapestry.apache.org/">Tapestry</a>, <a href="https://spring.io/">Spring</a>, <a href="https://hibernate.org/">Hibernate</a>, <a href="https://shiro.apache.org/">Shiro</a>, <a href="https://www.h2database.com/html/main.html">H2</a>) y a pesar de ello no he tenido ninguna excepción extraña que haya tenido que resolver, con esto quiero decir que usar Tomcat Embedded me ha resultado totalmente fiable.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">Aplicación Java autocontenida con Spring Boot</a></li>
<li><a href="https://es.wikipedia.org/wiki/Arquitectura_orientada_a_servicios">Arquitectura orientada a servicios</a></li>
<li><a href="http://blog.paralleluniverse.co/2014/05/01/modern-java/">Not Your Father’s Java: An Opinionated Guide to Modern Java Development, Part 1</a></li>
<li><a href="http://blog.paralleluniverse.co/2014/05/08/modern-java-pt2/">An Opinionated Guide to Modern Java, Part 2: Deployment, Monitoring &amp; Management, Profiling and Benchmarking</a></li>
<li><a href="http://blog.paralleluniverse.co/2014/05/15/modern-java-pt3/">An Opinionated Guide to Modern Java, Part 3: Web Development</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/</id>
        <title>Datos de sesión externalizados con Spring Session</title>
        <updated>2019-03-17T15:00:00+01:00</updated>
        <published>2015-03-07T09:05:06+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Por defecto los datos de la sesión de una aplicación web Java se guardan en el servidor de aplicaciones y en memoria, esto produce que al reiniciar el servidor por un despliegue los datos de la sesión se pierdan y provoque en los usuarios alguna molestia como tener que volver a iniciar sesión. En <a href="https://tomcat.apache.org/">Tomcat</a> existe la posibilidad de que los datos de las sesiones sean persistidas en disco con la opción <em>saveOnRestart</em> del <a href="https://tomcat.apache.org/tomcat-8.0-doc/config/manager.html">elemento de configuración <em>Manager</em></a> que evita que los datos de las sesiones se pierdan en los reinicios, al menos para los servicios formados por una única instancia. Para evitar que los usuarios perciban los reinicios o caídas del servidor hay varias soluciones algunas tratando de diferentes formas externalizar las sesiones del servidor de aplicaciones. Con estas soluciones se pueden hacer despliegues sin caídas, sin que las perciban los usuarios, siendo útil para hacer actualizaciones frecuentemente, continuos, y en cualquier momento cuando tengamos una nueva versión de la aplicación.</p>
<p>Las soluciones más comentadas son:</p>
<ul>
<li><em>Cluster</em> de servidores: para evitar las caídas podemos formar un <em>cluster</em> de máquinas de forma que si una se reinicia las peticiones sean atendidas por el resto de servidores del <em>cluster</em>. Añadiendo una poca configuración se puede formar un <a href="https://tomcat.apache.org/tomcat-8.0-doc/cluster-howto.html"><em>cluster</em> de servidores Tomcat</a>. Si el <em>cluster</em> está formado por unos pocos servidores esta solución es válida pero si el <em>cluster</em> es grande (¿media docena de máquinas?) el tráfico que se genera para sincronizar los datos de sesión en todas las máquinas puede ser significativo, momento en el cual se opta por otras soluciones.</li>
<li>Sesión en base de datos relacional: los datos de la sesión se pueden guardar en una base de datos relacional, al llegar una petición al servidor se recupera de la base de datos la sesión con una consulta y al finalizar la petición se lanza otra consulta de actualización. En las aplicaciones la base de datos suele ser un cuello de botella prefiriéndose guardar la sesión en otro servidor que no sea el servidor de base de datos para no generarle más carga.</li>
<li>Caché externa: en esta opción los datos se guardan en un servidor externo al servidor de aplicaciones de forma que todos los servidores del <em>cluster</em> las compartan pero no en la base de datos relacional, algunas opciones que se pueden utilizar son <a href="https://memcached.org/">memcached</a> o <a href="https://redis.io/">Redis</a> que almacenan los datos en memoria y son muy rápidas. Esta opción añade una pieza más a la infraestructura de la aplicación que hay que mantener. En este artículo pondré un ejemplo usando esta opción utilizando Spring Session y un servidor Redis.</li>
<li>Sesión en <em>cookie</em>: para no añadir una pieza más a la infraestructura del servidor se puede externalizar la sesión en el cliente mediante una <em>cookie</em>. Como la <em>cookie</em> es enviada por el navegador cliente en cada petición el servidor puede recuperar los datos de la sesión. Sin embargo, como los datos son guardados en el cliente los datos de la <em>cookie</em> han de ser cifrados y firmados digitalmente para evitar problemas de seguridad ante modificaciones de los datos. También deberemos evitar guardar muchos datos y tendremos cierta limitación para que la <em>cookie</em> no sea grande, el tamaño recomendado no exceder es 4096 bytes si lo hacemos puede que ocasionemos errores con el mensaje <em>400 bad request, request header or cookie too large</em> y consuma mucho ancho de banda, hay que tener en cuenta que las <em>cookies</em> son enviadas en cada petición al servidor origen no solo para las peticiones dinámicas sino también para los recursos estáticos como imágenes u hojas de estilos, si las <em>cookies</em> son grandes y el número de usuarios también el ancho de banda consumido por las <em>cookies</em> puede ser significativo, en estos últimos casos <a href="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/">empleando un CDN</a> puede aliviarse el tráfico generado. En la siguiente página están recogidos <a href="http://browsercookielimits.squawky.net/">los límites de las cookies para cada navegador y el número máximo por dominio</a>.</li>
</ul>
<p>Usando <a href="https://projects.spring.io/spring-session/">Spring Session</a> se puede externalizar los datos de la sesión en un servidor Redis usándolo como caché externa. Para demostrar y enseñar el código necesario he creado una pequeña aplicación web con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a>. El controlador no tiene nada especial, obtiene la sesión y guarda los datos enviados en un formulario en la sesión, luego esta transparentemente se serializa en Redis. Usando la anotación <em>@SpringBootApplication</em> con la autoconfiguración se activa la infraestructura necesaria en el contenedor de Spring para guardar los datos de la sesión en Redis incluida la conexión a Redis. Por supuesto hay que añadir las dependencias necesarias al proyecto entre ellas el cliente Java de Redis.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.springsession</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.view.JstlView</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.view.UrlBasedViewResolver</span><span class="o">;</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;io.github.picodotdev.springsession&#34;</span><span class="o">)</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.springsession</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpSession</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>&#10;&#10;<span class="nd">@Controller</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionController</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="s">&#34;index&#34;</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/attributes&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">post</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;attributeName&#34;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;attributeValue&#34;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="s">&#34;redirect:/&#34;</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>SessionController.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">redis</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">redis:alpine</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="m">6379</span><span class="p">:</span><span class="m">6379</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.springsession.Main&#39;</span>&#10;&#10;<span class="n">ext</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">versions</span> <span class="o">=</span> <span class="o">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nl">jedis:</span> <span class="s1">&#39;2.9.3&#39;</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nl">springBoot:</span> <span class="s1">&#39;2.1.3.RELEASE&#39;</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">]</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span> <span class="nf">platform</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-dependencies:$versions.springBoot&#34;</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-autoconfigure&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-web&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-thymeleaf&#34;</span><span class="o">)</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;	<span class="n">implementation</span><span class="o">(</span><span class="s2">&#34;org.springframework.session:spring-session-data-redis&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s2">&#34;redis.clients:jedis:$versions.jedis&#34;</span><span class="o">)</span>&#10;&#10;	<span class="n">compileOnly</span><span class="o">(</span><span class="s2">&#34;javax.servlet:javax.servlet-api:3.1.0&#34;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Descargado el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringSession">código fuente de la aplicación de ejemplo</a> y utilizando <a href="https://www.docker.com/">Docker</a> para iniciar el servidor Redis se puede iniciar la aplicación con el comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> misc/docker/springsession&#10;$ docker-compose up&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew run&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew.sh</span>
    </div>
</div>
<p>Lanzando una petición se puede ver como el Redis se guardan los datos de la sesión. Deteniendo la aplicación e iniciándolo de nuevo los datos de la sesión no se pierden al estar persistidos en Redis, el navegador envía la <em>cookie</em> de sesión que contiene únicamente su identificativo y la aplicación recupera los datos de Redis.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/images/dato-en-sesion_hu0839b0775e78a19dfcb5a52f4353fb88_44249_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Dato en sesión"><img src="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/images/dato-en-sesion_hu0839b0775e78a19dfcb5a52f4353fb88_44249_300x200_fit_box_3.png" width="300" height="179" alt="Dato en sesión" title="Dato en sesión"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/images/cookie-navegador_hud0ea2027767ce5ab8f801a1e8b923a1f_89090_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Cookie de sesión en el navegador"><img src="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/images/cookie-navegador_hud0ea2027767ce5ab8f801a1e8b923a1f_89090_300x200_fit_box_3.png" width="296" height="200" alt="Cookie de sesión en el navegador" title="Cookie de sesión en el navegador"  class="lozad "></a></p>
</figure>
</div>
<p>Examinando los datos en Redis se puede ver que se ha creado una clave con el mismo identificativo de la cookie de sesión, en la clave están guardados los valores serializados entre ellos el nombre del atributo y su valor y otros datos como la fecha de creación, el último acceso y el intervalo máximo de inactividad antes de la expiración.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/images/contenido-sesion-redis_hu05723d067fbf8f2492a5922df320d453_68304_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Contenido sesión en redis"><img src="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/images/contenido-sesion-redis_hu05723d067fbf8f2492a5922df320d453_68304_300x200_fit_box_3.png" width="300" height="182" alt="Contenido sesión en redis" title="Contenido sesión en redis"  class="lozad "></a></p>
</figure>
</div>
<p>En el momento de escribir este artículo Spring Session es un proyecto reciente y solo soporta la opción de Redis como caché externa pero seguramente con nuevas versiones soporte otras opciones como <em>memcached</em>, guardar la sesión en una <em>cookie</em> o en una base de datos relacional. La solución propuesta por Spring Session es válida para cualquier servidor de aplicaciones ya que se basa en crear un filtro en la aplicación que proporciona una versión modificada de <a href="https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html">HttpSession</a> mediante el cual se guardan los datos de forma externa.</p>
<p>Otras posibilidades ofrecidas por Spring Session son múltiples sesiones en la misma instancia del navegador y soporte para aplicaciones REST y WebSocket. Para aumentar la seguridad se puede <a href="https://picodotdev.github.io/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/">aumentar el tamaño del identificativo de la sesión almacenada en su <em>cookie</em></a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://projects.spring.io/spring-session/">Spring Session</a></li>
<li><a href="https://shinesolutions.com/2012/12/18/simple-session-sharing-in-tomcat-cluster-using-the-session-in-cookie-pattern/">Simple Session-Sharing in Tomcat Cluster Using the Session-in-Cookie</a></li>
<li><a href="http://tomcat.apache.org/tomcat-8.0-doc/cluster-howto.html">Tomcat Cluster</a></li>
<li><a href="https://code.google.com/p/memcached-session-manager/">Memcached Session Manager</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring/</id>
        <title>Listener de eventos de Hibernate con servicios de Spring</title>
        <updated>2015-02-28T10:59:08+01:00</updated>
        <published>2015-02-28T10:59:08+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En el anterior artículo explicaba como <a href="https://picodotdev.github.io/blog-bitix/2015/02/ejemplo-de-listener-de-eventos-de-hibernate/">crear un <em>listener</em> que reciba eventos de Hibernate</a> pero quizá necesitemos en el <em>listener</em> hacer uso de un servicio de <a href="https://spring.io/">Spring</a> si el proceso de la acción necesita aprovecharse de la funcionalidad proporcionada en los servicios. En este artículo mostraré como crear un <em>listener</em> de <a href="https://hibernate.org/">Hibernate</a> que use un servicio de Spring, es decir, un <em>listener</em> de Hibernate con la posibilidad de inyectar servicios de Spring.</p>
<p>Para hacer la integración de los <em>listeners</em> con Spring debemos sustituir el <em>Interceptor</em> por un servicio que haga lo mismo pero al inicio del contenedor de Spring con la anotación <em>@PostConstruct</em>. Para ello creamos una clase con el siguiente contenido:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.services.hibernate</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.hibernate.SessionFactory</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.service.spi.EventListenerRegistry</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.EventType</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.internal.SessionFactoryImpl</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>&#10;&#10;<span class="nd">@Component</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HibernateConfigurer</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">ProductoEventAdapter</span> <span class="n">productoEventAdapter</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@PostConstruct</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerListeners</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">SessionFactoryImpl</span> <span class="n">sfi</span> <span class="o">=</span> <span class="o">(</span><span class="n">SessionFactoryImpl</span><span class="o">)</span> <span class="n">sessionFactory</span><span class="o">;</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">EventListenerRegistry</span> <span class="n">elr</span> <span class="o">=</span> <span class="n">sfi</span><span class="o">.</span><span class="na">getServiceRegistry</span><span class="o">().</span><span class="na">getService</span><span class="o">(</span><span class="n">EventListenerRegistry</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">elr</span><span class="o">.</span><span class="na">setListeners</span><span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">PRE_INSERT</span><span class="o">,</span> <span class="n">productoEventAdapter</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">elr</span><span class="o">.</span><span class="na">setListeners</span><span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">PRE_UPDATE</span><span class="o">,</span> <span class="n">productoEventAdapter</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">elr</span><span class="o">.</span><span class="na">setListeners</span><span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">PRE_DELETE</span><span class="o">,</span> <span class="n">productoEventAdapter</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">elr</span><span class="o">.</span><span class="na">setListeners</span><span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">POST_INSERT</span><span class="o">,</span> <span class="n">productoEventAdapter</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">elr</span><span class="o">.</span><span class="na">setListeners</span><span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">POST_UPDATE</span><span class="o">,</span> <span class="n">productoEventAdapter</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">elr</span><span class="o">.</span><span class="na">setListeners</span><span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">POST_DELETE</span><span class="o">,</span> <span class="n">productoEventAdapter</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HibernateConfigurer.java</span>
    </div>
</div>
<p>Configurando Spring con anotaciones y código Java, como es recomendable en vez de xml, la configuración del ejemplo es la siguiente y un archivo xml casi testimonial de Spring. En esta configuración vemos el servicio <em>ProductoEventAdapter</em> que usaremos para recibir los eventos y el servicio <em>DummyService</em> que se inyectará en el anterior:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.spring</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@Configuration</span>&#10;<span class="nd">@ComponentScan</span><span class="o">({</span> <span class="s">&#34;io.github.picodotdev.plugintapestry&#34;</span> <span class="o">})</span>&#10;<span class="nd">@EnableTransactionManagement</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfiguration</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span><span class="o">(</span><span class="n">destroyMethod</span> <span class="o">=</span> <span class="s">&#34;close&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BasicDataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDataSource</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="n">Driver</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getCanonicalName</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&#34;jdbc:h2:./misc/database/app&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;sa&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;sa&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">ds</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Hibernate&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;sessionFactory&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">LocalSessionFactoryBean</span> <span class="nf">sessionFactoryBean</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;hibernate.dialect&#34;</span><span class="o">,</span> <span class="n">H2Dialect</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getCanonicalName</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;hibernate.hbm2ddl.auto&#34;</span><span class="o">,</span> <span class="s">&#34;validate&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Debug&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;hibernate.generate_statistics&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;hibernate.show_sql&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Properties</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">properties</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LocalSessionFactoryBean</span> <span class="n">sf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalSessionFactoryBean</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sf</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sf</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="s">&#34;io.github.picodotdev.plugintapestry.entities&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sf</span><span class="o">.</span><span class="na">setHibernateProperties</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">sf</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// jOOQ&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ConnectionProvider</span> <span class="nf">connectionProvider</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceConnectionProvider</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ExecuteListenerProvider</span> <span class="nf">executeListenerProvider</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">ExecuteListenerProvider</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ExecuteListener</span> <span class="nf">provide</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">JooqExecuteListener</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">org</span><span class="o">.</span><span class="na">jooq</span><span class="o">.</span><span class="na">Configuration</span> <span class="nf">config</span><span class="o">(</span><span class="n">ConnectionProvider</span> <span class="n">connectionProvider</span><span class="o">,</span> <span class="n">ExecuteListenerProvider</span> <span class="n">executeListenerProvider</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DefaultConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultConfiguration</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">connectionProvider</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">SQLDialect</span><span class="o">.</span><span class="na">H2</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">executeListenerProvider</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">config</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">DSLContext</span> <span class="nf">dsl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">jooq</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">DSL</span><span class="o">.</span><span class="na">using</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ServletContextInitializer</span> <span class="nf">initializer</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">ServletContextInitializer</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartup</span><span class="o">(</span><span class="n">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">setInitParameter</span><span class="o">(</span><span class="s">&#34;tapestry.app-package&#34;</span><span class="o">,</span> <span class="s">&#34;io.github.picodotdev.plugintapestry&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">setInitParameter</span><span class="o">(</span><span class="s">&#34;tapestry.use-external-spring-context&#34;</span><span class="o">,</span> <span class="s">&#34;true&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="s">&#34;filter&#34;</span><span class="o">,</span> <span class="n">AppFilter</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">addMappingForUrlPatterns</span><span class="o">(</span><span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">,</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">ERROR</span><span class="o">),</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;/*&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="s">&#34;app&#34;</span><span class="o">,</span> <span class="n">TapestrySpringFilter</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">addMappingForUrlPatterns</span><span class="o">(</span><span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">,</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">ERROR</span><span class="o">),</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;/*&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">setSessionTrackingModes</span><span class="o">(</span><span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">SessionTrackingMode</span><span class="o">.</span><span class="na">COOKIE</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tomcat&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ConfigurableServletWebServerFactory</span> <span class="nf">webServerFactory</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Connector</span> <span class="n">connector</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Connector</span><span class="o">(</span><span class="s">&#34;org.apache.coyote.http11.Http11NioProtocol&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Http11NioProtocol</span> <span class="n">protocol</span> <span class="o">=</span> <span class="o">(</span><span class="n">Http11NioProtocol</span><span class="o">)</span> <span class="n">connector</span><span class="o">.</span><span class="na">getProtocolHandler</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connector</span><span class="o">.</span><span class="na">setScheme</span><span class="o">(</span><span class="s">&#34;http&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connector</span><span class="o">.</span><span class="na">setSecure</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connector</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">8080</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">TomcatServletWebServerFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TomcatServletWebServerFactory</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">addAdditionalTomcatConnectors</span><span class="o">(</span><span class="n">connector</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setTimeout</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofMinutes</span><span class="o">(</span><span class="n">10</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">addErrorPages</span><span class="o">(</span><span class="k">new</span> <span class="n">ErrorPage</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="s">&#34;/error404&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">addErrorPages</span><span class="o">(</span><span class="k">new</span> <span class="n">ErrorPage</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">,</span> <span class="s">&#34;/error500&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">factory</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Servicios&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ProductoEventAdapter</span> <span class="nf">productoEventAdapter</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">ProductoEventAdapter</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">HibernateProductoDAO</span> <span class="nf">hibenateProductoDAO</span><span class="o">(</span><span class="n">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DefaultHibernateProductoDAO</span><span class="o">(</span><span class="n">sessionFactory</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">JooqProductoDAO</span> <span class="nf">jooqProductoDAO</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DefaultJooqProductoDAO</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">DummyService</span> <span class="nf">dummyService</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DummyService</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppConfiguration.java</span>
    </div>
</div>
<p>En el <em>listener</em> haremos uso de un servicio de Spring que podemos inyectar usando la anotación <em>@Autorwire</em> tal y como hacemos normalmente usando el contenedor de dependencias de Spring. La implementación con respecto a usar un <em>listener</em> con solo Hibernate varía ligeramente para adaptarse a los cambios de usar un servicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.services.hibernate</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostDeleteEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostDeleteEventListener</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostInsertEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostInsertEventListener</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostUpdateEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostUpdateEventListener</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreDeleteEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreDeleteEventListener</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreInsertEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreInsertEventListener</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreUpdateEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreUpdateEventListener</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.persister.entity.EntityPersister</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HibernateEventAdapter</span> <span class="kd">implements</span> <span class="n">PreInsertEventListener</span><span class="o">,</span> <span class="n">PostInsertEventListener</span><span class="o">,</span> <span class="n">PreUpdateEventListener</span><span class="o">,</span> <span class="n">PostUpdateEventListener</span><span class="o">,</span> <span class="n">PreDeleteEventListener</span><span class="o">,</span>&#10;		<span class="n">PostDeleteEventListener</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">1L</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">requiresPostCommitHanding</span><span class="o">(</span><span class="n">EntityPersister</span> <span class="n">persister</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostDelete</span><span class="o">(</span><span class="n">PostDeleteEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onPreDelete</span><span class="o">(</span><span class="n">PreDeleteEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostUpdate</span><span class="o">(</span><span class="n">PostUpdateEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onPreUpdate</span><span class="o">(</span><span class="n">PreUpdateEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostInsert</span><span class="o">(</span><span class="n">PostInsertEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onPreInsert</span><span class="o">(</span><span class="n">PreInsertEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HibernateEventAdapter.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.services.hibernate</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostDeleteEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostInsertEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PostUpdateEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreDeleteEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreInsertEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.hibernate.event.spi.PreUpdateEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">io.github.picodotdev.plugintapestry.services.spring.DummyService</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductoEventAdapter</span> <span class="kd">extends</span> <span class="n">HibernateEventAdapter</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">1L</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DummyService</span> <span class="n">dummy</span><span class="o">;</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDummy</span><span class="o">(</span><span class="n">DummyService</span> <span class="n">dummy</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">dummy</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>		&#10;	<span class="o">}</span>&#10;	&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostDelete</span><span class="o">(</span><span class="n">PostDeleteEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">dummy</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;postDelete&#34;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onPreDelete</span><span class="o">(</span><span class="n">PreDeleteEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">dummy</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;preDelete&#34;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostUpdate</span><span class="o">(</span><span class="n">PostUpdateEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">dummy</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;postUpdate&#34;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onPreUpdate</span><span class="o">(</span><span class="n">PreUpdateEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">dummy</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;preUpdate&#34;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostInsert</span><span class="o">(</span><span class="n">PostInsertEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">dummy</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;postInsert&#34;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onPreInsert</span><span class="o">(</span><span class="n">PreInsertEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">dummy</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;preInsert&#34;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProductoEventAdapter.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.services.spring</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">io.github.picodotdev.plugintapestry.entities.hibernate.Producto</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DummyService</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">String</span> <span class="n">action</span><span class="o">,</span> <span class="n">Object</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">entity</span> <span class="k">instanceof</span> <span class="n">Producto</span><span class="o">)</span> <span class="o">{</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Producto</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Producto</span><span class="o">)</span> <span class="n">entity</span><span class="o">;</span>&#10;			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Action: %s, Id: %d&#34;</span><span class="o">,</span> <span class="n">action</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DummyService.java</span>
    </div>
</div>
<p>En este ejemplo el resultado que veríamos en la consola sería el siguiente con las trazas <em>Action: preInsert, Id: null</em> y <em>Action: postInsert, Id: 1</em> antes y después de ejecutarse la sentencia SQL:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring/images/consola_hu79614cb4a22f02850b810e091f0624b5_64150_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Trazas de ejecución del listener con servicios de Spring"><img src="https://picodotdev.github.io/blog-bitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring/images/consola_hu79614cb4a22f02850b810e091f0624b5_64150_300x200_fit_box_3.png" width="300" height="171" alt="Trazas de ejecución del listener con servicios de Spring" title="Trazas de ejecución del listener con servicios de Spring"  class="lozad "></a></p>
</figure>
</div>
<p>Usando los <em>listeners</em> de Hibernate con Spring no necesitamos el archivo que creábamos antes en <em>/META-INF/services/org.hibernate.integrator.spi.Integrator</em>. Esto es un ejemplo de prueba de concepto pero perfectamente podría ser aplicado a una necesidad real. En el ejemplo <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">PlugIn Tapestry</a> que hice para un <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro sobre el <em>framework</em> de desarrollo web Apache Tapestry</a> puede verse el código completo y funcional de esta implementación.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://guylabs.ch/2014/02/22/autowiring-pring-beans-in-hibernate-jpa-entity-listeners/">Autowiring Spring beans in Hibernate/JPA entity listeners</a></li>
<li><a href="http://invariantproperties.com/2013/09/29/spring-injected-beans-in-jpa-entitylisteners/">Spring-injected Beans in JPA EntityListeners</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>
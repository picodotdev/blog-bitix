<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/java/</id>
    <updated>2022-08-12T18:30:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/</id>
        <title>Logging usando marcadores con slf4j y logback</title>
        <updated>2014-01-31T17:10:17+01:00</updated>
        <published>2014-01-31T17:10:17+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Un sistema de logging en una aplicación es indispensable para saber lo que está sucediendo en la aplicación en el mismo momento o pasado un tiempo. Es de gran utilidad tanto para en el momento de desarrollar la aplicación como para una vez puesta en producción. Con el registro de las trazas podemos obtener información que nos permitirá descubrir un error o averiguar más fácilmente y rápidamente porque sucede algún comportamiento que no es como se espera.</p>
<p>En Java hay varios sistemas de logging entre los más utilizados están <a href="https://logging.apache.org/log4j/2.x/">Log4j</a>, <a href="https://logback.qos.ch/">logback</a>, <a href="https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html">java.util.logging</a> y la capa de abstracción <a href="https://www.slf4j.org/">slf4j</a> sobre varios de estas librerías. En estas librerías de logging las trazas se emiten a través de un logger que normalmente se corresponde con el nombre de la clase en la que se emite la traza. De esta forma las trazas se pueden filtrar por el nivel de importancia de la traza (debug, info, warn, &hellip;) y por el nombre del logger de forma que podemos obtener un registro de las trazas emitidas por los loggers que deseamos.</p>
<p>Sin embargo, el nivel de trazas y nombre de logger no son los más adecuados para determinadas necesidades. En algún caso nos puede interesar solo algunas trazas asociadas a determinada funcionalidad, el resto de trazas podríamos querer filtrarlas, pero únicamente con los filtros por nivel y nombre de logger no podríamos. Además, una funcionalidad puede estar dispersa entre varias clases con lo que si el nombre del logger es el nombre de la clase deberíamos especificar todos los logger que queremos individualmente y aunque los loggers tienen una relación jerárquica no es útil para obtener lo que queremos.</p>
<p>Para obtener las trazas específicas que queremos y que pueden estar dispersas en varias clases podemos usar los <a href="http://logback.qos.ch/manual/filters.html">filtros de logback</a>, una posibilidad es usar los marcadores pero hay otra buena cantidad de posibilidades dependiendo de nuestras necesidades.</p>
<p>Por ejemplo, para la siguientes clases nos podría interesar obtener las trazas asociadas a la funcionalidad de importación pero si indicamos que queremos la trazas del logger Importador y de nivel INFO obtendríamos todas la trazas de la clase incluidas las trazas de persistencia.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Marker</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.MarkerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Loggers&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Marcadores&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Marker</span> <span class="n">importacion</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&#34;IMP&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Marker</span> <span class="n">importacionUtils</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&#34;UTL&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Marker</span> <span class="n">persistencia</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&#34;PER&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Incluir en un marcador las trazas de otro &#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">importacionUtils</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">importacion</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Iniciando...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">,</span> <span class="s">&#34;Comenzando importación...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">new</span> <span class="n">Importador</span><span class="o">().</span><span class="na">importar</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">,</span> <span class="s">&#34;Importación finalizada&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Importador</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Importador</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">Importador</span><span class="o">()</span> <span class="o">{</span>		&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">importar</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">,</span> <span class="s">&#34;Realizando importación...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">Utils</span><span class="o">.</span><span class="na">importar</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">persistencia</span><span class="o">,</span> <span class="s">&#34;Persistiendo algo...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">Utils</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Importador.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Utils</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Comenzando persistencia (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">persistencia</span><span class="o">,</span> <span class="s">&#34;Persistido algo (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">importar</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Comenzando importación (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacionUtils</span><span class="o">,</span> <span class="s">&#34;Importado algo (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>	&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Utils.java</span>
    </div>
</div>
<p>Este sería el resultado:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/sin-filtro_hu439f1dbb077c8cb8cf0057f867dacf86_68405_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/sin-filtro_hu439f1dbb077c8cb8cf0057f867dacf86_68405_300x200_fit_box_3.png" width="300" height="80"  class="lozad "></a></p>
</figure>
</div>
<p>Para conseguir solo las trazas de una funcionalidad se pueden utilizar los marcadores («markers») de forma que además de por el nivel del mensaje de traza y el logger podamos filtrar por el marcador asociado a la traza. El marcador de una traza es una etiqueta por la que posteriormente podemos filtrar. Si una funcionalidad estuviese repartida por varias clases podríamos usar el mismo marcador en todas esas trazas de forma que podamos filtrar luego por él. El resultado del ejemplo completo sería el siguiente:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/con-filtro_huc90cfb2c4bb3573bace522560d85b989_47046_2560x1440_fit_box_3.png" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/con-filtro_huc90cfb2c4bb3573bace522560d85b989_47046_300x200_fit_box_3.png" width="300" height="80"  class="lozad "></a></p>
</figure>
</div>
<p>En ambos resultados puede verse el nombre del marcador (IMP de importación, PER de persistencia, UTL de utilidad) asociado a la traza, en el segundo solo se muestran las trazas con el marcador IMP de la funcionalidad de importación.</p>
<p>Utilizando la combinación slf4j y logback, la configuración para de logback y usando un filtro para obtener las trazas con el marcador asociado que deseamos es la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&#34;STDOUT&#34;</span> <span class="na">class=</span><span class="s">&#34;ch.qos.logback.core.ConsoleAppender&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&#34;io.github.picodotdev.log.markers.ImportacionFilter&#34;</span><span class="nt">&gt;&lt;/filter&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;encoder&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;pattern&gt;</span>%-23d{ISO8601} %-5p %-17marker %-17t %40.40C %-15M %m%n<span class="nt">&lt;/pattern&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/encoder&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/appender&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">&#34;io.github.picodotdev.log.markers&#34;</span> <span class="na">level=</span><span class="s">&#34;INFO&#34;</span><span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&#34;debug&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&#34;STDOUT&#34;</span> <span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/root&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>logback.xml</span>
    </div>
</div>
<p>Este sería el código del filtro que nos permitiría obtener las trazas de una determinada funcionalidad, en el caso del ejemplo las trazas relativas a la funcionalidad de importación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Marker</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.spi.ILoggingEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ch.qos.logback.core.filter.Filter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ch.qos.logback.core.spi.FilterReply</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImportacionFilter</span> <span class="kd">extends</span> <span class="n">Filter</span><span class="o">&lt;</span><span class="n">ILoggingEvent</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">FilterReply</span> <span class="nf">decide</span><span class="o">(</span><span class="n">ILoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Marker</span> <span class="n">marker</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getMarker</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">marker</span><span class="o">)</span> <span class="o">||</span> <span class="n">marker</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">FilterReply</span><span class="o">.</span><span class="na">ACCEPT</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">FilterReply</span><span class="o">.</span><span class="na">DENY</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ImportacionFilter.java</span>
    </div>
</div>
<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/MarcadoresSLF4J">código fuente completo del ejemplo</a> de su repositorio de GitHub y probarlo en tu equipo.</p>
<p>¿Conocías y has usado alguna vez esta funcionalidad?</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/librerias-de-logging-para-java-slf4j.html">Librerías de logging para Java (slf4j, Log4j, java.util.logging, logback, MentaLog</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/</id>
        <title>Ejemplo del patrón de diseño No Operation</title>
        <updated>2015-09-28T21:00:00+02:00</updated>
        <published>2014-01-24T16:48:40+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Hasta el momento ya he escrito alguna entrada sobre los <a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html">patrones de diseño</a> en general, sobre algunos casos particulares como el <a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">patrón de diseño Command</a> relacionado con la programación concurrente y sobre el <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html">patrón de diseño State</a> para hacer máquinas de estados. En esta entrada hablaré sobre otro patrón de diseño, el patrón No Operation y de que forma podemos aprovecharlo para resolver algún problema y hacer nuestro código más simple.</p>
<p>En un programa que emplea un lenguaje de programación orientado a objetos estos están constantemente relacionándose entre si a través de llamadas a métodos y a través de las referencias que un objeto posee de otros. Sin embargo, es habitual que un determinado método devuelva un null en vez de una referencia a un objeto. Esta referencia null puede ser un problema ya que nos obliga en el código hacer una comprobación antes de poder llamarlo. Si un método devuelve un null puede dar como resultado un <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html">NullPointerException</a> en otra parte de la aplicación en donde se intente usar esa referencia y no se haga la comprobación.</p>
<p>Para tratar de evitar llenar nuestro código java de sentencias if con la comprobación de null podemos utilizar el patrón de diseño No Operation. La idea de este patrón es que en vez de devolver un null como resultado de la llamada a un método devolvamos un objeto que no haga nada en las llamadas a los métodos en los que se use. Por ejemplo, supongamos que tenemos un método que en base a un enum se encarga de devolver un objeto que sigue el <a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">patrón Command</a>. Y ahora supongamos que para cierto valor del enum no hay objeto command que se pueda devolver, podríamos devolver null en cuyo caso nos veríamos obligados a realizar la comprobación por null o empleando la idea del patrón No Operation devolver un objeto que implemente la interfaz command en cuestión pero que no haga nada o haga una operación inocua. Si vemos que en un programa estamos llenándolo de sentencias if (objeto == null) tal vez podamos aplicar este patrón. Lo importante para poder eliminar esos if es determinar que es una operación inocua, si se trata de un objeto puede ser que el método no haga nada, si se trata de un número que se utiliza para sumar o multiplicar se puede devolver 0 o 1 respectivamente en vez de null, depende del caso y la operación a simular.</p>
<p>Esta patrón puede usarse también para evitar la excepción NullPointerException pero no es tanto la misión del patrón la misión como evitar preocuparnos por si las referencias son null o no y eliminar <em>ifs</em>, es cierto que empleándolo no dará la excepción pero si la aplicación continua puede producir otra excepción o un comportamiento no deseado más complicado de resolver y de averiguar su causa en otra parte del código.</p>
<p>Veámoslo con el ejemplo de una factoría que para determinados enumerados se devuelve un objeto que sigue el patrón command pero para ciertos valores del enumerado no hay command válido y en vez de devolver null devolvemos un command no operation, este es el caso de llamar a la factoría con un enumerado null. Para el enumerado <em>Operacion.MENSAJE</em> se devuelve un command que emite un mensaje, para <em>Operacion.NO_MENSAJE</em> y null se devuelve un command que no hace nada.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OperacionCommandFactory</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">enum</span> <span class="n">Operacion</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">MENSAJE</span><span class="o">,</span> <span class="n">NO_MENSAJE</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">OperacionCommand</span> <span class="nf">buildCommand</span><span class="o">(</span><span class="n">Operacion</span> <span class="n">operacion</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">operacion</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">new</span> <span class="n">NoOperacionCommand</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="o">(</span><span class="n">operacion</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">MENSAJE</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">MensajeCommand</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">NO_MENSAJE</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">NoOperacionCommand</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>OperacionCommandFactory.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OperacionCommand</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">operacion</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>OperacionCommand.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoOperacionCommand</span> <span class="kd">implements</span> <span class="n">OperacionCommand</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">operacion</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>NoOperacionCommand.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MensajeCommand</span> <span class="kd">implements</span> <span class="n">OperacionCommand</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">operacion</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hola mundo!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MensajeCommand.java</span>
    </div>
</div>
<p>Y finalmente el caso de prueba donde puede verse que no hay ningún if ya que no se devuelve en ningún caso un null:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kn">package</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">picodotdev</span><span class="o">.</span><span class="na">pattern</span><span class="o">.</span><span class="na">nooperation</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.pattern.nooperation.OperacionCommand</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.pattern.nooperation.OperacionCommandFactory</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.pattern.nooperation.OperacionCommandFactory.Operacion</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">spock.lang.Specification</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OperacionCommandFactorySpec</span> <span class="kd">extends</span> <span class="n">Specification</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">OperacionCommandFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="kc">null</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OperacionCommandFactory</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nl">setup:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">OperacionCommand</span> <span class="n">operacion</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">buildCommand</span><span class="o">(</span><span class="n">Operacion</span><span class="o">.</span><span class="na">MENSAJE</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="nl">when:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">operacion</span><span class="o">.</span><span class="na">operacion</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nl">then:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nl">setup:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">OperacionCommand</span> <span class="n">operacion</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">buildCommand</span><span class="o">(</span><span class="n">Operacion</span><span class="o">.</span><span class="na">NO_MENSAJE</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="nl">when:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">operacion</span><span class="o">.</span><span class="na">operacion</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nl">then:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">test3</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nl">setup:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">OperacionCommand</span> <span class="n">operacion</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">buildCommand</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="nl">when:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">operacion</span><span class="o">.</span><span class="na">operacion</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nl">then:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>OperacionCommandFactorySpec.groovy</span>
    </div>
</div>
<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PatronNoOperation">código fuente completo del ejemplo</a> de su repositorio de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PatronNoOperation">Código fuente del ejemplo del patrón de diseño No Operation</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.htmlindex-amp.html">Patrones de diseño en la programación orientada a objetos</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.htmlindex-amp.html">Ejemplo del patrón de diseño Command y programación concurrente en Java</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.htmlindex-amp.html">Ejemplo del patrón de diseño State</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/">Ejemplo del patrón de diseño Builder</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>
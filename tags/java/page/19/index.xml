<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/java/</id>
    <updated>2022-08-12T18:30:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/</id>
        <title>Convertir fechas y husos horarios en Java</title>
        <updated>2015-08-11T23:00:00+01:00</updated>
        <published>2015-01-31T11:32:35+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Aunque en muchas aplicaciones no será necesario si desarrollamos una aplicación que trabaje con diferentes países y fechas probablemente deberemos tener en cuenta múltiples <a href="https://es.wikipedia.org/wiki/Huso_horario">husos horarios</a> o zonas horarias. Según estos husos horarios, por ejemplo, en el momento que son las 12:00 en Madrid hora local no son las 12:00 en Buenos Aires, si dos ciudades emplean diferente huso horario hay que tenerlo en cuenta para obtener la hora local en cada ciudad.</p>
<p>Hasta la versión 7 de Java el trabajo con fechas era complicado con las clases proporcionadas <a href="https://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html">GregorianCalendar</a> y <a href="https://docs.oracle.com/javase/7/docs/api/java/sql/Date.html">Date</a>, una alternativa a la API de Java para el manejo de fechas hasta esta versión era emplear la librería <a href="https://www.joda.org/joda-time/">JodaTime</a>. JodaTime ofrece una API mejor y más completa para el manejo de fechas hasta la versión de Java 7. Con la <a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">nueva API para fechas de Java 8</a>, <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">entre otras novedades incluídas</a>, la situación ha mejorado pero hasta que tengamos oportunidad de usar esta versión puede que pase bastante tiempo y sigamos obligados a usar JodaTime si tenemos posibilidad de usar esta librería o usar directamente la API de Java 7 si no podemos.</p>
<p>Otro aspecto que debemos tener en cuenta en una aplicación es en que huso horario vamos a guardar las fechas en la base de datos, para simplificar lo recomendable es guardar siempre las fechas en el mismo huso horario. Podemos elegir cualquier huso horario quizá la local del lugar donde estamos o una mas genérica como UTC.</p>
<p>Podemos convertir la fecha de un huso horario a otro ya sea usando JodaTime, Java 7 o Java 8, por ejemplo ¿si en Madrid (España) son las 12:00 que hora sería en ese momento en Buenos Aires (Argentina)? El código que podemos emplear en Java para cambiar de zona horaria y averiguarlo es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.timezone</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.text.SimpleDateFormat</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Calendar</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.GregorianCalendar</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.TimeZone</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.joda.time.DateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.joda.time.DateTimeZone</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// JodaTime&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">DateTime</span> <span class="n">fecha</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="n">2015</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">31</span><span class="o">,</span> <span class="n">12</span><span class="o">,</span> <span class="n">00</span><span class="o">,</span> <span class="n">DateTimeZone</span><span class="o">.</span><span class="na">forID</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;JodaTime&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hora Madrid:\t\t %s\n&#34;</span><span class="o">,</span> <span class="n">fecha</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hora Buenos Aires:\t %s\n&#34;</span><span class="o">,</span> <span class="n">fecha</span><span class="o">.</span><span class="na">withZone</span><span class="o">(</span><span class="n">DateTimeZone</span><span class="o">.</span><span class="na">forID</span><span class="o">(</span><span class="s">&#34;America/Argentina/Buenos_Aires&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Java 8&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">ZonedDateTime</span> <span class="n">fecha</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">2015</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">31</span><span class="o">,</span> <span class="n">12</span><span class="o">,</span> <span class="n">00</span><span class="o">,</span> <span class="n">00</span><span class="o">,</span> <span class="n">00</span><span class="o">,</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;\nJava 8&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hora Madrid:\t\t %s\n&#34;</span><span class="o">,</span> <span class="n">fecha</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hora Buenos Aires:\t %s\n&#34;</span><span class="o">,</span> <span class="n">fecha</span><span class="o">.</span><span class="na">withZoneSameInstant</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;America/Argentina/Buenos_Aires&#34;</span><span class="o">)));</span>			&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Java 7&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">Calendar</span> <span class="n">calendar</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GregorianCalendar</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">calendar</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">2015</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">31</span><span class="o">,</span> <span class="n">12</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="n">SimpleDateFormat</span> <span class="n">sdfMadrid</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">sdfMadrid</span><span class="o">.</span><span class="na">setTimeZone</span><span class="o">(</span><span class="n">TimeZone</span><span class="o">.</span><span class="na">getTimeZone</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="n">SimpleDateFormat</span> <span class="n">sdfArgentina</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">sdfArgentina</span><span class="o">.</span><span class="na">setTimeZone</span><span class="o">(</span><span class="n">TimeZone</span><span class="o">.</span><span class="na">getTimeZone</span><span class="o">(</span><span class="s">&#34;America/Argentina/Buenos_Aires&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;\nJava 7&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hora Madrid:\t\t %s\n&#34;</span><span class="o">,</span> <span class="n">sdfMadrid</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">calendar</span><span class="o">.</span><span class="na">getTime</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hora Buenos Aires:\t %s\n&#34;</span><span class="o">,</span> <span class="n">sdfArgentina</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">calendar</span><span class="o">.</span><span class="na">getTime</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">JodaTime&#10;</span></span><span class="line"><span class="cl">Hora Madrid:		 2015-01-31T12:00:00.000+01:00&#10;</span></span><span class="line"><span class="cl">Hora Buenos Aires:	 2015-01-31T08:00:00.000-03:00&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">Java 8&#10;</span></span><span class="line"><span class="cl">Hora Madrid:		 2015-01-31T12:00+01:00[Europe/Madrid]&#10;</span></span><span class="line"><span class="cl">Hora Buenos Aires:	 2015-01-31T08:00-03:00[America/Argentina/Buenos_Aires]&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">Java 7&#10;</span></span><span class="line"><span class="cl">Hora Madrid:		 2015-01-31T12:00:00+01:00&#10;</span></span><span class="line"><span class="cl">Hora Buenos Aires:	 2015-01-31T08:00:00-03:00</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>output.txt</span>
    </div>
</div>
<p>Java 7 requiere unas pocas líneas de código fuente más y en este caso se hace usando un SimpleDateFormat, en el caso de JodaTime y Java 8 el código es bastante similar.</p>
<p>El huso horario de Madrid es <em>Europe/Madrid</em> y el huso horario de Buenos Aires es <em>America/Argentina/Buenos_Aires</em> en el momento de escribir este artículo Madrid tiene un desplazamiento respecto a UTC de +01:00 y Buenos Aires de -03:00 con lo que entre estas dos ciudades hay una diferencia de cuatro horas en tiempo local. Quizá nos interese conocer el <a href="http://www.timeanddate.com/worldclock/">tiempo local actual en una ciudad</a> y con el <a href="http://www.timeanddate.com/worldclock/converter.html">conversor entre husos horarios</a> podemos comprobar que hemos programado correctamente la conversión en código.</p>
<p>Finalmente, hay que tener en cuenta que los <a href="https://es.wikipedia.org/wiki/Horario_de_verano">horarios de verano</a> que se establecen en cada país con la intención de ajustar normalmente el horario a las horas de luz y de este modo ahorrar energía. Estos horarios de verano los establece cada país y varían más a menudo de lo que podemos creer, a veces son una cuestión política. En el JDK para actualizar estos horarios de verano debemos actualizar el JDK esperando que <a href="https://www.oracle.com/">Oracle</a> los haya actualizado debidamente o usar la herramienta <a href="https://www.oracle.com/us/technologies/java/tzupdater-readme-136440.html">Timezone Updater Tool</a>. El actualizar el JDK o usar la herramienta Timezone Updater Tool en un servidor para esto puede ser un problema o simplemente es algo que no controlamos como desarrolladores de la aplicación por no estar el servidor bajo nuestro control, esta es otra ventaja de usar JodaTime ya que esta librería como dependencia del proyecto si está bajo nuestro control y podemos ir actualizando la versión de la misma en la que los horarios de verano si están actualizados.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Date.html">Java 7 Date API</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">Java 8 Time API</a></li>
<li><a href="https://www.joda.org/joda-time/">JodaTime</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/</id>
        <title>Cómo hacer un substring de una cadena HTML</title>
        <updated>2015-01-16T13:03:52+01:00</updated>
        <published>2015-01-16T13:03:52+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Una de las cosas que he tenido que resolver en <a href="https://twitter.com/blogstackinfo">Blog Stack</a> es como conseguir un extracto del contenido completo de una cadena que es HTML. Esto lo he usado en los diferentes feeds de Blog Stack donde solo se muestra el extracto de cada artículo y no el texto completo. A primera vista puede parecer fácil pero no lo es tanto, cortar una cadena que es html haciendo un substring puede ocasionar problemas si se hace en un mal punto de la cadena y luego esa cadena cortada se inserta como contenido de nuevo el una página web. Lo más probable que ocurra es una desmaquetación de la página o que los estilos aparezcan mal pero puede dejar estropeada la página completa.</p>
<p>Por ejemplo, si tenemos la siguiente cadena y la cortamos en un mal punto y luego insertamos en una página html ese contenido lo que ocurrirá es que todo el texto a continuación de él aparecerá en negrita.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>Lorem ipsum ad his scripta blandit partiendo, &#10;</span></span><span class="line"><span class="cl">eum fastidii accumsan euripidis in, &#10;</span></span><span class="line"><span class="cl">eum liber hendrerit an.<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>text-1.html</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>Lorem ipsum ad his scripta blandit partiendo, eum fastidii&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>text-2.html</span>
    </div>
</div>
<p>Usar una expresión regular tampoco es solución, con alguna puede parecer que en algún caso funciona pero posiblemente para cada expresión regular podamos encontrar un html para el que no sirva. La expresión regular puede ser complicada.</p>
<p>Para dar solución a este problema podemos emplear jsoup. <a href="https://jsoup.org/">Jsoup</a> es una librería Java que nos permite manipular el html, desde extraer en forma de texto plano el contenido hasta modificar el html empleando una API. Empleando esta librería podemos ir extrayendo el contenido para contar cuantos caracteres de texto contiene el html y a la vez crear un extracto del documento html.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentExcerpt</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Obtener el documento que representa al contenido del que extraer el extracto&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">getContent</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">final</span> <span class="n">StringBuffer</span> <span class="n">excerpt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Recorrer los nodos del documento&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">document</span><span class="o">.</span><span class="na">traverse</span><span class="o">(</span><span class="k">new</span> <span class="n">NodeVisitor</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">tail</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">head</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">excerpt</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">Globals</span><span class="o">.</span><span class="na">POST_EXCERPT_LENGHT</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="c1">// Se ha llegado al límite de caracteres del extracto, recoger los nodos posteriores&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="n">nodes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="k">instanceof</span> <span class="n">TextNode</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="c1">// Añadir los caracteres al extracto, para contar el número de caracteres recorridos&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="n">TextNode</span> <span class="n">textNode</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextNode</span><span class="o">)</span> <span class="n">node</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">excerpt</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">textNode</span><span class="o">.</span><span class="na">text</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Eliminar los nodos posteriores del extracto&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">node</span> <span class="o">:</span> <span class="n">nodes</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">node</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Obtener el extracto del documento&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="n">document</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">html</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppPostRecord.java</span>
    </div>
</div>
<p>Empleando esta librería la cadena del ejemplo anterior podría quedar:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>Lorem ipsum ad his scripta blandit partiendo, eum fastidii<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>text-3.html</span>
    </div>
</div>
<p>El resultado aplicando está solución puede verse en el <a href="https://picodotdev.github.io/blog-bitix/index.xml">feed de la portada de Blog Stack</a> donde se muestra una entradilla o extracto del inicio del contenido de cada uno de los artículos.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/images/blogstack_hu136623f3657149380e94f9bb052c5761_271412_2560x1440_fit_box_3.png" data-gallery="" title="Portada Blog Stack"><img src="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/images/blogstack_hu136623f3657149380e94f9bb052c5761_271412_300x200_fit_box_3.png" width="300" height="171" alt="Portada Blog Stack" title="Portada Blog Stack"  class="lozad "></a></p>
</figure>
</div>
<p>El código fuente de Blog Stack está disponible en un <a href="https://github.com/picodotdev/blog-stack/tree/master">repositorio de GitHub</a> donde puede verse el código completo.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/10/que-es-y-como-hacer-web-scraping-en-java/">Qué es y cómo hacer «web scraping» en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/10/como-filtrar-contenido-html-de-forma-segura/">Cómo filtrar contenido HTML de forma segura</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando/</id>
        <title>Ejercicios (katas) para mejorar habilidades de programación practicando</title>
        <updated>2014-12-13T12:06:06+01:00</updated>
        <published>2014-12-13T12:06:06+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<p>La semana pasada escribía sobre <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">algunos libros que leer para ser mejores programadores</a>, sin embargo, toda esa teoría solo sirve cuando se interioriza para usar más tarde en la práctica. Para interiorizar parte de ese conocimiento hasta el momento creo que no se ha inventado mejor manera que escribiendo código teniendo en cuenta esos principios.</p>
<p>Las katas y dojos son unos ejercicios que se realizan para practicar, son problemas sencillos de los que se conoce la solución pero lo importante no es resolverlos sino aplicar las lecciones aprendidas y mejorar nuestras habilidades de programación que posteriormente usemos en los proyectos que trabajamos. Estos ejercicios se suelen realizar con otras personas, en la página <a href="http://katayunos.com/">Katayunos - Merendojos</a> se suelen organizar encuentros en algunas ciudades y fechas, si no nos cuadran las fechas y lugares podemos realizarlas individualmente cuando y donde prefiramos aunque una de las partes que nos perderemos es aprender de las habilidades y formas de trabajar de otras personas.</p>
<p>En la página <a href="http://codekata.com/">CodeKata</a> podemos leer una introducción a las katas y una colección de ejercicios con los que practicar. En estos ejercicios deberemos intentar aplicar varios <a href="http://javarevisited.blogspot.com.es/2012/03/10-object-oriented-design-principles.html">principios de la programación orientada a objetos</a> como el principio SOLID, DRY, abierto a extensión cerrado a modificación (OCP), <a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.htmlindex-amp.html">patrones de diseño</a>, nombres de métodos y variables que hagan que el código sea expresivo, teses unitarios, refactorizaciones, &hellip; todas esas cosas que consideramos correctas para escribir buen código.</p>
<p>El primero de los ejercicios propuestos en CodeKata es <a href="http://codekata.com/kata/kata01-supermarket-pricing/">Kata01: Supermarket Pricing</a> que consiste en pensar una forma de representar los precios de los productos de un supermercado, aparte de un precio simple como puede ser $0.65 por producto, otros como tres por un dolar, $1.99 / pound o compre dos obtenga uno más gratis o con descuento. Para esta kata en internet hay comentadas varias soluciones, probablemente para representar los diferentes precios una solución sea crear una clase que calcule los diferentes tipos de precios aplicando el <a href="https://es.wikipedia.org/wiki/Strategy_%28patr%C3%B3n_de_dise%C3%B1o%29">patrón Strategy</a> en función de como se calcule el precio de cada producto.</p>
<p>Intentando implementar en código una posible solución aplicando el patrón Strategy, usando BigDecimal para los precios (en vez de double y float que no pueden representar correctamente algunos valores decimales), este ejemplo muestra como calcular el precio de un producto dada su cantidad y su tipo de precio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.kata01</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.math.RoundingMode</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Pricing</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Offer</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="nf">calculateWithOffer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="nf">getNumberWithoutOffer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="nf">getNumberWithOffer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pricing</span> <span class="n">pricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Product</span><span class="o">(</span><span class="n">Pricing</span> <span class="n">pricing</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">pricing</span> <span class="o">=</span> <span class="n">pricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">pricing</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">quantity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SimplePricing</span> <span class="kd">implements</span> <span class="n">Pricing</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">unitPrice</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SimplePricing</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">unitPrice</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">unitPrice</span> <span class="o">=</span> <span class="n">unitPrice</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">unitPrice</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">quantity</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">WeightPricing</span> <span class="kd">implements</span> <span class="n">Pricing</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">weightPrice</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">WeightPricing</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">weightPrice</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">weightPrice</span> <span class="o">=</span> <span class="n">weightPrice</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">weight</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">weightPrice</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">weight</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">OfferPricing</span> <span class="kd">implements</span> <span class="n">Pricing</span><span class="o">,</span> <span class="n">Offer</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pricing</span> <span class="n">normalPricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">offerQuantity</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">offerPercent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OfferPricing</span><span class="o">(</span><span class="n">Pricing</span> <span class="n">normalPricing</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">offerQuantity</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">offerPercent</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">normalPricing</span> <span class="o">=</span> <span class="n">normalPricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">offerQuantity</span> <span class="o">=</span> <span class="n">offerQuantity</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">offerPercent</span> <span class="o">=</span> <span class="n">offerPercent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">withoutOfferPrice</span> <span class="o">=</span> <span class="n">normalPricing</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">getNumberWithoutOffer</span><span class="o">(</span><span class="n">quantity</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">withOfferPrice</span> <span class="o">=</span> <span class="n">calculateWithOffer</span><span class="o">(</span><span class="n">getNumberWithOffer</span><span class="o">(</span><span class="n">quantity</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">withoutOfferPrice</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">withOfferPrice</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">calculateWithOffer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">normalPricing</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">)).</span><span class="na">multiply</span><span class="o">(</span><span class="n">quantity</span><span class="o">).</span><span class="na">multiply</span><span class="o">(</span><span class="n">getOfferPercent</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">getNumberWithoutOffer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">quantity</span><span class="o">.</span><span class="na">divide</span><span class="o">(</span><span class="n">offerQuantity</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">RoundingMode</span><span class="o">.</span><span class="na">DOWN</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">quantity</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">groups</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">getNumberWithOffer</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">quantity</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">getNumberWithoutOffer</span><span class="o">(</span><span class="n">quantity</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">BigDecimal</span> <span class="nf">getOfferPercent</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">100</span><span class="o">).</span><span class="na">subtract</span><span class="o">(</span><span class="n">offerPercent</span><span class="o">).</span><span class="na">divide</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;100&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">	&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Product</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="k">new</span> <span class="n">SimplePricing</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">p1</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">Product</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="k">new</span> <span class="n">WeightPricing</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;1.35&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">Product</span> <span class="n">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="k">new</span> <span class="n">OfferPricing</span><span class="o">(</span><span class="k">new</span> <span class="n">SimplePricing</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">)),</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">),</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;50&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">p3</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;6&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.kata01</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.kata01.Main.OfferPricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.kata01.Main.Product</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.kata01.Main.SimplePricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.kata01.Main.WeightPricing</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Assert</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainTest</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">simplePricing</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Product</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="k">new</span> <span class="n">SimplePricing</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;6&#34;</span><span class="o">),</span> <span class="n">p1</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span> &#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">weightPricing</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Product</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="k">new</span> <span class="n">WeightPricing</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;1.35&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;4.05&#34;</span><span class="o">),</span> <span class="n">p2</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">offerPricing</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Product</span> <span class="n">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="k">new</span> <span class="n">OfferPricing</span><span class="o">(</span><span class="k">new</span> <span class="n">SimplePricing</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">)),</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">),</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;50&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;4.5&#34;</span><span class="o">),</span> <span class="n">p3</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;5&#34;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MainTest.java</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando/images/teses-junit_hufd5df9af52eaf6ce499b5244effa36fc_31631_2560x1440_fit_box_3.png" data-gallery="" title="Ejecución de teses"><img src="https://picodotdev.github.io/blog-bitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando/images/teses-junit_hufd5df9af52eaf6ce499b5244effa36fc_31631_300x200_fit_box_3.png" width="300" height="167" alt="Ejecución de teses" title="Ejecución de teses"  class="lozad "></a></p>
</figure>
</div>
<p>Aun practicando estas katas no va a hacer que luego nuestro código en un proyecto real sea perfecto ni siquiera algo cercano a ello más bien hará que sea un poquito mejor, estos ejercicios son bastante simples que no tienen las complejidades de algunos casos reales, aún así siguen mereciendo realizarlos. También hay que tener en cuenta que no son realmente para aprender a programar aunque si pueden servir para aprender un nuevo lenguaje sobre todo si se hacen con otra persona que ya lo conoce y mientras se realiza la kata podemos preguntarle y nos resuelva las dudas que nos vayan surgiendo de la sintaxis, API o herramientas de ese lenguaje.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li>http://codekata.com/<br></li>
<li>http://katayunos.com/<br></li>
<li>http://www.codewars.com/</li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="software-libre"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/</id>
        <title>8&#43; libros para mejorar como programadores</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2014-12-05T17:08:57+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<p>Hay cantidad de información para aprender y en diferentes formatos desde libros si queremos tener un conocimiento más profundo sobre alguna materia pasando por presentaciones en <a href="https://es.slideshare.net/">SlideShare</a> o <a href="https://speakerdeck.com/">SpeakerDeck</a> que aún comentando los detalles de forma escueta sirven para conocer los detalles importantes sobre un tema, charlas de hangouts que quizá requieran menos esfuerzo y tiempo por nuestra parte que leer un libro como las compartidas en <a href="https://www.desarrolloweb.com/">desarrolloweb</a> o en <a href="http://virtualjug.com/">Virtual JUG</a>, blogs con artículos que explican un detalle específico (aquí hay una buena <a href="https://www.baeldung.com/java-blogs">colección de bitácoras sobre java</a>), <a href="http://katayunos.com/">katayunos y merendojos</a> en los que se practican técnicas de programación sobre un problema conocido, sencillos, de los que ya se conoce su solución y que se realizan junto a otras personas, convenciones como <a href="http://www.codemotion.es/">Codemotion</a>, <a href="https://es.pycon.org/">PyCon</a>, <a href="https://greachconf.com/">Greach</a>, <a href="http://www.librecon.io/">LibreCon</a>, <a href="http://agile-spain.org">CAS</a>, <a href="http://www.springio.net/">Spring I/O</a>, <a href="http://apachecon.com/">ApacheCon</a>, <a href="https://bilbostack.com/">BilboStack</a>&hellip; En estas convenciones se hacen presentaciones de alrededor de una hora para los asistentes, además siendo presenciales permiten reunirse con otras personas con los mismos intereses y de las que algunas los vídeos están disponibles en YouTube&hellip; en definitiva, para aprender lo único que se necesita es tiempo y motivación que no es poco después de una jornada laboral que ocupa la mayor parte de nuestro tiempo.</p>
<p>En este artículo comentaré algunos libros que a mí me han gustado y que mucha gente recomienda leer ya que contienen cantidad importante e interesante de información útil para realizar mejor la tarea de programación, algunos tratan sobre el código otros sobre como enfrentarnos a las tareas y problemas que nos encontramos en el desarrollo y trabajo.</p>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="thinking-in-java">Thinking in Java</h3>
<p>Yo como programador Java el libro que recomiendo para aquellos que ya tengan unos pocos conocimientos de programación estén empezando a programar en Java es <a href="https://amzn.to/2Qo38qQ">Thinking in Java</a> aunque también es recomendable para aquellos que incluso llevan varios años programando en Java, contiene una explicación detallada de cada uno de los aspectos del lenguaje. Java 8 ha introducido numerosas novedades (streams, lambdas, mejorada la programación asíncrona, date api, default methods, programación funcional, &hellip;) y el libro <a href="https://amzn.to/2ZThJxJ">Java 8 in Action</a> nos permite conocerlas detalladamente. En otros lenguajes hay otros libros que nos pueden introducir en la materia como <a href="https://amzn.to/39GxlsU">C# 5.0 All-in-One For Dummies</a> o <a href="https://amzn.to/35oMxHG">Beginning Python</a>.</p>
<h3 id="effective-java">Effective Java</h3>
<p>Para aquellos que ya tienen varios años de experiencia el libro <a href="https://amzn.to/39C8Ehn">Effective Java</a> contiene numerosos consejos para usar Java de forma &ldquo;efectiva&rdquo; aunque algunos puntos del libro son aplicables a cualquier otro lenguaje de programación orientado objetos. La segunda edición no está actualizada con las novedades introducidas en Java 8 pero prácticamente todo sigue siendo válido, el libro <a href="v">Java 8 in Action</a> también contiene algunos consejos en la misma linea que complementan a este libro.</p>
<h3 id="head-first---design-patterns">Head First - Design Patterns</h3>
<p>Los patrones de diseño nos presentan una solución que se ha comprobado válida para resolver problemas. En varios casos tratan de hacer que los cambios no afecten de forma notable a la estructura de los programas. Hay patrones de creación, estructurales o de comportamiento, &hellip; conviene conocerlos por si en algún momento determinado podemos aplicarlos a nuestro código. El formato del libro <a href="https://amzn.to/37GFpYV">Head First Design Patterns</a> no sigue la estructura tradicional de los libros sino una estructura más esquemática y con ejemplos que hacen sencillo comprender los patrones, cuando aplicarlos, que ventajas tienen, que desventajas y como están relacionados los patrones entre ellos. Otro libro con un formato más tradicional y muy comentado es <a href="https://amzn.to/36qiq3P">Design Patterns</a>.</p>
<h3 id="clean-code">Clean Code</h3>
<p>El contenido de <a href="https://amzn.to/2T0L5IS">Clean code</a> es aplicable a cualquier lenguaje y de interés para cualquier programador, contiene consejos para escribir mejor código en nuestras aplicaciones, desde como asignar nombres, como escribir funciones, comentarios, formatear el código, objetos y estructuras de datos, &hellip;, temás relacionados con el código que escribimos. El objetivo de la programación es escribir código que funciona y resuelva necesidades pero también es casi tan importante que sea fácilmente entendible por otros programadores o nosotros mismos unas semanas más tarde ya que la mayor parte del tiempo no la dedicamos a escribir nuevo código sino a modificarlo.</p>
<h3 id="code-complete">Code Complete</h3>
<p><a href="https://amzn.to/37Gh59B">Code Complete</a> es otro libro que se centra en como mejorar el código que escribimos de forma similar a Clean Code, explica muchos principios que pueden guiar el código que desarrollamos. Aún no lo he leído pero es mencionado bastante bastantes veces en libros de lectura recomendada. Por una lectura rápida por encima parece que está bastante bien.</p>
<h3 id="the-pragmatic-programmer">The Pragmatic Programmer</h3>
<p>El libro <a href="https://amzn.to/2MXRVuZ">Pragmatic programmer</a> también es aplicable independientemente de lenguaje que utilicemos. Contienen consejos que podemos usar como guía para tomar decisiones, para escribir mejor código y también para ser mejores programadores y profesionales.</p>
<h3 id="the-clean-coder">The Clean Coder</h3>
<p>Quizá ya conocieses Clean Code pero conocías ¿<a href="https://amzn.to/2MXB4II">The Clean Coder</a>?. Del mismo autor que Clean Code pero en este caso se centra no en el código sino en el programador, explica como enfrentarnos a situaciones que nos encontramos como programadores en el trabajo, en la programación escribir código solo es una pequeña parte y comprende mucho más que escribir lineas de código, también dar solución a las necesidades del negocio y de forma correcta. Trata de explicar como comportarnos de forma profesional, el decir no, el decir sí, practicar, gestión del tiempo, estimaciones, colaboración, equipos, aprender de un mentor, ser un mentor, &hellip;</p>
<h3 id="refactoring">Refactoring</h3>
<p>Comenzar un proyecto desde el inicio no es lo habitual y aún así pasado un tiempo no muy grande el código se convierte en heredado, lo habitual es que tengamos que modificar código que ya están escrito. El libro <a href="https://amzn.to/39CyVMm">Refactoring</a> nos explica como modificar el código para que tenga mejor diseño y sea más legible o fácil de modificar en un futuro y ante los posibles cambios que se vayan introduciendo. Algunas de las acciones están relacionadas con aplicar algunos principios de los patrones de diseño explicados en Head First - Design Patterns o algunos principios comentados en Clean Code.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0131872486&amp;linkId=dae8597bb6dc4beae956320ef09df513" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291994&amp;linkId=70189a833eb781236f9c1b63064c8b27" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0321356683&amp;linkId=468caab01af35306c48d99ca564ebf23" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596007124&amp;linkId=3fa600b62ab3a48a0c6a5dfc6b9c9651" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0201633612&amp;linkId=2d6122afa07f905f4c3f2a9bcc62ff23" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0132350882&amp;linkId=41b8842029752ed268fefa4ec10f03a7" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0735619670&amp;linkId=caad6be50f3166c9e6c0c6cb8f8ba3ec" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=020161622X&amp;linkId=8ce01379ebca38f4fb82221abb3b0a81" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0137081073&amp;linkId=2fb79f1801f1d0a448b7aa533cd1af8e" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0201485672&amp;linkId=7c8b407a597aff8be999138b9159d305" title="Amazon" class="lozad"></iframe>
</div>
<p>En una <a href="https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read">pregunta y respuesta de stackoveflow</a> sobre los libros a leer por un programador, están recogidos una buena colección de los mejores de ellos.</p>
<p>De la lista de este artículo el que me falta por leer es Code Complete el resto por mi propia experiencia recomiendo leerlos incluso más de una vez dependiendo de lo bien que absorbamos el conocimiento recogido en ellos y más tarde lo tengamos presente mientras trabajamos y programamos. Estos son de los libros más mencionados en artículos similares a este como buena documentación que leer sobre programación, si los leemos y nos quedamos con un porcentaje aunque sea pequeño ya mejoraremos bastante, también es probable que algunas cosas de las comentadas en los libros ya las tengamos presentes con la experiencia que hemos adquirido por nosotros mismos, en estos libros ese conocimiento adquirido y más comprobaremos que está documentado. ¡Feliz lectura!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades de Java 8</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.htmlindex-amp.html">Patrones de diseño en la programación orientada a objetos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando/">Ejercicios (katas) para mejorar habilidades de programación practicando</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="software-libre"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/10/como-filtrar-contenido-html-de-forma-segura/</id>
        <title>Cómo filtrar contenido HTML de forma segura</title>
        <updated>2015-01-16T12:00:00+01:00</updated>
        <published>2014-10-17T16:53:25+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/10/como-filtrar-contenido-html-de-forma-segura/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Algunos sitios y aplicaciones pueden tener la necesidad de <a href="https://picodotdev.github.io/blog-bitix/2014/10/que-es-y-como-hacer-web-scraping-en-java/">«scrapear» el contenido de sitios web</a> para extraer información de ellos y posteriormente usarla de alguna forma. El contenido «scrapeado» o obtenido de una fuente externa debe ser filtrado, si no es filtrado y posteriormente es servido a los usuarios puede enviárseles principalmente scripts con contenido malicioso (provocando un ataque <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting, XSS</a>) o causar una desmaquetación al visualizar el contenido. A la hora de implementar la agregación de contenido de forma segura en <a href="https://twitter.com/blogstackinfo">Blog Stack</a>, contenido obtenido de una fuente RSS o Atom pero que en esencia es HTML he usado la librería <a href="https://jsoup.org/">jsoup</a>, de tal forma que solo el contenido considerado seguro o confiable de los artículos sea agregado.</p>
<p>¿Que puede pasar si en una fuente envía elementos &lt;script&gt;, &lt;iframe&gt; u &lt;object&gt;? Los &lt;script&gt; son código que se envía al navegador del usuario y que podrían explotar algún fallo de seguridad del navegador que usen, los &lt;iframe&gt; permiten cargar contenido de una tercera fuente. En definitiva podrían hacer que visitar Blog Stack fuese inseguro. Pero no permitir incluir estos elementos también haría que no se pudiesen mostrar vídeos de <a href="https://www.youtube.com/">YouTube</a>, <a href="https://vimeo.com/">Vimeo</a>, <a href="https://gist.github.com/">Gist</a> de GitHub, presentaciones de <a href="https://speakerdeck.com/">SpeackerDeck</a> y se perdería parte del contenido original. La solución que he aplicado en Blog Stack es permitir el contenido de esos elementos que provienen de una fuente considerada confiable, es decir, si se trata de un iframe cuyo elemento src proviene de YouTube se permite el contenido ya que se supone que YouTube y su contenido es seguro. De esta forma el contenido puede agregarse de forma segura sin perder nada del contenido original.</p>
<p>Para hacer el filtrado de HTML en java podemos usar jsoup, para ello deberemos usar la clase <a href="http://jsoup.org/apidocs/org/jsoup/safety/Whitelist.html">Whitelist</a> que proporciona jsoup o implementar una clase que la extienda con las etiquetas y sus atributos que consideramos seguros. En Blog Stack he necesitado implementar una clase Whitelist agregándole la funcionalidad que deseaba.</p>
<p>Esta es la implementación de la clase Whitelist, con el método addTag se indican los tags permitidos, con addAttributes se indican los atributos permitidos para cada etiqueta, addProtocols se indican los protocolos permitidos para cada etiqueta y atributo, finalmente el método addAttribute permite usar una expresión regular para el valor del atributo, esto se comprueba en el método isSafeAttribute:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">info.blogstack.misc</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jsoup.nodes.Attribute</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jsoup.nodes.Element</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jsoup.safety.Whitelist</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppWhitelist</span> <span class="kd">extends</span> <span class="n">Whitelist</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">attributes</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="nf">AppWhitelist</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">attributes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Whitelist</span> <span class="nf">relaxed</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Whitelist</span> <span class="n">wl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppWhitelist</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addTags</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;blockquote&#34;</span><span class="o">,</span> <span class="s">&#34;br&#34;</span><span class="o">,</span> <span class="s">&#34;caption&#34;</span><span class="o">,</span> <span class="s">&#34;cite&#34;</span><span class="o">,</span> <span class="s">&#34;code&#34;</span><span class="o">,</span> <span class="s">&#34;col&#34;</span><span class="o">,</span> <span class="s">&#34;colgroup&#34;</span><span class="o">,</span> <span class="s">&#34;dd&#34;</span><span class="o">,</span> <span class="s">&#34;div&#34;</span><span class="o">,</span> <span class="s">&#34;dl&#34;</span><span class="o">,</span> <span class="s">&#34;dt&#34;</span><span class="o">,</span> <span class="s">&#34;em&#34;</span><span class="o">,</span> <span class="s">&#34;h1&#34;</span><span class="o">,</span> <span class="s">&#34;h2&#34;</span><span class="o">,</span> <span class="s">&#34;h3&#34;</span><span class="o">,</span> <span class="s">&#34;h4&#34;</span><span class="o">,</span> <span class="s">&#34;h5&#34;</span><span class="o">,</span> <span class="s">&#34;h6&#34;</span><span class="o">,</span> <span class="s">&#34;i&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">						<span class="s">&#34;img&#34;</span><span class="o">,</span> <span class="s">&#34;li&#34;</span><span class="o">,</span> <span class="s">&#34;ol&#34;</span><span class="o">,</span> <span class="s">&#34;p&#34;</span><span class="o">,</span> <span class="s">&#34;pre&#34;</span><span class="o">,</span> <span class="s">&#34;q&#34;</span><span class="o">,</span> <span class="s">&#34;small&#34;</span><span class="o">,</span> <span class="s">&#34;strike&#34;</span><span class="o">,</span> <span class="s">&#34;strong&#34;</span><span class="o">,</span> <span class="s">&#34;sub&#34;</span><span class="o">,</span> <span class="s">&#34;sup&#34;</span><span class="o">,</span> <span class="s">&#34;table&#34;</span><span class="o">,</span> <span class="s">&#34;tbody&#34;</span><span class="o">,</span> <span class="s">&#34;td&#34;</span><span class="o">,</span> <span class="s">&#34;tfoot&#34;</span><span class="o">,</span> <span class="s">&#34;th&#34;</span><span class="o">,</span> <span class="s">&#34;thead&#34;</span><span class="o">,</span> <span class="s">&#34;tr&#34;</span><span class="o">,</span> <span class="s">&#34;u&#34;</span><span class="o">,</span> <span class="s">&#34;ul&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;href&#34;</span><span class="o">,</span> <span class="s">&#34;title&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;blockquote&#34;</span><span class="o">,</span> <span class="s">&#34;cite&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;col&#34;</span><span class="o">,</span> <span class="s">&#34;span&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;colgroup&#34;</span><span class="o">,</span> <span class="s">&#34;span&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;img&#34;</span><span class="o">,</span> <span class="s">&#34;align&#34;</span><span class="o">,</span> <span class="s">&#34;alt&#34;</span><span class="o">,</span> <span class="s">&#34;height&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;title&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;ol&#34;</span><span class="o">,</span> <span class="s">&#34;start&#34;</span><span class="o">,</span> <span class="s">&#34;type&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;q&#34;</span><span class="o">,</span> <span class="s">&#34;cite&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;table&#34;</span><span class="o">,</span> <span class="s">&#34;summary&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;td&#34;</span><span class="o">,</span> <span class="s">&#34;abbr&#34;</span><span class="o">,</span> <span class="s">&#34;axis&#34;</span><span class="o">,</span> <span class="s">&#34;colspan&#34;</span><span class="o">,</span> <span class="s">&#34;rowspan&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;th&#34;</span><span class="o">,</span> <span class="s">&#34;abbr&#34;</span><span class="o">,</span> <span class="s">&#34;axis&#34;</span><span class="o">,</span> <span class="s">&#34;colspan&#34;</span><span class="o">,</span> <span class="s">&#34;rowspan&#34;</span><span class="o">,</span> <span class="s">&#34;scope&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;ul&#34;</span><span class="o">,</span> <span class="s">&#34;type&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addProtocols</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;href&#34;</span><span class="o">,</span> <span class="s">&#34;ftp&#34;</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">,</span> <span class="s">&#34;https&#34;</span><span class="o">,</span> <span class="s">&#34;mailto&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addProtocols</span><span class="o">(</span><span class="s">&#34;blockquote&#34;</span><span class="o">,</span> <span class="s">&#34;cite&#34;</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">,</span> <span class="s">&#34;https&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addProtocols</span><span class="o">(</span><span class="s">&#34;cite&#34;</span><span class="o">,</span> <span class="s">&#34;cite&#34;</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">,</span> <span class="s">&#34;https&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addProtocols</span><span class="o">(</span><span class="s">&#34;img&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">,</span> <span class="s">&#34;https&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addProtocols</span><span class="o">(</span><span class="s">&#34;q&#34;</span><span class="o">,</span> <span class="s">&#34;cite&#34;</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">,</span> <span class="s">&#34;https&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				&#10;</span></span><span class="line"><span class="cl">				<span class="c1">//&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">.</span><span class="na">addTags</span><span class="o">(</span><span class="s">&#34;script&#34;</span><span class="o">,</span> <span class="s">&#34;iframe&#34;</span><span class="o">,</span> <span class="s">&#34;noscript&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;div&#34;</span><span class="o">,</span> <span class="s">&#34;style&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;img&#34;</span><span class="o">,</span> <span class="s">&#34;style&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;script&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;data-.*&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;iframe&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">,</span> <span class="s">&#34;height&#34;</span><span class="o">,</span> <span class="s">&#34;frameborder&#34;</span><span class="o">,</span> <span class="s">&#34;allowfullscreen&#34;</span><span class="o">,</span> <span class="s">&#34;style&#34;</span><span class="o">,</span> <span class="s">&#34;marginwidth&#34;</span><span class="o">,</span> <span class="s">&#34;marginheight&#34;</span><span class="o">,</span> <span class="s">&#34;frameborder&#34;</span><span class="o">,</span> <span class="s">&#34;scrolling&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;object&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">,</span> <span class="s">&#34;height&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;param&#34;</span><span class="o">,</span> <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;value&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">addAttributes</span><span class="o">(</span><span class="s">&#34;embed&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;type&#34;</span><span class="o">,</span> <span class="s">&#34;width&#34;</span><span class="o">,</span> <span class="s">&#34;height&#34;</span><span class="o">,</span> <span class="s">&#34;allowscriptaccess&#34;</span><span class="o">,</span> <span class="s">&#34;allowfullscreen&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">wl</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Whitelist</span> <span class="nf">addAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">tag</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">regexp</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attribute</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">attribute</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;tag&#34;</span><span class="o">,</span> <span class="n">tag</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">attribute</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">attribute</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;regexp&#34;</span><span class="o">,</span> <span class="n">regexp</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isSafeAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">tagName</span><span class="o">,</span> <span class="n">Element</span> <span class="n">el</span><span class="o">,</span> <span class="n">Attribute</span> <span class="n">attr</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attribute</span> <span class="o">:</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">String</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">attribute</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;tag&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">attribute</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">String</span> <span class="n">regexp</span> <span class="o">=</span> <span class="n">attribute</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;regexp&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">tag</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">tagName</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">attr</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">matches</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">attr</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">matches</span><span class="o">(</span><span class="n">regexp</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">isSafeAttribute</span><span class="o">(</span><span class="n">tagName</span><span class="o">,</span> <span class="n">el</span><span class="o">,</span> <span class="n">attr</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppWhitelist.java</span>
    </div>
</div>
<p>Y esta es la forma de usar la clase a través de <a href="http://jsoup.org/apidocs/org/jsoup/Jsoup.html#clean%28java.lang.String">Jsoup.clean</a>:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">AppWhitelist</span> <span class="n">whitelist</span> <span class="o">=</span> <span class="o">(</span><span class="n">AppWhitelist</span><span class="o">)</span> <span class="n">AppWhitelist</span><span class="o">.</span><span class="na">relaxed</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">whitelist</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;script&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;^http[s]?://speakerdeck.com/.*$&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">whitelist</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;script&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;^http[s]?://gist.github.com/.*$&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">whitelist</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;iframe&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;^http[s]?://www.youtube.com/embed/.*$&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">whitelist</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;iframe&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;^http[s]?://player.vimeo.com/video/.*$&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">whitelist</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;iframe&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;^http[s]?://rcm-eu.amazon-adsystem.com/.*$&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">whitelist</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;embed&#34;</span><span class="o">,</span> <span class="s">&#34;src&#34;</span><span class="o">,</span> <span class="s">&#34;^http[s]?://www.youtube.com/v/.*$&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">clean</span><span class="o">(</span><span class="n">postContent</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">source</span><span class="o">.</span><span class="na">getPageUrl</span><span class="o">(),</span> <span class="n">whitelist</span><span class="o">);</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>IndexServiceImpl.java</span>
    </div>
</div>
<p>El <a href="https://github.com/picodotdev/blog-stack">código fuente completo de BS</a> junto con el «scrapeado» y el uso de esta clase está disponible en un repositorio de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/10/que-es-y-como-hacer-web-scraping-en-java/">Qué es y cómo hacer «web scraping» en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/">Cómo hacer un substring de una cadena html</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/03/codificar-los-datos-para-evitar-ataques-xss-en-una-pagina-web/">Codificar los datos para evitar ataques XSS en una página web</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/10/que-es-y-como-hacer-web-scraping-en-java/</id>
        <title>Qué es y cómo hacer «web scraping» en Java</title>
        <updated>2015-05-26T20:00:00+02:00</updated>
        <published>2014-10-10T21:22:40+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/10/que-es-y-como-hacer-web-scraping-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>A falta de una forma estructurada para obtener datos de una fuente podemos extraerla directamente del contenido html de una página, a esto se le denomina «web scraping». En Java y con la librería jsoup podemos obtener la información que necesitamos de forma sencilla.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Algunas aplicaciones en internet necesitan intercambiar información para hacer algún tipo de integración. La tendencia actual es proporcionar una API REST o algún tipo de archivo descargable con cierto formato que permita procesarlo de forma automatizada y a las aplicaciones obtener la información de forma sencilla y precisa. Sin embargo, hay ocasiones en las que las aplicaciones de las que necesitamos extraer la información no proporcionan ni una API REST ni un archivo descargable con lo que no nos queda más remedio que extraer los datos de la propias páginas web inspeccionando el código HTML, esto en inglés se le conoce como <a href="https://es.wikipedia.org/wiki/Web_scraping">«web scraping»</a>.</p>
<p>En este artículo explicaré como hacer web «scraping» usando la librería <a href="https://jsoup.org/">jsoup</a> y usando el lenguaje de programación Java. jsoup proporciona una <a href="http://jsoup.org/apidocs/">API</a> para poder extraer la información que necesitemos, ya sean las URLs de los enlaces, determinado texto que contiene una valor, imágenes, &hellip; . A través de los selectores similares a los usados en <a href="https://jquery.com/">jquery</a> podemos llegar a los elementos que queremos de forma simple sin tener que hacer complicados algoritmos.</p>
<p>Dada la URL, archivo o String con contenido HTML podemos extraer los enlaces de imágenes, enlaces, hojas de estilos, iconos como se muestra en el siguiente ejemplo:</p>
<ul>
<li><a href="http://jsoup.org/cookbook/extracting-data/example-list-links">Example program: list links</a></li>
</ul>
<p>Un ejemplo práctico en el que podríamos hacer «scraping» es por ejemplo para extraer los enlaces torrent de descarga de todos los libros de un determinado autor o determinada serie de la página <a href="https://www.epublibre.org/">epublibre</a>, esto nos ahorraría tener que hacerlo manualmente. Además si usamos transmission a través de su API podríamos automatizar la descarga.</p>
<p>El algoritmo o algoritmos que necesitemos para extraer la información será específico según la estructura HTML de cada página web, si esta cambia deberemos cambiar el algoritmo o los selectores, en cualquier caso es mejor que tener que hacer la tarea manualmente constantemente que al cabo de un tiempo será tediosa, aburrida y repetitiva.</p>
<p>Pero hay que tener cuidado con el contenido «scrapeado» y se debe tratar como una fuente de datos no segura. Por seguridad hay que tener especial cuidado con los scripts del contenido importado que podrían hacer que nuestra aplicación al mostrarlos tuviese algún problema de seguridad. La siguiente semana explicaré <a href="https://picodotdev.github.io/blog-bitix/2014/10/como-filtrar-contenido-html-de-forma-segura/">como «scrapear» contenido de forma segura</a> en un ejemplo real como es el agregador de bitácoras <a href="https://twitter.com/blogstackinfo">Blog Stack</a> donde solo se permiten los scripts de fuentes consideradas seguras como presentaciones de <a href="https://speakerdeck.com/">Speakerdeck</a>, <a href="https://gist.github.com/">Gist</a> de GitHub, <a href="https://www.youtube.com/">YouTube</a>, <a href="https://vimeo.com/">Vimeo</a> o publicidad del <a href="https://afiliados.amazon.es">programa de afiliados de Amazon</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/10/como-filtrar-contenido-html-de-forma-segura/">Cómo filtrar contenido HTML de forma segura</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/">Cómo hacer un substring de una cadena html</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/10/generar-urls-semanticas-y-amigables/</id>
        <title>Generar URLs semánticas y amigables</title>
        <updated>2015-01-31T01:00:00+01:00</updated>
        <published>2014-10-03T20:14:18+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/10/generar-urls-semanticas-y-amigables/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En algunas web las urls incluyen el identificativo del objeto de la base de datos a partir de cual se muestra el contenido principal de la página, en <a href="https://twitter.com/blogstackinfo">Blog Stack</a> esto podría ser un artículo pero en otras páginas webs podría ser un producto. Esto genera direcciones de páginas webs «feas» de cara al usuario y al <a href="https://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> de los buscadores además de exponer cierta información de la base de datos que probablemente no interese a nadie excepto al desarrollador de la página. En este artículo voy a explicar una forma de generar <a href="https://es.wikipedia.org/wiki/URL_sem%C3%A1ntica">urls semánticas</a>, «bonitas» o amigables de cara al usuario y al SEO para los buscadores y como lo he implementado en un ejemplo real como es Blog Stack.</p>
<p>Lo primero que debemos conseguir es que las direcciones urls sean únicas para cualquier página de la web, por tanto, en la url deberemos incluir tanta información como sea necesaria pero al mismo tiempo la mínima para hacerlas únicas, sean cortas y que nos permitan identificar de forma unequívoca el contenido a mostrar o el objeto que nos permite obtener la información a visualizar en la página, esta información formará el denominado <em>slug</em>. En el caso de Blog Stack las direcciones «bonitas» se emplean en este momento en dos sitios, para los artículos y para las etiquetas. La información mínima para un artículo es el nombre de la fuente, el año, el mes y el título, para las etiquetas es simplemente el nombre de la etiqueta. Este es un desglose de las partes que forman una dirección url.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">http://www.blogstack.info/post/blogbitix/2013/12/hola-nuevo-mundo/&#10;</span></span><span class="line"><span class="cl">^&nbsp;&nbsp;&nbsp;&nbsp;  ^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  ^&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^&nbsp;&nbsp;&nbsp;&nbsp;^  ^&#10;</span></span><span class="line"><span class="cl">Protocolo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Página&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Año&nbsp;&nbsp;&nbsp;&nbsp; Artículo&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;   Dominio&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bitácora&nbsp;&nbsp;&nbsp;&nbsp;   Mes&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt; --- Slug ----------------------- &gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>url.txt</span>
    </div>
</div>
<p>Pero eso no es todo además quizá queramos transliterar los caracteres de forma que las urls no tengan ciertos caracteres propios de cada idioma. La solución simple pero poco efectiva es hacer una serie de sustituciones como por ejemplo reemplazar á por a, ñ por n, etc&hellip; Esta solución aparte de tener que hacerla nosotros probablemente no seamos ni siquiera conscientes que deberíamos haber reemplazado algún carácter más, se complica más si hemos de hacer lo mismo con el resto de codificaciones de la que ni siquiera conocemos los caracteres. Una solución mejor es utilizar el comando iconv disponible en linux que hace precisamente lo que buscamos:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;áéíóúñ&#34;</span> <span class="p">|</span> iconv -f UTF-8 -t ASCII//TRANSLIT&#10;</span></span><span class="line"><span class="cl">aeioun&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>iconv.sh</span>
    </div>
</div>
<p>Para que la url sea más fácilmente legible es recomendable convertir las mayúsculas a minúsculas y sustituir los caracteres de espacio por un guión (-). En Blog Stack suponiendo un <a href="https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">artículo</a> de la fuente blogbitix publicado en diciembre de 2013 y de título «¡Hola nuevo mundo!» partiríamos de la siguiente url previamente a aplicar la transliteración de caracteres:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">/blogbitix/2013/12/¡Hola nuevo mundo!&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>paso-1.txt</span>
    </div>
</div>
<p>Convertida a minúsculas:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">/blogbitix/2013/12/¡hola nuevo mundo!&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>paso-2.txt</span>
    </div>
</div>
<p>Transliterada con iconv a ASCII:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">/blogbitix/2013/12/?hola nuevo mundo!&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>paso-3.txt</span>
    </div>
</div>
<p>Y finalmente sustituidos cualquier carácter que no esté entre en la siguiente expresión regular [^a-z1-9-] para eliminar por ejemplo signos de puntuación, múltiples guiones seguidos y si el resultado empieza o acaba por guión eliminándolo, al final tenemos el <em>slug</em> o parte de la <a href="https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">url final</a> a la que deberíamos añadir el protocolo y el dominio:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">/blogbitix/2013/12/hola-nuevo-mundo&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>paso-4.txt</span>
    </div>
</div>
<p>Todo esto en código java se traduce en:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">info.blogstack.misc</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Utils</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">Post</span> <span class="n">post</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">f</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">getSource</span><span class="o">().</span><span class="na">getAlias</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">y</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getConsolidatedPublishDate</span><span class="o">().</span><span class="na">getYear</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">m</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">leftPad</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getConsolidatedPublishDate</span><span class="o">().</span><span class="na">getMonthOfYear</span><span class="o">()),</span> <span class="n">2</span><span class="o">,</span> <span class="s">&#34;0&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">e</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">urlize</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">f</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">e</span> <span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">Label</span> <span class="n">label</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">l</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">urlize</span><span class="o">(</span><span class="n">label</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">l</span> <span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">urlize</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">Utils</span><span class="o">.</span><span class="na">transliterate</span><span class="o">(</span><span class="n">text</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">()).</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&#34;[^a-z1-9-]&#34;</span><span class="o">,</span> <span class="s">&#34;-&#34;</span><span class="o">).</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&#34;-+&#34;</span><span class="o">,</span> <span class="s">&#34;-&#34;</span><span class="o">).</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&#34;^-+&#34;</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">).</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&#34;-+$&#34;</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">transliterate</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">Process</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;iconv -f UTF-8 -t ASCII//TRANSLIT&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">Writer</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">Reader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">s</span><span class="o">),</span> <span class="n">w</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="n">Writer</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">r</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Utils-urlize.java</span>
    </div>
</div>
<p>Pero ¿si el identificativo del artículo no está en la url como lo asociamos con el artículo? Nos queda proporcionar una solución a esta necesidad de como identificar esa dirección url semántica y más amigable con el objeto del artículo guardado en la base de datos para mostrarlo al visualizar la página solicitada.</p>
<p>La idea para asociar la url con un objeto de base de datos es crear un hash de la url y tenerlo precalculado en la base de datos, con el hash que generamos a partir de la url y su <em>slug</em> cuando recibimos la petición buscamos el objeto que en la base de datos tenga ese hash. ¿Por qué guardar el hash y no el <em>slug</em>? Un motivo es porque el hash tiene una longitud constante, probablemente mas corto que el <em>slug</em> además de mayor dispersión en el valor del dato que usando un índice de base de datos es beneficioso en la búsqueda. Si la url es única podemos suponer que el hash será único. Si en un futuro cambiásemos la información del <em>slug</em> para calcular el hash lógicamente deberíamos recalcular todos los <em>hashs</em>. Para calcular el hash podemos usar la función MD5 o SHA con el siguiente código en java.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">info.blogstack.misc</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Utils</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getHash</span><span class="o">(</span><span class="n">Post</span> <span class="n">post</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getHash</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">getContext</span><span class="o">(</span><span class="n">post</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getHash</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">String</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">context</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;%s&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">String</span> <span class="n">ss</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="s">&#34;/&#34;</span><span class="o">),</span> <span class="n">context</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kt">byte</span><span class="o">[]</span> <span class="n">h</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&#34;MD5&#34;</span><span class="o">).</span><span class="na">digest</span><span class="o">(</span><span class="n">ss</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">Base64</span><span class="o">.</span><span class="na">encodeBase64String</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">Post</span> <span class="n">post</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">f</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">getSource</span><span class="o">().</span><span class="na">getAlias</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">y</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getConsolidatedPublishDate</span><span class="o">().</span><span class="na">getYear</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">m</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">leftPad</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getConsolidatedPublishDate</span><span class="o">().</span><span class="na">getMonthOfYear</span><span class="o">()),</span> <span class="n">2</span><span class="o">,</span> <span class="s">&#34;0&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">e</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">urlize</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">f</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">e</span> <span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Utils-hash.java</span>
    </div>
</div>
<p>Esta solo es una forma de crear las urls pero suficiente para el propósito de Blog Stack. Quizá en otro caso podríamos querer generar direcciones con caracteres que no solo sean ASCII o incluyan los propios de otra codificación como por ejemplo caracteres cirílicos, chinos o japoneses. También en vez de incluir en la url la referencia a un solo objeto con el <em>slug</em> incluir los <em>slugs</em> de varios objetos, sin esta solución deberíamos incluir un segundo identificativo de la base de datos y las direcciones serán aún más feas, menos amigables y peores en cuanto a SEO.</p>
<p>El código fuente completo de la clase Utils.java lo puedes encontrar en el <a href="https://github.com/picodotdev/blog-stack/tree/master">repositorio de GitHub de Blog Stack</a>.</p>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/09/configuracion-usando-codigo-java/</id>
        <title>Configuración usando código Java</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2014-09-26T19:18:20+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/09/configuracion-usando-codigo-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En las dos últimas entradas he explicado <a href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/">como compilar un archivo de código fuente Java desde una aplicación</a> y como cargar esa clase compilada de forma dinámica para ser utilizada en un programa, la segunda entrada trataba el <a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/">como monitorizar un directorio o archivo para ver si han tenido cambios</a> con la nueva API que a partir de Java 7 disponemos.</p>
<p>En esta entrada quiero explicar un ejemplo de como aprovechar estas dos funcionalidades diferentes en un caso práctico y que nos puede ser útil en algún caso. La idea del ejemplo es definir la configuración de una aplicación como podría ser una aplicación web en un archivo de código fuente Java y que cuando se produjese algún cambio se recargase de forma dinámica.</p>
<p>Algunas ventajas de definir la configuración de la aplicación de esta manera son las siguientes:</p>
<ul>
<li>Al ser el archivo de configuración código Java que se compila podemos aprovecharnos de la validación que hace el compilador para estar seguros de que está libre de errores léxicos y sintácticos, el archivo solo se cargará cuando está libre de errores de compilación. Al compilarlo el compilador nos advertirá de los errores que contenga de forma precisa.</li>
<li>Por otra parte al ser código en el archivo de configuración podemos usar el lenguaje Java para hacer ciertas operaciones que en un xml u otro formato de archivo de texto plano no podemos hacer. Podríamos hacer un cálculo o conectarnos a la base de datos u otro sistema para recuperar cierta información. En algunos casos el lenguaje Java puede ser mejor opción para describir la configuración que los archivos de texto, son los mismos <a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html">problemas de ant y maven comparados con gradle</a>. También el código Java puede ser la forma más breve y útil para describir la configuración de la aplicación que archivos de texto, usando código Java podremos devolver objetos, listas, &hellip; en vez de Strings o números.</li>
<li>La recarga del archivo de configuración cuando se produzcan cambios en él nos evitará tener que reiniciar la aplicación, simplemente haremos el cambio y la configuración se aplicaría. Esto puede ser útil en las aplicaciones web evitándonos tener que hacer un reinicio de la aplicación.</li>
</ul>
<p>Una de las razones de la existencia de los archivos de configuración es tener esa configuración de forma externalizada a la aplicación de tal forma que podamos cambiar la configuración sin tener que modificar la aplicación ni tener que recompilarla. Con la compilación y carga dinámica de la clase Java de la configuración podemos tener estas mismas propiedades de los archivos de configuración. Si a esto le sumamos la recarga dinámica evitamos tener caídas de servicio en la aplicación por modificaciones en el archivo de configuración.</p>
<p>Todo esto es algo que se comenta en el <a href="https://amzn.to/2sNTtku">libro The Pragmatic Programmer</a> con las siguientes lineas:</p>
<blockquote>
<p>Many programs will scan such things only at startup, which is unfortunate. If you need to change the configuration, this forces you to
restart the application. A more flexible approach is to write programs that can reload their
configuration while they’re running. This flexibility comes at a cost: it
is more complex to implement. If it is a long-running server process, you will want to provide some way to reread and apply
metadata while the program is running.</p>
</blockquote>
<p>Esta es la teoría, veamos el código del ejemplo de configuración en Java con recarga dinámica. La mayor parte del código está en la clase <em>ConfiguracionManager</em>. Esta tiene dos métodos que son usados en la clase Main de la aplicación, el método load carga la clase y la compila, y el método monitor que monitoriza el archivo en busca de cambios y llama al método load cuando los detecte.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.FileSystems</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">FileSystems</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getPath</span><span class="o">(</span><span class="s">&#34;src/main/java/io/github/picodotdev/blogbitix/config/AppConfiguracion.java&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">ConfiguracionManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConfiguracionManager</span><span class="o">(</span><span class="s">&#34;io.github.picodotdev.blogbitix.config.AppConfiguracion&#34;</span><span class="o">,</span> <span class="n">path</span><span class="o">).</span><span class="na">load</span><span class="o">().</span><span class="na">monitor</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">20</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">manager</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.Reader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.FileSystems</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.WatchEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.WatchKey</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.WatchService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaCompiler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.ToolProvider</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfiguracionManager</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">fullName</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Configuracion</span> <span class="n">configuracion</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">closed</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ConfiguracionManager</span><span class="o">(</span><span class="n">String</span> <span class="n">fullName</span><span class="o">,</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">fullName</span> <span class="o">=</span> <span class="n">fullName</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Configuracion</span> <span class="nf">getConfiguracion</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">configuracion</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Map</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">configuracion</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ConfiguracionManager</span> <span class="nf">load</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">fullName</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&#34;\\.&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">l</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">1</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">source</span> <span class="o">=</span> <span class="n">loadSource</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">JavaCompiler</span> <span class="n">compiler</span> <span class="o">=</span> <span class="n">ToolProvider</span><span class="o">.</span><span class="na">getSystemJavaCompiler</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">JavaFileManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassFileManager</span><span class="o">(</span><span class="n">compiler</span><span class="o">.</span><span class="na">getStandardFileManager</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">JavaFileObject</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">JavaFileObject</span><span class="o">&gt;();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">CharSequenceJavaFileObject</span><span class="o">(</span><span class="n">fullName</span><span class="o">,</span> <span class="n">source</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">compiler</span><span class="o">.</span><span class="na">getTask</span><span class="o">(</span><span class="k">new</span> <span class="n">NullWriter</span><span class="o">(),</span> <span class="n">manager</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">files</span><span class="o">).</span><span class="na">call</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuracion</span> <span class="o">=</span> <span class="o">(</span><span class="n">Configuracion</span><span class="o">)</span> <span class="n">manager</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">loadClass</span><span class="o">(</span><span class="n">fullName</span><span class="o">).</span><span class="na">newInstance</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ConfiguracionManager</span> <span class="nf">monitor</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">closed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">Runnable</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">while</span> <span class="o">(!</span><span class="n">closed</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="k">try</span> <span class="o">(</span><span class="n">WatchService</span> <span class="n">watchService</span> <span class="o">=</span> <span class="n">FileSystems</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">newWatchService</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">						<span class="n">path</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="n">watchService</span><span class="o">,</span> <span class="n">StandardWatchEventKinds</span><span class="o">.</span><span class="na">ENTRY_MODIFY</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">						<span class="n">WatchKey</span> <span class="n">watchKey</span> <span class="o">=</span> <span class="n">watchService</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="o">(</span><span class="n">watchKey</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">							<span class="k">return</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">						<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">for</span> <span class="o">(</span><span class="n">WatchEvent</span><span class="o">&lt;?&gt;</span> <span class="n">event</span> <span class="o">:</span> <span class="n">watchKey</span><span class="o">.</span><span class="na">pollEvents</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">							<span class="n">Path</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Path</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">context</span><span class="o">();</span>							&#10;</span></span><span class="line"><span class="cl">							<span class="n">Path</span> <span class="n">pp</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">resolve</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">							<span class="k">if</span> <span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">pp</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">								<span class="n">load</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">							<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">						<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">					<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">closed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="nf">loadSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">StringBuffer</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kt">char</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">128</span> <span class="o">*</span> <span class="n">1024</span><span class="o">];</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toFile</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">source</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">n</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ConfiguracionManager.java</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/09/configuracion-usando-codigo-java/images/main_hu8b068bba2353bdbd15e6919d7eeefd19_24838_2560x1440_fit_box_3.png" data-gallery="" title="Salida programa Main.java"><img src="https://picodotdev.github.io/blog-bitix/2014/09/configuracion-usando-codigo-java/images/main_hu8b068bba2353bdbd15e6919d7eeefd19_24838_300x200_fit_box_3.png" width="300" height="104" alt="Salida programa Main.java" title="Salida programa Main.java"  class="lozad "></a></p>
</figure>
</div>
<p>Esta idea de no utilizar archivos de configuración sino emplear código como la mejor forma y más breve de definirla es algo que hace <a href="https://gradle.org/">Gradle</a> con los archivos de configuración del proyecto y <a href="https://tapestry.apache.org/">apache tapestry</a> para definir los módulos y la configuración del contenedor de inversión de control, parece una tendencia por el hecho de tener las propiedades y ventajas comentadas sobre otro tipo de archivos ya sean xml o sus sustitutos más recientes como yaml, json, &hellip; que son más compactos y legibles que xml pero que siguen adoleciendo de algunos de los mismos defectos.</p>
<p>El código fuente completo puede encontrarse en el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ConfiguracionJava">siguiente repositorio de GitHub</a>.</p>
]]>
        </content>
        
            
                <category term="programacion"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/</id>
        <title>Monitorizar archivos con Java</title>
        <updated>2014-09-20T09:27:35+02:00</updated>
        <published>2014-09-20T09:27:35+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Java a partir de la versión 7 del JDK ofrece el soporte para recibir notificaciones de cambios en el sistema de archivos sin tener que estar monitorizándolos constantemente en busca de actividad. No tener que estar monitorizando los archivos de <a href="https://es.wikipedia.org/wiki/Polling">forma «polling»</a> para buscar cambios además de hacer que el código sea más sencillo desde el punto de vista de la programación hace que no se malgasten recursos del sistema si los cambios son esporádicos.</p>
<p>Para ofrecer esta funcionalidad y a partir de Java 7 hay disponibles unas pocas nuevas clases dentro de lo que se conoce como la <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/package-summary.html">nueva API de entrada y salida (NIO)</a> que sustituye al método tradicional de entrada y salida con las clases del paquete <a href="https://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html">java.io</a> entre otras cosas para trabajar con el sistema de archivos.</p>
<p>Para monitorizar los archivos y recibir notificaciones cuando se produzcan cambios en ellos deberemos emplear las clases <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html">Path</a> y <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html">WatchService</a>. Empleando estas dos clases el código para monitorizar cambios en los archivos de un directorio sería: registrar el servicio de monitorización obtenido de la clase <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystems.html">FileSystems</a>, escuchar los eventos cuando se produzcan y procesarlos de forma secuencial en un bucle. En el ejemplo se monitoriza el archivo <a href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/">fuente de una clase Java que es compilado en memoria e instanciada</a> como explicaba en el anterior artículo:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.Reader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.FileSystems</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.WatchEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.WatchKey</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.file.WatchService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaCompiler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.ToolProvider</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfiguracionManager</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ConfiguracionManager</span> <span class="nf">monitor</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">closed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">Runnable</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">while</span> <span class="o">(!</span><span class="n">closed</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="k">try</span> <span class="o">(</span><span class="n">WatchService</span> <span class="n">watchService</span> <span class="o">=</span> <span class="n">FileSystems</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">newWatchService</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">						<span class="n">path</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="n">watchService</span><span class="o">,</span> <span class="n">StandardWatchEventKinds</span><span class="o">.</span><span class="na">ENTRY_MODIFY</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">						<span class="n">WatchKey</span> <span class="n">watchKey</span> <span class="o">=</span> <span class="n">watchService</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="o">(</span><span class="n">watchKey</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">							<span class="k">return</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">						<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">for</span> <span class="o">(</span><span class="n">WatchEvent</span><span class="o">&lt;?&gt;</span> <span class="n">event</span> <span class="o">:</span> <span class="n">watchKey</span><span class="o">.</span><span class="na">pollEvents</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">							<span class="n">Path</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Path</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">context</span><span class="o">();</span>							&#10;</span></span><span class="line"><span class="cl">							<span class="n">Path</span> <span class="n">pp</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">resolve</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">							<span class="k">if</span> <span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">pp</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">								<span class="n">load</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">							<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">						<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">					<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ConfiguracionManager.java</span>
    </div>
</div>
<p>En este ejemplo solo se monitorizan los cambios de los archivos pero usando otras propiedades se pueden monitorizar la eliminación y creación, en la clase <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">StandardWatchEventKinds</a> pueden verse estas propiedades. Una cosa a tener en cuenta es que se pueden monitorizar directorios no archivos en concreto, pero como en el ejemplo una vez que recibimos las notificaciones de monitorización es algo que podemos hacer nosotros. Ejecutando el programa una salida del su funcionamiento podría ser la siguiente en el que la clase se recarga cuando se detectan cambios en ella variando los valores que se emiten en la consola.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/images/main_hu8b068bba2353bdbd15e6919d7eeefd19_24838_2560x1440_fit_box_3.png" data-gallery="" title="Salida programa Main.java"><img src="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/images/main_hu8b068bba2353bdbd15e6919d7eeefd19_24838_300x200_fit_box_3.png" width="300" height="104" alt="Salida programa Main.java" title="Salida programa Main.java"  class="lozad "></a></p>
</figure>
</div>
<p>Esta funcionalidad de monitorización de cambios de archivos junto con la <a href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/">compilación y carga dinámica de archivos con código fuente Java</a> puede utilizarse para hacer que la configuración de una aplicación esté definida en código Java y se cargue dinámicamente sin tener que reiniciar la aplicación. Y esto es lo que mostraré en la siguiente entrada y explicaré con más detalles que ventajas tienen esta idea.</p>
<p>El código fuente completo puede encontrarse en el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ConfiguracionJava">siguiente repositorio de GitHub</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html">Path</a></li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html">WatchService</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/04/introduccion-a-nio-2-el-sistema-de-entrada-salida-de-java/">Introducción a NIO.2, el sistema de entrada/salida de Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="programacion"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/</id>
        <title>Compilar y cargar de forma dinámica una clase Java</title>
        <updated>2015-05-30T00:00:00+02:00</updated>
        <published>2014-09-12T19:49:55+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Desde la versión 1.6 del JDK disponemos de una API para acceder al compilador desde un programa Java. En el ejemplo de este artículo utilizaré varias clases de esa API para conseguir compilar un archivo con la definición de una clase Java y posteriormente instanciarla y usarla. En posteriores artículos comentaré un ejemplo práctico y muy útil con el que podemos sacar provecho de esta funcionalidad.</p>
<p>Las clases que necesitaremos de esa API son:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/JavaCompiler.html">JavaCompiler</a> que es la interfaz para acceder al compilador desde un programa Java.</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/JavaFileManager.html">JavaFileManager</a> que es una abstracción para gestionar los archivos fuente y las clases. Usaremos uno propio llamado ClassFileManager.</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html">SimpleJavaFileObject</a> clase que contiene el código fuente Java.</li>
</ul>
<p>Y también necesitaremos redefinir algunas:</p>
<ul>
<li>La clase ClassFileManager que extiende <a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/ForwardingJavaFileManager.html">ForwardingJavaFileManager</a> y se encargará de cargar los objetos JavaClassObject con un ClassLoader.</li>
<li>La clase JavaClassObject que extiende <a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html">SimpleJavaFileObject</a> y contendrá el código <em>bytecode</em> generado en memoria por el compilador.</li>
<li>CharSequenceJavaFileObject clase que extiende <a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html">SimpleJavaFileObject</a> y que contiene el código fuente en un objeto de tipo CharSequence.</li>
<li>La interfaz Configuracion es la interfaz que debe cumplir la clase Java que compilaremos, cargaremos de forma dinámica en la aplicación y posteriormente invocaremos sus métodos.</li>
</ul>
<p>En el javadoc de las clases hay una descripción más amplia de cada una de ellas.</p>
<p>En el siguiente código suponiendo que disponemos en la variable source de un código Java a compilar y de la que crearemos mas tarde una instancia de la clase que define podemos hacerlo de la forma indicada continuación. Antes de mostrar el código código la clase a compilar y a cargar de forma dinámica en este ejemplo debe cumplir el contrato definido en una determinada interfaz de modo que una vez compilada y cargada sepamos que métodos podemos invocar de esa clase. En este caso el código fuente de la clase a compilar está hardcodeada en un String en el propio programa pero perfectamente podría haber obtenido su contenido de un archivo del disco duro o de una base de datos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaCompiler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.ToolProvider</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main1</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Definir la clase&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">String</span><span class="o">[]</span> <span class="n">sources</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;package io.github.picodotdev.blogbitix.config;&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">				<span class="s">&#34;import java.util.HashMap;&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">				<span class="s">&#34;import java.util.Map;&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">				<span class="s">&#34;public class AppConfiguracion implements Configuracion {&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">					<span class="s">&#34;private static Map config;&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">					<span class="s">&#34;static {&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">						<span class="s">&#34;config = new HashMap();&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">						<span class="s">&#34;config.put(\&#34;propiedad\&#34;, 11);&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">					<span class="s">&#34;}&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">					<span class="s">&#34;public Map get() {&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">						<span class="s">&#34;return config;&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">					<span class="s">&#34;}&#34;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">				<span class="s">&#34;}&#34;</span> <span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">source</span> <span class="o">=</span> <span class="n">join</span><span class="o">(</span><span class="n">sources</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;io.github.picodotdev.blogbitix.config.AppConfiguracion&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Compilar la clase&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">JavaCompiler</span> <span class="n">compiler</span> <span class="o">=</span> <span class="n">ToolProvider</span><span class="o">.</span><span class="na">getSystemJavaCompiler</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">JavaFileManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassFileManager</span><span class="o">(</span><span class="n">compiler</span><span class="o">.</span><span class="na">getStandardFileManager</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">JavaFileObject</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">JavaFileObject</span><span class="o">&gt;();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">CharSequenceJavaFileObject</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">source</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">compiler</span><span class="o">.</span><span class="na">getTask</span><span class="o">(</span><span class="k">new</span> <span class="n">NullWriter</span><span class="o">(),</span> <span class="n">manager</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">files</span><span class="o">).</span><span class="na">call</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Cargar e instanciar la clase&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Configuracion</span> <span class="n">configuracion</span> <span class="o">=</span> <span class="o">(</span><span class="n">Configuracion</span><span class="o">)</span> <span class="n">manager</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">loadClass</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">newInstance</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Invocar un método de la clase&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">configuracion</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">join</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main1.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Configuracion</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">Map</span> <span class="nf">get</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Configuracion.java</span>
    </div>
</div>
<p>Con este ejemplo puede intuirse el ejemplo práctico que comentaré que no es más que utilizar código Java para definir la configuración de una aplicación, esto tiene varias ventajas sobre utilizar un xml u otro tipo de formato de archivo de configuración de la aplicación (una de ellas que utilizando un IDE el compilador nos informará de errores y nos ofrecerá asistencia al escribir código). Esta idea junto con la posibilidad de monitorizar un archivo para ver si se han producido cambios en él (también con la API de Java) y recargarlo puede darnos como resultado una funcionalidad en la que la configuración se basa en código Java y que la configuración pueda recargarse de forma dinámica, si la aplicación se utiliza en un servidor de aplicaciones podríamos cambiar la configuración sin tener que reiniciar la aplicación.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/images/main1_hu328714695d20411c508d1e1adbbc62cf_18547_2560x1440_fit_box_3.png" data-gallery="" title="Salida programa Main1.java"><img src="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/images/main1_hu328714695d20411c508d1e1adbbc62cf_18547_300x200_fit_box_3.png" width="300" height="101" alt="Salida programa Main1.java" title="Salida programa Main1.java"  class="lozad "></a></p>
</figure>
</div>
<p>Casi para terminar las clases de utilidad:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.security.SecureClassLoader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.FileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.ForwardingJavaFileManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject.Kind</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.StandardJavaFileManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassFileManager</span> <span class="kd">extends</span> <span class="n">ForwardingJavaFileManager</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">classes</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Will initialize the manager with the specified standard java file manager&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param standardManger&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ClassFileManager</span><span class="o">(</span><span class="n">StandardJavaFileManager</span> <span class="n">standardManager</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">super</span><span class="o">(</span><span class="n">standardManager</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">classes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Will be used by us to get the class loader for our compiled class. It creates an anonymous&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * class extending the SecureClassLoader which uses the byte code created by the compiler and&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * stored in the JavaClassObject, and returns the Class for it&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ClassLoader</span> <span class="nf">getClassLoader</span><span class="o">(</span><span class="n">Location</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">SecureClassLoader</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">loadClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Class</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="o">(</span><span class="n">Class</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">JavaClassObject</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">JavaClassObject</span> <span class="n">object</span> <span class="o">=</span> <span class="o">(</span><span class="n">JavaClassObject</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">defineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">object</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">0</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">classes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">clazz</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>					&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span> &#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Gives the compiler an instance of the JavaClassObject so that the compiler can write the byte&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * code into it.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">JavaFileObject</span> <span class="nf">getJavaFileForOutput</span><span class="o">(</span><span class="n">Location</span> <span class="n">location</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">Kind</span> <span class="n">kind</span><span class="o">,</span> <span class="n">FileObject</span> <span class="n">sibling</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">JavaClassObject</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JavaClassObject</span><span class="o">(</span><span class="n">className</span><span class="o">,</span> <span class="n">kind</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">classes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">className</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">object</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ClassFileManager.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.SimpleJavaFileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CharSequenceJavaFileObject</span> <span class="kd">extends</span> <span class="n">SimpleJavaFileObject</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * CharSequence representing the source code to be compiled&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">CharSequence</span> <span class="n">content</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * This constructor will store the source code in the internal &#34;content&#34; variable and register&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * it as a source code, using a URI containing the class full name&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param className&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name of the public class in the source code&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param content&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source code to compile&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">CharSequenceJavaFileObject</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">CharSequence</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">super</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&#34;string:///&#34;</span> <span class="o">+</span> <span class="n">className</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="n">Kind</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">.</span><span class="na">extension</span><span class="o">),</span> <span class="n">Kind</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Answers the CharSequence to be compiled. It will give the source code stored in variable&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &#34;content&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">CharSequence</span> <span class="nf">getCharContent</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">ignoreEncodingErrors</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">content</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>CharSequenceJavaFileObject.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.tools.SimpleJavaFileObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaClassObject</span> <span class="kd">extends</span> <span class="n">SimpleJavaFileObject</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Byte code created by the compiler will be stored in this ByteArrayOutputStream so that we can&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * later get the byte array out of it and put it in the memory as an instance of our class.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kd">final</span> <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Registers the compiled class object under URI containing the class full name&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param name&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Full name of the compiled class&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param kind&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kind of the data. It will be CLASS in our case&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">JavaClassObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Kind</span> <span class="n">kind</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">super</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&#34;string:///&#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="n">kind</span><span class="o">.</span><span class="na">extension</span><span class="o">),</span> <span class="n">kind</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Will be used by our file manager to get the byte code that can be put into memory to&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * instantiate our class&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @return compiled byte code&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getBytes</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Will provide the compiler with an output stream that leads to our byte array. This way the&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * compiler will write everything into the byte array that we will instantiate later&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">OutputStream</span> <span class="nf">openOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">bos</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JavaClassObject.java</span>
    </div>
</div>
<p>El código fuente completo puede encontrarse en el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ConfiguracionJava">siguiente repositorio de GitHub</a>.</p>
<p>En el siguiente artículo comentaré como <a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/">monitorizar un archivo con código fuente Java</a> para ver si se han producido cambios en él. Y basándome en estos dos artículos comentaré como disponer de <a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/">un archivo de configuración que se recargue al detectase cambios en él</a>.</p>
]]>
        </content>
        
            
                <category term="programacion"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/</id>
        <title>Actualización del libro PlugIn Tapestry</title>
        <updated>2015-10-04T17:00:00+02:00</updated>
        <published>2014-08-30T00:16:10+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Hace un poco más de una año publiqué el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a> que como su nombre ya adelanta versa sobre el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> para el desarrollo de aplicaciones y páginas web con Java. Casi 300 páginas de documentación que describen este <em>framework</em>, como usarlo y va más allá explicando como realizar algunas de las tareas comunes que es necesario hacer en casi todas las aplicaciones web independientemente del <em>framework</em> que elijamos pero en este caso visto desde el punto de vista de Tapestry.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/images/PugInTapestry_Portada_hudd958694a9c7fbaaf2a5b065abe3f288_268557_2560x1440_fit_box_3.png" data-gallery="" title="Portada libro PlugIn Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/images/PugInTapestry_Portada_hudd958694a9c7fbaaf2a5b065abe3f288_268557_300x200_fit_box_3.png" width="141" height="200" alt="Portada libro PlugIn Tapestry" title="Portada libro PlugIn Tapestry"  class="lozad "></a></p>
</figure>
</div>
<p>En esta actualización he revisado capítulos como el Inicio rápido para empezar a desarrollar en unos pocos minutos, la sección que trata sobre Plantillas para dar a las páginas un aspecto común, la sección que trata sobre unas Convenciones para los archivos de literales, ampliada la sección de Principios en la que se detalla cuales son las ideas y objetivos por los que se rige el <em>framework</em>, también reescrita la sección de Integración con Spring, una de las librerías más usadas y que facilita el desarrollo enormemente.</p>
<p>Pero además he incluido nuevo contenido que he publicado en diferentes artículos en <a href="https://picodotdev.github.io/blog-bitix/">mi bitácora</a> desde la publicación original del libro. Estos han sido Como ejecutar Apache Tapestry en un servidor de aplicaciones JBoss o Wildfly, explicada la página Dashboard que nos permite obtener información interesante mientras desarrollamos como que páginas y componentes incluye la aplicación o las estadísticas de Hibernate, explicadas las diferencias del modelo «pull» en el que se basa Tapestry del modelo «push» en el que se basan la mayoría de <em>frameworks</em> orientados a acciones independientemente del lenguaje (Grails, Django, Symfony, ASP.NET MVC), como servir los recursos estáticos desde una red de contenidos (CDN, Content Delivery Network), la anotación Cached que permite evitar invocaciones a métodos devolviendo el resultado obtenido en la primera invocación, como usar Tapestry en una aplicación de forma «standalone» fuera del contexto de un servidor de aplicaciones, la anotación Secure y como añadir más seguridad usando el protocolo seguro HTTPS.</p>
<div class="buttons">
    <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">Descargar el libro (PDF)</a>
    <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Obtener código fuente ejemplos</a>
</div>
<div class="share-this" style="text-align: center; margin-bottom: 20px">
    <h3>¡Y luego compártelo!</h3>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/</id>
        <title>Doble barra de botones con Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-08-29T13:04:52+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Por motivos de usabilidad en algunas páginas se incluyen dos barra de botones, una antes de una larga sección y otra después. El motivo de la doble barra de botones inicial es que no sea necesario hacer «scroll» hasta el final de la página para acceder a los botones y realizar la acción que permitan. Por el contrario, incluir la barra de botones al final de la página permite que una vez seleccionados los elementos o revisado el contenido de la sección hacer disponibles las acciones que es probable que se quieran realizar.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/images/doble-barra-botones_huea66ab1892bbc5f0cb1dd6ffb2bd04e0_24264_2560x1440_fit_box_3.png" data-gallery="" title="Doble barra de botones"><img src="https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/images/doble-barra-botones_huea66ab1892bbc5f0cb1dd6ffb2bd04e0_24264_300x200_fit_box_3.png" width="216" height="200" alt="Doble barra de botones" title="Doble barra de botones"  class="lozad "></a></p>
</figure>
</div>
<p>Dependiendo del <em>framework</em> web que utilicemos podremos hacerlo de una o varias formas pero de lo que estamos seguros es que copiar y pegar haciendo que el código esté duplicado no es una buena idea por los problemas de mantenimiento que puede suponer. Pero crear una pequeña plantilla o archivo exclusivo para incluir la barra de botones tampoco es la solución ideal, ¿por que? pues porque creando un archivo específico con la botonera puede que nos ocasione un problema que denominaré de «microgestión», es decir, nos obliga a crear un montón de pequeños archivos pequeñitos y hacer referencia o utilizar el mecanismo de inclusión que dispongamos para usar el contenido en unos de otros. En una aplicación grande esta microgestión si nos vemos obligados a ella puede llegar a ser molesta al desarrollar cuanto menos.</p>
<p>¿Como se puede evitar? En el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> la doble botonera puede hacerse de varias formas una de ellas es crear un componente pero esto nos obliga a crear un archivo para la clase java y probablemente también un archivo de plantilla con el contenido html causando el problema de la microgestión. Pero en Tapestry también podemos hacer uso del <a href="http://tapestry.apache.org/component-templates.html">componente block</a> que sirve para incluir en él cierto contenido y el <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Delegate.html">componente delegate</a> que sirve para emitir el contenido entre otras cosas de un componente block. Usando estos dos componentes podemos evitar la microgestión definiendo todo en un mismo archivo, además al tener todo en un mismo archivo el código será más fácilmente legible, quedándonos en un ejemplo de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">&lt;!DOCTYPE html&gt;&#10;</span></span><span class="line"><span class="cl">&lt;html t:type=&#34;layout&#34; titulo=&#34;Administración de productos&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_3.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:block id=&#34;edicionBlock&#34;&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;t:remove&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;En otros frameworks la lógica para obtener el título del bloque según se trate de un alta o una modificación,&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probablemente se hiciese metiendo lógica en la plantilla de presentación, dado que Tapestry permite llamar a métodos&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;de la clase Java asociada al componente es mejor dejar esa lógica en el código Java de esta manera la plantilla será más &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sencilla y clara además de aprovecharnos del compilador. labels es un método definido en la página admin.producto&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;que devuelve un mapa.&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/t:remove&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;h1&gt;${labels.get(&#39;titulo&#39;)}&lt;/h1&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;t:form t:id=&#34;form&#34; context=&#34;producto.id&#34; validate=&#34;producto&#34; clientValidation=&#34;none&#34; class=&#34;well&#34; role=&#34;form&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;t:errors class=&#34;literal:alert alert-danger&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		&lt;t:delegate to=&#34;botonesEdicionBlock&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		&lt;div style=&#34;margin-top: 10px;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;form-group&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;t:label for=&#34;nombre&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div class=&#34;controls&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;input t:type=&#34;textfield&#34; t:id=&#34;nombre&#34; value=&#34;producto.nombre&#34; size=&#34;100&#34; label=&#34;Nombre&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;form-group&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;t:label for=&#34;descripcion&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div class=&#34;controls&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;input t:type=&#34;textarea&#34; t:id=&#34;descripcion&#34; value=&#34;producto.descripcion&#34; label=&#34;Descripción&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;form-group&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;t:label for=&#34;cantidad&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div class=&#34;controls&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;input t:type=&#34;textfield&#34; t:id=&#34;cantidad&#34; value=&#34;producto.cantidad&#34; size=&#34;4&#34; label=&#34;Cantidad&#34; class=&#34;numeric&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">			&lt;div class=&#34;form-group&#34;&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;t:label for=&#34;fecha&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div class=&#34;controls&#34;&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;div class=&#34;input-group&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;input t:type=&#34;textfield&#34; t:id=&#34;fecha&#34; type=&#34;date&#34; value=&#34;producto.fecha&#34; label=&#34;Fecha&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;span class=&#34;input-group-addon&#34;&gt;&lt;span class=&#34;glyphicon glyphicon-calendar&#34;&gt;&lt;/span&gt;&lt;/span&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/div&gt;				&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		&lt;t:delegate to=&#34;botonesEdicionBlock&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/t:form&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/t:block&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;t:block id=&#34;botonesEdicionBlock&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;div class=&#34;btn-toolbar&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;input t:type=&#34;submit&#34; class=&#34;btn btn-primary&#34; value=&#34;prop:labels.get(&#39;guardar&#39;)&#34; role=&#34;button&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;t:if test=&#34;producto.id&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;a t:type=&#34;eventlink&#34; event=&#34;eliminar&#34; context=&#34;producto.id&#34; role=&#34;button&#34; class=&#34;btn btn-danger&#34; style=&#34;color: white;&#34;&gt;Eliminar&lt;/a&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;input t:type=&#34;submit&#34; class=&#34;btn btn-danger&#34; value=&#34;Cancelar&#34; mode=&#34;cancel&#34; role=&#34;button&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/t:block&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;/html&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProductoAdmin.tml</span>
    </div>
</div>
<p>En <a href="https://grails.org/">Grails</a> por poner un ejemplo de un <em>framework</em> que no usa el concepto de componentes la forma habitual de hacerlo es usando un g:include y con ello teniendo microgestión. Pero retorciendo un poco (creo) en este caso el uso de Grails podemos emplear la etiqueta g:set para establecer el contenido de la botonera y emitir su contenido dos veces en el gsp.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;g:set var=&#34;botonesEdicionBlock&#34;&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;div class=&#34;btn-toolbar&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;input type=&#34;submit&#34; class=&#34;btn btn-primary&#34; value=&#34;${message(code: &#39;guardar&#39;)}&#34; role=&#34;button&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;g:if test=&#34;${producto.id}&#34;&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;g:link action=&#34;eliminar&#34; params=&#34;${[id: producto.id]}&#34; role=&#34;button&#34; class=&#34;btn btn-danger&#34; style=&#34;color: white;&#34;&gt;Eliminar&lt;/a&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/t:if&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;input type=&#34;submit&#34; class=&#34;btn btn-danger&#34; value=&#34;{message(code: &#39;guardar&#39;)}&#34; role=&#34;button&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/g:set&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&lt;g:form ...&gt;&#10;</span></span><span class="line"><span class="cl">	...&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	${botonesEdicionBlock}&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	&lt;div style=&#34;margin-top: 10px;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">		...&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	${botonesEdicionBlock}&#10;</span></span><span class="line"><span class="cl">&lt;/g:form&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProductoAdmin.gsp</span>
    </div>
</div>
<p>El código completo de este ejemplo del caso de Tapestry está en un <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">repositorio de GitHub</a>. Si estás interesado en conocer más en profundidad como funciona Tapestry y sus múltiples «killer features», bastantes mucho más importantes que lo explicado en este artículo, puedes descargarte el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a> que he escrito, de forma gratuita, sin registros, y en varios formatos ¿que más puedes pedir?. Y si te interesa el tema puedes suscribirte al <a href="https://picodotdev.github.io/blog-bitix/index.xml">canal RSS de esta bitácora</a> para no perderte nada del nuevo contenido que publique, no solo sobre Tapestry, sino también sobre Java, Linux, &hellip;</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/tapestry/">Más artículos sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/</id>
        <title>Forzar el uso del protocolo HTTPS en Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-08-22T11:09:23+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>El <a href="https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure">protocolo seguro https</a> hace que los datos que viajan entre el servidor y el cliente a través de internet estén cifrados de modo que nadie más pueda saber cual es es la información intercambiada ni se pueda alterar sin el conocimiento entre las dos partes. Estas propiedades nos son de interés para ciertas partes de una aplicación o en algunos casos la aplicación entera. ¿Cuales son estos casos? Son aquellos en los que queramos garantizar una mayor seguridad, estos pueden ser para proteger usuarios y contraseñas de autenticación para iniciar sesión, ciertos datos sensibles como datos personales, datos de tarjetas de crédito, &hellip; evitando que una tercera parte los obtenga y los utilice para su provecho propio y supongan un problema de seguridad en la aplicación.</p>
<p>Es casi obligatorio forzar a que ciertas páginas de una aplicación o página web funcionen mediante el protocolo seguro https como las páginas de inicio de sesión donde los usuarios se autentican normalmente introduciendo su usuario y contraseña, páginas de compra donde los usuarios introducen los datos de su tarjeta de crédito o algunas secciones de una aplicación como las secciones de las cuentas de los usuarios o un backoffice.</p>
<p>En <a href="https://tapestry.apache.org/">Apache Tapestry</a> hay varias formas de forzar a que una determinada página use el protocolo seguro de modo que si se accede por el <a href="https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol">protocolo no seguro http</a> la aplicación obligue a usar https haciendo una redirección. Una de ellas es utilizar la anotación <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/annotations/Secure.html">@Secure</a> en las páginas que queramos obligar a usar https. Basta con anotar las clases de las páginas con @Secure y Tapestry automáticamente hará la redirección al protocolo https cuando se acceda con http a la página.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.pages</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nd">@Secure</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Login</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Login.java</span>
    </div>
</div>
<p>Probablemente nos interese configurar el puerto y el host que usará Tapestry al hacer la redirección para que coincidan con el usado en el servidor al que accede el usuario, sobre todo si en la aplicación usamos un servidor web proxy como <a href="https://httpd.apache.org/">Apache</a>, <a href="https://www.lighttpd.net/">Lighttpd</a> o <a href="https://nginx.org/">Nginx</a> delante del servidor de aplicaciones donde realmente se ejecuta la aplicación web. El puerto seguro del protocolo https predeterminado es 443 pero en el servidor de aplicaciones tomcat por defecto es 8443. Esto en tapestry lo indicamos configurando con ciertos símbolos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeApplicationDefaults</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SymbolConstants</span><span class="o">.</span><span class="na">SECURE_ENABLED</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SymbolConstants</span><span class="o">.</span><span class="na">HOSTPORT</span><span class="o">,</span> <span class="n">8080</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SymbolConstants</span><span class="o">.</span><span class="na">HOSTPORT_SECURE</span><span class="o">,</span> <span class="n">8443</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule-1.java</span>
    </div>
</div>
<p>Para probar mientras desarrollamos, al menos en nuestro equipo, que la redirección se hace correctamente empleando el plugin de gradle para tomcat podemos hacer que el servidor de desarrollo se inicie con el puerto https disponible. <a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Para usar https se necesita un certificado digital</a> que el <a href="https://github.com/bmuschko/gradle-tomcat-plugin">plugin de gradle para tomcat</a> se encarga de generar al iniciar la aplicación, aunque sea autofirmado y el navegador alerte que no lo reconoce como firmado un una autoridad en la que confíe, si lo aceptamos podemos acceder a la aplicación sin más problema. Usando gradle la configuración que podemos emplear es:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">buildscript</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="s1">&#39;org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">tomcat</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpPort</span> <span class="o">=</span> <span class="mi">8080</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpsPort</span> <span class="o">=</span> <span class="mi">8443</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">enableSSL</span> <span class="o">=</span> <span class="kc">true</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La anotación @Secure en Tapestry es suficiente pero podemos hacer lo mismo empleando <a href="https://shiro.apache.org/">Shiro</a>. <a href="https://elblogdepicodev.blogspot.com.es/2013/05/seguridad-en-aplicacion-web-con-apache.htmlindex-amp.html">Integrando Shiro con Tapestry nos permite realizar autenticación y autorización</a>, pero además empleando Shiro también podemos obligar a usar el protocolo https del mismo modo que lo hacemos con la anotación Secure. Cualquiera de las dos formas es perfectamente válida y depende más de cual prefiramos. Con la anotación @Secure deberemos anotar cada página, con Shiro podemos tener centralizado en un único punto en que páginas requerimos https. Con Shiro la configuración se hace con una contribución al servicio SecurityConfiguration y usando el método contributeSecurityConfiguration del módulo y la clase SecurityFilterChainFactory y su método ssl(). Un ejemplo es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">....</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeSecurityConfiguration</span><span class="o">(</span><span class="n">Configuration</span><span class="o">&lt;</span><span class="n">SecurityFilterChain</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">,</span> <span class="n">SecurityFilterChainFactory</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">createChain</span><span class="o">(</span><span class="s">&#34;/admin/**&#34;</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">authc</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">ssl</span><span class="o">()).</span><span class="na">build</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">....</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule-2.java</span>
    </div>
</div>
<p>En cualquiera de los dos casos mostrados en este ejemplo se obliga a usar https en la página de login:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/images/plugin-tapestry-https_hu8be718460db9292afee033b73c6a0600_58871_2560x1440_fit_box_3.png" data-gallery="" title="PlugIn Tapestry con https"><img src="https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/images/plugin-tapestry-https_hu8be718460db9292afee033b73c6a0600_58871_300x200_fit_box_3.png" width="192" height="200" alt="PlugIn Tapestry con https" title="PlugIn Tapestry con https"  class="lozad "></a></p>
</figure>
</div>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Generar y convertir claves y certificados con OpenSSL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone/</id>
        <title>Usar Apache Tapestry en una aplicación «standalone»</title>
        <updated>2015-05-30T00:00:00+02:00</updated>
        <published>2014-07-31T13:06:58+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p><a href="https://tapestry.apache.org/">Apache Tapestry</a> es un <em>framework</em> de desarrollo para aplicaciones o páginas web en el que habitualmente se emplea el lenguaje Java y se despliega en un servidor de aplicaciones como entorno de ejecución. Pero Tapestry es una pieza de software que se compone de diferentes partes algunas de las cuales pueden ser utilizadas fuera del contexto de una aplicación web. Este es el caso del contenedor de dependencias que proporciona <a href="https://en.wikipedia.org/wiki/Inversion_of_control">IoC</a> (IoC, «Inversion of Control») en Tapestry, podemos usarlo en una aplicación «standalone», es decir, en un programa que se inicia con el típico «public static void main(String[] args)» de las aplicaciones Java.</p>
<p>El contenedor de dependencias de Tapestry tiene algunas propiedades interesantes como que dos servicios pueden ser mutuamente dependientes y que se puede contribuir configuración a cualquier servicio para cambiar en cierta medida su comportamiento además de otras características que explico más en detalle en el libro <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry</a>. Para usarlo en una un programa que se ejecuta de la linea de comandos usando el main de una clase Java primeramente deberemos incluir en el proyecto la dependencia sobre tapestry-ioc, si usamos <a href="https://gradle.org/">Gradle</a> de la siguiente manera:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-core:5.4-beta-3&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-ioc5.4-beta-3&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-1.gradle</span>
    </div>
</div>
<p>Una vez que tenemos la dependencia en el programa deberemos iniciar el contenedor IoC e indicarle los diferentes módulos que contendrán la definición de los servicios.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RegistryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RegistryBuilder</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TapestryModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">HibernateCoreModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">HibernateModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">BeanValidatorModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">TapestryOfflineModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">GeneratorModule</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SpringModuleDef</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">Registry</span> <span class="n">registry</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">registry</span><span class="o">.</span><span class="na">performRegistryStartup</span><span class="o">();</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-1.java</span>
    </div>
</div>
<p>En este caso he usado <a href="https://elblogdepicodev.blogspot.com.es/2013/11/integracion-y-transacciones-con-spring.html">Spring para la transaccionalidad</a> e Hibernate para la persistencia. Después de esto tenemos la referencia al registro de servicios, podemos obtener cualquiera en base a la interfaz que implementa, en este caso el servicio que implementa la interfaz <a href="https://github.com/picodotdev/blog-stack/blob/master/src/main/java/info/blogstack/services/MainService.java">MainService</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">registry</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">MainService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-2.java</span>
    </div>
</div>
<p>Al final de la aplicación deberemos llamar al método shutdown del registro.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">registry</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-3.java</span>
    </div>
</div>
<p>Otra cosa que nos puede interesar es poder generar contenido html usando el sistema de plantillas y componentes de Tapestry, ya sea en una aplicación «standalone» o en una aplicación web para enviar el contenido en un correo electrónico o quizá guardarlo en un archivo. Hay muchos sistemas de plantillas, cada <em>framework</em> suele tener uno propio o usar una solución específica como <a href="http://www.thymeleaf.org/">Thymeleaf</a> pero la mayoría usa un <a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/">modelo push en vez de un modelo pull</a>, en el caso de Tapestry se emplea el modelo pull que tiene algunas ventajas como explico en el artículo anterior. Si usamos una aplicación Tapestry usándolo también para generar el contenido de los correos o cierto contenido estático evitamos tener que aprender una segunda tecnología además de aprovechar todo el código reutilizable que posiblemente hemos desarrollado en algunos componentes. Para generar el contenido estático que generaría una página en Tapestry tenemos el módulo <a href="https://github.com/uklance/tapestry-offline">Tapestry Offline</a>. Como no está en los repositorio de maven debemos descargarnos el jar e incluir la dependencia como un archivo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/tapestry-offline.jar&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-2.gradle</span>
    </div>
</div>
<p>Para generar una página de Tapestry fuera de una petición web y de un servidor de aplicaciones debemos usar el servicio OfflineComponentRenderer. Su uso sería el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">File</span> <span class="nf">generatePage</span><span class="o">(</span><span class="n">String</span> <span class="n">page</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">context</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">to</span><span class="o">,</span> <span class="n">getToPage</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">params</span><span class="o">).</span><span class="na">getPath</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Generating page «{}» ({}, {})...&#34;</span><span class="o">,</span> <span class="n">page</span><span class="o">,</span> <span class="n">file</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">file</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">().</span><span class="na">mkdirs</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">Writer</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">render</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">params</span><span class="o">,</span> <span class="n">Globals</span><span class="o">.</span><span class="na">LOCALE</span><span class="o">,</span> <span class="n">w</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">file</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">String</span> <span class="n">page</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">context</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">,</span> <span class="n">Locale</span> <span class="n">locale</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">TypeCoercer</span> <span class="n">coercer</span> <span class="o">=</span> <span class="n">Globals</span><span class="o">.</span><span class="na">registry</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">TypeCoercer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">OfflineComponentRenderer</span> <span class="n">renderer</span> <span class="o">=</span> <span class="n">Globals</span><span class="o">.</span><span class="na">registry</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="s">&#34;BlogStackOfflineComponentRenderer&#34;</span><span class="o">,</span> <span class="n">OfflineComponentRenderer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">EventContext</span> <span class="n">activationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayEventContext</span><span class="o">(</span><span class="n">coercer</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">PageRenderRequestParameters</span> <span class="n">requestParams</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PageRenderRequestParameters</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">activationContext</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">DefaultOfflineRequestContext</span> <span class="n">requestContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultOfflineRequestContext</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">param</span> <span class="o">:</span> <span class="n">params</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">requestContext</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="n">param</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">param</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">requestContext</span><span class="o">.</span><span class="na">setLocale</span><span class="o">(</span><span class="n">locale</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">renderer</span><span class="o">.</span><span class="na">renderPage</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">requestContext</span><span class="o">,</span> <span class="n">requestParams</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>GeneratorServiceImpl.java</span>
    </div>
</div>
<p>Tengo que decir que al generar la página fuera de una petición web tendremos alguna limitación como solo poder usar assets con el prefijo context. Pero esto por lo menos <a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/">como he explicado en el caso de Blog Stack</a> no me ha supuesto ningún problema.</p>
<p>Esto quizá no sea lo habitual pero en <a href="http://www.blogstack.info/">Blog Stack</a> ambas posibilidades me han resultado de gran utilidad al desarrollar el proyecto. Las posibilidades son muchas por ejemplo podríamos usar alguna combinación de esto mismo con el microframework <a href="https://sparkjava.com/">Spark</a> si nuestra aplicación estuviese más orientada a una API aunque también podríamos <a href="https://elblogdepicodev.blogspot.com.es/2013/03/integracion-tapestry-con-resteasy.htm.html">usarlo junto con RESTEasy</a>.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/</id>
        <title>Servir recursos estáticos desde un CDN en Apache Tapestry</title>
        <updated>2015-10-19T19:00:00+02:00</updated>
        <published>2014-07-26T12:35:50+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Un <a href="https://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Network</a> (CDN) no es más que un servidor, servidores o servicio dedicado a servir el contenido estático o actuar de cache para los clientes. Alguno de los motivos por los que podríamos querer usar un CDN en una aplicación son:</p>
<ul>
<li>Algunos servicios CDN están repartidos geográficamente por el mundo de modo que el contenido sea servido de un lugar más cercano al usuario esto hace que el tiempo que tarda en cargar un página o servirse el contenido sea menor.</li>
<li>Descargar la tarea de servir al menos parte del contenido de la aplicación al CDN hará que no nos tengamos que preocupar de tener la capacidad para servirlo. Cuando se cargar una página se hacen varias peticiones al servidor para obtener el contenido como el html, imágenes, estilos, &hellip; haciendo que los contenidos estáticos sean servidos por el CDN hará que el servidor tenga menos carga, dependiendo del número de usuarios de la aplicación o los picos de tráfico notaremos una mejoría.</li>
<li>La alta fiabilidad de servicio que ofrecen.</li>
</ul>
<p><a href="http://aws.amazon.com/es/cloudfront/">Amazon ClodFront</a> es una de las opciones que podemos usar como CDN. En este artículo voy a comentar como tener un CDN para servir el contenido estático en una aplicación que emplee el <em>framework</em> de desarrollo de aplicaciones web en la plataforma Java <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/images/nocdn-cdn_hu4bda5a96fc7e95afc34c0e3629c45f5e_124009_2560x1440_fit_box_3.png" data-gallery="" title="Arquitectura no CDN (izquierda) contra arquitectura CDN (derecha)"><img src="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/images/nocdn-cdn_hu4bda5a96fc7e95afc34c0e3629c45f5e_124009_300x200_fit_box_3.png" width="300" height="129" alt="Arquitectura no CDN (izquierda) contra arquitectura CDN (derecha)" title="Arquitectura no CDN (izquierda) contra arquitectura CDN (derecha)"  class="lozad "></a></p>
</figure>
</div>
<p>Para que el contenido estático se sirva del CDN debemos hacer que las URL de las imágenes y hojas de estilo se generen con la URL propia del CDN, al menos, deberemos cambiar el host de esas URL. No hay que hacer mucho más ya que CloudFront creo que se puede configurar para que cuando le lleguen las peticiones del contenido si no las tiene las delegue en la aplicación, una vez que las tiene cacheadas ya no necesita solicitarselas a la aplicación y las sirve él mismo.</p>
<p>Una de las cosas muy interesantes de Tapestry es que podemos modificar prácticamente cualquier comportamiento del mismo, esto es debido a que la mayor parte de sus funcionalidades son ofrecidas mediante servicios que podemos sobrescribir con los que nosotros proporcionemos, el contenedor de dependencias (IoC) de tapestry lo hace muy fácil. Para modificar las URL de los recursos estáticos que son generados en Tapestry deberemos implementar la clase <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/services/AssetPathConverter.html">AssetPathConverter</a>. Una implementación podría ser la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.misc</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Symbol</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.internal.util.CollectionFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.services.AssetPathConverter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services.AppModule</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CDNAssetPathConverterImpl</span> <span class="kd">implements</span> <span class="n">AssetPathConverter</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">protocol</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">host</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">port</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">resources</span> <span class="o">=</span> <span class="n">CollectionFactory</span><span class="o">.</span><span class="na">newMap</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">CDNAssetPathConverterImpl</span><span class="o">(</span><span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_PROTOCOL</span><span class="o">)</span> <span class="n">String</span> <span class="n">protocol</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_HOST</span><span class="o">)</span> <span class="n">String</span> <span class="n">host</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_PORT</span><span class="o">)</span> <span class="n">String</span> <span class="n">port</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_PATH</span><span class="o">)</span> <span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">protocol</span> <span class="o">=</span> <span class="n">protocol</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">host</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="o">(</span><span class="n">port</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">port</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">))</span> <span class="o">?</span> <span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">port</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="o">(</span><span class="n">path</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">))</span> <span class="o">?</span> <span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="n">path</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">convertAssetPath</span><span class="o">(</span><span class="n">String</span> <span class="n">assetPath</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">resources</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">assetPath</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">resources</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">assetPath</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s://%s%s%s%s&#34;</span><span class="o">,</span> <span class="n">protocol</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">assetPath</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">resources</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">assetPath</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">result</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInvariant</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>CDNAssetPathConverterImpl.java</span>
    </div>
</div>
<p>También deberemos añadir un poco de configuración al módulo de la aplicación para que se use esta nueva implementación. Esto se hace en el método serviceOverride de la clase AppModule.java, donde también en el método contributeApplicationDefaults configuramos los símbolos que se usarán al generar las URLs entre ellos el dominio del CDN.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_PROTOCOL</span> <span class="o">=</span> <span class="s">&#34;cdn.protocol&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_HOST</span> <span class="o">=</span> <span class="s">&#34;cdn.host&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_PORT</span> <span class="o">=</span> <span class="s">&#34;cdn.port&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_PATH</span> <span class="o">=</span> <span class="s">&#34;cdn.path&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeServiceOverride</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">,</span> <span class="nd">@Local</span> <span class="n">HibernateSessionSource</span> <span class="n">hibernateSessionSource</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">HibernateSessionSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">hibernateSessionSource</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Servicio para usar un CDN lazy, pe. con Amazon CloudFront&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">configuration</span><span class="o">.</span><span class="na">addInstance</span><span class="o">(</span><span class="n">AssetPathConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">CDNAssetPathConverterImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isServidorJBoss</span><span class="o">(</span><span class="n">ContextListener</span><span class="o">.</span><span class="na">SERVLET_CONTEXT</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ClasspathURLConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">WildFlyClasspathURLConverter</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeApplicationDefaults</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_PROTOCOL</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_HOST</span><span class="o">,</span> <span class="s">&#34;s3-eu-west-1.amazonaws.com&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_PORT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_PATH</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule.java</span>
    </div>
</div>
<p>Estas serían las URLs por defecto:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">/PlugInTapestry/assets/meta/zbb0257e4/tapestry5/bootstrap/css/bootstrap.css&#10;</span></span><span class="line"><span class="cl">/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;</span></span><span class="line"><span class="cl">/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js&#10;</span></span><span class="line"><span class="cl">/PlugInTapestry/assets/meta/z58df451c/tapestry5/bootstrap/css/bootstrap.css&#10;</span></span><span class="line"><span class="cl">/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;</span></span><span class="line"><span class="cl">/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>urls-sin-cdn.txt</span>
    </div>
</div>
<p>Y estas las nuevas nuevas URL haciendo uso de la implementación del <em>AssetPathConverter</em> que como se aprecia incorporan un dominio de Amazon y siendo uno del servicio CloudFront en caso de no tener cacheado el recurso lo pedirá a la aplicación y lo cacheará para posteriores peticiones:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/zbb0257e4/tapestry5/bootstrap/css/bootstrap.css&#10;</span></span><span class="line"><span class="cl">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;</span></span><span class="line"><span class="cl">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js&#10;</span></span><span class="line"><span class="cl">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/z58df451c/tapestry5/bootstrap/css/bootstrap.css&#10;</span></span><span class="line"><span class="cl">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;</span></span><span class="line"><span class="cl">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>urls-con-cdn.txt</span>
    </div>
</div>
<p>Así de simple podemos cambiar el comportamiento de Tapestry y en este caso emplear un CDN, esta implementación es sencilla y suficiente pero perfectamente podríamos implementarla con cualquier otra necesidad que tuviésemos. El cambio está localizado en una clase, son poco más que 46 líneas de código pero lo mejor es que es transparente para el código del resto de la aplicación, ¿que más se puede pedir?</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></p>
</li>
<li>
<p><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></p>
</li>
<li>
<p><a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/services/AssetPathConverter.html">AssetPathConverter</a></p>
</li>
<li>
<p><a href="https://code.google.com/p/corner/source/browse/corner3/trunk/src/main/java/corner/asset/services/impl/CDNAssetPathConverterImpl.java">CDNAssetPathConverterImpl.java</a></p>
</li>
<li>
<p><a href="http://aws.amazon.com/es/cloudfront/dynamic-content/">Amazon CloudFront</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/16914673/serve-images-outside-web-application">Serve images outside web application</a></p>
</li>
<li>
<p><a href="https://issues.apache.org/jira/browse/TAP5-2201">TAP5-2201</a></p>
</li>
<li>
<p><a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/T5-some-automagical-way-to-export-versioned-assets-to-CDN-td2399058.html">T5: some automagical way to export versioned assets to CDN</a></p>
</li>
<li>
<p><a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/General-CDN-problem-that-came-up-with-Tree-component-td5671331.html">General CDN problem that came up with Tree component</a></p>
</li>
<li>
<p><a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistS3AndCustomOrigins.html">Using Amazon S3 Origins and Custom Origins for Web Distributions</a></p>
</li>
<li>
<p><a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a></p>
</li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
</feed>
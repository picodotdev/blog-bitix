<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/java/</id>
    <updated>2022-01-20T22:00:00+01:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/</id>
        <title>Compilar y cargar de forma dinámica una clase Java</title>
        <updated>2015-05-30T00:00:00+02:00</updated>
        <published>2014-09-12T19:49:55+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Desde la versión 1.6 del JDK disponemos de una API para acceder al compilador desde un programa Java. En el ejemplo de este artículo utilizaré varias clases de esa API para conseguir compilar un archivo con la definición de una clase Java y posteriormente instanciarla y usarla. En posteriores artículos comentaré un ejemplo práctico y muy útil con el que podemos sacar provecho de esta funcionalidad.</p>
<p>Las clases que necesitaremos de esa API son:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/JavaCompiler.html">JavaCompiler</a> que es la interfaz para acceder al compilador desde un programa Java.</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/JavaFileManager.html">JavaFileManager</a> que es una abstracción para gestionar los archivos fuente y las clases. Usaremos uno propio llamado ClassFileManager.</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html">SimpleJavaFileObject</a> clase que contiene el código fuente Java.</li>
</ul>
<p>Y también necesitaremos redefinir algunas:</p>
<ul>
<li>La clase ClassFileManager que extiende <a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/ForwardingJavaFileManager.html">ForwardingJavaFileManager</a> y se encargará de cargar los objetos JavaClassObject con un ClassLoader.</li>
<li>La clase JavaClassObject que extiende <a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html">SimpleJavaFileObject</a> y contendrá el código <em>bytecode</em> generado en memoria por el compilador.</li>
<li>CharSequenceJavaFileObject clase que extiende <a href="https://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html">SimpleJavaFileObject</a> y que contiene el código fuente en un objeto de tipo CharSequence.</li>
<li>La interfaz Configuracion es la interfaz que debe cumplir la clase Java que compilaremos, cargaremos de forma dinámica en la aplicación y posteriormente invocaremos sus métodos.</li>
</ul>
<p>En el javadoc de las clases hay una descripción más amplia de cada una de ellas.</p>
<p>En el siguiente código suponiendo que disponemos en la variable source de un código Java a compilar y de la que crearemos mas tarde una instancia de la clase que define podemos hacerlo de la forma indicada continuación. Antes de mostrar el código código la clase a compilar y a cargar de forma dinámica en este ejemplo debe cumplir el contrato definido en una determinada interfaz de modo que una vez compilada y cargada sepamos que métodos podemos invocar de esa clase. En este caso el código fuente de la clase a compilar está hardcodeada en un String en el propio programa pero perfectamente podría haber obtenido su contenido de un archivo del disco duro o de una base de datos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.tools.JavaCompiler</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.JavaFileManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.ToolProvider</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main1</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="c1">// Definir la clase&#10;</span><span class="c1"></span>		<span class="n">String</span><span class="o">[]</span> <span class="n">sources</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;package io.github.picodotdev.blogbitix.config;&#34;</span><span class="o">,</span>&#10;				<span class="s">&#34;import java.util.HashMap;&#34;</span><span class="o">,</span>&#10;				<span class="s">&#34;import java.util.Map;&#34;</span><span class="o">,</span>&#10;				<span class="s">&#34;public class AppConfiguracion implements Configuracion {&#34;</span><span class="o">,</span>&#10;					<span class="s">&#34;private static Map config;&#34;</span><span class="o">,</span>&#10;					<span class="s">&#34;static {&#34;</span><span class="o">,</span>&#10;						<span class="s">&#34;config = new HashMap();&#34;</span><span class="o">,</span>&#10;						<span class="s">&#34;config.put(\&#34;propiedad\&#34;, 11);&#34;</span><span class="o">,</span>&#10;					<span class="s">&#34;}&#34;</span><span class="o">,</span>&#10;					<span class="s">&#34;public Map get() {&#34;</span><span class="o">,</span>&#10;						<span class="s">&#34;return config;&#34;</span><span class="o">,</span>&#10;					<span class="s">&#34;}&#34;</span><span class="o">,</span>&#10;				<span class="s">&#34;}&#34;</span> <span class="o">};</span>&#10;&#10;		<span class="n">String</span> <span class="n">source</span> <span class="o">=</span> <span class="n">join</span><span class="o">(</span><span class="n">sources</span><span class="o">);</span>&#10;		<span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;io.github.picodotdev.blogbitix.config.AppConfiguracion&#34;</span><span class="o">;</span>&#10;	&#10;		<span class="c1">// Compilar la clase&#10;</span><span class="c1"></span>		<span class="n">JavaCompiler</span> <span class="n">compiler</span> <span class="o">=</span> <span class="n">ToolProvider</span><span class="o">.</span><span class="na">getSystemJavaCompiler</span><span class="o">();</span>&#10;		<span class="n">JavaFileManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassFileManager</span><span class="o">(</span><span class="n">compiler</span><span class="o">.</span><span class="na">getStandardFileManager</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>&#10;&#10;		<span class="n">List</span><span class="o">&lt;</span><span class="n">JavaFileObject</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">JavaFileObject</span><span class="o">&gt;();</span>&#10;		<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">CharSequenceJavaFileObject</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">source</span><span class="o">));</span>&#10;&#10;		<span class="n">compiler</span><span class="o">.</span><span class="na">getTask</span><span class="o">(</span><span class="k">new</span> <span class="n">NullWriter</span><span class="o">(),</span> <span class="n">manager</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">files</span><span class="o">).</span><span class="na">call</span><span class="o">();</span>&#10;&#10;		<span class="c1">// Cargar e instanciar la clase&#10;</span><span class="c1"></span>		<span class="n">Configuracion</span> <span class="n">configuracion</span> <span class="o">=</span> <span class="o">(</span><span class="n">Configuracion</span><span class="o">)</span> <span class="n">manager</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">loadClass</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">newInstance</span><span class="o">();</span>&#10;		&#10;		<span class="c1">// Invocar un método de la clase&#10;</span><span class="c1"></span>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">configuracion</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">join</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>&#10;		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;			<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main1.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Configuracion</span> <span class="o">{</span>&#10;&#10;	<span class="n">Map</span> <span class="nf">get</span><span class="o">();</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Configuracion.java</span>
    </div>
</div>
<p>Con este ejemplo puede intuirse el ejemplo práctico que comentaré que no es más que utilizar código Java para definir la configuración de una aplicación, esto tiene varias ventajas sobre utilizar un xml u otro tipo de formato de archivo de configuración de la aplicación (una de ellas que utilizando un IDE el compilador nos informará de errores y nos ofrecerá asistencia al escribir código). Esta idea junto con la posibilidad de monitorizar un archivo para ver si se han producido cambios en él (también con la API de Java) y recargarlo puede darnos como resultado una funcionalidad en la que la configuración se basa en código Java y que la configuración pueda recargarse de forma dinámica, si la aplicación se utiliza en un servidor de aplicaciones podríamos cambiar la configuración sin tener que reiniciar la aplicación.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/images/main1_hu328714695d20411c508d1e1adbbc62cf_18547_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Salida programa Main1.java"><img src="https://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/images/main1_hu328714695d20411c508d1e1adbbc62cf_18547_300x200_fit_box_3.png" width="300" height="101" alt="Salida programa Main1.java" title="Salida programa Main1.java"  class="lozad "></a></p>
</figure>
</div>
<p>Casi para terminar las clases de utilidad:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.security.SecureClassLoader</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.tools.FileObject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.ForwardingJavaFileManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.JavaFileObject.Kind</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.tools.StandardJavaFileManager</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassFileManager</span> <span class="kd">extends</span> <span class="n">ForwardingJavaFileManager</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">classes</span><span class="o">;</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Will initialize the manager with the specified standard java file manager&#10;</span><span class="cm">	 * &#10;</span><span class="cm">	 * @param standardManger&#10;</span><span class="cm">	 */</span>&#10;	<span class="kd">public</span> <span class="nf">ClassFileManager</span><span class="o">(</span><span class="n">StandardJavaFileManager</span> <span class="n">standardManager</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">(</span><span class="n">standardManager</span><span class="o">);</span>&#10;		<span class="n">classes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Will be used by us to get the class loader for our compiled class. It creates an anonymous&#10;</span><span class="cm">	 * class extending the SecureClassLoader which uses the byte code created by the compiler and&#10;</span><span class="cm">	 * stored in the JavaClassObject, and returns the Class for it&#10;</span><span class="cm">	 */</span>&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">ClassLoader</span> <span class="nf">getClassLoader</span><span class="o">(</span><span class="n">Location</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">SecureClassLoader</span><span class="o">()</span> <span class="o">{</span>&#10;			<span class="nd">@Override</span>&#10;			<span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">loadClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>&#10;				<span class="n">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>&#10;				<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Class</span><span class="o">)</span> <span class="o">{</span>&#10;					<span class="k">return</span> <span class="o">(</span><span class="n">Class</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;				<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">JavaClassObject</span><span class="o">)</span> <span class="o">{</span>&#10;					<span class="n">JavaClassObject</span> <span class="n">object</span> <span class="o">=</span> <span class="o">(</span><span class="n">JavaClassObject</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;					<span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>&#10;					<span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">defineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">object</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">0</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>&#10;					<span class="n">classes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">clazz</span><span class="o">);</span>&#10;					<span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>&#10;				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;					<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>					&#10;				<span class="o">}</span> &#10;			<span class="o">}</span>&#10;		<span class="o">};</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Gives the compiler an instance of the JavaClassObject so that the compiler can write the byte&#10;</span><span class="cm">	 * code into it.&#10;</span><span class="cm">	 */</span>&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">JavaFileObject</span> <span class="nf">getJavaFileForOutput</span><span class="o">(</span><span class="n">Location</span> <span class="n">location</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">Kind</span> <span class="n">kind</span><span class="o">,</span> <span class="n">FileObject</span> <span class="n">sibling</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;		<span class="n">JavaClassObject</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JavaClassObject</span><span class="o">(</span><span class="n">className</span><span class="o">,</span> <span class="n">kind</span><span class="o">);</span>&#10;		<span class="n">classes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">className</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">object</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ClassFileManager.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.tools.SimpleJavaFileObject</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CharSequenceJavaFileObject</span> <span class="kd">extends</span> <span class="n">SimpleJavaFileObject</span> <span class="o">{</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * CharSequence representing the source code to be compiled&#10;</span><span class="cm">	 */</span>&#10;	<span class="kd">private</span> <span class="n">CharSequence</span> <span class="n">content</span><span class="o">;</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * This constructor will store the source code in the internal &#34;content&#34; variable and register&#10;</span><span class="cm">	 * it as a source code, using a URI containing the class full name&#10;</span><span class="cm">	 * &#10;</span><span class="cm">	 * @param className&#10;</span><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name of the public class in the source code&#10;</span><span class="cm">	 * @param content&#10;</span><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source code to compile&#10;</span><span class="cm">	 */</span>&#10;	<span class="kd">public</span> <span class="nf">CharSequenceJavaFileObject</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">CharSequence</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&#34;string:///&#34;</span> <span class="o">+</span> <span class="n">className</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="n">Kind</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">.</span><span class="na">extension</span><span class="o">),</span> <span class="n">Kind</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">);</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Answers the CharSequence to be compiled. It will give the source code stored in variable&#10;</span><span class="cm">	 * &#34;content&#34;&#10;</span><span class="cm">	 */</span>&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">CharSequence</span> <span class="nf">getCharContent</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">ignoreEncodingErrors</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">content</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>CharSequenceJavaFileObject.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.config</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.tools.SimpleJavaFileObject</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaClassObject</span> <span class="kd">extends</span> <span class="n">SimpleJavaFileObject</span> <span class="o">{</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Byte code created by the compiler will be stored in this ByteArrayOutputStream so that we can&#10;</span><span class="cm">	 * later get the byte array out of it and put it in the memory as an instance of our class.&#10;</span><span class="cm">	 */</span>&#10;	<span class="kd">protected</span> <span class="kd">final</span> <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Registers the compiled class object under URI containing the class full name&#10;</span><span class="cm">	 * &#10;</span><span class="cm">	 * @param name&#10;</span><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Full name of the compiled class&#10;</span><span class="cm">	 * @param kind&#10;</span><span class="cm">	 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kind of the data. It will be CLASS in our case&#10;</span><span class="cm">	 */</span>&#10;	<span class="kd">public</span> <span class="nf">JavaClassObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Kind</span> <span class="n">kind</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&#34;string:///&#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="n">kind</span><span class="o">.</span><span class="na">extension</span><span class="o">),</span> <span class="n">kind</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Will be used by our file manager to get the byte code that can be put into memory to&#10;</span><span class="cm">	 * instantiate our class&#10;</span><span class="cm">	 * &#10;</span><span class="cm">	 * @return compiled byte code&#10;</span><span class="cm">	 */</span>&#10;	<span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getBytes</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="cm">/**&#10;</span><span class="cm">	 * Will provide the compiler with an output stream that leads to our byte array. This way the&#10;</span><span class="cm">	 * compiler will write everything into the byte array that we will instantiate later&#10;</span><span class="cm">	 */</span>&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">OutputStream</span> <span class="nf">openOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">bos</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JavaClassObject.java</span>
    </div>
</div>
<p>El código fuente completo puede encontrarse en el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ConfiguracionJava">siguiente repositorio de GitHub</a>.</p>
<p>En el siguiente artículo comentaré como <a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/">monitorizar un archivo con código fuente Java</a> para ver si se han producido cambios en él. Y basándome en estos dos artículos comentaré como disponer de <a href="https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/">un archivo de configuración que se recargue al detectase cambios en él</a>.</p>
]]>
        </content>
        
            
                <category term="programacion"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/</id>
        <title>Actualización del libro PlugIn Tapestry</title>
        <updated>2015-10-04T17:00:00+02:00</updated>
        <published>2014-08-30T00:16:10+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Hace un poco más de una año publiqué el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a> que como su nombre ya adelanta versa sobre el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> para el desarrollo de aplicaciones y páginas web con Java. Casi 300 páginas de documentación que describen este <em>framework</em>, como usarlo y va más allá explicando como realizar algunas de las tareas comunes que es necesario hacer en casi todas las aplicaciones web independientemente del <em>framework</em> que elijamos pero en este caso visto desde el punto de vista de Tapestry.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/images/PugInTapestry_Portada_hudd958694a9c7fbaaf2a5b065abe3f288_268557_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Portada libro PlugIn Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/images/PugInTapestry_Portada_hudd958694a9c7fbaaf2a5b065abe3f288_268557_300x200_fit_box_3.png" width="141" height="200" alt="Portada libro PlugIn Tapestry" title="Portada libro PlugIn Tapestry"  class="lozad "></a></p>
</figure>
</div>
<p>En esta actualización he revisado capítulos como el Inicio rápido para empezar a desarrollar en unos pocos minutos, la sección que trata sobre Plantillas para dar a las páginas un aspecto común, la sección que trata sobre unas Convenciones para los archivos de literales, ampliada la sección de Principios en la que se detalla cuales son las ideas y objetivos por los que se rige el <em>framework</em>, también reescrita la sección de Integración con Spring, una de las librerías más usadas y que facilita el desarrollo enormemente.</p>
<p>Pero además he incluido nuevo contenido que he publicado en diferentes artículos en <a href="https://picodotdev.github.io/blog-bitix/">mi bitácora</a> desde la publicación original del libro. Estos han sido Como ejecutar Apache Tapestry en un servidor de aplicaciones JBoss o Wildfly, explicada la página Dashboard que nos permite obtener información interesante mientras desarrollamos como que páginas y componentes incluye la aplicación o las estadísticas de Hibernate, explicadas las diferencias del modelo «pull» en el que se basa Tapestry del modelo «push» en el que se basan la mayoría de <em>frameworks</em> orientados a acciones independientemente del lenguaje (Grails, Django, Symfony, ASP.NET MVC), como servir los recursos estáticos desde una red de contenidos (CDN, Content Delivery Network), la anotación Cached que permite evitar invocaciones a métodos devolviendo el resultado obtenido en la primera invocación, como usar Tapestry en una aplicación de forma «standalone» fuera del contexto de un servidor de aplicaciones, la anotación Secure y como añadir más seguridad usando el protocolo seguro HTTPS.</p>
<div class="buttons">
    <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">Descargar el libro (PDF)</a>
    <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Obtener código fuente ejemplos</a>
</div>
<div class="share-this" style="text-align: center; margin-bottom: 20px">
    <h3>¡Y luego compártelo!</h3>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/</id>
        <title>Doble barra de botones con Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-08-29T13:04:52+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Por motivos de usabilidad en algunas páginas se incluyen dos barra de botones, una antes de una larga sección y otra después. El motivo de la doble barra de botones inicial es que no sea necesario hacer «scroll» hasta el final de la página para acceder a los botones y realizar la acción que permitan. Por el contrario, incluir la barra de botones al final de la página permite que una vez seleccionados los elementos o revisado el contenido de la sección hacer disponibles las acciones que es probable que se quieran realizar.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/images/doble-barra-botones_huea66ab1892bbc5f0cb1dd6ffb2bd04e0_24264_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Doble barra de botones"><img src="https://picodotdev.github.io/blog-bitix/2014/08/doble-barra-de-botones-con-apache-tapestry/images/doble-barra-botones_huea66ab1892bbc5f0cb1dd6ffb2bd04e0_24264_300x200_fit_box_3.png" width="216" height="200" alt="Doble barra de botones" title="Doble barra de botones"  class="lozad "></a></p>
</figure>
</div>
<p>Dependiendo del <em>framework</em> web que utilicemos podremos hacerlo de una o varias formas pero de lo que estamos seguros es que copiar y pegar haciendo que el código esté duplicado no es una buena idea por los problemas de mantenimiento que puede suponer. Pero crear una pequeña plantilla o archivo exclusivo para incluir la barra de botones tampoco es la solución ideal, ¿por que? pues porque creando un archivo específico con la botonera puede que nos ocasione un problema que denominaré de «microgestión», es decir, nos obliga a crear un montón de pequeños archivos pequeñitos y hacer referencia o utilizar el mecanismo de inclusión que dispongamos para usar el contenido en unos de otros. En una aplicación grande esta microgestión si nos vemos obligados a ella puede llegar a ser molesta al desarrollar cuanto menos.</p>
<p>¿Como se puede evitar? En el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> la doble botonera puede hacerse de varias formas una de ellas es crear un componente pero esto nos obliga a crear un archivo para la clase java y probablemente también un archivo de plantilla con el contenido html causando el problema de la microgestión. Pero en Tapestry también podemos hacer uso del <a href="http://tapestry.apache.org/component-templates.html">componente block</a> que sirve para incluir en él cierto contenido y el <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Delegate.html">componente delegate</a> que sirve para emitir el contenido entre otras cosas de un componente block. Usando estos dos componentes podemos evitar la microgestión definiendo todo en un mismo archivo, además al tener todo en un mismo archivo el código será más fácilmente legible, quedándonos en un ejemplo de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;!DOCTYPE html&gt;&#10;&lt;html t:type=&#34;layout&#34; titulo=&#34;Administración de productos&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_3.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;&#10;...&#10;&#10;&lt;t:block id=&#34;edicionBlock&#34;&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;t:remove&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;En otros frameworks la lógica para obtener el título del bloque según se trate de un alta o una modificación,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probablemente se hiciese metiendo lógica en la plantilla de presentación, dado que Tapestry permite llamar a métodos&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;de la clase Java asociada al componente es mejor dejar esa lógica en el código Java de esta manera la plantilla será más &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sencilla y clara además de aprovecharnos del compilador. labels es un método definido en la página admin.producto&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;que devuelve un mapa.&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/t:remove&gt;&#10;	&lt;h1&gt;${labels.get(&#39;titulo&#39;)}&lt;/h1&gt;&#10;&#10;	&lt;t:form t:id=&#34;form&#34; context=&#34;producto.id&#34; validate=&#34;producto&#34; clientValidation=&#34;none&#34; class=&#34;well&#34; role=&#34;form&#34;&gt;&#10;		&lt;t:errors class=&#34;literal:alert alert-danger&#34; /&gt;&#10;&#10;		&lt;t:delegate to=&#34;botonesEdicionBlock&#34;/&gt;&#10;&#10;		&lt;div style=&#34;margin-top: 10px;&#34;&gt;&#10;			&lt;div class=&#34;form-group&#34;&gt;&#10;				&lt;t:label for=&#34;nombre&#34; /&gt;&#10;				&lt;div class=&#34;controls&#34;&gt;&#10;					&lt;input t:type=&#34;textfield&#34; t:id=&#34;nombre&#34; value=&#34;producto.nombre&#34; size=&#34;100&#34; label=&#34;Nombre&#34; /&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;	&#10;			&lt;div class=&#34;form-group&#34;&gt;&#10;				&lt;t:label for=&#34;descripcion&#34; /&gt;&#10;				&lt;div class=&#34;controls&#34;&gt;&#10;					&lt;input t:type=&#34;textarea&#34; t:id=&#34;descripcion&#34; value=&#34;producto.descripcion&#34; label=&#34;Descripción&#34; /&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;	&#10;			&lt;div class=&#34;form-group&#34;&gt;&#10;				&lt;t:label for=&#34;cantidad&#34; /&gt;&#10;				&lt;div class=&#34;controls&#34;&gt;&#10;					&lt;input t:type=&#34;textfield&#34; t:id=&#34;cantidad&#34; value=&#34;producto.cantidad&#34; size=&#34;4&#34; label=&#34;Cantidad&#34; class=&#34;numeric&#34;/&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;	&#10;			&lt;div class=&#34;form-group&#34;&gt;&#10;				&lt;t:label for=&#34;fecha&#34; /&gt;&#10;				&lt;div class=&#34;controls&#34;&gt;&#10;					&lt;div class=&#34;input-group&#34;&gt;&#10;						&lt;input t:type=&#34;textfield&#34; t:id=&#34;fecha&#34; type=&#34;date&#34; value=&#34;producto.fecha&#34; label=&#34;Fecha&#34; /&gt;&#10;						&lt;span class=&#34;input-group-addon&#34;&gt;&lt;span class=&#34;glyphicon glyphicon-calendar&#34;&gt;&lt;/span&gt;&lt;/span&gt;&#10;					&lt;/div&gt;				&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;&#10;		&lt;t:delegate to=&#34;botonesEdicionBlock&#34;/&gt;&#10;	&lt;/t:form&gt;&#10;&lt;/t:block&gt;&#10;&#10;&lt;t:block id=&#34;botonesEdicionBlock&#34;&gt;&#10;	&lt;div class=&#34;btn-toolbar&#34;&gt;&#10;		&lt;input t:type=&#34;submit&#34; class=&#34;btn btn-primary&#34; value=&#34;prop:labels.get(&#39;guardar&#39;)&#34; role=&#34;button&#34;/&gt;&#10;		&lt;t:if test=&#34;producto.id&#34;&gt;&#10;			&lt;a t:type=&#34;eventlink&#34; event=&#34;eliminar&#34; context=&#34;producto.id&#34; role=&#34;button&#34; class=&#34;btn btn-danger&#34; style=&#34;color: white;&#34;&gt;Eliminar&lt;/a&gt;&#10;		&lt;/t:if&gt;&#10;		&lt;input t:type=&#34;submit&#34; class=&#34;btn btn-danger&#34; value=&#34;Cancelar&#34; mode=&#34;cancel&#34; role=&#34;button&#34;/&gt;&#10;	&lt;/div&gt;&#10;&lt;/t:block&gt;&#10;&#10;&lt;/html&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProductoAdmin.tml</span>
    </div>
</div>
<p>En <a href="https://grails.org/">Grails</a> por poner un ejemplo de un <em>framework</em> que no usa el concepto de componentes la forma habitual de hacerlo es usando un g:include y con ello teniendo microgestión. Pero retorciendo un poco (creo) en este caso el uso de Grails podemos emplear la etiqueta g:set para establecer el contenido de la botonera y emitir su contenido dos veces en el gsp.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">...&#10;&#10;&lt;g:set var=&#34;botonesEdicionBlock&#34;&gt;&#10;	&lt;div class=&#34;btn-toolbar&#34;&gt;&#10;		&lt;input type=&#34;submit&#34; class=&#34;btn btn-primary&#34; value=&#34;${message(code: &#39;guardar&#39;)}&#34; role=&#34;button&#34;/&gt;&#10;		&lt;g:if test=&#34;${producto.id}&#34;&gt;&#10;			&lt;g:link action=&#34;eliminar&#34; params=&#34;${[id: producto.id]}&#34; role=&#34;button&#34; class=&#34;btn btn-danger&#34; style=&#34;color: white;&#34;&gt;Eliminar&lt;/a&gt;&#10;		&lt;/t:if&gt;&#10;		&lt;input type=&#34;submit&#34; class=&#34;btn btn-danger&#34; value=&#34;{message(code: &#39;guardar&#39;)}&#34; role=&#34;button&#34;/&gt;&#10;	&lt;/div&gt;&#10;&lt;/g:set&gt;&#10;&#10;&lt;g:form ...&gt;&#10;	...&#10;&#10;	${botonesEdicionBlock}&#10;&#10;	&lt;div style=&#34;margin-top: 10px;&#34;&gt;&#10;		...&#10;	&lt;/div&gt;&#10;&#10;	${botonesEdicionBlock}&#10;&lt;/g:form&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProductoAdmin.gsp</span>
    </div>
</div>
<p>El código completo de este ejemplo del caso de Tapestry está en un <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">repositorio de GitHub</a>. Si estás interesado en conocer más en profundidad como funciona Tapestry y sus múltiples «killer features», bastantes mucho más importantes que lo explicado en este artículo, puedes descargarte el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a> que he escrito, de forma gratuita, sin registros, y en varios formatos ¿que más puedes pedir?. Y si te interesa el tema puedes suscribirte al <a href="https://picodotdev.github.io/blog-bitix/index.xml">canal RSS de esta bitácora</a> para no perderte nada del nuevo contenido que publique, no solo sobre Tapestry, sino también sobre Java, Linux, &hellip;</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/tapestry/">Más artículos sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/</id>
        <title>Forzar el uso del protocolo HTTPS en Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-08-22T11:09:23+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>El <a href="https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure">protocolo seguro https</a> hace que los datos que viajan entre el servidor y el cliente a través de internet estén cifrados de modo que nadie más pueda saber cual es es la información intercambiada ni se pueda alterar sin el conocimiento entre las dos partes. Estas propiedades nos son de interés para ciertas partes de una aplicación o en algunos casos la aplicación entera. ¿Cuales son estos casos? Son aquellos en los que queramos garantizar una mayor seguridad, estos pueden ser para proteger usuarios y contraseñas de autenticación para iniciar sesión, ciertos datos sensibles como datos personales, datos de tarjetas de crédito, &hellip; evitando que una tercera parte los obtenga y los utilice para su provecho propio y supongan un problema de seguridad en la aplicación.</p>
<p>Es casi obligatorio forzar a que ciertas páginas de una aplicación o página web funcionen mediante el protocolo seguro https como las páginas de inicio de sesión donde los usuarios se autentican normalmente introduciendo su usuario y contraseña, páginas de compra donde los usuarios introducen los datos de su tarjeta de crédito o algunas secciones de una aplicación como las secciones de las cuentas de los usuarios o un backoffice.</p>
<p>En <a href="https://tapestry.apache.org/">Apache Tapestry</a> hay varias formas de forzar a que una determinada página use el protocolo seguro de modo que si se accede por el <a href="https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol">protocolo no seguro http</a> la aplicación obligue a usar https haciendo una redirección. Una de ellas es utilizar la anotación <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/annotations/Secure.html">@Secure</a> en las páginas que queramos obligar a usar https. Basta con anotar las clases de las páginas con @Secure y Tapestry automáticamente hará la redirección al protocolo https cuando se acceda con http a la página.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.pages</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@Secure</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Login</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Login.java</span>
    </div>
</div>
<p>Probablemente nos interese configurar el puerto y el host que usará Tapestry al hacer la redirección para que coincidan con el usado en el servidor al que accede el usuario, sobre todo si en la aplicación usamos un servidor web proxy como <a href="https://httpd.apache.org/">Apache</a>, <a href="https://www.lighttpd.net/">Lighttpd</a> o <a href="https://nginx.org/">Nginx</a> delante del servidor de aplicaciones donde realmente se ejecuta la aplicación web. El puerto seguro del protocolo https predeterminado es 443 pero en el servidor de aplicaciones tomcat por defecto es 8443. Esto en tapestry lo indicamos configurando con ciertos símbolos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeApplicationDefaults</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="o">...</span>&#10;	&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SymbolConstants</span><span class="o">.</span><span class="na">SECURE_ENABLED</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SymbolConstants</span><span class="o">.</span><span class="na">HOSTPORT</span><span class="o">,</span> <span class="n">8080</span><span class="o">);</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SymbolConstants</span><span class="o">.</span><span class="na">HOSTPORT_SECURE</span><span class="o">,</span> <span class="n">8443</span><span class="o">);</span>&#10;&#10;		<span class="o">...</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="o">...</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule-1.java</span>
    </div>
</div>
<p>Para probar mientras desarrollamos, al menos en nuestro equipo, que la redirección se hace correctamente empleando el plugin de gradle para tomcat podemos hacer que el servidor de desarrollo se inicie con el puerto https disponible. <a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Para usar https se necesita un certificado digital</a> que el <a href="https://github.com/bmuschko/gradle-tomcat-plugin">plugin de gradle para tomcat</a> se encarga de generar al iniciar la aplicación, aunque sea autofirmado y el navegador alerte que no lo reconoce como firmado un una autoridad en la que confíe, si lo aceptamos podemos acceder a la aplicación sin más problema. Usando gradle la configuración que podemos emplear es:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="o">...</span>&#10;&#10;<span class="n">buildscript</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="s1">&#39;org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="n">tomcat</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpPort</span> <span class="o">=</span> <span class="mi">8080</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpsPort</span> <span class="o">=</span> <span class="mi">8443</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">enableSSL</span> <span class="o">=</span> <span class="kc">true</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La anotación @Secure en Tapestry es suficiente pero podemos hacer lo mismo empleando <a href="https://shiro.apache.org/">Shiro</a>. <a href="https://elblogdepicodev.blogspot.com.es/2013/05/seguridad-en-aplicacion-web-con-apache.htmlindex-amp.html">Integrando Shiro con Tapestry nos permite realizar autenticación y autorización</a>, pero además empleando Shiro también podemos obligar a usar el protocolo https del mismo modo que lo hacemos con la anotación Secure. Cualquiera de las dos formas es perfectamente válida y depende más de cual prefiramos. Con la anotación @Secure deberemos anotar cada página, con Shiro podemos tener centralizado en un único punto en que páginas requerimos https. Con Shiro la configuración se hace con una contribución al servicio SecurityConfiguration y usando el método contributeSecurityConfiguration del módulo y la clase SecurityFilterChainFactory y su método ssl(). Un ejemplo es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;&#10;	<span class="o">....</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeSecurityConfiguration</span><span class="o">(</span><span class="n">Configuration</span><span class="o">&lt;</span><span class="n">SecurityFilterChain</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">,</span> <span class="n">SecurityFilterChainFactory</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">createChain</span><span class="o">(</span><span class="s">&#34;/admin/**&#34;</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">authc</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">ssl</span><span class="o">()).</span><span class="na">build</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="o">....</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule-2.java</span>
    </div>
</div>
<p>En cualquiera de los dos casos mostrados en este ejemplo se obliga a usar https en la página de login:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/images/plugin-tapestry-https_hu8be718460db9292afee033b73c6a0600_58871_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="PlugIn Tapestry con https"><img src="https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/images/plugin-tapestry-https_hu8be718460db9292afee033b73c6a0600_58871_300x200_fit_box_3.png" width="192" height="200" alt="PlugIn Tapestry con https" title="PlugIn Tapestry con https"  class="lozad "></a></p>
</figure>
</div>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Generar y convertir claves y certificados con OpenSSL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone/</id>
        <title>Usar Apache Tapestry en una aplicación «standalone»</title>
        <updated>2015-05-30T00:00:00+02:00</updated>
        <published>2014-07-31T13:06:58+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p><a href="https://tapestry.apache.org/">Apache Tapestry</a> es un <em>framework</em> de desarrollo para aplicaciones o páginas web en el que habitualmente se emplea el lenguaje Java y se despliega en un servidor de aplicaciones como entorno de ejecución. Pero Tapestry es una pieza de software que se compone de diferentes partes algunas de las cuales pueden ser utilizadas fuera del contexto de una aplicación web. Este es el caso del contenedor de dependencias que proporciona <a href="https://en.wikipedia.org/wiki/Inversion_of_control">IoC</a> (IoC, «Inversion of Control») en Tapestry, podemos usarlo en una aplicación «standalone», es decir, en un programa que se inicia con el típico «public static void main(String[] args)» de las aplicaciones Java.</p>
<p>El contenedor de dependencias de Tapestry tiene algunas propiedades interesantes como que dos servicios pueden ser mutuamente dependientes y que se puede contribuir configuración a cualquier servicio para cambiar en cierta medida su comportamiento además de otras características que explico más en detalle en el libro <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry</a>. Para usarlo en una un programa que se ejecuta de la linea de comandos usando el main de una clase Java primeramente deberemos incluir en el proyecto la dependencia sobre tapestry-ioc, si usamos <a href="https://gradle.org/">Gradle</a> de la siguiente manera:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-core:5.4-beta-3&#39;</span>&#10;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-ioc5.4-beta-3&#39;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-1.gradle</span>
    </div>
</div>
<p>Una vez que tenemos la dependencia en el programa deberemos iniciar el contenedor IoC e indicarle los diferentes módulos que contendrán la definición de los servicios.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">RegistryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RegistryBuilder</span><span class="o">();</span>&#10;<span class="n">builder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">TapestryModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">HibernateCoreModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">HibernateModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">BeanValidatorModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">TapestryOfflineModule</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">GeneratorModule</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;<span class="n">builder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SpringModuleDef</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">));</span>&#10;&#10;<span class="n">Registry</span> <span class="n">registry</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>&#10;<span class="n">registry</span><span class="o">.</span><span class="na">performRegistryStartup</span><span class="o">();</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-1.java</span>
    </div>
</div>
<p>En este caso he usado <a href="https://elblogdepicodev.blogspot.com.es/2013/11/integracion-y-transacciones-con-spring.html">Spring para la transaccionalidad</a> e Hibernate para la persistencia. Después de esto tenemos la referencia al registro de servicios, podemos obtener cualquiera en base a la interfaz que implementa, en este caso el servicio que implementa la interfaz <a href="https://github.com/picodotdev/blog-stack/blob/master/src/main/java/info/blogstack/services/MainService.java">MainService</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">registry</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">MainService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-2.java</span>
    </div>
</div>
<p>Al final de la aplicación deberemos llamar al método shutdown del registro.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">registry</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-3.java</span>
    </div>
</div>
<p>Otra cosa que nos puede interesar es poder generar contenido html usando el sistema de plantillas y componentes de Tapestry, ya sea en una aplicación «standalone» o en una aplicación web para enviar el contenido en un correo electrónico o quizá guardarlo en un archivo. Hay muchos sistemas de plantillas, cada <em>framework</em> suele tener uno propio o usar una solución específica como <a href="http://www.thymeleaf.org/">Thymeleaf</a> pero la mayoría usa un <a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/">modelo push en vez de un modelo pull</a>, en el caso de Tapestry se emplea el modelo pull que tiene algunas ventajas como explico en el artículo anterior. Si usamos una aplicación Tapestry usándolo también para generar el contenido de los correos o cierto contenido estático evitamos tener que aprender una segunda tecnología además de aprovechar todo el código reutilizable que posiblemente hemos desarrollado en algunos componentes. Para generar el contenido estático que generaría una página en Tapestry tenemos el módulo <a href="https://github.com/uklance/tapestry-offline">Tapestry Offline</a>. Como no está en los repositorio de maven debemos descargarnos el jar e incluir la dependencia como un archivo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/tapestry-offline.jar&#39;</span><span class="o">)</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-2.gradle</span>
    </div>
</div>
<p>Para generar una página de Tapestry fuera de una petición web y de un servidor de aplicaciones debemos usar el servicio OfflineComponentRenderer. Su uso sería el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Override</span>&#10;<span class="kd">public</span> <span class="n">File</span> <span class="nf">generatePage</span><span class="o">(</span><span class="n">String</span> <span class="n">page</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">context</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;	<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">to</span><span class="o">,</span> <span class="n">getToPage</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">params</span><span class="o">).</span><span class="na">getPath</span><span class="o">());</span>&#10;	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Generating page «{}» ({}, {})...&#34;</span><span class="o">,</span> <span class="n">page</span><span class="o">,</span> <span class="n">file</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>&#10;&#10;	<span class="n">file</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">().</span><span class="na">mkdirs</span><span class="o">();</span>&#10;&#10;	<span class="n">Writer</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>&#10;	<span class="n">render</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">params</span><span class="o">,</span> <span class="n">Globals</span><span class="o">.</span><span class="na">LOCALE</span><span class="o">,</span> <span class="n">w</span><span class="o">);</span>&#10;	<span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&#10;	<span class="k">return</span> <span class="n">file</span><span class="o">;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">String</span> <span class="n">page</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">context</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">,</span> <span class="n">Locale</span> <span class="n">locale</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;	<span class="n">TypeCoercer</span> <span class="n">coercer</span> <span class="o">=</span> <span class="n">Globals</span><span class="o">.</span><span class="na">registry</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">TypeCoercer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;	<span class="n">OfflineComponentRenderer</span> <span class="n">renderer</span> <span class="o">=</span> <span class="n">Globals</span><span class="o">.</span><span class="na">registry</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="s">&#34;BlogStackOfflineComponentRenderer&#34;</span><span class="o">,</span> <span class="n">OfflineComponentRenderer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&#10;	<span class="n">EventContext</span> <span class="n">activationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayEventContext</span><span class="o">(</span><span class="n">coercer</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>&#10;	<span class="n">PageRenderRequestParameters</span> <span class="n">requestParams</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PageRenderRequestParameters</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">activationContext</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>&#10;	<span class="n">DefaultOfflineRequestContext</span> <span class="n">requestContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultOfflineRequestContext</span><span class="o">();</span>&#10;	<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">param</span> <span class="o">:</span> <span class="n">params</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>&#10;		<span class="n">requestContext</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="n">param</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">param</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;	<span class="n">requestContext</span><span class="o">.</span><span class="na">setLocale</span><span class="o">(</span><span class="n">locale</span><span class="o">);</span>&#10;&#10;	<span class="n">renderer</span><span class="o">.</span><span class="na">renderPage</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">requestContext</span><span class="o">,</span> <span class="n">requestParams</span><span class="o">);</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>GeneratorServiceImpl.java</span>
    </div>
</div>
<p>Tengo que decir que al generar la página fuera de una petición web tendremos alguna limitación como solo poder usar assets con el prefijo context. Pero esto por lo menos <a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/">como he explicado en el caso de Blog Stack</a> no me ha supuesto ningún problema.</p>
<p>Esto quizá no sea lo habitual pero en <a href="http://www.blogstack.info/">Blog Stack</a> ambas posibilidades me han resultado de gran utilidad al desarrollar el proyecto. Las posibilidades son muchas por ejemplo podríamos usar alguna combinación de esto mismo con el microframework <a href="https://sparkjava.com/">Spark</a> si nuestra aplicación estuviese más orientada a una API aunque también podríamos <a href="https://elblogdepicodev.blogspot.com.es/2013/03/integracion-tapestry-con-resteasy.htm.html">usarlo junto con RESTEasy</a>.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/</id>
        <title>Servir recursos estáticos desde un CDN en Apache Tapestry</title>
        <updated>2015-10-19T19:00:00+02:00</updated>
        <published>2014-07-26T12:35:50+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Un <a href="https://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Network</a> (CDN) no es más que un servidor, servidores o servicio dedicado a servir el contenido estático o actuar de cache para los clientes. Alguno de los motivos por los que podríamos querer usar un CDN en una aplicación son:</p>
<ul>
<li>Algunos servicios CDN están repartidos geográficamente por el mundo de modo que el contenido sea servido de un lugar más cercano al usuario esto hace que el tiempo que tarda en cargar un página o servirse el contenido sea menor.</li>
<li>Descargar la tarea de servir al menos parte del contenido de la aplicación al CDN hará que no nos tengamos que preocupar de tener la capacidad para servirlo. Cuando se cargar una página se hacen varias peticiones al servidor para obtener el contenido como el html, imágenes, estilos, &hellip; haciendo que los contenidos estáticos sean servidos por el CDN hará que el servidor tenga menos carga, dependiendo del número de usuarios de la aplicación o los picos de tráfico notaremos una mejoría.</li>
<li>La alta fiabilidad de servicio que ofrecen.</li>
</ul>
<p><a href="http://aws.amazon.com/es/cloudfront/">Amazon ClodFront</a> es una de las opciones que podemos usar como CDN. En este artículo voy a comentar como tener un CDN para servir el contenido estático en una aplicación que emplee el <em>framework</em> de desarrollo de aplicaciones web en la plataforma Java <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/images/nocdn-cdn_hu4bda5a96fc7e95afc34c0e3629c45f5e_124009_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Arquitectura no CDN (izquierda) contra arquitectura CDN (derecha)"><img src="https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/images/nocdn-cdn_hu4bda5a96fc7e95afc34c0e3629c45f5e_124009_300x200_fit_box_3.png" width="300" height="129" alt="Arquitectura no CDN (izquierda) contra arquitectura CDN (derecha)" title="Arquitectura no CDN (izquierda) contra arquitectura CDN (derecha)"  class="lozad "></a></p>
</figure>
</div>
<p>Para que el contenido estático se sirva del CDN debemos hacer que las URL de las imágenes y hojas de estilo se generen con la URL propia del CDN, al menos, deberemos cambiar el host de esas URL. No hay que hacer mucho más ya que CloudFront creo que se puede configurar para que cuando le lleguen las peticiones del contenido si no las tiene las delegue en la aplicación, una vez que las tiene cacheadas ya no necesita solicitarselas a la aplicación y las sirve él mismo.</p>
<p>Una de las cosas muy interesantes de Tapestry es que podemos modificar prácticamente cualquier comportamiento del mismo, esto es debido a que la mayor parte de sus funcionalidades son ofrecidas mediante servicios que podemos sobrescribir con los que nosotros proporcionemos, el contenedor de dependencias (IoC) de tapestry lo hace muy fácil. Para modificar las URL de los recursos estáticos que son generados en Tapestry deberemos implementar la clase <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/services/AssetPathConverter.html">AssetPathConverter</a>. Una implementación podría ser la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.misc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Symbol</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.internal.util.CollectionFactory</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.services.AssetPathConverter</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services.AppModule</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CDNAssetPathConverterImpl</span> <span class="kd">implements</span> <span class="n">AssetPathConverter</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">protocol</span><span class="o">;</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">host</span><span class="o">;</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">port</span><span class="o">;</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">path</span><span class="o">;</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">resources</span> <span class="o">=</span> <span class="n">CollectionFactory</span><span class="o">.</span><span class="na">newMap</span><span class="o">();</span>&#10;&#10;	<span class="kd">public</span> <span class="nf">CDNAssetPathConverterImpl</span><span class="o">(</span><span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_PROTOCOL</span><span class="o">)</span> <span class="n">String</span> <span class="n">protocol</span><span class="o">,</span>&#10;			<span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_HOST</span><span class="o">)</span> <span class="n">String</span> <span class="n">host</span><span class="o">,</span>&#10;			<span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_PORT</span><span class="o">)</span> <span class="n">String</span> <span class="n">port</span><span class="o">,</span>&#10;			<span class="nd">@Inject</span> <span class="nd">@Symbol</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">CDN_DOMAIN_PATH</span><span class="o">)</span> <span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>&#10;&#10;		<span class="k">this</span><span class="o">.</span><span class="na">protocol</span> <span class="o">=</span> <span class="n">protocol</span><span class="o">;</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">host</span><span class="o">;</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="o">(</span><span class="n">port</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">port</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">))</span> <span class="o">?</span> <span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">port</span><span class="o">;</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="o">(</span><span class="n">path</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">))</span> <span class="o">?</span> <span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="n">path</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">convertAssetPath</span><span class="o">(</span><span class="n">String</span> <span class="n">assetPath</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">resources</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">assetPath</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">resources</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">assetPath</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;		<span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s://%s%s%s%s&#34;</span><span class="o">,</span> <span class="n">protocol</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">assetPath</span><span class="o">);</span>&#10;		<span class="n">resources</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">assetPath</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>&#10;		<span class="k">return</span> <span class="n">result</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInvariant</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>CDNAssetPathConverterImpl.java</span>
    </div>
</div>
<p>También deberemos añadir un poco de configuración al módulo de la aplicación para que se use esta nueva implementación. Esto se hace en el método serviceOverride de la clase AppModule.java, donde también en el método contributeApplicationDefaults configuramos los símbolos que se usarán al generar las URLs entre ellos el dominio del CDN.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">AppModule</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_PROTOCOL</span> <span class="o">=</span> <span class="s">&#34;cdn.protocol&#34;</span><span class="o">;</span>&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_HOST</span> <span class="o">=</span> <span class="s">&#34;cdn.host&#34;</span><span class="o">;</span>&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_PORT</span> <span class="o">=</span> <span class="s">&#34;cdn.port&#34;</span><span class="o">;</span>&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CDN_DOMAIN_PATH</span> <span class="o">=</span> <span class="s">&#34;cdn.path&#34;</span><span class="o">;</span>&#10;&#10;	<span class="o">...</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeServiceOverride</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">,</span> <span class="nd">@Local</span> <span class="n">HibernateSessionSource</span> <span class="n">hibernateSessionSource</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">HibernateSessionSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">hibernateSessionSource</span><span class="o">);</span>&#10;		<span class="c1">// Servicio para usar un CDN lazy, pe. con Amazon CloudFront&#10;</span><span class="c1"></span>		<span class="n">configuration</span><span class="o">.</span><span class="na">addInstance</span><span class="o">(</span><span class="n">AssetPathConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">CDNAssetPathConverterImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">isServidorJBoss</span><span class="o">(</span><span class="n">ContextListener</span><span class="o">.</span><span class="na">SERVLET_CONTEXT</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ClasspathURLConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">WildFlyClasspathURLConverter</span><span class="o">());</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeApplicationDefaults</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="o">...</span>&#10;&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_PROTOCOL</span><span class="o">,</span> <span class="s">&#34;http&#34;</span><span class="o">);</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_HOST</span><span class="o">,</span> <span class="s">&#34;s3-eu-west-1.amazonaws.com&#34;</span><span class="o">);</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_PORT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CDN_DOMAIN_PATH</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="o">...</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule.java</span>
    </div>
</div>
<p>Estas serían las URLs por defecto:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">/PlugInTapestry/assets/meta/zbb0257e4/tapestry5/bootstrap/css/bootstrap.css&#10;/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js&#10;/PlugInTapestry/assets/meta/z58df451c/tapestry5/bootstrap/css/bootstrap.css&#10;/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>urls-sin-cdn.txt</span>
    </div>
</div>
<p>Y estas las nuevas nuevas URL haciendo uso de la implementación del <em>AssetPathConverter</em> que como se aprecia incorporan un dominio de Amazon y siendo uno del servicio CloudFront en caso de no tener cacheado el recurso lo pedirá a la aplicación y lo cacheará para posteriores peticiones:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/zbb0257e4/tapestry5/bootstrap/css/bootstrap.css&#10;http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js&#10;http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/z58df451c/tapestry5/bootstrap/css/bootstrap.css&#10;http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/ctx/8a53c27b/images/tapestry.png&#10;http://s3-eu-west-1.amazonaws.com/PlugInTapestry/assets/meta/z87656c56/tapestry5/require.js</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>urls-con-cdn.txt</span>
    </div>
</div>
<p>Así de simple podemos cambiar el comportamiento de Tapestry y en este caso emplear un CDN, esta implementación es sencilla y suficiente pero perfectamente podríamos implementarla con cualquier otra necesidad que tuviésemos. El cambio está localizado en una clase, son poco más que 46 líneas de código pero lo mejor es que es transparente para el código del resto de la aplicación, ¿que más se puede pedir?</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></p>
</li>
<li>
<p><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></p>
</li>
<li>
<p><a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/services/AssetPathConverter.html">AssetPathConverter</a></p>
</li>
<li>
<p><a href="https://code.google.com/p/corner/source/browse/corner3/trunk/src/main/java/corner/asset/services/impl/CDNAssetPathConverterImpl.java">CDNAssetPathConverterImpl.java</a></p>
</li>
<li>
<p><a href="http://aws.amazon.com/es/cloudfront/dynamic-content/">Amazon CloudFront</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/16914673/serve-images-outside-web-application">Serve images outside web application</a></p>
</li>
<li>
<p><a href="https://issues.apache.org/jira/browse/TAP5-2201">TAP5-2201</a></p>
</li>
<li>
<p><a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/T5-some-automagical-way-to-export-versioned-assets-to-CDN-td2399058.html">T5: some automagical way to export versioned assets to CDN</a></p>
</li>
<li>
<p><a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/General-CDN-problem-that-came-up-with-Tree-component-td5671331.html">General CDN problem that came up with Tree component</a></p>
</li>
<li>
<p><a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistS3AndCustomOrigins.html">Using Amazon S3 Origins and Custom Origins for Web Distributions</a></p>
</li>
<li>
<p><a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a></p>
</li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/anotacion-cached-de-apache-tapestry/</id>
        <title>Anotación Cached de Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-07-18T21:30:20+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/anotacion-cached-de-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Como he comentado en un artículo anterior sobre los <a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/">modelos push y pull empleados en los motores de plantillas</a> donde comentaba algunas diferencias entre ellos, en el modelo pull es la vista la que pide los datos al controlador y no el controlador el que proporciona los datos a la vista como se hace en el modelo push. Un problema que puede plantear el que la vista pida los datos al controlador es que si la devolución de los datos solicitados son costosos en tiempo del cálculo, carga para el sistema en CPU o memoria, o intensivos en entrada/salida de disco o red y se piden varias veces puede suponer como resultado que el tiempo empleado para generar la página sea elevado o la aplicación consuma recursos innecesarios.</p>
<p><a href="http://tapestry.apache.org/">Apache Tapestry</a> que emplea el modelo pull dispone de la <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/annotations/Cached.html">anotación Cached</a> que permite cachear el resultado de un método a nivel de componente y página durante la generación de la misma. Su uso sería el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.tapestry.components</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Label</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Label</span> <span class="n">label</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">page</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Inject</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">MainService</span> <span class="n">service</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">setupRender</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">page</span> <span class="o">=</span> <span class="o">(</span><span class="n">page</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">page</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Método que devuelve los articulos publicados o actualizados más recientemente de una etiqueta.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;label&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Post</span><span class="o">&gt;</span> <span class="nf">getPosts</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">Sort</span><span class="o">&gt;</span> <span class="n">sorts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sorts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Sort</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="n">Direction</span><span class="o">.</span><span class="na">DESCENDING</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pagination</span> <span class="n">pagination</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pagination</span><span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">NUMBER_POSTS_PAGE</span> <span class="o">*</span> <span class="n">page</span><span class="o">,</span> <span class="n">Globals</span><span class="o">.</span><span class="na">NUMBER_POSTS_PAGE</span> <span class="o">*</span> <span class="o">(</span><span class="n">page</span> <span class="o">+</span> <span class="n">1</span><span class="o">),</span> <span class="n">sorts</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getPostDAO</span><span class="o">().</span><span class="na">findAllByLabel</span><span class="o">(</span><span class="n">label</span><span class="o">,</span> <span class="n">pagination</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;label&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Long</span> <span class="nf">getPostsCount</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getPostDAO</span><span class="o">().</span><span class="na">countBy</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Label.java</span>
    </div>
</div>
<p>En este ejemplo cada vez que se llama a los métodos getPosts, getPostsCount se accede a una base de datos (o sistema externo) que lanza una consulta, supongamos, costosa de calcular o que simplemente es innecesaria hacerla varias veces. Usando la anotación Cached podemos hacer la aplicación más eficiente evitando las segundas llamadas a los métodos. Si el componente Label del ejemplo se usa dentro de un bucle de un <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Loop.html">componente loop</a> y como parámetros se le van pasando varios labels las llamadas a los métodos getPosts y getPostCount se realizarán solo para cada valor diferente.</p>
<p>Algunas veces puede interesarnos que el cacheo dependa de un dato, es decir, que para cada valor de un dato la anotación Cached devuelva diferentes resultados. Y esto es lo que se hace en el ejemplo con el parámetro watch de la anotación, por cada valor de la propiedad label el resultado probablemente sea diferente pero nos interesa que el método solo se ejecute una vez por cada diferente valor, dado que los artículos y el número de ellos únicamente variarán en función de esta propiedad. Esto también puede ser usado para que solo se evalúe los métodos una vez por iteración de un bucle estableciendo la expresión watch al índice del bucle.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;!DOCTYPE html&gt;&#10;&lt;t:container xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;&#10;&lt;t:loop source=&#34;posts&#34; value=&#34;post&#34;&gt;&#10;	&lt;t:postcomponent post=&#34;post&#34; excerpt=&#34;true&#34;/&gt;&#10;&lt;/t:loop&gt;&#10;&#10;&lt;/t:container&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Label.tml</span>
    </div>
</div>
<p>Aún así, la anotación Cached funciona a nivel de petición, cada vez que que se haga una petición a la aplicación y se llame al método anotado por primera vez y por cada valor de la expresión watch se ejecutará el método. Si tenemos muchas peticiones o un determinado componente tarda mucho en generar su contenido, por ejemplo, porque depende de un sistema externo lento (base de datos, http, &hellip;) quizá lo que debamos hacer es un componente que almacene durante un tiempo el contenido que genera y sea devuelto en múltiples peticiones, de modo que evitemos emplear un tiempo costoso en cada petición. Para ello, podríamos desarrollar un <a href="https://elblogdepicodev.blogspot.com.es/2011/01/componente-cache-para-tapestry-5.html">componente que usase una librería de cache</a> como por ejemplo <a href="http://ehcache.org/">EHCache</a>.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/</id>
        <title>Plantillas en Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-07-11T20:54:34+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Una página web está formada por un conjunto de páginas enlazadas entre ellas. Cada página está formado por un html diferente pero normalmente todas las páginas de una misma web comparten el mismo aspecto variando solo una sección donde está el contenido propio de la página. La cabecera de la página, el pie de la página o los menús de navegación suelen estar presentes en todas las páginas de la web y suelen ser los mismos.</p>
<p>En este artículo voy a explicar como crear un componente que nos de a todas las páginas un aspecto común de una aplicación usando apache Tapestry como <em>framework</em> web de tal forma que esa parte común no esté duplicada en la aplicación y pueda ser reutilizada fácilmente. En el caso de <a href="http://www.blogstack.info">Blog Stack</a> las páginas se componen de las siguientes partes.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/images/plantilla-blog-stack_hud86d8d8e1d5b21a1b9287303b7e08493_139843_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Plantilla de Blog Stack"><img src="https://picodotdev.github.io/blog-bitix/2014/07/plantillas-en-apache-tapestry/images/plantilla-blog-stack_hud86d8d8e1d5b21a1b9287303b7e08493_139843_300x200_fit_box_3.png" width="300" height="138" alt="Plantilla de Blog Stack" title="Plantilla de Blog Stack"  class="lozad "></a></p>
</figure>
</div>
<p>El esquema de la plantilla será una cabecera, una barra de navegación con enlaces a diferentes secciones de la web, un menú lateral con contenido variable según la página, el contenido que variará según la página y un pie de página. Como todo componente de <a href="http://tapestry.apache.org/">Apache Tapestry</a> está formado de una clase Java y una plantilla. El componente puede tener diferentes parámetros, y en el caso del de la plantilla muchos para poder variar el contenido por defecto de las diferentes secciones de la página, estos son aside1, aside2, aside3, aside4.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">info.blogstack.components</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">info.blogstack.entities.Adsense</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.BindingConstants</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.Block</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ComponentResources</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Import</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Property</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.joda.time.DateTime</span><span class="o">;</span>&#10;&#10;<span class="nd">@Import</span><span class="o">(</span><span class="n">stack</span> <span class="o">=</span> <span class="s">&#34;blogstack&#34;</span><span class="o">,</span> <span class="n">module</span> <span class="o">=</span> <span class="s">&#34;app/analytics&#34;</span><span class="o">)</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Layout</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;	<span class="nd">@Property</span><span class="o">(</span><span class="n">read</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;	<span class="nd">@Property</span><span class="o">(</span><span class="n">read</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">subtitle</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside1</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside2</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside3</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">BLOCK</span><span class="o">)</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">Block</span> <span class="n">aside4</span><span class="o">;</span>&#10;	&#10;	<span class="nd">@Parameter</span>&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">Adsense</span> <span class="n">adsense</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Property</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">page</span><span class="o">;</span>	&#10;	&#10;	<span class="nd">@Inject</span>&#10;	<span class="n">ComponentResources</span> <span class="n">resources</span><span class="o">;</span>&#10;&#10;	<span class="kt">void</span> <span class="nf">setupRender</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="n">page</span> <span class="o">=</span> <span class="n">resources</span><span class="o">.</span><span class="na">getPageName</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getYear</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">getYear</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">title</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s&#34;</span><span class="o">,</span> <span class="n">getSubtitle</span><span class="o">());</span>			&#10;		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s | %s&#34;</span><span class="o">,</span> <span class="n">title</span><span class="o">,</span> <span class="n">getSubtitle</span><span class="o">());</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getSubtitle</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="o">(</span><span class="n">subtitle</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;Blog Stack&#34;</span> <span class="o">:</span> <span class="n">subtitle</span><span class="o">;</span> &#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentClass</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="o">(</span><span class="n">isAside</span><span class="o">())</span> <span class="o">?</span> <span class="s">&#34;col-xs-12 col-sm-12 col-md-8 content&#34;</span> <span class="o">:</span> <span class="s">&#34;col-xs-12 col-sm-12 col-md-12 content&#34;</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAside</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="o">(</span><span class="n">aside1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aside2</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aside3</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aside4</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Layout.java</span>
    </div>
</div>
<p>El archivo tml asociado al componente plantilla será el que genere el contenido html que se enviará al navegador del usuario. En esta plantilla se incluye una cabecera con el logo de la aplicación y una frase que lo describe, posteriormente está una barra de navegación con varios enlaces, con &lt;t:body&gt; se incluye el contenido propio de la página que usa el componente plantilla y usando el componente <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Delegate.html">&lt;t:delegate&gt;</a> se incluye el contenido de los diferentes bloques aside si se han personalizado en el uso de la plantilla, con el componente <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/If.html">&lt;t:if test=“aside”&gt;</a> se comprueba si hay algún aside usándose el método isAside de la clase Layout asociada al componente plantilla y del tml. Finalmente, está el pie que será común a todas las páginas que usen este componente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span><span class="lnt">88&#10;</span><span class="lnt">89&#10;</span><span class="lnt">90&#10;</span><span class="lnt">91&#10;</span><span class="lnt">92&#10;</span><span class="lnt">93&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;&lt;head&gt;&#10;	&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;&#10;	&lt;meta t:type=&#34;any&#34; t:pagina=&#34;${page}&#34; /&gt;&#10;	&lt;title&gt;${title}&lt;/title&gt;&#10;	&lt;!-- Resources --&gt;&#10;	&lt;link href=&#34;//fonts.googleapis.com/css?family=Open+Sans:400,700&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;/&gt;&#10;	&lt;link href=&#34;//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;/&gt;	&#10;	&lt;link href=&#34;https://picodotdev.github.io/blog-bitix/feed.atom.xml&#34; rel=&#34;alternate&#34; type=&#34;application/atom+xml&#34; title=&#34;Portada&#34;/&gt;&#10;	&lt;link href=&#34;${context:images/favicon.png}&#34; rel=&#34;icon&#34; type=&#34;image/png&#34;/&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;	&lt;header&gt;&#10;		&lt;div class=&#34;container-fluid&#34;&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-xs-12 col-sm-12 col-md-4&#34;&gt;&#10;					&lt;h1&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34; class=&#34;blogstack&#34;&gt;&lt;span class=&#34;glyphicon glyphicon-th&#34;&gt;&lt;/span&gt; Blog &lt;span class=&#34;stack&#34;&gt;Stack&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;&#10;				&lt;/div&gt;&#10;				&lt;div id=&#34;horizontalSkycraper&#34; class=&#34;col-xs-12 col-sm-12 col-md-8&#34;&gt;&lt;/div&gt;&#10;			&lt;/div&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div  class=&#34;col-xs-12 col-sm-12 col-md-12&#34;&gt;&#10;					&lt;h4&gt;Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...&lt;/h4&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;	&lt;/header&gt;&#10;&#10;	&lt;div class=&#34;container-fluid&#34;&gt;&#10;		&lt;div class=&#34;row&#34;&gt;&#10;			&lt;div class=&#34;col-xs-12 col-sm-12 col-md-12&#34;&gt;&#10;				&lt;nav role=&#34;navigation&#34;&gt;&#10;					&lt;ul class=&#34;nav nav-pills menu&#34;&gt;&#10;						&lt;li&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34;&gt;Inicio&lt;/a&gt;&lt;/li&gt;&#10;						&lt;li&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;archive&#34; context=&#34;[]&#34;&gt;Archivo&lt;/a&gt;&lt;/li&gt;&#10;						&lt;li&gt;&lt;a t:type=&#34;pagelink&#34; page=&#34;faq&#34;&gt;Preguntas frecuentes&lt;/a&gt;&lt;/li&gt;&#10;					&lt;/ul&gt;&#10;				&lt;/nav&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;	&lt;/div&gt;&#10;&#10;	&lt;div class=&#34;container-fluid&#34;&gt;&#10;		&lt;div class=&#34;row&#34;&gt;&#10;			&lt;div t:type=&#34;any&#34; class=&#34;prop:contentClass&#34;&gt;&lt;t:body /&gt;&lt;/div&gt;&#10;			&lt;t:if test=&#34;aside&#34;&gt;&#10;				&lt;aside class=&#34;col-xs-12 col-sm-12 col-md-4&#34;&gt;&#10;					&lt;t:socialnetworks/&gt;&#10;					&lt;t:if test=&#34;aside1&#34;&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;   					&lt;t:delegate to=&#34;aside1&#34;/&gt;&#10;					&lt;/t:if&gt;&#10;					&lt;div id=&#34;bigRectangle&#34;&gt;&lt;/div&gt;&#10;					&lt;t:if test=&#34;aside2&#34;&gt;&#10;						&lt;t:delegate to=&#34;aside2&#34;/&gt;&#10;					&lt;/t:if&gt;&#10;					&lt;div class=&#34;row&#34;&gt;&#10;						&lt;div class=&#34;col-xs-3 col-md-2&#34;&gt;&#10;   							&lt;div id=&#34;wideSkycraper&#34;&gt;&lt;/div&gt;&#10;   						&lt;/div&gt;&#10;						&lt;t:if test=&#34;aside3&#34;&gt;&#10;							&lt;div class=&#34;col-xs-3 col-md-2&#34;&gt;&#10;								&lt;t:delegate to=&#34;aside3&#34;/&gt;&#10;							&lt;/div&gt;&#10;						&lt;/t:if&gt;&#10;					&lt;/div&gt;&#10;	   				&lt;t:if test=&#34;aside4&#34;&gt;&#10;						&lt;t:delegate to=&#34;aside4&#34;/&gt;&#10;					&lt;/t:if&gt;&#10;				&lt;/aside&gt;&#10;			&lt;/t:if&gt;&#10;		&lt;/div&gt;&#10;	&lt;/div&gt;&#10;&#10;	&lt;footer&gt;&#10;		&lt;div class=&#34;container-fluid&#34;&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-xs-12 col-sm-12 col-md-12&#34;&gt;&#10;					&lt;div class=&#34;footer&#34;&gt;&#10;						&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34;&gt;Blog Stack&lt;/a&gt; por &lt;a href=&#34;https://twitter.com/picodotdev/&#34;&gt;pico.dev&lt;/a&gt; está publicado bajo la licencia de software libre &lt;a href=&#34;http://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;GNU Affero General Public&lt;/a&gt;.&lt;br/&gt;&#10;						El contenido agregado conserva la licencia de su bitácora.&lt;br/&gt;&#10;						«Powered by» &lt;a href=&#34;https://github.com/picodotdev/blogstack&#34;&gt;Blog Stack&lt;/a&gt;, &lt;a href=&#34;http://tapestry.apache.org/&#34;&gt;Apache Tapestry&lt;/a&gt;, &lt;a href=&#34;https://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt;, &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&#34;http://www.oracle.com/es/technologies/java/overview/index.html&#34;&gt;Java&lt;/a&gt; y más software libre o de código abierto, inspirado en &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;.&lt;br/&gt;&#10;						&lt;span class=&#34;copyleft&#34;&gt;&amp;copy;&lt;/span&gt; pico.dev ${year}&#10;					&lt;/div&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;	&lt;/footer&gt;&#10;	&#10;	&lt;div id=&#34;fb-root&#34;&gt;&lt;/div&gt;&#10;	&lt;t:ads adsense=&#34;adsense&#34;/&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Layout.tml</span>
    </div>
</div>
<p>Para terminar nos queda ver como sería usar este componente en una página donde queremos usarlo. En la etiqueta html se usa la plantilla con t:type para indicar que esa etiqueta es un componente de Tapestry y se le pasan los aside1 y aside2 que en esta página tienen contenido propio. El contenido de la etiqueta html se sustituirá por la etiqueta &lt;t:body&gt; de la plantilla, el contenido incluido en los componentes <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/Block.html">&lt;t:block&gt;</a> aunque esté dentro de la etiqueta html solo se mostrará cuando se haga uso de un &lt;t:delegate&gt;, como se hace el componente plantilla. Este es el caso de la <a href="http://www.blogstack.info">página índice de Blog Stack</a>. A pesar de todo el contenido que genera y solo consta de 34 líneas de código, esto muestra lo fácil que es en Tapestry dividir las diferentes partes de una página en componentes que puede ser reutilizados.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;html t:type=&#34;layout&#34; t:aside1=&#34;aside1&#34; t:aside2=&#34;aside2&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;&#10;&lt;t:data/&gt;&#10;&#10;&lt;t:loop source=&#34;posts&#34; value=&#34;post&#34;&gt;&#10;	&lt;t:postcomponent post=&#34;post&#34; excerpt=&#34;true&#34;/&gt;&#10;&lt;/t:loop&gt;&#10;&#10;&lt;section class=&#34;index-pagination&#34;&gt;&#10;	&lt;div class=&#34;container-fluid&#34;&gt;&#10;		&lt;div class=&#34;row&#34;&gt;&#10;			&lt;div class=&#34;col-xs-4 col-sm-4 col-md-4&#34;&gt;&#10;				&lt;t:if test=&#34;!lastPage&#34;&gt;&#10;					&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34; context=&#34;nextContext&#34;&gt;&lt;span class=&#34;glyphicon glyphicon-arrow-left&#34;&gt;&lt;/span&gt; Más antiguo&lt;/a&gt;&#10;				&lt;/t:if&gt;&#10;			&lt;/div&gt;	&#10;			&lt;div class=&#34;col-xs-4 col-sm-4 col-md-4 col-xs-offset-4 col-sm-offset-4 col-md-offset-4 text-right&#34;&gt;&#10;				&lt;t:if test=&#34;!firstPage&#34;&gt;&#10;					&lt;a t:type=&#34;pagelink&#34; page=&#34;index&#34; context=&#34;previusContext&#34;&gt;Más nuevo &lt;span class=&#34;glyphicon glyphicon-arrow-right&#34;&gt;&lt;/span&gt;&lt;/a&gt;&#10;				&lt;/t:if&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;	&lt;/div&gt;&#10;&lt;/section&gt;&#10;&#10;&lt;t:block id=&#34;aside1&#34;&gt;&#10;	&lt;t:feeds/&gt;&#10;&lt;/t:block&gt;&#10;&#10;&lt;t:block id=&#34;aside2&#34;&gt;&#10;	&lt;t:lastposts/&gt;&#10;	&lt;t:lastsourceswithposts/&gt;&#10;&lt;/t:block&gt;&#10;&lt;/html&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.tml</span>
    </div>
</div>
<p>Usando el mismo componente podemos darle un aspecto común pero variando el contenido de las diferentes secciones. En este caso usamos la misma plantilla donde se muestra la misma cabecera, enlaces de navegación y pie de página pero sin el contenido lateral como en el caso de la página de preguntas frecuentes de <a href="http://www.blogstack.info/faq">Blog Stack</a>, en este caso no usamos los componentes aside.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;html t:type=&#34;layout&#34; t:title=&#34;Preguntas frecuentes&#34; xmlns:t=&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34; xmlns:p=&#34;tapestry:parameter&#34;&gt;&#10;&#10;&lt;article class=&#34;text-justify&#34;&gt;&#10;	&lt;header&gt;&#10;		&lt;h1&gt;Preguntas frecuentes&lt;/h1&gt;&#10;	&lt;/header&gt;&#10;&#10;	&lt;h2&gt;¿Qué es Blog Stack?&lt;/h2&gt;&#10;&#10;	&lt;p&gt;Blog Stack (BS) es una agregador, planeta, o fuente de información de bitácoras sobre programación, desarrollo, desarrollo ágil, software, software libre, hardware,&#10;		gnu/linux o en general temas relacionados con la tecnología.&lt;/p&gt;&#10;&#10;	&lt;h2&gt;¿Por qué otro agregador?&lt;/h2&gt;&#10;&#10;	&lt;p&gt;&#10;		Hay varios motivos, la semilla es que quería hacer un proyecto personal con cierta utilidad para otras personas empleando de alguna forma el framework para el desarrollo de&#10;		aplicaciones web &lt;a href=&#34;http://tapestry.apache.org/&#34;&gt;Apache Tapestry&lt;/a&gt;.&#10;	&lt;/p&gt;&#10;&#10;	...&#10;&lt;/article&gt;&#10;&#10;&lt;/html&gt;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Faq.tml</span>
    </div>
</div>
<p>Por supuesto, podemos crear tantos componentes plantilla como necesitemos en una aplicación y usar uno o otro en función del tipo de página.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/picodotdev/blog-stack">Código fuente de Blog Stack</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/</id>
        <title>Modelo «push» contra modelo «pull» en frameworks web</title>
        <updated>2015-06-06T11:00:00+02:00</updated>
        <published>2014-07-06T10:58:10+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>En la mayoría de <em>frameworks</em> de desarrollo de aplicaciones o páginas web para producir el contenido HTML que se envía al cliente se emplea un modelo en el que el controlador proporciona los datos que combinados con una plantilla producen el HTML. Este modelo también es el empleado habitualmente en muchos motores de plantillas (<a href="http://www.thymeleaf.org/">thymeleaf</a>, <a href="http://mustache.github.io/">mustache</a>, &hellip;). Sin embargo, hay dos modelos que se pueden seguir para producir un texto como resultado dada una plantilla y datos:</p>
<ul>
<li>Push: este es el modelo comentado. El controlador recupera de antemano todos los datos que necesita la vista, el controlador también determina la vista o plantilla que se usar. Combinando los datos y la plantilla se produce el resultado.</li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-push_hu6e494778e33b19912ce2159f71794939_16905_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Modelo push"><img src="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-push_hu6e494778e33b19912ce2159f71794939_16905_300x200_fit_box_3.png" width="300" height="176" alt="Modelo push" title="Modelo push"  class="lozad "></a></p>
</figure>
</div>
<p>Los pasos que se siguen en este modelo son:</p>
<ol>
<li>La petición llega al servidor</li>
<li>El dispatcher redirige la petición al controlador</li>
<li>El controlador solicita los datos a la base de datos</li>
<li>El controlador obtiene los datos de la base de datos</li>
<li>El controlador redirige a la vista y le envía los datos que necesita</li>
<li>La vista genera el contenido y se envía al cliente</li>
</ol>
<ul>
<li>Pull: en este modelo el controlador no conoce los datos que usará la vista y es esta la que los solicita según necesita. La vista tira del controlador, el controlador solo debe ofrecer el soporte par que la vista pueda recuperar los datos que necesite.</li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-pull_hued438e41b6c5cffc6a748be7abce3995_16763_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Modelo pull"><img src="https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/images/modelo-pull_hued438e41b6c5cffc6a748be7abce3995_16763_300x200_fit_box_3.png" width="300" height="185" alt="Modelo pull" title="Modelo pull"  class="lozad "></a></p>
</figure>
</div>
<p>Los pasos que se siguen en este modelo varían ligeramente del modelo push pero de forma importante, son:</p>
<ol>
<li>La petición llega al servidor</li>
<li>El dispatcher redirige la petición al controlador</li>
<li>El controlador redirige a la vista</li>
<li>La vista pide los datos que necesita al controlador y el controlador los pide a la base de datos</li>
<li>La vista obtiene los datos que ha pedido del controlador</li>
<li>La vista genera el contenido y se envía al cliente</li>
</ol>
<p>El modelo push es empleado en muchos de los <em>frameworks</em> web más usados, algunos ejemplos son <a href="http://symfony.com/">Symfony</a>, <a href="https://www.djangoproject.com/">Django</a>, <a href="https://grails.org/">Grails</a> o <a href="http://www.asp.net/mvc">ASP.NET MVC</a>. En la categoría de <em>frameworks</em> que usan un modelo pull está <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>
<p>Al modelo push le encuentro algunos problemas. Un problema es que el controlador debe conocer que datos necesita la vista y si la vista tiene cierta lógica esta la tendremos duplicada tanto en en controlador como en la vista. Supongamos que en una aplicación tenemos un usuario y dirección con una relación de 1 a 1 entre ambos y que debemos mostrar en una página el usuario y su dirección solo si solo si es un usuario VIP. En el controlador tendremos que recuperar el usuario, comprobar si es VIP y si lo es recuperar su dirección. El problema está que en la vista deberemos hacer también una comprobación si el cliente es VIP o al menos si a la vista se le ha proporcionado una dirección, como resultado la comprobación la tendremos duplicada tanto en el controlador como en la vista, como sabemos la duplicación de código y lógica habitualmente no es buena idea ya que a la larga dificulta el mantenimiento de la aplicación.</p>
<p>En Grails (pero podría ser cualquier otro <em>framework</em> o motor de plantillas push) podríamos visualizar el usuario y su dirección si es VIP de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">// Grails&#10;// Controlador (groovy)&#10;def showUsuario() {&#10;&nbsp;&nbsp;&nbsp;&nbsp;def usuario = Usuario.get(params.long(&#39;id&#39;))&#10;&nbsp;&nbsp;&nbsp;&nbsp;def direccion = null&#10;&nbsp;&nbsp;&nbsp;&nbsp;if (usuario.isVIP()) {&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direccion = usuario.direccion&#10;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;&nbsp;&nbsp;&nbsp;&nbsp;render(view:&#39;show&#39;, model: [usuario:usuario, direccion:direccion])&#10;}&#10;&#10;// Vista (gsp)&#10;Nombre: ${usuario.nombre}&#10;&lt;g:if test=&#34;${usuario.vip}&#34;&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;Dirección: ${direccion.toString()}&#10;&lt;/g:if&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>push.txt</span>
    </div>
</div>
<p>Si usamos <a href="http://hibernate.org/">hibernate</a> la recuperación de la dirección podemos hacerla navegando la relación pero he querido recuperarla en el controlador expresamente para el ejemplo, si no pudiésemos usar hibernate para recuperar el dato relacionado probablemente lo que haríamos es recuperar el dato en el controlador como en el ejemplo.</p>
<p>Otro problema del modelo push es que si la vista es usada en múltiples controladores, y precisamente la separación entre vistas y controladores uno de sus motivos es para esto, todos estos controladores van a compartir el código para recuperar los datos que necesite la vista, dependiendo del número de datos y de veces que empleemos una vista en múltiples controladores quizá debamos hacer una clase asociada a la vista que recupere los datos para evitar tener código duplicado (y exactamente esto es lo que se hace en Tapestry).</p>
<p>En el modelo pull el controlador no debe conocer que datos necesita la vista y si hay lógica para mostrar ciertos datos está lógica solo la tendremos en la vista. Aunque el controlador no deba conocer que datos en concreto necesite la vista si debe ofrecer el soporte para que la vista los recupere cuando necesite. Como se puede ver el código en el siguiente ejemplo la comprobación de si el usuario es VIP solo está en la vista. En Tapestry cada vista tiene asociado una clase Java que es la encargada de ofrecer el soporte para que la vista pueda recuperar los datos, el conjunto de controlador más vista es lo que en Tapestry se conoce como componente, si el componente se usa varias veces en el mismo proyecto no necesitamos duplicar código.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">// Tapestry&#10;// Controlador (java)&#10;public Usuario getUsuario() {&#10;&nbsp;&nbsp;&nbsp;&nbsp;return usuarioDAO.get(id);&#10;}&#10;&#10;public Direccion getDirecion() {&#10;&nbsp;&nbsp;&nbsp;&nbsp;return getUsuario().getDireccion();&#10;}&#10;&#10;// Vista (tml)&#10;Nombre: ${usuario.nombre}&#10;&lt;t:if test=&#34;usuario.vip&#34;&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;Direccion: ${direccion.toString()}&#10;&lt;t:if&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pull.txt</span>
    </div>
</div>
<p>¿Podemos emplear un modelo pull en un <em>framework</em> que normalmente se suele usar un modelo push? Sí, basta que en el modelo de la vista pasemos un objeto que le permita recuperar los datos que necesite. En Grails empleando un modelo pull el código podría quedarnos de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">// Grails&#10;// Controlador (groovy)&#10;def showUsuario() {&#10;&nbsp;&nbsp;&nbsp;&nbsp;render(view:&#39;show&#39;, model: [view:new View(params)])&#10;}&#10;&#10;private class View {&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;Map params&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;View(Map params) {&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.params = params&#10;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;def getUsuario() {&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Usuario.get(params.long(&#39;id&#39;))&#10;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;def getDireccion() {&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return usuario.direccion&#10;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;}&#10;&#10;// Vista (gsp)&#10;Nombre: ${view.usuario.nombre}&#10;&lt;g:if test=&#34;${view.usuario.vip}&#34;&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;Dirección: ${view.direccion.toString()}&#10;&lt;/g:if&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pull-in-push.txt</span>
    </div>
</div>
<p>Como se ve el if de comprobación en el controlador desaparece, a pesar de todo si la vista fuese usada por varios controladores deberíamos crear algo para evitar tener duplicado el código que permite recuperar los datos a la vista. Aunque esto es perfectamente posible no es la forma habitual de usar los modelos push.</p>
<p>Este ejemplo es muy sencillo y empleando cualquiera de los dos modelos es viable, pero cuando el número de datos a recuperar en las vistas y el número de veces que se reutiliza una vista aumenta (y en teoría la separación entro controlador y vista uno de sus motivos es posiblemente para reutilizarlas) el modelo push presenta los problemas que he comentado que el modelo pull no tiene.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://www.guyrutenberg.com/2008/04/26/pull-vs-push-mvc-architecture/">Pull vs. Push MVC Architecture</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/hemeroteca-5/</id>
        <title>Hemeroteca #5</title>
        <updated>2014-12-24T17:00:00+02:00</updated>
        <published>2014-06-27T21:10:29+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/hemeroteca-5/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/octopress.png" width="300" height="300" alt="Octopress" title="Octopress"  class=""></p>
</div>
<p>Cada seis meses hago un recopilatorio de los artículos que he publicado durante este periodo de tiempo. En estos seis meses he mantenido mi ritmo de publicación de una entrada a la semana que publico casi siempre los viernes a la tarde, en total han sido 26 nuevos artículos con este. Los temas tratados durante este tiempo han sido en gran medida la programación, un poco de linux y la Raspberry Pi y el análisis de un SSD.</p>
<p>A destacar durante este semestre ha sido que he publicado un proyecto personal, Blog Stack. <a href="http://www.blogstack.info/">Blog Stack</a> es una agregador o planeta de bitácoras sobre desarrollo, programación, gnu/linux y tecnología. A casi todos los bloggeros que le he propuesto agregarle a Blog Stack me han contestado positivamente. 17 son las bitácoras agregadas actualmente y aunque no son muchas hacen que prácticamente todos los días haya algo nuevo que leer. En un artículo hacía la presentación del proyecto y en otro explicaba cual es el funcionamiento en cuanto a hospedaje y arquitectura (interesante para aquellos que quieran realizar un proyecto en internet con un coste mínimo). Son los siguientes artículos:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/">Presentación de Blog Stack</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/">Arquitectura y hospedaje de Blog Stack</a></li>
</ul>
<p>En las últimas semanas del semestre he publicado unos cuantos artículos obre el <em>framework</em> de desarrollo de aplicaciones web <a href="http://tapestry.apache.org/">Apache Tapestry</a>. Con estas entradas y otras cuantas que tengo preparadas actualizaré y revisaré el libro <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry</a> y seguirá siendo totalmente gratuito.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/">Iniciar rápidamente aplicación con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/">Página Dashboard de Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly/">Ejecutar Apache Tapestry en el servidor de aplicaciones WildFly</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro sobre desarrollo de aplicaciones con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/">Presentación sobre Apache Tapestry</a></li>
</ul>
<p>En otro par de artículos he comentado sobre <a href="https://grails.org/">Grails</a>. Ambas cosas que ofrece ya Tapestry de por si y que son muy útiles en una aplicación disponer de ellas por eso aporté estas dos soluciones a Grails.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">Detectar problema N+1 y obtener estadísticas de Hibernate con Grails</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/">Página de excepción de Grails</a></li>
</ul>
<p>En la sección de programación están las novedades de Java 8 que recoge las interesantes novedades de esta nueva versión, también un nuevo artículo en la serie sobre JavaScript con la lista de tareas empleando <a href="http://backbonejs.org/">Backbone</a> y <a href="https://reactjs.org/">React</a> que empecé algo más de tiempo, una pequeña introducción a <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>, otro ejemplo práctico de un patrón de diseño en programación en este caso del No Operation y algunos otros temas sobre Java.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/">Introducción a Elasticsearch</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/">Introducción y ejemplo sencillo de Java Message Service (JMS)</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/">Servidor de aplicaciones JBoss/WildFly</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/">Logging usando marcadores con slf4j y logback</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/">Ejemplo del patrón de diseño No Operation</a></li>
</ul>
<p>Respecto a gnu/linux he actualizado la guía de instalación de <a href="https://www.archlinux.org/">Arch Linux</a>, he analizado un disco de estado sólido (SSD) que aumentan notablemente el rendimiento de un equipo, algún artículo sobre la <a href="https://www.raspberrypi.org/">Raspberry Pi</a>, otras sobre como configurar SSL en los servidores web y de aplicaciones más populares, los últimos artículos de esta lista son comentado mi experiencia con <a href="http://octopress.org/">Octopress</a> como sistema de <em>blogging</em> y que empecé a usar a principios de diciembre.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/anexo-a-la-guia-de-instalacion-y-del-principiante-de-arch-linux/">Anexo a la guía de instalación y del principiante de Arch Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/desempaquetado-y-analisis-samsung-840-evo-ssd-250-gb/">Desempaquetado y análisis Samsung SSD 840 EVO 250 GB</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Generar y convertir claves y certificados con OpenSSL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/iniciar-la-raspberry-pi-desde-un-disco-o-memoria-usb/">Iniciar la Raspberry Pi desde un disco o memoria USB</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/raspberry-pi-como-media-center-con-geexbox/">Raspberry Pi como Media Center con GeeXboX</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress/">Guía para la creación de un blog con Octopress</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog/">Mi experiencia y consejos para un blog</a></li>
</ul>
<p>En el siguiente semestre seguiré escribiendo nuevos artículos sobre estos mismos temas y publicando uno nuevo cada semana de los que ya tengo preparados. Feliz lectura (o relectura)!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/06/hemeroteca-3.html">Hemeroteca #3</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/12/el-blog-de-picodev-te-desea-un-2013.html">Hemeroteca #2</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/06/hemeroteca-1.html">Hemeroteca #1</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2011/12/feliz-navidad-y-prospero-2012.html">Hemeroteca #0</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/</id>
        <title>Iniciar rápidamente aplicación con Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-06-20T23:08:07+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Un proyecto web en Java requiere de unos cuantos archivos con cierta estructura que nos puede llevar un tiempo en crearlos. Normalmente cuando empezamos un nuevo proyecto solemos basarnos en otro existente  copiando y pegando contenido de él. Pero ademas de tiempo podemos cometer errores o no seguir algunas convenciones propias de Java o del <em>framework</em> web que usemos. Para un proyecto grande esa dedicación al inicio del proyecto no nos importará pero para un proyecto pequeño o para hacer una prueba puede que queramos tener algo más rápido y con menos esfuerzo para estar en disposición de empezar a desarrollar en muy poco tiempo.</p>
<p>Para crear el esqueleto de una aplicación rápidamente en <a href="http://tapestry.apache.org/">Apache Tapestry</a> hay disponible un arquetipo de <a href="http://maven.apache.org/">Maven</a> que puede generar una aplicación en unos pocos minutos. Para usarlo deberemos instalar maven previamente. Una vez instalado Maven basta con que usemos el siguiente comando.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ mvn archetype:generate -DarchetypeCatalog<span class="o">=</span>https://repository.apache.org/content/repositories/staging&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>mvn.sh</span>
    </div>
</div>
<p>El comando nos presentará un montón de arquetipos, el propio de Tapestry se corresponde con una opción que deberemos buscar, <em>org.apache.tapestry:quickstart</em>. Además, del arquetipo a usar se nos pedirá el grupo de la aplicación y nombre de artefacto, para el ejemplo usaré como grupo <em>io.github.picodotdev.bitix</em> y como nombre de artefacto inicio rápido. También nos pedirá la versión y finalmente el paquete de las clases, podemos dejar las opciones por defecto.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-maven_hu58ad4778942c6fc9cf18644f90e126a3_88273_2560x1440_fit_box_3.png" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-maven_hu58ad4778942c6fc9cf18644f90e126a3_88273_300x200_fit_box_3.png" width="300" height="164"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-tapestry_hu41cb80674e80833ccfda3c9a1ad7ff49_39056_2560x1440_fit_box_3.png" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipos-tapestry_hu41cb80674e80833ccfda3c9a1ad7ff49_39056_300x200_fit_box_3.png" width="300" height="164"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipo-tapestry_hu1a077e1c8fb5484483a1912666519296_70527_2560x1440_fit_box_3.png" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/arquetipo-tapestry_hu1a077e1c8fb5484483a1912666519296_70527_300x200_fit_box_3.png" width="300" height="164"  class="lozad "></a></p>
</figure>
</div>
<p>Aunque el arquetipo lo realizamos con Maven los archivos que genera son válidos tanto para trabajar con Maven como con <a href="http://www.gradle.org/">Gradle</a>, una vez que tenemos la aplicación generada podemos usar el que prefiramos, probablemente mejor Gradle. Los archivos generados son los siguientes:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/archivos-generados_hu8535b26c52dbf86b0a5689e0d96993b9_50287_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Terminal al iniciar la aplicación"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/archivos-generados_hu8535b26c52dbf86b0a5689e0d96993b9_50287_300x200_fit_box_3.png" width="300" height="199" alt="Terminal al iniciar la aplicación" title="Terminal al iniciar la aplicación"  class="lozad "></a></p>
</figure>
</div>
<p>Una vez generada la aplicación podemos iniciarla con un servidor embebido <a href="http://www.eclipse.org/jetty/">Jetty</a> con la aplicación desplegada en él ya usando <a href="http://www.gradle.org/">Gradle</a>:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">$</span> <span class="o">./</span><span class="n">gradlew</span> <span class="n">jettyRun</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Y accediendo con el navegador a la URL que nos indica Tapestry al final de las trazas veremos la aplicación en funcionamiento.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-terminal_hu7c5178581b57f1717c22305567786a33_51842_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Terminal al iniciar la aplicación"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-terminal_hu7c5178581b57f1717c22305567786a33_51842_300x200_fit_box_3.png" width="294" height="200" alt="Terminal al iniciar la aplicación" title="Terminal al iniciar la aplicación"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-navegador_hubf7c9f485ca430abc168c8d2ce6fd790_82910_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Aplicación en el navegador"><img src="https://picodotdev.github.io/blog-bitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry/images/inicio-aplicacion-navegador_hubf7c9f485ca430abc168c8d2ce6fd790_82910_300x200_fit_box_3.png" width="255" height="200" alt="Aplicación en el navegador" title="Aplicación en el navegador"  class="lozad "></a></p>
</figure>
</div>
<p>Probablemente necesitaremos configurar muchas cosas adicionales como usar <a href="https://github.com/bmuschko/gradle-tomcat-plugin">Tomcat como servidor embebido</a> en vez de Jetty o añadir la <a href="https://elblogdepicodev.blogspot.com.es/2013/06/pruebas-unitarias-y-de-integracion-en-apache-tapestry.html">configuración necesaria para ejecutar los teses unitarios y de integración</a>, Tapestry no es un <em>framework</em> <em>fullstack</em> y será responsabilidad nuestra disponer de esas características si necesitamos. En definitiva, con este arquetipo de Maven en unos pocos minutos y con poco esfuerzo podemos disponer de una aplicación Apache Tapestry a partir de la que empezar a desarrollar.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/</id>
        <title>Página Dashboard de Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-06-13T17:37:24+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Con la versión 5.4 de Tapestry las <a href="https://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html">páginas PageCatalog, ServiceStatus e HibernateStaticstis</a> han sido unificadas en la página T5Dashboard por lo que ahora en una sóla página tendremos toda la información. Una de las características más importantes de Tapestry es ser muy informativo proporcionando mucha y descriptiva información, esto se nota con la página de <a href="https://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html">informe de error incluso para las peticiones ajax</a>, los mensajes de logging y con estás páginas de información de estado.</p>
<p>La página <a href="http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/corelib/pages/T5Dashboard.html">T5Dashboard</a> está incluida en el propio core de <a href="http://tapestry.apache.org/">Apache Tapestry</a> y disponible en todas las aplicaciones en modo desarrollo y accediendo de forma local al servidor de aplicaciones. Si se incluye en la aplicación la dependencia tapestry-hibernate además en T5Dashboard podremos ver estadísticas de uso de Hibernate. La página T5Dashboard nos puede resultar muy útil ya que nos proporciona mucha información y alguna acción interesante.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-1_hubfb8d8886dece48d49e065fa5374aa71_59968_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estado de la aplicación Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-1_hubfb8d8886dece48d49e065fa5374aa71_59968_300x200_fit_box_3.png" width="300" height="138" alt="Estado de la aplicación Tapestry" title="Estado de la aplicación Tapestry"  class="lozad "></a></p>
</figure>
</div>
<p>Como se ve en la imagen podemos ver las páginas disponibles, cargadas, cuanto tiempo llevó construirlas, que complejidad y por cuantos componentes están formadas. Y algo que nos resultará muy útil es provocar la acción de cargar todas las páginas quizá después de hacer un despliegue para evitar tiempos de inicialización en las primeras peticiones pero tan o más importante nos permitirá descubrir errores en los archivos tml de los componentes ¿cuantas veces te ha ocurrido que en un php, jsp, gsp, &hellip; hasta que no se usa esa plantilla no descubres un error digamos &ldquo;de compilación&rdquo; (variable con nombre que no existe, atributo mal entrecomillado, &hellip;) ? Seguramente como a mi, muchas. Los archivos de plantilla tml son xml válido con lo que si no están bien formados se nos notificará del error, nuevamente ¿te ha ocurrido alguna vez tener un php, jsp o gsp que no genera html bien balanceado? Pero también si se está usando un componente que no existe, varios componentes con el mismo nombre, &hellip; . Aunque parezca que no estos tipos de errores se pueden producir con relativa facilidad tanto en desarrollo y con mayor peligro si tenemos un flujo de trabajo con varias ramas donde vamos mergeando los cambios de trunk a la rama que se despliega en producción y nos ocurren conflictos en los merges que tenemos que resolver manualmente con la posibilidad de cometer un error.</p>
<p>En otra sección también podemos ver el estado de los servicios que puede ser:</p>
<ul>
<li>Builtin: A servicio fundamentar que existe incluso antes de la creación del registro.</li>
<li>Defined: El servicio está definido pero aún no ha sido referenciado.</li>
<li>Virtual: El servicio ha sido referenciado (normalmente como ejecución de otro servicio) pero aún no ha sido hecho efectivo con una instancia del servicio. El hacerse efectivo ocurre con la primera invocación en el proxy del servicio.</li>
<li>Real: El servicio se ha hecho efectivo: se ha instanciado, las dependencias han sido inyectadas, se ha decorado con interceptores y el totalmente operacional.</li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-2_hu8430a9ea5cfa5b5c6124c0efdd80306e_74535_2560x1440_fit_box_3.png" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-2_hu8430a9ea5cfa5b5c6124c0efdd80306e_74535_300x200_fit_box_3.png" width="300" height="138"  class="lozad "></a></p>
</figure>
</div>
<p>Finalmente, en la sección HibernateStatistics podemos obtener un montón de datos que nos pueden servir para detectar situaciones anómalas en la aplicación como un gran número de sql que se lanzan en una página como podría ser en un problema de carga N+1 en una relación entre dos entidades, el estado de la cache de segundo nivel que nos permitirá optimizar las caches, la cache de queries, número de transacciones realizadas y otra gran cantidad de información.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-3_huca4080c691f8d3f148defb949f85ee44_64921_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estadísticas de Hibernate en Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/images/tapestry-dashboard-3_huca4080c691f8d3f148defb949f85ee44_64921_300x200_fit_box_3.png" width="300" height="138" alt="Estadísticas de Hibernate en Tapestry" title="Estadísticas de Hibernate en Tapestry"  class="lozad "></a></p>
</figure>
</div>
<p>Para que hibernate genere estadísticas es necesario indica en el archivo hibernate.cfg.xml la propiedad hibernate.generate_statistics:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>&#10;<span class="cp">&lt;!DOCTYPE hibernate-configuration PUBLIC&#10;</span><span class="cp">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;-//Hibernate/Hibernate Configuration DTD 3.0//EN&#34;&#10;</span><span class="cp">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;http://www.hibernate.org/dtd//hibernate-configuration-3.0.dtd&#34;&gt;</span>&#10;<span class="nt">&lt;hibernate-configuration&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;session-factory&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.driver_class&#34;</span><span class="nt">&gt;</span>org.h2.Driver<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.url&#34;</span><span class="nt">&gt;</span>jdbc:h2:mem:test<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.username&#34;</span><span class="nt">&gt;</span>sa<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.connection.password&#34;</span><span class="nt">&gt;</span>sa<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.dialect&#34;</span><span class="nt">&gt;</span>org.hibernate.dialect.H2Dialect<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.hbm2ddl.auto&#34;</span><span class="nt">&gt;</span>update<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hibernate.generate_statistics&#34;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/property&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/session-factory&gt;</span>&#10;<span class="nt">&lt;/hibernate-configuration&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>hibernate.cfg.xml</span>
    </div>
</div>
<p>Y para activar la cache de segundo nivel añadir la propiedad del proveedor de cache (hibernate.cache.provider_class) y usar en las entidades la anotación @Cache, como se indica en la <a href="https://docs.jboss.org/hibernate/orm/4.3/devguide/en-US/html/ch06.html">documentación de hibernate</a>.</p>
<p>Está página de Tapestry es similar a <a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">una que podemos crear en Grails con información similar</a>.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly/</id>
        <title>Ejecutar Apache Tapestry en el servidor de aplicaciones WildFly</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-06-06T20:58:25+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/wildfly.svg" width="200" height="200" alt="WildFly" title="WildFly"  class=""></p>
</div>
<p>Los class loaders del <a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/">servidor de aplicaciones JBoss/WildFly</a> habitualmente han dado algún problema en la ejecución de las aplicaciones y la carga de clases. En versiones antiguas como la 4 se podían producir conflictos entre las librerías de las aplicaciones y las librerías instaladas en el servidor ya que en <a href="http://jbossas.jboss.org/">JBoss</a> se buscaba las clases por defecto y primero en el class loader del servidor en vez de en el <em>classloader</em> de la aplicación (war). Ya en las últimas versiones como JBoss 7 y <a href="http://wildfly.org/">WildFly</a> la forma de cargar las clases es más parecido al modelo habitual que se sigue en las aplicaciones Java EE y en servidores como Tomcat buscando primero en el directorio classes WEB-INF/classes y entre las librerías de la carpeta WEB-INF/lib del archivo war. Además, con la inclusión de JBoss Modules se puede seguir un esquema OSGi con lo que incluso podríamos usar simultáneamente en el servidor diferentes versiones de la misma librería.</p>
<p>Sin embargo, a pesar de seguir el esquema estándar de buscar las clases y usar OSGi para que Tapestry encuentre los archivos que necesita, como plantillas, imágenes, literales que pueden estar embebidos en los archivos jar de librerías es necesario hacer algunas modificaciones. En una <a href="http://wiki.apache.org/tapestry/HowToRunTapestry5OnJBoss7Dot1">guía de uso de Tapestry con JBoss</a> se explica como conseguir hacer funcionar una aplicación Tapestry tanto en JBoss 7 como en WildFly 8. La solución consiste en proporcionar una clase para que encuentre correctamente los archivos que Tapestry necesita y esta clase será la que veremos en el siguiente ejemplo.</p>
<p>Con la clase que permite funcionar las aplicaciones Tapestry en JBoss/WildFly junto con un poco de configuración para el contenedor de dependencias definido en un módulo será suficiente. La clase es la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.misc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.URLConnection</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.services.ClasspathURLConverter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jboss.vfs.VFSUtils</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.jboss.vfs.VirtualFile</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WildFlyClasspathURLConverter</span> <span class="kd">implements</span> <span class="n">ClasspathURLConverter</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">WildFlyClasspathURLConverter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="n">URL</span> <span class="nf">convert</span><span class="o">(</span><span class="kd">final</span> <span class="n">URL</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">url</span><span class="o">.</span><span class="na">getProtocol</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&#34;vfs&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="k">try</span> <span class="o">{</span>&#10;				<span class="kd">final</span> <span class="n">URL</span> <span class="n">realURL</span><span class="o">;</span>&#10;				<span class="kd">final</span> <span class="n">String</span> <span class="n">urlString</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>&#10;				<span class="c1">// If the virtual URL involves a JAR file,&#10;</span><span class="c1"></span>				<span class="c1">// we have to figure out its physical URL ourselves because&#10;</span><span class="c1"></span>				<span class="c1">// in JBoss 7.0.2 the JAR files exploded into the VFS are empty&#10;</span><span class="c1"></span>				<span class="c1">// (see https://issues.jboss.org/browse/JBAS-8786).&#10;</span><span class="c1"></span>				<span class="c1">// Our workaround is that they are available, unexploded,&#10;</span><span class="c1"></span>				<span class="c1">// within the otherwise exploded WAR file.&#10;</span><span class="c1"></span>				<span class="k">if</span> <span class="o">(</span><span class="n">urlString</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;.jar&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;					<span class="c1">// An example URL:&#10;</span><span class="c1"></span>					<span class="c1">// &#34;vfs:/devel/jboss-as-7.1.1.Final/standalone/deployments/myapp.ear/myapp.war/WEB-INF/\&#10;</span><span class="c1"></span>					<span class="c1">// lib/tapestry-core-5.3.2.jar/org/apache/tapestry5/corelib/components/&#34;&#10;</span><span class="c1"></span>					<span class="c1">// Break the URL into its WAR part, the JAR part,&#10;</span><span class="c1"></span>					<span class="c1">// and the Java package part.&#10;</span><span class="c1"></span>					<span class="kd">final</span> <span class="kt">int</span> <span class="n">warPartEnd</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&#34;.war&#34;</span><span class="o">)</span> <span class="o">+</span> <span class="n">4</span><span class="o">;</span>&#10;					<span class="kd">final</span> <span class="n">String</span> <span class="n">warPart</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">warPartEnd</span><span class="o">);</span>&#10;					<span class="kd">final</span> <span class="kt">int</span> <span class="n">jarPartEnd</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&#34;.jar&#34;</span><span class="o">)</span> <span class="o">+</span> <span class="n">4</span><span class="o">;</span>&#10;					<span class="kd">final</span> <span class="n">String</span> <span class="n">jarPart</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">warPartEnd</span><span class="o">,</span> <span class="n">jarPartEnd</span><span class="o">);</span>&#10;					<span class="kd">final</span> <span class="n">String</span> <span class="n">packagePart</span> <span class="o">=</span> <span class="n">urlString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">jarPartEnd</span><span class="o">);</span>&#10;					<span class="c1">// Ask the VFS where the exploded WAR is.&#10;</span><span class="c1"></span>					<span class="kd">final</span> <span class="n">URL</span> <span class="n">warURL</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">warPart</span><span class="o">);</span>&#10;					<span class="kd">final</span> <span class="n">URLConnection</span> <span class="n">warConnection</span> <span class="o">=</span> <span class="n">warURL</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>&#10;					<span class="kd">final</span> <span class="n">VirtualFile</span> <span class="n">jBossVirtualWarDir</span> <span class="o">=</span> <span class="o">(</span><span class="n">VirtualFile</span><span class="o">)</span> <span class="n">warConnection</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>&#10;					<span class="kd">final</span> <span class="n">File</span> <span class="n">physicalWarDir</span> <span class="o">=</span> <span class="n">jBossVirtualWarDir</span><span class="o">.</span><span class="na">getPhysicalFile</span><span class="o">();</span>&#10;					<span class="kd">final</span> <span class="n">String</span> <span class="n">physicalWarDirStr</span> <span class="o">=</span> <span class="n">physicalWarDir</span><span class="o">.</span><span class="na">toURI</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>&#10;					<span class="c1">// Return a &#34;jar:&#34; URL constructed from the parts&#10;</span><span class="c1"></span>					<span class="c1">// eg.&#10;</span><span class="c1"></span>					<span class="c1">// &#34;jar:file:/devel/jboss-as-7.1.1.Final/standalone/tmp/vfs/deployment40a6ed1db5eabeab/\&#10;</span><span class="c1"></span>					<span class="c1">// myapp.war-43e2c3dfa858f4d2/WEB-INF/lib/tapestry-core-5.3.2.jar!/org/apache/tapestry5/corelib/components/&#34;.&#10;</span><span class="c1"></span>					<span class="kd">final</span> <span class="n">String</span> <span class="n">actualJarPath</span> <span class="o">=</span> <span class="s">&#34;jar:&#34;</span> <span class="o">+</span> <span class="n">physicalWarDirStr</span> <span class="o">+</span> <span class="n">jarPart</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span> <span class="o">+</span> <span class="n">packagePart</span><span class="o">;</span>&#10;					<span class="k">return</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">actualJarPath</span><span class="o">);</span>&#10;				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;					<span class="c1">// Otherwise, ask the VFS what the physical URL is...&#10;</span><span class="c1"></span>					<span class="kd">final</span> <span class="n">URLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>&#10;					<span class="kd">final</span> <span class="n">VirtualFile</span> <span class="n">virtualFile</span> <span class="o">=</span> <span class="o">(</span><span class="n">VirtualFile</span><span class="o">)</span> <span class="n">connection</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>&#10;					<span class="n">realURL</span> <span class="o">=</span> <span class="n">VFSUtils</span><span class="o">.</span><span class="na">getPhysicalURL</span><span class="o">(</span><span class="n">virtualFile</span><span class="o">);</span>&#10;				<span class="o">}</span>&#10;				<span class="k">return</span> <span class="n">realURL</span><span class="o">;</span>&#10;			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;				<span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Unable to convert URL&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>&#10;			<span class="o">}</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">url</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>WildFlyClasspathURLConverter.java</span>
    </div>
</div>
<p>La configuración adicional para el contenedor de dependencias es para que Tapestry use esta nueva clase:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.services</span><span class="o">;</span>&#10;<span class="o">...</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppModule</span> <span class="o">{</span>&#10;	<span class="o">...</span>&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">contributeServiceOverride</span><span class="o">(</span><span class="n">MappedConfiguration</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">configuration</span><span class="o">,</span> <span class="nd">@Local</span> <span class="n">HibernateSessionSource</span> <span class="n">hibernateSessionSource</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">HibernateSessionSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">hibernateSessionSource</span><span class="o">);</span>&#10;		&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">isServidorJBoss</span><span class="o">(</span><span class="n">ContextListener</span><span class="o">.</span><span class="na">SERVLET_CONTEXT</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="n">configuration</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ClasspathURLConverter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">WildFlyClasspathURLConverter</span><span class="o">());</span>			&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;	<span class="o">...</span>&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isServidorJBoss</span><span class="o">(</span><span class="n">ServletContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">String</span> <span class="n">si</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getServerInfo</span><span class="o">();</span>&#10;&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;WildFly&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="n">si</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;JBoss&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;		<span class="o">}</span>&#10;		&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	<span class="o">...</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppModule.java</span>
    </div>
</div>
<p>El <em>ContextListener</em> que nos permite acceder al <em>ServletContext</em> es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">es.com.blogspot.elblogdepicodev.plugintapestry.misc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.servlet.ServletContextEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">javax.servlet.ServletContextListener</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContextListener</span> <span class="kd">implements</span> <span class="n">ServletContextListener</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="n">ServletContext</span> <span class="n">SERVLET_CONTEXT</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">sce</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">SERVLET_CONTEXT</span> <span class="o">=</span> <span class="n">sce</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextDestroyed</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">sce</span><span class="o">)</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ContextListener.java</span>
    </div>
</div>
<p>Además hemos de incluir en el proyecto un par de librerías y usar al menos la versión 16 de guava si se incluye como dependencia en el war:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">dependencies</span> <span class="o">{</span>&#10;	<span class="o">...</span>&#10;	<span class="n">compile</span> <span class="s1">&#39;com.google.guava:guava:16.0.1&#39;</span>&#10;	<span class="n">providedCompile</span> <span class="s1">&#39;org.jboss:jboss-vfs:3.2.1.Final&#39;</span>&#10;	<span class="n">runtime</span> <span class="s1">&#39;org.jboss.logging:jboss-logging:3.1.4.GA&#39;</span>&#10;	<span class="o">...</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>En la <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/PlugInTapestry">aplicación de ejemplo</a> también deberemos actualizar la versión de guava al menos a la versión 16. Y esta clase y configuración es suficiente para que &ldquo;mágicamente&rdquo; se solucionen los problemas de las aplicaciones Tapestry con el servidor de aplicaciones JBoss/WildFly. Si no usamos lo indicado en este artículo al acceder al acceder a la aplicación fallaría con una excepción.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a></li>
<li><a href="http://wiki.apache.org/tapestry/HowToRunTapestry5OnJBoss7Dot1">http://wiki.apache.org/tapestry/HowToRunTapestry5OnJBoss7Dot1</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/</id>
        <title>Detectar problema N&#43;1 y obtener estadísticas de Hibernate con Grails</title>
        <updated>2014-06-13T16:00:00+02:00</updated>
        <published>2014-05-30T20:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/grails.svg" width="200" height="200" alt="Grails" title="Grails"  class=""></p>
</div>
<p>Una base de datos relacional guarda los datos de forma diferente al modelo orientado a objetos que utilizamos en lenguajes como <a href="https://www.oracle.com/us/technologies/java/overview/index.html">Java</a>, <a href="https://dotnet.microsoft.com/">C#</a> o <a href="https://www.python.org/">Python</a>. Los <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM (Object-relational mapping)</a> tratan de hacer una correspondencia entre los dos modelos, el relacional de las bases de datos y el orientado a objetos de los lenguajes. Una de las ventajas de usar en una aplicación un ORM para acceder a la base de datos es que podemos hacer una correspondencia entre los datos de una base de datos relacional y trabajar con esos datos utilizando el modelo orientado a objetos del lenguaje de programación que usemos.</p>
<p>Sin embargo, el ORM envía sentencias SQL para recuperar los datos de la base de datos relacional según vamos navegando con los métodos de acceso a otros objetos y sus relaciones. Depende de como el ORM haga las consultas para recuperar los datos de la base de datos relacional puede generar muchas SQL, producir un bajo rendimiento en la aplicación y una carga de trabajo considerable para la base de datos.</p>
<p>En los ORM es conocido el <a href="https://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue">problema N+1</a>. Consiste en lo siguiente, supongamos que tenemos dos tablas relacionadas autores y libros, y que la relación entre estas dos tablas es de 1 a N, de modo que un autor puede tener varios libros y un libro ha sido escrito por un único autor. Para recuperar todos los autores necesitaríamos una consulta y si no hacemos una join con la tabla de libros para recuperar los libros de cada autor tendríamos que hacer otra consulta  con lo que tendríamos el problema N+1 al hacer un bucle sobre los autores (1 consulta para los autores y N para los libros de cada autor).</p>
<p>El problema está en que el ORM lanza las consultas de forma automática según necesita los datos de modo que si para un autor no tiene los libros lanza una SQL para recuperarlos, como programadores llamar a un método para acceder a los libros es muy cómodo y transparente para nosotros (trabajamos solo con objetos) pero hemos de ser conscientes de las consultas que lanza el ORM porque podemos producir una situación de N+1.</p>
<p>Para evitar el problema N+1 hemos de recuperar todos los datos haciendo una única consulta, haciendo una join entre las tablas autor y libro. En <a href="http://hibernate.org/">Hibernate</a> podemos resolverlo con una consulta HQL como la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&#34;from Autor as autor left outer join autor.libros as libro&#34;&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>hql.txt</span>
    </div>
</div>
<p>O con una criteria en Grails:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">(</span><span class="n">Autor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;<span class="n">criteria</span><span class="o">.</span><span class="na">setFetchMode</span><span class="o">(</span><span class="s2">&#34;libros&#34;</span><span class="o">,</span> <span class="n">FetchMode</span><span class="o">.</span><span class="na">EAGER</span><span class="o">);</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Criteria.groovy</span>
    </div>
</div>
<p>Pero para saber en que sitios de nuestro código debemos establecer los métodos de búsqueda EAGER necesitamos detectar los problemas N+1, con la experiencia conoceremos donde se pueden producir, otros casos se nos pueden pasar por alto y necesitaremos detectarlos. Para detectar estos problemas N+1 o para determinar si una página es muy lenta porque hace muchas consultas a la base de datos Hibernate dispone de unas estadísticas mediante las cuales podemos conocer cuantas consultas select, update, insert, conexiones, y más datos por entidad y relación&hellip; se han lanzado por haber accedido a una página. Podemos acceder a las estadísticas de Hibernate mediante el objeto <a href="https://docs.jboss.org/hibernate/orm/4.3/javadocs/org/hibernate/SessionFactory.html">SessionFactory</a> y el método <a href="https://docs.jboss.org/hibernate/orm/4.3/javadocs/org/hibernate/SessionFactory.html#getStatistics%28%29">getStatistics</a>, con ese objeto y método podemos obtener estadísticas globales y para cada una de las entidades persistidas por Hibernate.</p>
<p>En Grails podemos hacer un controlador y gsp que nos muestre esa información que podrían ser de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span><span class="lnt">88&#10;</span><span class="lnt">89&#10;</span><span class="lnt">90&#10;</span><span class="lnt">91&#10;</span><span class="lnt">92&#10;</span><span class="lnt">93&#10;</span><span class="lnt">94&#10;</span><span class="lnt">95&#10;</span><span class="lnt">96&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kn">package</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">picodotdev</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">controllers</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span>&#10;&#10;<span class="kn">import</span> <span class="nn">grails.converters.JSON</span>&#10;<span class="kn">import</span> <span class="nn">grails.util.Environment</span>&#10;&#10;<span class="kn">import</span> <span class="nn">io.github.picodotdev.grails.domain.Autor</span>&#10;<span class="kn">import</span> <span class="nn">io.github.picodotdev.grails.log.HibernateLogger</span>&#10;&#10;<span class="kd">class</span> <span class="nc">HibernateController</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">sessionFactory</span>&#10;&#10;	<span class="kt">def</span> <span class="nf">doTest</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="kt">def</span> <span class="n">autor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Autor</span><span class="o">(</span><span class="nl">nombre:</span><span class="s1">&#39;picodotdev&#39;</span><span class="o">)</span>&#10;		<span class="n">autor</span><span class="o">.</span><span class="na">save</span><span class="o">()</span>&#10;&#10;		<span class="n">autor</span> <span class="o">=</span> <span class="n">Autor</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">autor</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>&#10;		<span class="n">autor</span><span class="o">.</span><span class="na">delete</span><span class="o">()</span>&#10;&#10;		<span class="k">return</span> <span class="nf">redirect</span><span class="o">(</span><span class="nl">action:</span><span class="s1">&#39;index&#39;</span><span class="o">)</span>&#10;	<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kt">def</span> <span class="n">e</span> <span class="o">=</span> <span class="n">test</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">model</span> <span class="o">=</span> <span class="o">[</span><span class="nl">estadisticas:</span><span class="n">sessionFactory</span><span class="o">.</span><span class="na">statistics</span><span class="o">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="nf">render</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/hibernate/index&#39;</span><span class="o">,</span> <span class="nl">model:</span><span class="n">model</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="nf">enableStatistics</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kt">def</span> <span class="n">e</span> <span class="o">=</span> <span class="n">test</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&#10;		<span class="c1">// Habilitar estadístics&#10;</span><span class="c1"></span>		<span class="n">sessionFactory</span><span class="o">.</span><span class="na">statistics</span><span class="o">.</span><span class="na">setStatisticsEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;		<span class="n">redirect</span><span class="o">(</span><span class="nl">action:</span><span class="s1">&#39;index&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="nf">disableStatistics</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kt">def</span> <span class="n">e</span> <span class="o">=</span> <span class="n">test</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&#10;		<span class="c1">// Deshabilitar estadísticas&#10;</span><span class="c1"></span>		<span class="n">sessionFactory</span><span class="o">.</span><span class="na">statistics</span><span class="o">.</span><span class="na">setStatisticsEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	&#10;		<span class="n">redirect</span><span class="o">(</span><span class="nl">action:</span><span class="s1">&#39;index&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="nf">clearEstadisticas</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kt">def</span> <span class="n">e</span> <span class="o">=</span> <span class="n">test</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;		<span class="n">sessionFactory</span><span class="o">.</span><span class="na">statistics</span><span class="o">.</span><span class="na">clear</span><span class="o">()</span>&#10;		<span class="n">redirect</span><span class="o">(</span><span class="nl">action:</span><span class="s1">&#39;index&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="nf">clearMensajesHibernate</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kt">def</span> <span class="n">e</span> <span class="o">=</span> <span class="n">test</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;		<span class="n">HibernateLogger</span><span class="o">.</span><span class="na">clear</span><span class="o">()</span>&#10;		<span class="n">redirect</span><span class="o">(</span><span class="nl">action:</span><span class="s1">&#39;index&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="nf">logSummary</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="kt">def</span> <span class="n">e</span> <span class="o">=</span> <span class="n">test</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;		<span class="n">sessionFactory</span><span class="o">.</span><span class="na">statistics</span><span class="o">.</span><span class="na">logSummary</span><span class="o">()</span>&#10;		<span class="n">redirect</span><span class="o">(</span><span class="nl">action:</span><span class="s1">&#39;index&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   	<span class="k">if</span> <span class="o">(</span><span class="n">Environment</span><span class="o">.</span><span class="na">current</span> <span class="o">!=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">DEVELOPMENT</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="k">return</span> <span class="kc">false</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">return</span> <span class="kc">true</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HibernateController.groovy</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span><span class="lnt">172&#10;</span><span class="lnt">173&#10;</span><span class="lnt">174&#10;</span><span class="lnt">175&#10;</span><span class="lnt">176&#10;</span><span class="lnt">177&#10;</span><span class="lnt">178&#10;</span><span class="lnt">179&#10;</span><span class="lnt">180&#10;</span><span class="lnt">181&#10;</span><span class="lnt">182&#10;</span><span class="lnt">183&#10;</span><span class="lnt">184&#10;</span><span class="lnt">185&#10;</span><span class="lnt">186&#10;</span><span class="lnt">187&#10;</span><span class="lnt">188&#10;</span><span class="lnt">189&#10;</span><span class="lnt">190&#10;</span><span class="lnt">191&#10;</span><span class="lnt">192&#10;</span><span class="lnt">193&#10;</span><span class="lnt">194&#10;</span><span class="lnt">195&#10;</span><span class="lnt">196&#10;</span><span class="lnt">197&#10;</span><span class="lnt">198&#10;</span><span class="lnt">199&#10;</span><span class="lnt">200&#10;</span><span class="lnt">201&#10;</span><span class="lnt">202&#10;</span><span class="lnt">203&#10;</span><span class="lnt">204&#10;</span><span class="lnt">205&#10;</span><span class="lnt">206&#10;</span><span class="lnt">207&#10;</span><span class="lnt">208&#10;</span><span class="lnt">209&#10;</span><span class="lnt">210&#10;</span><span class="lnt">211&#10;</span><span class="lnt">212&#10;</span><span class="lnt">213&#10;</span><span class="lnt">214&#10;</span><span class="lnt">215&#10;</span><span class="lnt">216&#10;</span><span class="lnt">217&#10;</span><span class="lnt">218&#10;</span><span class="lnt">219&#10;</span><span class="lnt">220&#10;</span><span class="lnt">221&#10;</span><span class="lnt">222&#10;</span><span class="lnt">223&#10;</span><span class="lnt">224&#10;</span><span class="lnt">225&#10;</span><span class="lnt">226&#10;</span><span class="lnt">227&#10;</span><span class="lnt">228&#10;</span><span class="lnt">229&#10;</span><span class="lnt">230&#10;</span><span class="lnt">231&#10;</span><span class="lnt">232&#10;</span><span class="lnt">233&#10;</span><span class="lnt">234&#10;</span><span class="lnt">235&#10;</span><span class="lnt">236&#10;</span><span class="lnt">237&#10;</span><span class="lnt">238&#10;</span><span class="lnt">239&#10;</span><span class="lnt">240&#10;</span><span class="lnt">241&#10;</span><span class="lnt">242&#10;</span><span class="lnt">243&#10;</span><span class="lnt">244&#10;</span><span class="lnt">245&#10;</span><span class="lnt">246&#10;</span><span class="lnt">247&#10;</span><span class="lnt">248&#10;</span><span class="lnt">249&#10;</span><span class="lnt">250&#10;</span><span class="lnt">251&#10;</span><span class="lnt">252&#10;</span><span class="lnt">253&#10;</span><span class="lnt">254&#10;</span><span class="lnt">255&#10;</span><span class="lnt">256&#10;</span><span class="lnt">257&#10;</span><span class="lnt">258&#10;</span><span class="lnt">259&#10;</span><span class="lnt">260&#10;</span><span class="lnt">261&#10;</span><span class="lnt">262&#10;</span><span class="lnt">263&#10;</span><span class="lnt">264&#10;</span><span class="lnt">265&#10;</span><span class="lnt">266&#10;</span><span class="lnt">267&#10;</span><span class="lnt">268&#10;</span><span class="lnt">269&#10;</span><span class="lnt">270&#10;</span><span class="lnt">271&#10;</span><span class="lnt">272&#10;</span><span class="lnt">273&#10;</span><span class="lnt">274&#10;</span><span class="lnt">275&#10;</span><span class="lnt">276&#10;</span><span class="lnt">277&#10;</span><span class="lnt">278&#10;</span><span class="lnt">279&#10;</span><span class="lnt">280&#10;</span><span class="lnt">281&#10;</span><span class="lnt">282&#10;</span><span class="lnt">283&#10;</span><span class="lnt">284&#10;</span><span class="lnt">285&#10;</span><span class="lnt">286&#10;</span><span class="lnt">287&#10;</span><span class="lnt">288&#10;</span><span class="lnt">289&#10;</span><span class="lnt">290&#10;</span><span class="lnt">291&#10;</span><span class="lnt">292&#10;</span><span class="lnt">293&#10;</span><span class="lnt">294&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;%@ page import=&#34;java.text.SimpleDateFormat&#34; %&gt;&#10;&lt;%@ page import=&#34;io.github.picodotdev.grails.log.HibernateLogger&#34; %&gt;&#10;&lt;%&#10;	SimpleDateFormat sdf = new SimpleDateFormat(&#34;dd/MM/yyyy HH:mm:ss Z&#34;)&#10;%&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&lt;title&gt;Estadísticas de Hibernate&lt;/title&gt;&#10;&lt;script src=&#34;//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;&#10;&lt;link href=&#34;//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&#34; rel=&#34;stylesheet&#34;/&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;	&lt;g:set var=&#34;o&#34; value=&#34;${null}&#34; /&gt;&#10;&#10;	&lt;div class=&#34;container-fluid&#34;&gt;&#10;		&lt;h1&gt;Estadísticas de Hibernate&lt;/h1&gt;&#10;	&#10;		&lt;g:if test=&#34;${estadisticas.statisticsEnabled}&#34;&gt;&#10;			&lt;g:link action=&#34;disableStatistics&#34; class=&#34;btn btn-primary&#34;&gt;Deshabilitar estadísticas&lt;/g:link&gt;&#10;		&lt;/g:if&gt;&#10;		&lt;g:else&gt;&#10;			&lt;g:link action=&#34;enableStatistics&#34; class=&#34;btn btn-primary&#34;&gt;Habilitar estadísticas&lt;/g:link&gt;&#10;		&lt;/g:else&gt;&#10;		&lt;g:if test=&#34;${estadisticas.statisticsEnabled}&#34;&gt;&#10;			&lt;g:link action=&#34;clearEstadisticas&#34; class=&#34;btn btn-primary&#34;&gt;Reiniciarlizar estadísticas&lt;/g:link&gt;&#10;		&lt;/g:if&gt;&#10;		&lt;g:link action=&#34;clearMensajesHibernate&#34; class=&#34;btn btn-primary&#34;&gt;Reiniciarlizar mensajes de Hibernate&lt;/g:link&gt;&#10;		&lt;g:link action=&#34;logSummary&#34; class=&#34;btn btn-primary&#34;&gt;Informe resumen&lt;/g:link&gt;&#10;&#10;		&lt;h2&gt;Estadísticas&lt;/h2&gt;&#10;		&lt;g:if test=&#34;${!estadisticas.statisticsEnabled}&#34;&gt;&#10;			Las estadísticas de Hibernate no están habilitadas.&#10;		&lt;/g:if&gt;&#10;		&lt;g:else&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-md-4&#34;&gt;&#10;					&lt;h3&gt;Conexiones, sesiones y transacciones&lt;/h3&gt;&#10;					&lt;ul class=&#34;list-group&#34;&gt;&#10;						&lt;li class=&#34;list-group-item&#34;&gt;StartTime  &lt;span class=&#34;badge&#34;&gt;${sdf.format(new Date(estadisticas.startTime))}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li	class=&#34;list-group-item&#34; title=&#34;Get the global number of connections asked by the sessions (the actual number of connections used may be much smaller depending whether you use a connection pool or not)&#34;&gt;ConnectCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.connectCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;The number of prepared statements that were released&#34;&gt;CloseStatementCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.closeStatementCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Global number of sessions opened&#34;&gt;SessionOpenCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.sessionOpenCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Global number of sessions closed&#34;&gt;SessionCloseCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.sessionCloseCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;The number of transactions we know to have been successful&#34;&gt;SuccessfulTransactionCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.successfulTransactionCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;The number of transactions we know to have completed&#34;&gt;TransactionCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.transactionCount}&lt;/span&gt;&lt;/li&gt;&#10;					&lt;/ul&gt;&#10;				&lt;/div&gt;&#10;				&lt;div class=&#34;col-md-4&#34;&gt;&#10;					&lt;h3&gt;Sentencias&lt;/h3&gt;&#10;					&lt;ul class=&#34;list-group&#34;&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get global number of executed queries&#34;&gt;QueryExecutionCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.queryExecutionCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;The number of prepared statements that were acquired&#34;&gt;PrepareStatementCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.prepareStatementCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get all executed query strings&#34;&gt;Queries: ${estadisticas.queries.join(&#39;, &#39;)}&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get the query string for the slowest query&#34;&gt;QueryExecutionMaxTimeQueryString &lt;span class=&#34;badge&#34;&gt;${estadisticas.queryExecutionMaxTimeQueryString}&lt;/span&gt;&lt;/li&gt;&#10;					&lt;/ul&gt;&#10;				&lt;/div&gt;&#10;				&lt;div class=&#34;col-md-4&#34;&gt;&#10;					&lt;h3&gt;Entidades&lt;/h3&gt;&#10;					&lt;ul class=&#34;list-group&#34;&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get global number of entity fetchs&#34;&gt;EntityFetchCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.entityFetchCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get global number of entity loads&#34;&gt;EntityLoadCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.entityLoadCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get global number of entity inserts&#34;&gt;EntityInsertCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.entityInsertCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get global number of entity updates&#34;&gt;EntityUpdateCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.entityUpdateCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Get global number of entity deletes&#34;&gt;EntityDeleteCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.entityDeleteCount}&lt;/span&gt;&lt;/li&gt;&#10;					&lt;/ul&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-md-4&#34;&gt;&#10;					&lt;h3&gt;Colecciones&lt;/h3&gt;&#10;					&lt;ul class=&#34;list-group&#34;&gt;&#10;						&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of collections fetched&#34;&gt;CollectionFetchCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.collectionFetchCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of collections loaded&#34;&gt;CollectionLoadCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.collectionLoadCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34; title=&#34;Global number of collections recreated&#34;&gt;CollectionRecreateCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.collectionRecreateCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of collections updated&#34;&gt;CollectionUpdateCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.collectionUpdateCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of collections removed&#34;&gt;CollectionRemoveCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.collectionRemoveCount}&lt;/span&gt;&lt;/li&gt;&#10;					&lt;/ul&gt;&#10;				&lt;/div&gt;&#10;				&lt;div class=&#34;row&#34;&gt;&#10;					&lt;div class=&#34;col-md-4&#34;&gt;&#10;						&lt;h3&gt;Cache&lt;/h3&gt;&#10;						&lt;ul class=&#34;list-group&#34;&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Get the global number of flush executed by sessions (either implicit or explicit)&#34;&gt;FlushCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.flushCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;The number of StaleObjectStateExceptions that occurred&#34;&gt;OptimisticFailureCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.optimisticFailureCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Get the global number of cached queries successfully retrieved from cache&#34;&gt;QueryCacheHitCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.queryCacheHitCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Get the global number of cached queries *not* found in cache&#34;&gt;QueryCacheMissCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.queryCacheMissCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Get the global number of cacheable queries put in cache&#34;&gt;QueryCachePutCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.queryCachePutCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Get the time in milliseconds of the slowest query&#34;&gt;QueryExecutionMaxTime	&lt;span class=&#34;badge&#34;&gt;${estadisticas.queryExecutionMaxTime}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of cacheable entities/collections successfully retrieved from the cache&#34;&gt;SecondLevelCacheHitCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.secondLevelCacheHitCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of cacheable entities/collections not found in the cache and loaded from the database&#34;&gt;SecondLevelCacheMissCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.secondLevelCacheMissCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;li class=&#34;list-group-item&#34;	title=&#34;Global number of cacheable entities/collections put in the cache&#34;&gt;SecondLevelCachePutCount &lt;span class=&#34;badge&#34;&gt;${estadisticas.secondLevelCachePutCount}&lt;/span&gt;&lt;/li&gt;&#10;						&lt;/ul&gt;&#10;					&lt;/div&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;	&#10;			&lt;h3&gt;Detalles entidades&lt;/h3&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-md-12&#34;&gt;&#10;					&lt;% o = estadisticas.entityNames.sort() %&gt; &#10;					&lt;g:each in=&#34;${o}&#34; var=&#34;n&#34; status=&#34;i&#34;&gt;&#10;						&lt;g:set var=&#34;entityStatistics&#34; value=&#34;${estadisticas.getEntityStatistics(n)}&#34; /&gt;&#10;			&#10;						&lt;g:if test=&#34;${(i % 3) == 0}&#34;&gt;&#10;							&lt;div class=&#34;row&#34;&gt;&#10;						&lt;/g:if&gt;&#10;			&#10;						&lt;div class=&#34;col-md-4&#34;&gt;					&#10;							&lt;ul class=&#34;list-group&#34;&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${n}&lt;/b&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;DeleteCount &lt;span class=&#34;badge&#34;&gt;${entityStatistics.deleteCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;FetchCount &lt;span class=&#34;badge&#34;&gt;${entityStatistics.fetchCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;InsertCount &lt;span class=&#34;badge&#34;&gt;${entityStatistics.insertCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;LoadCount &lt;span class=&#34;badge&#34;&gt;${entityStatistics.loadCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;OptimisticFailureCount &lt;span class=&#34;badge&#34;&gt;${entityStatistics.optimisticFailureCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;UpdateCount &lt;span class=&#34;badge&#34;&gt;${entityStatistics.updateCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;/ul&gt;&#10;						&lt;/div&gt;&#10;			&#10;						&lt;g:if test=&#34;${(i % 3) == 2 || o.length == (i + 1) }&#34;&gt;&#10;							&lt;/div&gt;&#10;						&lt;/g:if&gt;&#10;					&lt;/g:each&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;				&#10;			&lt;h3&gt;Detalles colecciones&lt;/h3&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-md-12&#34;&gt;&#10;					&lt;% o = estadisticas.collectionRoleNames.sort() %&gt;&#10;					&lt;g:each in=&#34;${o}&#34; var=&#34;n&#34; status=&#34;i&#34;&gt;&#10;						&lt;g:set var=&#34;collectionStatistics&#34; value=&#34;${estadisticas.getCollectionStatistics(n)}&#34; /&gt;&#10;			&#10;						&lt;g:if test=&#34;${(i % 3) == 0}&#34;&gt;&#10;							&lt;div class=&#34;row&#34;&gt;&#10;						&lt;/g:if&gt;&#10;			&#10;						&lt;div class=&#34;col-md-4&#34;&gt;&#10;							&lt;ul class=&#34;list-group&#34;&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${n}&lt;/b&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;FetchCount &lt;span class=&#34;badge&#34;&gt;${collectionStatistics.fetchCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;LoadCount &lt;span class=&#34;badge&#34;&gt;${collectionStatistics.loadCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;RecreateCount &lt;span class=&#34;badge&#34;&gt;${collectionStatistics.recreateCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;RemoveCount &lt;span class=&#34;badge&#34;&gt;${collectionStatistics.removeCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;UpdateCount &lt;span class=&#34;badge&#34;&gt;${collectionStatistics.updateCount}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;/ul&gt;&#10;						&lt;/div&gt;&#10;			&#10;						&lt;g:if test=&#34;${(i % 3) == 2 || o.length == (i + 1) }&#34;&gt;&#10;							&lt;/div&gt;&#10;						&lt;/g:if&gt;&#10;					&lt;/g:each&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;	&#10;			&lt;h3&gt;Detalles cache segundo nivel&lt;/h3&gt;&#10;			&lt;div class=&#34;row&#34;&gt;&#10;				&lt;div class=&#34;col-md-12&#34;&gt;&#10;					&lt;% o = estadisticas.secondLevelCacheRegionNames.sort() %&gt;&#10;					&lt;g:each	in=&#34;${o}&#34; var=&#34;n&#34; status=&#34;i&#34;&gt;&#10;						&lt;g:set var=&#34;secondLevelCacheStatistics&#34;	value=&#34;${estadisticas.getSecondLevelCacheStatistics(n)}&#34; /&gt;&#10;								&#10;						&lt;g:if test=&#34;${(i % 3) == 0}&#34;&gt;&#10;							&lt;div class=&#34;row&#34;&gt;&#10;						&lt;/g:if&gt;&#10;								&#10;						&lt;g:if test=&#34;${secondLevelCacheStatistics}&#34;&gt;&#10;							&lt;ul&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${n}&lt;/b&gt;&lt;/li&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;ElementCountInMemory &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.elementCountInMemory}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li&gt;ElementCountOnDisk &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.elementCountOnDisk}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li&gt;Entries &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.entries}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li&gt;HitCount &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.hitCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li&gt;MissCount &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.missCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li&gt;PutCount &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.putCount}&lt;/span&gt;&lt;/li&gt;&#10;								&lt;li&gt;izeInMemory &lt;span class=&#34;badge&#34;&gt;${secondLevelCacheStatistics.sizeInMemory}&lt;/span&gt;&lt;/li&gt;&#10;							&lt;/ul&gt;&#10;						&lt;/g:if&gt;&#10;								&#10;						&lt;g:if test=&#34;${(i % 3) == 2 || o.length == (i + 1) }&#34;&gt;&#10;							&lt;/div&gt;&#10;						&lt;/g:if&gt;&#10;					&lt;/g:each&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;		&lt;/g:else&gt;&#10;&#10;		&lt;h3&gt;Mensajes de Hibernate&lt;/h3&gt;&#10;		&lt;div class=&#34;btn-group&#34;&gt;&#10;			&lt;button id=&#34;hql&#34; type=&#34;button&#34; class=&#34;btn btn-default active&#34;&gt;HQL (${HibernateLogger.get().findAll({ it.type == HibernateLogger.Type.HQL }).size()})&lt;/button&gt;&#10;			&lt;button id=&#34;param&#34; type=&#34;button&#34; class=&#34;btn btn-default active&#34;&gt;PARAM (${HibernateLogger.get().findAll({ it.type == HibernateLogger.Type.PARAM }).size()})&lt;/button&gt;&#10;			&lt;button id=&#34;sql&#34; type=&#34;button&#34; class=&#34;btn btn-default active&#34;&gt;SQL (${HibernateLogger.get().findAll({ it.type == HibernateLogger.Type.SQL }).size()})&lt;/button&gt;&#10;			&lt;button id=&#34;exception&#34; type=&#34;button&#34; class=&#34;btn btn-default active&#34;&gt;EXCEPTION (${HibernateLogger.get().findAll({ it.type == HibernateLogger.Type.EXCEPTION }).size()})&lt;/button&gt;&#10;			&lt;button id=&#34;text&#34; type=&#34;button&#34; class=&#34;btn btn-default active&#34;&gt;TEXT (${HibernateLogger.get().findAll({ it.type == HibernateLogger.Type.TEXT }).size()})&lt;/button&gt;&#10;		&lt;/div&gt;&#10;		&lt;div class=&#34;row&#34;&gt;&#10;			&lt;div class=&#34;col-md-12&#34;&gt;&#10;				&lt;%&#10;					o = HibernateLogger.get()&#10;				%&gt;&#10;				&lt;table id=&#34;logs&#34; class=&#34;table table-striped&#34;&gt;&#10;					&lt;tr&gt;&#10;						&lt;th class=&#34;col-md-2&#34;&gt;Fecha&lt;/th&gt;&#10;						&lt;th&gt;Tipo&lt;/th&gt;&#10;						&lt;th&gt;Tiempo&lt;/th&gt;&#10;						&lt;th&gt;Mensaje&lt;/th&gt;&#10;					&lt;/tr&gt;&#10;					&lt;g:each	in=&#34;${o}&#34; var=&#34;n&#34; status=&#34;i&#34;&gt;&#10;						&lt;g:if test=&#34;${(n.type == HibernateLogger.Type.HQL &amp;&amp; n.hql) || (n.type == HibernateLogger.Type.PARAM &amp;&amp; n.param) || ((n.type == HibernateLogger.Type.SQL) &amp;&amp; n.prepared &amp;&amp; n.sql) || ((n.type == HibernateLogger.Type.EXCEPTION) &amp;&amp; n.exception.messsage) || ((n.type == HibernateLogger.Type.TEXT) &amp;&amp; n.text)}&#34;&gt;&#10;							&lt;tr class=&#34;${n.type}&#34;&gt;&#10;								&lt;td&gt;${sdf.format(n.date)}&lt;/td&gt;&#10;								&lt;td&gt;${n.type}&lt;/td&gt;&#10;								&lt;g:if test=&#34;${n.type == HibernateLogger.Type.HQL &amp;&amp; n.hql}&#34;&gt;&#10;									&lt;td&gt;&lt;/td&gt;&#10;									&lt;td&gt;${n.hql}&lt;/td&gt;&#10;								&lt;/g:if&gt;&#10;								&lt;g:if test=&#34;${n.type == HibernateLogger.Type.PARAM &amp;&amp; n.param}&#34;&gt;&#10;									&lt;td&gt;&lt;/td&gt;&#10;									&lt;td&gt;${n.param}&lt;/td&gt;&#10;								&lt;/g:if&gt;&#10;								&lt;g:if test=&#34;${n.type == HibernateLogger.Type.SQL &amp;&amp; n.prepared &amp;&amp; n.sql}&#34;&gt;&#10;									&lt;td&gt;${(n.elapsed &gt; 0)?n.elapsed:&#39;&#39;}&lt;/td&gt;&#10;									&lt;td&gt;${n.prepared}&lt;br/&gt;&lt;br/&gt;${n.sql}&lt;/td&gt;&#10;								&lt;/g:if&gt;&#10;								&lt;g:if test=&#34;${n.type == HibernateLogger.Type.EXCEPTION &amp;&amp; n.exception.messsage}&#34;&gt;&#10;									&lt;td colspan=&#34;2&#34;&gt;${n.exception.messsage}&lt;/th&gt;&#10;								&lt;/g:if&gt;&#10;								&lt;g:if test=&#34;${n.type == HibernateLogger.Type.TEXT &amp;&amp; n.text}&#34;&gt;&#10;									&lt;td colspan=&#34;2&#34;&gt;${n.text}&lt;/th&gt;&#10;								&lt;/g:if&gt;&#10;							&lt;/tr&gt;&#10;						&lt;/g:if&gt;&#10;					&lt;/g:each&gt;&#10;				&lt;/table&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;	&lt;/div&gt;&#10;	&#10;	&lt;r:script&gt;&#10;		$(document).ready(function() {&#10;			$(&#39;#hql&#39;).click(function() {&#10;				$(this).toggleClass(&#39;active&#39;);&#10;				var b = $(this).hasClass(&#39;active&#39;);&#10;				if (b) {&#10;					$(&#39;#logs tr.HQL&#39;).show();&#10;				} else {&#10;					$(&#39;#logs tr.HQL&#39;).hide();&#10;				}&#10;			});&#10;			&#10;			$(&#39;#param&#39;).click(function() {&#10;				$(this).toggleClass(&#39;active&#39;);&#10;				var b = $(this).hasClass(&#39;active&#39;);&#10;				if (b) {&#10;					$(&#39;#logs tr.PARAM&#39;).show();&#10;				} else {&#10;					$(&#39;#logs tr.PARAM&#39;).hide();&#10;				}&#10;			});&#10;			&#10;			$(&#39;#sql&#39;).click(function() {&#10;				$(this).toggleClass(&#39;active&#39;);&#10;				var b = $(this).hasClass(&#39;active&#39;);&#10;				if (b) {&#10;					$(&#39;#logs tr.SQL&#39;).show();&#10;				} else {&#10;					$(&#39;#logs tr.SQL&#39;).hide();&#10;				}&#10;			});&#10;			&#10;			$(&#39;#exception&#39;).click(function() {&#10;				$(this).toggleClass(&#39;active&#39;);&#10;				var b = $(this).hasClass(&#39;active&#39;);&#10;				if (b) {&#10;					$(&#39;#logs tr.EXCEPTION&#39;).show();&#10;				} else {&#10;					$(&#39;#logs tr.EXCEPTION&#39;).hide();&#10;				}&#10;			});&#10;			&#10;			$(&#39;#text&#39;).click(function() {&#10;				$(this).toggleClass(&#39;active&#39;);&#10;				var b = $(this).hasClass(&#39;active&#39;);&#10;				if (b) {&#10;					$(&#39;#logs tr.TEXT&#39;).show();&#10;				} else {&#10;					$(&#39;#logs tr.TEXT&#39;).hide();&#10;				}&#10;			});&#10;		});&#10;	&lt;/r:script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index.gsp</span>
    </div>
</div>
<p>Si además queremos ver las consultas HQL de Hibernate y parámetros que se están lanzando en cada acceso a una página podemos modificar el archivo <em>Config.goovy</em> y añadir la siguiente configuración en el apartado Log4j:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="c1">// log4j configuration&#10;</span><span class="c1"></span><span class="n">log4j</span> <span class="o">=</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Example of changing the log pattern for the default console appender:&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//appenders {&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//&nbsp;&nbsp;&nbsp;&nbsp;console name:&#39;stdout&#39;, layout:pattern(conversionPattern: &#39;%c{2} %m%n&#39;)&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//}&#10;</span><span class="c1"></span>&#10;	<span class="n">appenders</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">environments</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">development</span> <span class="o">{</span>&#10;				<span class="n">appender</span> <span class="k">new</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">picodotdev</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">log</span><span class="o">.</span><span class="na">HibernateAppender</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;hibernate&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="n">environments</span> <span class="o">{</span>&#10; 		<span class="n">development</span> <span class="o">{</span>&#10;			<span class="n">debug</span> <span class="nl">additivity:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">hibernate:</span><span class="o">[</span><span class="s1">&#39;org.hibernate.SQL&#39;</span><span class="o">]</span>&#10;			<span class="n">trace</span> <span class="nl">additivity:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">hibernate:</span><span class="o">[</span><span class="s1">&#39;org.hibernate.type.descriptor.sql.BasicBinder&#39;</span><span class="o">]</span>&#10; 		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">error</span>  <span class="s1">&#39;org.codehaus.groovy.grails.web.servlet&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// controllers&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.web.pages&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="c1">// GSP&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.web.sitemesh&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;   <span class="c1">// layouts&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.web.mapping.filter&#39;</span><span class="o">,</span> <span class="c1">// URL mapping&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.web.mapping&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// URL mapping&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.commons&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// core / classloading&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.plugins&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// plugins&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.codehaus.groovy.grails.orm.hibernate&#39;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp;  <span class="c1">// hibernate integration&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.springframework&#39;</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;org.hibernate&#39;</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;net.sf.ehcache.hibernate&#39;</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Config.groovy</span>
    </div>
</div>
<p>La implementación de <em>appender</em> para capturar las HQL que lanza grails es la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.grails.log</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.log4j.AppenderSkeleton</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.log4j.spi.LoggingEvent</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HibernateAppender</span> <span class="kd">extends</span> <span class="n">AppenderSkeleton</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="n">LoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getLoggerName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;org.hibernate.SQL&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="n">HibernateLogger</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">logHQL</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getRenderedMessage</span><span class="o">());</span>&#10;		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getLoggerName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;org.hibernate.type.descriptor.sql.BasicBinder&#34;</span><span class="o">))</span> <span class="o">{</span>&#10;			<span class="n">HibernateLogger</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">logParam</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getRenderedMessage</span><span class="o">());</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">requiresLayout</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HibernateAppender.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span><span class="lnt">88&#10;</span><span class="lnt">89&#10;</span><span class="lnt">90&#10;</span><span class="lnt">91&#10;</span><span class="lnt">92&#10;</span><span class="lnt">93&#10;</span><span class="lnt">94&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.grails.log</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HibernateLogger</span> <span class="o">{</span>&#10;&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">MAX_LOGS</span> <span class="o">=</span> <span class="n">1000</span><span class="o">;</span>	&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="n">LinkedList</span> <span class="n">logs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">();</span>	&#10;	<span class="kd">private</span> <span class="kd">static</span> <span class="n">HibernateLogger</span> <span class="n">instance</span><span class="o">;</span>&#10;	&#10;	<span class="kd">public</span> <span class="kd">enum</span> <span class="n">Type</span> <span class="o">{</span>&#10;		<span class="n">HQL</span><span class="o">,</span> <span class="n">PARAM</span><span class="o">,</span> <span class="n">SQL</span><span class="o">,</span> <span class="n">EXCEPTION</span><span class="o">,</span> <span class="n">TEXT</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="n">HibernateLogger</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HibernateLogger</span><span class="o">();</span>&#10;		<span class="o">}</span>&#10;		<span class="k">return</span> <span class="n">instance</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logHQL</span><span class="o">(</span><span class="n">String</span> <span class="n">hql</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">,</span> <span class="n">Type</span><span class="o">.</span><span class="na">HQL</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;hql&#34;</span><span class="o">,</span> <span class="n">hql</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">add</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logParam</span><span class="o">(</span><span class="n">String</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">,</span> <span class="n">Type</span><span class="o">.</span><span class="na">PARAM</span><span class="o">);</span>&#10;   		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>&#10;   		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param&#34;</span><span class="o">,</span> <span class="n">param</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">add</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;	&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logSQL</span><span class="o">(</span><span class="kt">int</span> <span class="n">connectionId</span><span class="o">,</span> <span class="n">String</span> <span class="n">now</span><span class="o">,</span> <span class="kt">long</span> <span class="n">elapsed</span><span class="o">,</span> <span class="n">String</span> <span class="n">category</span><span class="o">,</span> <span class="n">String</span> <span class="n">prepared</span><span class="o">,</span> <span class="n">String</span> <span class="n">sql</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">,</span> <span class="n">Type</span><span class="o">.</span><span class="na">SQL</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;connectionId&#34;</span><span class="o">,</span> <span class="n">connectionId</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;now&#34;</span><span class="o">,</span> <span class="n">now</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;elapsed&#34;</span><span class="o">,</span> <span class="n">elapsed</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;category&#34;</span><span class="o">,</span> <span class="n">category</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;prepared&#34;</span><span class="o">,</span> <span class="n">prepared</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;sql&#34;</span><span class="o">,</span> <span class="n">sql</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">add</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">,</span> <span class="n">Type</span><span class="o">.</span><span class="na">EXCEPTION</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>&#10;&#10;		<span class="n">add</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logText</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">,</span> <span class="n">Type</span><span class="o">.</span><span class="na">TEXT</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;text&#34;</span><span class="o">,</span> <span class="n">text</span><span class="o">);</span>&#10;&#10;		<span class="n">add</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastEntry</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">return</span> <span class="n">logs</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">logs</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Map</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="n">logs</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="k">if</span> <span class="o">(</span><span class="n">logs</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">MAX_LOGS</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;		<span class="n">logs</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HibernateLogger.java</span>
    </div>
</div>
<p>El resultado es el siguiente:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/images/grails-hibernate-statistics_hu4234a0f49374b7b510e8be551108ae3e_127095_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estadísticas de Hibernate en Grails"><img src="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/images/grails-hibernate-statistics_hu4234a0f49374b7b510e8be551108ae3e_127095_300x200_fit_box_3.png" width="175" height="200" alt="Estadísticas de Hibernate en Grails" title="Estadísticas de Hibernate en Grails"  class="lozad "></a></p>
</figure>
</div>
<p>En la imagen se puede apreciar las consultas lanzadas y que parámetros se han empleado. El método doTest del controlador HibernateController cada vez que es ejecutado persiste una entidad de dominio Autor y posteriormente la borra lanzando una sentencia insert y otra delete, cada vez que es ejecutado las estadísticas cambian acordemente.</p>
<p>Obtener información de lo que sucede en la aplicación es importante y el <em>framework</em> debería ayudar, también podemos <a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/">mejorar lo que ofrece Grails con una página de excepción más informativa</a>. En <a href="http://tapestry.apache.org/">Tapestry</a> es más sencillo aún ya que incluyendo la dependencia de tapestry-hibernate ya se añade a la <a href="https://picodotdev.github.io/blog-bitix/2014/06/pagina-dashboard-de-apache-tapestry/">página Dashboard y un apartado con estas estadísticas</a>, pero esto último será tema para otro artículo.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/">Página de excepción de Grails</a></li>
<li>https://stackoverflow.com/questions/11621495/how-can-i-obtain-grails-hibernate-l2-cache-statistics<br></li>
<li>https://stackoverflow.com/questions/2568507/how-to-log-sql-statements-in-grails<br></li>
<li>https://hibernate.atlassian.net/browse/HHH-3659</li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/</id>
        <title>Página de excepción de Grails</title>
        <updated>2014-05-30T20:00:00+02:00</updated>
        <published>2014-05-23T20:00:19+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/grails.svg" width="300" height="300" alt="Grails" title="Grails"  class=""></p>
</div>
<p>No es la primera vez que comento algo similar (<a href="https://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html">I</a>, <a href="https://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html">II</a>) disponer de la mayor cantidad de información cuando se produce una excepción o un error en la aplicación es vital para determinar rápidamente la causa del error y para solucionarlo correctamente. Para disponer de esta información podemos generar un archivo de log que nos permita revisar lo que pasó en la aplicación en un determinado momento. En el momento de desarrollo también nos puede interesar tener una página de excepción informativa.</p>
<p>La página de error de <a href="https://grails.org/">Grails</a> por defecto da poca información, a poco más da la traza de la excepción y un extracto de los archivos relacionados donde se ha producido, podría ser mejor. Podría informar de los parámetros que se enviaron en la petición, las cabeceras http o las cookies además de los parámetros de sesión, a veces esta información nos puede servir para identificar la causa más rápidamente ya que la excepción puede estar produciéndose con el valor de un determinado parámetro o un determinado navegador, esta información no la tenemos en una simple traza de la excepción.</p>
<p>En este artículo crearé una página de excepción para Grails con los parámetros de la petición y sesión, cabeceras HTTP y las cookies enviadas además de la traza de la excepción. Los parámetros, las cookies y cabeceras HTTP se pueden obtener de la request y los atributos de la sesión del objeto session. El código del ejemplo de página de excepción es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">&lt;%@ page import=&#34;java.text.SimpleDateFormat&#34; %&gt;&#10;&lt;%&#10;	SimpleDateFormat sdf = new SimpleDateFormat(&#34;dd/MM/yyyy HH:mm:ss Z&#34;)&#10;%&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta name=&#34;layout&#34; content=&#34;main&#34; /&gt;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Excepción&lt;/title&gt;&#10;	&lt;g:if env=&#34;development&#34;&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;${resource(dir: &#39;css&#39;, file: &#39;errors.css&#39;)}&#34; type=&#34;text/css&#34;&gt;&lt;/g:if&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;	&lt;div&gt;&#10;		&lt;div&gt;&#10;			&lt;h1&gt;Detalles del error&lt;/h1&gt;	&#10;			&lt;g:renderException exception=&#34;${exception}&#34;/&gt;&#10;			&#10;			&lt;pre&gt;&lt;g:each in=&#34;${exception.stackTraceLines}&#34;&gt;${it.encodeAsHTML()}&lt;/g:each&gt;&lt;/pre&gt;&#10;	&#10;			&lt;div&gt;&#10;				&lt;div&gt;&#10;					&lt;h2&gt;Parámetros&lt;/h2&gt;&#10;					&lt;g:if test=&#34;params&#34;&gt;&#10;						&lt;g:set var=&#34;paramsKeys&#34; value=&#34;${params.keySet()}&#34;/&gt;&#10;						&lt;% paramsKeys.removeAll([&#39;action&#39;, &#39;controller&#39;]) %&gt;&#10;						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;							&lt;g:each in=&#34;${paramsKeys}&#34; var=&#34;param&#34;&gt;&#10;								&lt;g:if test=&#34;${params.list(param).size() == 1}&#34;&gt;&#10;									&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${param}&lt;/b&gt;: ${params.get(param)}&lt;/li&gt;&#10;								&lt;/g:if&gt;&#10;								&lt;g:else&gt;&#10;									&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${param}&lt;/b&gt;: ${params.list(param)}&lt;/li&gt;&#10;								&lt;/g:else&gt;&#10;							&lt;/g:each&gt;&#10;						&lt;/ul&gt;&#10;					&lt;/g:if&gt;&#10;				&lt;/div&gt;	&#10;				&lt;div&gt;&#10;					&lt;h2&gt;Cabeceras&lt;/h2&gt;&#10;					&lt;g:if test=&#34;request.headerNames &#34;&gt;&#10;						&lt;g:set var=&#34;headers&#34; value=&#34;${request.headerNames}&#34;/&gt;&#10;						&lt;% &#10;							headers = Collections.list(headers)&#10;							headers.removeAll([&#39;cookie&#39;])&#10;						%&gt;&#10;						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;							&lt;g:each in=&#34;${headers}&#34; var=&#34;header&#34;&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${header}&lt;/b&gt;: ${request.getHeader(header)}&lt;/li&gt;&#10;							&lt;/g:each&gt;&#10;						&lt;/ul&gt;&#10;					&lt;/g:if&gt;&#10;				&lt;/div&gt;&#10;				&lt;div&gt;&#10;					&lt;h2&gt;Cookies&lt;/h2&gt;&#10;					&lt;g:if test=&#34;request.cookies&#34;&gt;&#10;						&lt;g:set var=&#34;cookies&#34; value=&#34;${request.cookies}&#34;/&gt;&#10;						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;							&lt;g:each in=&#34;${cookies}&#34; var=&#34;cookie&#34;&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${cookie.name}&lt;/b&gt;: ${cookie.value}&lt;/li&gt;&#10;							&lt;/g:each&gt;&#10;						&lt;/ul&gt;&#10;					&lt;/g:if&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;			&lt;div&gt;&#10;				&lt;div&gt;&#10;					&lt;h2&gt;Sesión&lt;/h2&gt;&#10;					&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;						&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;Fecha creación&lt;/b&gt;: ${sdf.format(new Date(session.getCreationTime()))}&lt;/li&gt;&#10;					&lt;/ul&gt; &#10;					&lt;g:if test=&#34;reqeust.getSession(false)&#34;&gt;&#10;						&lt;g:set var=&#34;sessionKeys&#34; value=&#34;${session.getAttributeNames()}&#34;/&gt;&#10;						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;							&lt;g:each in=&#34;${sessionKeys}&#34; var=&#34;s&#34;&gt;&#10;								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${s}&lt;/b&gt;: ${session.getAttribute(s)}&lt;/li&gt;&#10;							&lt;/g:each&gt;&#10;						&lt;/ul&gt;&#10;					&lt;/g:if&gt;&#10;					&lt;g:else&gt;&#10;						No hay sesión&#10;					&lt;/g:else&gt;&#10;				&lt;/div&gt;&#10;			&lt;/div&gt;&#10;		&lt;/div&gt;&#10;	&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>exception.gsp</span>
    </div>
</div>
<p>Para hacer uso de la página de excepción deberemos configurar el archivo UrlMappings para que Grails use esta página de excepción.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="kd">class</span> <span class="nc">UrlMappings</span> <span class="o">{</span>&#10;&#10;	<span class="kd">static</span> <span class="n">mappings</span> <span class="o">=</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;/$controller/$action?/$id?(.$format)?&#34;</span><span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">constraints</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// apply constraints here&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;/&#34;</span><span class="o">(</span><span class="nl">view:</span><span class="s2">&#34;/index&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;500&#34;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/error&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;500&#34;</span><span class="o">(</span><span class="nl">controller:</span><span class="s2">&#34;test&#34;</span><span class="o">,</span> <span class="nl">action:</span><span class="s2">&#34;exception&#34;</span><span class="o">,</span> <span class="nl">exception:</span><span class="n">Exception</span><span class="o">)</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>UrlMappings.groovy</span>
    </div>
</div>
<p>El resultado se puede ver en la siguiente captura de pantalla.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-por-defecto_hu69b99072b92d39c8c40ae70f45a904b8_89059_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Página de error por defecto de Grails"><img src="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-por-defecto_hu69b99072b92d39c8c40ae70f45a904b8_89059_300x200_fit_box_3.png" width="300" height="166" alt="Página de error por defecto de Grails" title="Página de error por defecto de Grails"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-personalizada_hu63eab4f2b004a7b3e5055c94710b3136_162704_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Página de error personalizada de Grails"><img src="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-personalizada_hu63eab4f2b004a7b3e5055c94710b3136_162704_300x200_fit_box_3.png" width="211" height="200" alt="Página de error personalizada de Grails" title="Página de error personalizada de Grails"  class="lozad "></a></p>
</figure>
</div>
<p>Los estilos mostrados en las capturas de pantalla podrían ser mejores pero la esencia está en la información que se muestra. En otro artículo publicaré como <a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">obtener estadísticas de Hibernate para detectar problemas de N+1 u obtener las consultas sql que se están realizando en cada página de una aplicación Grails</a>, esta información nos puede ayudar bastante y no es excesivamente complicado hacerla. Con ambas conseguiremos que las aplicaciones que desarrollemos con Grails sean un poco más informativas.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">Detectar problema N+1 y obtener estadísticas de Hibernate con Grails</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
</feed>
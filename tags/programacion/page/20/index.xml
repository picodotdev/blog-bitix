<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/</id>
    <updated>2023-01-19T20:00:00+01:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/</id>
        <title>Página de excepción de Grails</title>
        <updated>2014-05-30T20:00:00+02:00</updated>
        <published>2014-05-23T20:00:19+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/grails.svg" width="300" height="300" alt="Grails" title="Grails" class="" loading="false&#34;"></p>
</div>
<p>No es la primera vez que comento algo similar (<a href="https://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html">I</a>, <a href="https://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html">II</a>) disponer de la mayor cantidad de información cuando se produce una excepción o un error en la aplicación es vital para determinar rápidamente la causa del error y para solucionarlo correctamente. Para disponer de esta información podemos generar un archivo de log que nos permita revisar lo que pasó en la aplicación en un determinado momento. En el momento de desarrollo también nos puede interesar tener una página de excepción informativa.</p>
<p>La página de error de <a href="https://grails.org/">Grails</a> por defecto da poca información, a poco más da la traza de la excepción y un extracto de los archivos relacionados donde se ha producido, podría ser mejor. Podría informar de los parámetros que se enviaron en la petición, las cabeceras http o las cookies además de los parámetros de sesión, a veces esta información nos puede servir para identificar la causa más rápidamente ya que la excepción puede estar produciéndose con el valor de un determinado parámetro o un determinado navegador, esta información no la tenemos en una simple traza de la excepción.</p>
<p>En este artículo crearé una página de excepción para Grails con los parámetros de la petición y sesión, cabeceras HTTP y las cookies enviadas además de la traza de la excepción. Los parámetros, las cookies y cabeceras HTTP se pueden obtener de la request y los atributos de la sesión del objeto session. El código del ejemplo de página de excepción es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span><span class="lnt">87&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">&lt;%@ page import=&#34;java.text.SimpleDateFormat&#34; %&gt;&#10;</span></span><span class="line"><span class="cl">&lt;%&#10;</span></span><span class="line"><span class="cl">	SimpleDateFormat sdf = new SimpleDateFormat(&#34;dd/MM/yyyy HH:mm:ss Z&#34;)&#10;</span></span><span class="line"><span class="cl">%&gt;&#10;</span></span><span class="line"><span class="cl">&lt;!DOCTYPE html&gt;&#10;</span></span><span class="line"><span class="cl">&lt;html&gt;&#10;</span></span><span class="line"><span class="cl">&lt;head&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta name=&#34;layout&#34; content=&#34;main&#34; /&gt;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Excepción&lt;/title&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;g:if env=&#34;development&#34;&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;${resource(dir: &#39;css&#39;, file: &#39;errors.css&#39;)}&#34; type=&#34;text/css&#34;&gt;&lt;/g:if&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/head&gt;&#10;</span></span><span class="line"><span class="cl">&lt;body&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;h1&gt;Detalles del error&lt;/h1&gt;	&#10;</span></span><span class="line"><span class="cl">			&lt;g:renderException exception=&#34;${exception}&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">			&#10;</span></span><span class="line"><span class="cl">			&lt;pre&gt;&lt;g:each in=&#34;${exception.stackTraceLines}&#34;&gt;${it.encodeAsHTML()}&lt;/g:each&gt;&lt;/pre&gt;&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">			&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;h2&gt;Parámetros&lt;/h2&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;g:if test=&#34;params&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;g:set var=&#34;paramsKeys&#34; value=&#34;${params.keySet()}&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;% paramsKeys.removeAll([&#39;action&#39;, &#39;controller&#39;]) %&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;g:each in=&#34;${paramsKeys}&#34; var=&#34;param&#34;&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;g:if test=&#34;${params.list(param).size() == 1}&#34;&gt;&#10;</span></span><span class="line"><span class="cl">									&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${param}&lt;/b&gt;: ${params.get(param)}&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;/g:if&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;g:else&gt;&#10;</span></span><span class="line"><span class="cl">									&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${param}&lt;/b&gt;: ${params.list(param)}&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;/g:else&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;/g:each&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;/ul&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/g:if&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;	&#10;</span></span><span class="line"><span class="cl">				&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;h2&gt;Cabeceras&lt;/h2&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;g:if test=&#34;request.headerNames &#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;g:set var=&#34;headers&#34; value=&#34;${request.headerNames}&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;% &#10;</span></span><span class="line"><span class="cl">							headers = Collections.list(headers)&#10;</span></span><span class="line"><span class="cl">							headers.removeAll([&#39;cookie&#39;])&#10;</span></span><span class="line"><span class="cl">						%&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;g:each in=&#34;${headers}&#34; var=&#34;header&#34;&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${header}&lt;/b&gt;: ${request.getHeader(header)}&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;/g:each&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;/ul&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/g:if&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;h2&gt;Cookies&lt;/h2&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;g:if test=&#34;request.cookies&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;g:set var=&#34;cookies&#34; value=&#34;${request.cookies}&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;g:each in=&#34;${cookies}&#34; var=&#34;cookie&#34;&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${cookie.name}&lt;/b&gt;: ${cookie.value}&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;/g:each&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;/ul&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/g:if&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;div&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;h2&gt;Sesión&lt;/h2&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;Fecha creación&lt;/b&gt;: ${sdf.format(new Date(session.getCreationTime()))}&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/ul&gt; &#10;</span></span><span class="line"><span class="cl">					&lt;g:if test=&#34;reqeust.getSession(false)&#34;&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;g:set var=&#34;sessionKeys&#34; value=&#34;${session.getAttributeNames()}&#34;/&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;ul style=&#34;list-style-type: none;&#34;&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;g:each in=&#34;${sessionKeys}&#34; var=&#34;s&#34;&gt;&#10;</span></span><span class="line"><span class="cl">								&lt;li class=&#34;list-group-item&#34;&gt;&lt;b&gt;${s}&lt;/b&gt;: ${session.getAttribute(s)}&lt;/li&gt;&#10;</span></span><span class="line"><span class="cl">							&lt;/g:each&gt;&#10;</span></span><span class="line"><span class="cl">						&lt;/ul&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;/g:if&gt;&#10;</span></span><span class="line"><span class="cl">					&lt;g:else&gt;&#10;</span></span><span class="line"><span class="cl">						No hay sesión&#10;</span></span><span class="line"><span class="cl">					&lt;/g:else&gt;&#10;</span></span><span class="line"><span class="cl">				&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">			&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">		&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">	&lt;/div&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/body&gt;&#10;</span></span><span class="line"><span class="cl">&lt;/html&gt;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>exception.gsp</span>
    </div>
</div>
<p>Para hacer uso de la página de excepción deberemos configurar el archivo UrlMappings para que Grails use esta página de excepción.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">UrlMappings</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">static</span> <span class="n">mappings</span> <span class="o">=</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;/$controller/$action?/$id?(.$format)?&#34;</span><span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">constraints</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// apply constraints here&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;/&#34;</span><span class="o">(</span><span class="nl">view:</span><span class="s2">&#34;/index&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;500&#34;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/error&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;500&#34;</span><span class="o">(</span><span class="nl">controller:</span><span class="s2">&#34;test&#34;</span><span class="o">,</span> <span class="nl">action:</span><span class="s2">&#34;exception&#34;</span><span class="o">,</span> <span class="nl">exception:</span><span class="n">Exception</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>UrlMappings.groovy</span>
    </div>
</div>
<p>El resultado se puede ver en la siguiente captura de pantalla.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-por-defecto_hu69b99072b92d39c8c40ae70f45a904b8_89059_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Página de error por defecto de Grails"><img src="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-por-defecto_hu69b99072b92d39c8c40ae70f45a904b8_89059_300x200_fit_q90_h2_box_3.webp" width="300" height="166" alt="Página de error por defecto de Grails" title="Página de error por defecto de Grails" class="&#34; " loading="lazy"></a>
<a href="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-personalizada_hu63eab4f2b004a7b3e5055c94710b3136_162704_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Página de error personalizada de Grails"><img src="https://picodotdev.github.io/blog-bitix/2014/05/pagina-de-excepcion-de-grails/images/pagina-excepcion-grails-personalizada_hu63eab4f2b004a7b3e5055c94710b3136_162704_300x200_fit_q90_h2_box_3.webp" width="211" height="200" alt="Página de error personalizada de Grails" title="Página de error personalizada de Grails" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Los estilos mostrados en las capturas de pantalla podrían ser mejores pero la esencia está en la información que se muestra. En otro artículo publicaré como <a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">obtener estadísticas de Hibernate para detectar problemas de N+1 u obtener las consultas sql que se están realizando en cada página de una aplicación Grails</a>, esta información nos puede ayudar bastante y no es excesivamente complicado hacerla. Con ambas conseguiremos que las aplicaciones que desarrollemos con Grails sean un poco más informativas.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/detectar-problema-n-plus-1-y-obtener-estadisticas-de-hibernate-con-grails/">Detectar problema N+1 y obtener estadísticas de Hibernate con Grails</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/</id>
        <title>Arquitectura y hospedaje de Blog Stack</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2014-05-16T17:21:55+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/blogstack.webp" width="300" height="65" alt="Blog Stack" title="Blog Stack" class="" loading="false&#34;"></p>
</div>
<p>Normalmente en esta bitácora suelo poner ejemplos para explicar como funciona una determinada herramienta, son ejemplos que podrían aprovecharse para algo productivo pero para mantenerlos simples por si mismos no suelen serlo. En esta entrada voy a comentar cual es la arquitectura y como está alojado <a href="http://www.blogstack.info/">Blog Stack</a>, que es un ejemplo de algo práctico y real por si la experiencia de este ejemplo le sirve de ayuda o de inspiración a alguien. En la red he encontrado comentada la experiencia de <del>Planeta Linux</del> y <a href="http://gallir.wordpress.com/2009/12/30/como-montamos-meneame-en-amazon-ec2/">Meneame</a>, otros proyectos web.</p>
<p>Blog Stack (BS) es una agregador, planeta, o fuente de información de bitácoras sobre programación, desarrollo, desarrollo ágil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnología, en definitiva es un servicio que está disponible en una dirección de internet, <a href="http://www.blogstack.info">www.blogstack.info</a>.</p>
<p>Una condición importante que buscaba para BS es que de cualquier opción no debería ser muy cara al menos en los inicios hasta que viese cuales eran los ingresos por la publicidad que era capaz de generar, estimaba que no iban a ser muchos hasta que se agregase unas decenas de bitácoras y tuviese algunos lectores suscritos a las fuentes se sindicación. Por coste cualquier opción que fuese en la nube prácticamente quedaba desechada, la opción más barata era la de <a href="https://aws.amazon.com/es/ec2/">Amazon EC2</a>, reservando una instancia t1.micro (0,615 GB) por tres años el coste era de unos 80 € anuales y de 140 € anuales para una instancia de tipo m1.small (1,7 GB), otras opciones como <a href="https://www.openshift.com/">OpenShift</a> con la capa gratuita de 3 gears si un small gear (512 MB) era suficiente no tenía coste pero si necesitase un gear medium (1 GB) el coste era superior, de unos 438 € anuales. Finalmente otra opción que evalué era <a href="https://cloud.google.com/products/compute-engine/">Google Compute</a> con un coste de 115 € anuales para una instancia f1-micro (0,60 GB) y de 305 € para una g1-small (1,7 GB). Si en cualquier opción de estas en la nube el coste debía de asumirlo yo probablemente al cabo de un tiempo, pocos años, acabaría cerrando el servicio, por ello el coste era importante. OpenShift y su capa gratuita tenía muchas posibilidades.</p>
<p>Por otro lado estaba bastante contento con la generación estática de mi bitácora con <a href="http://octopress.org/">Octopress</a> y el alojamiento en <a href="https://pages.github.com/">GitHub Pages</a>. Me pereció que una opción con un coste mínimo podría generar de forma estática el contenido y alojarlo en GitHub Pages al igual que hago con Octopress. Finalmente, me quedaba donde hacer la generación estática, otra opción era usar la <a href="https://www.raspberrypi.org/">Raspberry Pi</a> pero esto me obligaba a mantenerla encendida siempre, cualquier problema en la Raspberry Pi o conexión en mi red o si la necesitaba apagar en algún momento podría dejar BS sin actualizarse. Si era posible necesitaba una forma de nube, por suerte OpenShift ofrece un plan gratuito de 3 gears con 512 MiB de memoria y 1 GiB de espacio en disco cada uno y en las primeras pruebas que hice era suficiente. Además, OpenShift ofrecía todas las herramientas que necesitaba git para subir el contenido estático al repositorio de GitHub, iconv, cron, bases de datos relacionales y no sql, poder usar <a href="http://undertow.io/">Undertow</a> como servidor y un «cartridge» diy («Do It Yourself»). Tenía varias piezas, finalmente elegí la combinación de OpenShift para la generación estática y GitHub Pages para servir el contenido. El contenido podría servirlo desde OpenShift pero no estaba seguro de que el gear fuese capaz de aguantarlo todo si el tráfico fuese grande. Por el espacio en disco de 1 GB tenía dudas de cuanto podría necesitar pero si fuera mucho podría adquirir 1 GiB adicionar por 1 € al mes.</p>
<p>Generar el contenido de forma estática tiene limitaciones y obliga a hacer las cosas de diferente forma que empleando una aplicación web pero el requisito del coste era más importante que la funcionalidad y la forma de ofrecerla. El coste de BS es de unos ¡10 €&hellip; al año! y consiste básicamente en la compra del dominio. El dominió lo compre en <a href="https://www.dondominio.com/">DonDominio</a> por recomendación según la cual era buena opción, en los 10 € está incluido el WHOIS privado que en otras opciones tienen un coste adicional. Teniendo el nombre elegido de Blog Stack para el proyecto tenía que saber que <a href="https://es.wikipedia.org/wiki/Dominio_de_nivel_superior">dominios de nivel superior (TLD)</a> estaban disponibles, los &ldquo;okupas&rdquo; de los dominios tenían reservado el .com y el .net, como BS era un sitio de información no me importó mucho comprar el .info.</p>
<p>Con todo la arquitectura de despliegue y hospedaje de Blog Stack es la siguiente:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/images/arquitectura-blogstack_hub8ff48939ea64d0be3682a25103ad8e4_45194_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/images/arquitectura-blogstack_hub8ff48939ea64d0be3682a25103ad8e4_45194_300x200_fit_q90_h2_box_3.webp" width="168" height="200" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>En cuanto a la aplicación y el código Java en si las partes importantes están en un <a href="https://github.com/picodotdev/blog-stack/blob/master/src/main/java/info/blogstack/services/IndexerServiceImpl.java">servicio que se encarga de la indexación</a> extrayendo el contenido de las fuentes y guardalo en una base de datos, otro <a href="https://github.com/picodotdev/blog-stack/blob/master/src/main/java/info/blogstack/services/GeneratorServiceImpl.java">servicio para la generación del contenido</a> del sitio de forma estática (html, css, js, imgs, &hellip;) y finalmente el <a href="https://github.com/picodotdev/blog-stack/blob/master/src/main/java/info/blogstack/cli/Main.java">programa Java principal</a> que sirve para lanzarlo desde la linea de comandos, el resto son las <a href="https://github.com/picodotdev/blog-stack/tree/master/src/main/java/info/blogstack/entities">clases del modelo de datos</a>  y los <a href="https://github.com/picodotdev/blog-stack/tree/master/src/main/java/info/blogstack/services/dao">DAO de persistencia y acceso a dataos</a>. La aplicación sigue el esquema tradicional de 3 capas, la de presentación (páginas y componentes de tapestry), la de lógica de negocio formada por los servicios de indexación, generación y los DAOs (formada por el contenedor de servicios de tapestry y spring) y finalmente la capa de datos formada por una base de datos H2 (donde hibernate interviene). En realidad en BS no hay un servidor de aplicaciones sino que se usa Tapestry en una aplicación «standalone».</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/images/arquitectura-aplicacion-blogstack_hu58118d936b2ebf314d48d518f007452c_43298_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/images/arquitectura-aplicacion-blogstack_hu58118d936b2ebf314d48d518f007452c_43298_300x200_fit_q90_h2_box_3.webp" width="300" height="123" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>La raíz del proyecto fue que quería usar <a href="http://tapestry.apache.org/">Apache Tapestry</a> de alguna forma en algún proyecto que fuese de utilidad para otras personas, al mismo tiempo que meditaba la idea <a href="http://planetalinux.org/">Planeta Linux</a> dejó de funcionar durante unas semanas y tampoco estaba contento del todo con los otros planetas en los que tenía mi bitácora agregada. Con <a href="http://planeta.archlinux-es.org/">Planeta Arch Linux</a> porque después de unos meses seguía sin ni siquiera respuesta a la solicitud de agregación y <a href="http://www.planetacodigo.com/">Planeta Código</a> ya que creía que podría ofrecer mejor funcionalidad, por ejemplo, los gist no se importaban bien (utilizan javascript y por seguridad deben estar excluidos). Ya que empezaba el proyecto creía que podría proporcionar alguna idea que permitiese descubrir contenido a los usuarios a través de como hace <a href="https://stackoverflow.com/">stackoverflow</a> con las etiquetas de modo que una persona se pueda suscribir (mediante rss/atom) a una etiqueta para recibir el contenido de solo el tema que le interese de cualquier bitácora agregada, descubrir nuevas bitácoras con contenido interesante a veces no es fácil. La opción más parecida y mejor que he encontrado es <a href="http://bitacoras.com/">bitacoras.com</a>, salvo las votaciones, el ranking y que tiene un ámbito más amplio al poder incluir bitácoras de más temáticas y que la agregación de bitácoras no está automatizada, BS en lo importante ofrece lo mismo de forma más simple y está más especializado tanto en la temática de las bitácoras como en la suscripción por etiquetas.</p>
<p>Apache Tapestry junto con el módulo Tapestry Offline y el hecho de que el contenedor de dependencias de Tapestry se puede usar en una aplicación «standalone» me permitía resolver la parte técnica en la mayor parte, el resto era usar unas cuantas librerías para tener la funcionalidad que necesitaba. Una de ellas era <a href="http://jsoup.org/">jsoup</a> con la que podía filtrar el contenido agregado y evitar problemas de seguridad. Permitir en el contenido scripts e iframes puede ser un problema de seguridad pero permitiendo algunas fuentes confiables podía importar el contenido de forma segurar sin perder funcionalidades. En algunas bitácoras como la mía se suelen utilizar como trozos de código <a href="http://gist.github.com/">gist</a>, vídeos de youtube o vimeo, presentaciones de <a href="https://speakerdeck.com/">Speaker Deck</a> o usar el <a href="https://afiliados.amazon.es/">programa de afiliados de amazon</a>. Iba a necesitar una base de datos ya que las entradas van desapareciendo de las fuentes agregadas a medida que se publica contenido. La base de datos que elegí fue <a href="http://www.h2database.com/html/main.html">H2</a> principalmente porque puede estar contenida en un archivo que puedo descargar a mi ordenador, de esta manera podría evitar los volcados de <a href="http://postgresql.org/">PosgreSQL</a>. Si BS resultase que creciese bastante posteriormente podría cambiar H2 por PostgreSQL (la otra opción que consideraba), H2 al principio era más que suficiente. El resto era la colección de herramientas que se suelen utilizar el proyectos <a href="https://www.oracle.com/es/technologies/java/overview/index.html">Java</a> como <a href="http://hibernate.org/">Hibernate</a>, <a href="http://spring.io/">Spring</a>, <a href="https://gradle.org/">Gradle</a>, <a href="http://commons.apache.org/">Apache Commons</a>, <a href="http://rometools.github.io/rome/">Rome</a> (para obtener las fuentes)&hellip;</p>
<p>El despliegue de nuevo código está totalmente automatizado tal y como aconseja el libro <a href="https://amzn.to/37GgG75">The Pragmatic programmer</a>, con lo que me es muy simple y me consume muy poco tiempo hacer un nuevo despliegue, el tiempo ahorrado lo puedo emplear para desarrollar. El despliegue consiste en unos cuantos comandos ejecutados por una <a href="https://github.com/picodotdev/blog-stack/blob/master/build.gradle">tarea de gradle</a> que se envían a OpenShift. Los comandos de despliegue se encargan de todo mediante ssh, hacer previamente una copia de seguridad de la base de datos (scp/unzip), sincronizar los archivos cambiados del proyecto con rsync, establecer los permisos de ejecución de los archivos bash y actualizar el esquema de la base de datos con <a href="http://www.liquibase.org/">liquibase</a>.</p>
<p>No estaba usando Apache Tapestry de la forma habitual que se suele emplear que es para desarrollar aplicaciones web que se despliegan en un servidor de aplicaciones Java. Lo iba a usar como motor de plantillas para generar el contenido estático, aparte de querer usar Tapestry ¿por que esta opción si hay soluciones específicas para esto como <a href="http://www.thymeleaf.org/">Thymeleaf</a>, <a href="http://freemarker.org/">Freemarker</a>, &hellip;? Uno de los motivos es que en en la mayoría de opciones se sigue un modelo «push» en el que se combinan los datos con la vista para producir el resultado. Este modelo «push» cada vez me convence menos a pesar de ser ampliamente usado en muchos motores de plantillas y <em>frameworks</em> web, la razón es que las vistas al final acaban conteniendo lógica si son algo complejas, eso no es bueno. Tapestry por el contrario usa un modelo «pull» en el que la plantilla para generar el contenido puede acceder al controlador por lo que las plantillas no tienen lógica, estando extraída a una clase java con lo que nos beneficiaremos del compilador y el IDE para esa lógica. Además, los componentes de Tapestry son una manera fácil de reutilizar código, por si fuera poco si pasado un tiempo quisiese desplegar Blog Stack como aplicación web podría aprovechar prácticamente todo el código.</p>
<p>Estando convencido del uso del software libre para ser coherente no tenía otra opción que publicar el <a href="https://github.com/picodotdev/blog-stack/">código fuente</a> bajo alguna licencia de software libre, la opción que elegí fue <a href="http://www.gnu.org/licenses/agpl-3.0.html">AGPL</a>. Uno puede tener dudas de &ldquo;dar&rdquo; el código fuente pero creía que ganaba si alguien en un caso remoto hiciese un fork de BS, ya que Tapestry siendo una parte tan importante sería lo usado y por tanto habría hecho que otra persona usase Tapestry. Si basándose en la misma idea se hacía un proyecto similar competiríamos y que triunfase la mejor opción. Pero lo más probable que ocurra es que se colabore con el desarrollo de BS, con esta opción también ganaría. De tres opciones posibles en dos ganaría, en la tercera se competiría y las opciones que elegí eran de lo mejor que hay en el mundo Java, BS está bien armado.</p>
<p>Con el desarrollo de Blog Stack he tenido que resolver unos cuantos problemas, en posteriores entradas explicaré como he implementado las soluciones a algunas funcionalidades que son comunes a los proyectos web, como la correspondencia entre las urls y los artículos o etiquetas para <a href="https://picodotdev.github.io/blog-bitix/2014/10/generar-urls-semanticas-y-amigables/">no poner identificadores de entidades de la base de datos en las urls y que queden más limpias y amigables</a>, como hacer la transliteración de los títulos de las entradas para la construcción de las urls, como obtener un extracto de la entrada (puede parecer simple pero no lo es tanto), como usar un servidor embebido que sirva el contenido estático o como procesar recursos estáticos como archivos less para generar el css con <a href="https://code.google.com/p/wro4j/">wro4j</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/">Presentación de Blog Stack</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/</id>
        <title>Presentación de Blog Stack</title>
        <updated>2014-05-06T21:00:00+02:00</updated>
        <published>2014-05-04T11:51:38+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/blogstack.webp" width="300" height="65" alt="Blog Stack" title="Blog Stack" class="" loading="false&#34;"></p>
</div>
<p>Con este artículo quiero presentar un nuevo proyecto, Blog Stack. <a href="http://www.blogstack.info/">Blog Stack</a> (BS) es una agregador, planeta, o fuente de información de bitácoras sobre programación, desarrollo, desarrollo ágil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnología.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/images/blogstack-portada_hu340b56fc393dee703dec6a4fb7fc71ae_275117_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Portada de Blog Stack"><img src="https://picodotdev.github.io/blog-bitix/2014/05/presentacion-blog-stack/images/blogstack-portada_hu340b56fc393dee703dec6a4fb7fc71ae_275117_300x200_fit_q90_h2_box_3.webp" width="216" height="200" alt="Portada de Blog Stack" title="Portada de Blog Stack" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Otro agregador o planeta no es ninguna idea nueva pero BS incorpora alguna cosa adicional como poder suscribirse a únicamente el contenido etiquetado en que cada uno esté interesando (programación, desarrollo-ágil, java, python, linux, ubuntu, &hellip;) o recibir el contenido publicado en todas las bitácoras agregadas sin tener que suscribirse individualmente a cada una de ellas. BS aún está en desarrollo y posiblemente vaya incorporando nuevas ideas que me surjan o se me propongan pero en el estado actual ya cumple con la función básica de agregador.</p>
<p>Como comento en la <a href="http://www.blogstack.info/faq">página de pregutnas frecuentes</a> hay varios motivos por los que he iniciado el proyecto, la semilla es que quería hacer un proyecto personal con cierta utilidad para otras personas empleando de alguna forma el <em>framework</em> para el desarrollo de aplicaciones web <a href="http://tapestry.apache.org/">Apache Tapestry</a>. Como catalizador de la semilla ha sido que recientemente, abril de 2014, <a href="http://planetalinux.org/">Planeta Linux</a> ha dejado de estar accesible dejando un gran vacío entre las bitácoras sobre gnu/linux y el software libre y por tanto al igual que en el caso de muchos otros blogeros los artículos que publicaba en mi bitácora sobre estos temas ya no son agregados en este planeta y van a dejar de llegar a muchos potenciales lectores. Al menos, solo ha sido durante unas semanas, después de escribir un correo electrónico a la persona que se encarga de su mantenimiento preguntándole por la situación finalmente Planeta Linux está disponible. Por otro lado también tengo mi bitácora agregada a <a href="http://planetacodigo.com/">Planeta Código</a> y <a href="http://bitacoras.com/">Bitacoras.com</a> pero creo que se les podría hacer algunos añadidos para tener un mejor agregador, planeta, o fuente de información o al menos con alguna idea diferente. Desde darle un mejor aspecto hasta el permitir incluir el contenido que en la mayoría de agregadores es filtrado por seguridad como <a href="https://www.youtube.com/">vídeos de Youtube</a> o <a href="http://vimeo.com/">Vimeo</a>, <a href="http://speakerdeck.com/">presentaciones de Speaker Deck</a>, <a href="http://gist.github.com/">Gist de GitHub</a>, <a href="http://disqus.com/">comentarios de Disqus</a> y permitir monetizar el contenido con <a href="https://www.google.com/adsense/">publicidad de AdSense</a> o el programa de <a href="https://afiliados.amazon.es/">afiliados de Amazon</a> directamente desde Blog Stack. Como decía a través de las etiquetas los lectores pueden suscribirse únicamente a los temas que les interesen sin tener que suscribirse a cada bitácora de forma individual o descubrir nuevas bitácoras que se agreguen y su contenido sin tener que buscarlas. Otro planeta en el que tengo mi <a href="https://elblogdepicodev.blogspot.com.es/">antigua bitácora</a> agregada es <a href="http://planeta.archlinux-es.org/">Planeta Arch Linux</a> pero aún estoy esperando a que me agreguen <a href="https://picodotdev.github.io/blog-bitix/">el nuevo</a> supongo que por falta de tiempo por parte de las personas encargadas de su mantenimiento, en cualquier caso tampoco he recibido al menos una respuesta.</p>
<p>También quería poner a las bitácoras personales y al contenido, en los que algunos se escriben valiosas píldoras de conocimiento concentrado, en el lugar que se merecen en esta época de redes sociales en las que lo relevante es compartirlo o comentarlo, esto también es importante y valioso pero no siempre más que el propio contenido que parece que queda relegado en un segundo plano más allá de los titulares o entradillas. Por último, a veces encontrar las bitácoras de esas personas que publican contenido interesante no siempre es sencillo y a las nuevas bitácoras en los inicios les cuesta llegar a un número amplio de lectores hasta que es conocido o indexado en las páginas de resultados de los buscadores en las primeras posiciones. Blog Stack permitirá descubrir nuevo contenido a través de las etiquetas en las que se publican los artículos, también permitirá descubrir nuevas bitácoras que se agreguen y quizá en un futuro a medida que se vaya conociendo y en el que se vayan agregando bitácoras y atrayendo lectores hacer que el inicio de una bitácora no sea escribir para uno mismo.</p>
<p>Blog Stack es algo más que el agregador, es software libre con <a href="http://www.gnu.org/licenses/agpl-3.0.html">licencia AGPL</a> y el <a href="https://github.com/picodotdev/blog-stack">código fuente</a> usado para generarlo está disponible en un repositorio de GitHub. Cualquiera podría usarlo para crear un agregador de temática similar o de otra (deportes, música, conciertos, cocina, arte, ciencia, educación, ocio, juegos, moda, noticias, literatura, cine, sociedad, economía, política, &hellip;) y con las herramientas que ofrece GitHub cualquiera podría colaborar con su desarrollo, es más, sería bien recibido, a través de código con «pull request» o creando «issues» con cualquier sugerencia o problema que se detecte. Blog Stack está desarrollado usando <a href="https://www.oracle.com/es/technologies/java/overview/index.html">Java</a> y el <em>framework</em> <a href="http://tapestry.apache.org/">Apache Tapestry</a> no como aplicación web sino como motor de plantillas para generar el contenido. Usar Tapestry de esta forma no es lo habitual pero el modelo «pull» seguido por Tapestry en las plantillas que generan el html y el conjunto controlador + plantilla que siguen los componentes me resulta mejor que la separación entre controlador y vista que es lo habitual en encontrar en la mayoría de motores de plantillas o <em>frameworks</em> web. Además, si en un futuro BS se generase en vez como contenido estático mediante una aplicación web prácticamente podría reutilizar todo el código de la aplicación. El funcionamiento de BS es similar a <a href="http://octopress.org/">Octopress</a> (con el que estoy bastante contento al usarlo en mi bitácora) generando el sitio de forma estática en <a href="https://www.openshift.com/">OpenShift</a> y posteriormente hospedado en <a href="https://pages.github.com/">GitHub Pages</a>, generar el contenido de forma estática tiene algunas limitaciones pero por el momento es suficiente y para el proyecto es importante que sea una solución cuyo coste sea bajo. En el inicio está solo en la compra del dominio, con <a href="http://dondominio.com/">DonDominio</a> 10 € anuales. Con un poco de suerte la publicidad permitirá que BS genere en ingresos sus propios gastos lo que garantiza que el coste no lo asuma yo, si fuera así posiblemente pasado un tiempo provocaría que acabase cerrando el servicio.</p>
<p>Si tienes una bitácora sobre programación, desarrollo ágil, software, software libre, gnu/linux, hardware, tecnología o demás temas relacionados solo tienes que indicármelo como explico en la <a href="http://www.blogstack.info/faq">página de preguntas frecuentes</a> y en un poco de tiempo haré que BS agregue el contenido de tu bitácora. Y si estás interesado en información sobre estos temas y quieres descubrir nuevo contenido solo debes suscribirte a alguna de las etiquetas o a la <a href="http://www.blogstack.info/feed.atom.xml">fuente atom de la portada</a>. Por el momento, solo esta agregado el contenido de mis bitácoras pero espero que después de leer esta presentación algunos blogeros se animen a que agregue su contenido.</p>
<p>En las próximas semanas publicaré en mi blog de forma más detallada <a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/">como está montado tecnológicamente Blog Stack por 10 € al año</a> y como he resuelto algunos asuntos comunes en las páginas o aplicaciones web.</p>
<p>¡Hola planeta!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/05/arquitectura-y-hospedaje-de-blog-stack/">Arquitectura y hospedaje de Blog Stack</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="gnu-linux"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/</id>
        <title>Introducción a Elasticsearch</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2014-04-25T17:15:05+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Elasticsearch es una potente herramienta que nos permite indexar una gran volumen de datos y posteriormente hacer consultas sobre ellos soportando entre otras muchas cosas búsquedas aproximadas, facetas y resaltado. Un uso puede ser hacer consultas de texto completo, al estar los datos indexados los resultados se obtienen de forma muy rápida.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/elastic-elasticsearch.svg" width="200" height="200" alt="Elasticsearch" title="Elasticsearch" class="" loading="false&#34;"></p>
</div>
<p>Continuando con la forma de como dar solución a la búsquedas en las entidades de dominio en esta entrada profundizaré en la solución que comentaba de usar <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>. Elasticsearch se basa en <a href="https://lucene.apache.org/core/">Lucene</a> pero expone su funcionalidad a través de una interfaz REST recibiendo y enviando datos en formato JSON y oculta mediante esta interfaz los detalles internos de Lucene. Esta interfaz permite que pueda ser utilizada por cualquier plataforma no solo Java, puede usarse desde Python, .NET, PHP o incluso desde un navegador con JavaScript. Es persistente, es decir, que lo que indexemos en ella sobrevivirá a un reinicio del servidor.</p>
<p>Como comentaba en <a href="https://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html">el artículo anterior de búsquedas sobre entidades de dominio</a> ES nos puede servir para hacer búsquedas a texto completo pero también podemos hacer otra serie de cosas adicionales que no podemos con una base de datos relacional aunque soporte en su lenguaje SQL búsqueda a texto completo, por ejemplo, resaltado (highlight) y facetas (facets), también permite hacer búsquedas vagas (fuzzy) y soporta diferentes analizadores según el idioma de la propiedad en que se busque. El indexar y desindexar los datos en elasticsearch para que luego puedan ser buscados es responsabilidad nuestra y además de insertarlos o eliminarlos en la base de datos debemos hacer lo mismo en ES ya sea haciéndolo en ambos sitios a la vez o mediante un proceso de fondo que se encargue de ello.</p>
<p>La instalación de ES es muy sencilla, basta con <a href="https://www.elastic.co/es/downloads/">descargar el zip de su distribución</a>, descomprimirlo e iniciarlo con el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ elasticsearch&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-1.sh</span>
    </div>
</div>
<p>Después de unos segundos deberemos ver algo como lo siguiente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/images/elasticsearch_hu7ee877f142c7fa41ee5fe0416e5b8906_76248_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/images/elasticsearch_hu7ee877f142c7fa41ee5fe0416e5b8906_76248_300x200_fit_q90_h2_box_3.webp" width="300" height="126" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Elasticsearch usa sus propios conceptos y aunque no es una base de datos relacional algunos pueden ser similares. Lo que en en una base de datos relacional es un esquema en ES es un índice, lo que en la primera es una tabla en ES es un tipo, continuando una fila en ES es un documento y finalmente una columna es una propiedad en ES.</p>
<p>La documentación de Elasticsearch es un documentación de referencia probablemente pero para aprender a sacarle el máximo provecho probablemente debamos buscar algún manual o libro que nos lo explique de una forma más didáctica. Algunas opciones son el libro <a href="https://exploringelasticsearch.com/">Exploring Elasticsearch</a> y el <a href="https://www.elasticsearchtutorial.com/">tutorial Elasticsearch</a>.</p>
<p>Veamos como crear y borrar un índice, para ello utilizaremos la herramienta curl:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XPUT <span class="s1">&#39;http://localhost:9200/blogbitix&#39;</span>&#10;</span></span><span class="line"><span class="cl">$ curl -XDELETE <span class="s1">&#39;http://localhost:9200/blogbitix&#39;</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-2.sh</span>
    </div>
</div>
<p>Aunque Elasticsearch es orientado a documentos y estos no tienen que adherirse a un esquema como en una base de datos relacional, podemos instruir a Elasticsearch como queremos que haga las búsquedas sobre los campos del documento. Para ello definimos la correspondencia (mapping). A continuación pondré el caso hipotético de un tipo libro que tiene las propiedades de nombre y descripción en varios idiomas, una serie de etiquetas para catalogarlo y una cantidad.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XPUT <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_mapping&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;properties&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;nombre&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;type&#34; : &#34;object&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;properties&#34; : { &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: { &#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;analyzed&#34;, &#34;analyzer&#34; : &#34;spanish&#34; },&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: { &#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;analyzed&#34;, &#34;analyzer&#34; : &#34;english&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;descripcion&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;type&#34; : &#34;object&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;properties&#34; : { &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: { &#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;analyzed&#34;, &#34;analyzer&#34; : &#34;spanish&#34;, &#34;store&#34;: &#34;yes&#34; },&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: { &#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;analyzed&#34;, &#34;analyzer&#34; : &#34;english&#34;, &#34;store&#34;: &#34;yes&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;etiquetas&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;type&#34; : &#34;object&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;properties&#34; : { &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: { &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;type&#34; : &#34;multi_field&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fields&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;term&#34; : { &#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;analyzed&#34;, &#34;analyzer&#34; : &#34;spanish&#34; },&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;untouched&#34; : {&#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;not_analyzed&#34;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: { &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;type&#34; : &#34;multi_field&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fields&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;term&#34; : { &#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;analyzed&#34;, &#34;analyzer&#34; : &#34;english&#34; },&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;untouched&#34; : {&#34;type&#34; : &#34;string&#34;, &#34;index&#34; : &#34;not_analyzed&#34;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;cantidad&#34; : { &#34;type&#34; : &#34;long&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-3.sh</span>
    </div>
</div>
<p>Con la siguiente petición podemos ver el mapeo de un tipo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_mapping?pretty=true&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-4.sh</span>
    </div>
</div>
<p>El mapeo no es necesario definirlo previamente pero es aconsejable para ciertas propiedades sino queremos que ES tome valores por defecto o haga suposiciones, a continuación insertamos los documentos. Cada documento tiene un identificativo que deberemos asignarle y para indexarlo básicamente proporcionamos un JSON con las propiedades del documento. Elasticsearch se encargará de indexarlo para que una búsqueda posterior se ejecute rápidamente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XPUT <span class="s1">&#39;http://localhost:9200/blogbitix/libro/1&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;nombre&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: &#34;PlugIn Tapestry&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: &#34;PlugIn Tapestry&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;descripcion&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: &#34;Desarrollo de aplicaciones y páginas web con Apache Tapestry&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: &#34;Development of applications and web pages with Apache Tapestry&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;etiquetas&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: [&#34;libro&#34;, &#34;tecnologia&#34;, &#34;tapestry&#34;, &#34;java&#34;, &#34;español&#34;],&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: [&#34;book&#34;, &#34;tecnology&#34;, &#34;tapestry&#34;, &#34;java&#34;, &#34;spanish&#34;]&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;cantidad&#34; : 1000&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ curl -XPUT <span class="s1">&#39;http://localhost:9200/blogbitix/libro/2&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;nombre&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: &#34;Tapestry 5 - Desarrollo rápido de aplicaciones web en Java&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: &#34;Tapestry 5 - Rapid web application development in Java&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;descripcion&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: &#34;Una guía completa presentando Apache Tapestry y su aproximación inovadora para la construcción de aplicaciones web modernas&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: &#34;A comprehensive guide, introducing Apache Tapestry and its innovative approach to building modern web applications&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;etiquetas&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: [&#34;libro&#34;, &#34;tecnologia&#34;, &#34;tapestry&#34;, &#34;java&#34;, &#34;inglés&#34;],&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: [&#34;book&#34;, &#34;tecnology&#34;, &#34;tapestry&#34;, &#34;java&#34;, &#34;english&#34;]&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;cantidad&#34; : 1000&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">$ curl -XPUT <span class="s1">&#39;http://localhost:9200/blogbitix/libro/3&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;nombre&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: &#34;Tapestry in Action&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: &#34;Tapestry in Action&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;descripcion&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: &#34;Tapestry in Action e la introducción definitiva a Tapestry 3 escrito por Howard Lewis Ship, el creador de Tapestry&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: &#34;Tapestry in Action is the definitive introduction to Tapestry 3 written by Howard Lewis Ship, the creator of Tapestry&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;etiquetas&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;es&#34;: [&#34;libro&#34;, &#34;tecnologia&#34;, &#34;tapestry&#34;, &#34;java&#34;, &#34;inglés&#34;],&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;en&#34;: [&#34;book&#34;, &#34;tecnology&#34;, &#34;tapestry&#34;, &#34;java&#34;, &#34;english&#34;]&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;cantidad&#34; : 1000&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-5.sh</span>
    </div>
</div>
<p>Con las anteriores peticiones hemos indexado 3 documentos, podemos ver los datos de cada uno de ellos con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/1&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-6.sh</span>
    </div>
</div>
<p>Una vez tenemos unos cuantos documentos indexados en ES podemos empezar a hacer búsquedas. Elasticsearch para hacer las búsquedas usa su propio lenguaje de DSL, no es sencillo y la documentación de ES no es muy útil para aprender a como usarla. Pondré algunos ejemplos simples, probablemente no reales y no representativos de todo el potencial que puede ofrecer ES. El primero es una búsqueda por una determinada palabra.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fuzzy&#34; : { &#34;descripcion.es&#34;: &#34;tapestry&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-7.sh</span>
    </div>
</div>
<p>Una búsqueda similar a la anterior pero con más condiciones, exigiendo que no tenga unas palabras en concreto y algunas que deberían tener haciendo que ES valore más los documentos que las tengan.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;bool&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;must&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fuzzy&#34; : { &#34;descripcion.es&#34;: &#34;tapestry&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;must_not&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;query_string&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fields&#34; : [&#34;descripcion.es&#34;],&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : &#34;\&#34;tapestry 3\&#34;&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;should&#34; : [{ &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;match&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;descripcion.es&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : &#34;guía&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;type&#34; : &#34;phrase&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}]&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-8.sh</span>
    </div>
</div>
<p>Además de búsquedas ES puede ofrecernos más funcionalidades como las facetas con las que podemos obtener un sumatorio de los resultados. En la siguiente consulta buscamos los documentos con una determinada palabra y además le pedimos a ES que nos devuelva cuantos documentos hay que cumplan ese criterio en cada etiqueta. Esto probablemente es lo que usen en la tienda de Amazon cuando muestran cuantos elementos hay en las diferentes categorizaciones. Aunque en Amazon solo muestran las categorías de los elementos buscados probablemente podrían mostrar cuantos elementos hay en cada una de esas categorías.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fuzzy&#34; : { &#34;descripcion.es&#34;: &#34;tapestry&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;facets&#34;: {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;etiquetas&#34;: { &#34;terms&#34;: { &#34;field&#34;: &#34;etiquetas.es.untouched&#34; } }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-9.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/images/categorias-amazon_hu1dcef78c0f3b8024ebdf2c7c44f6bce9_17382_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Categorías de productos (facets) en Amazon"><img src="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/images/categorias-amazon_hu1dcef78c0f3b8024ebdf2c7c44f6bce9_17382_300x200_fit_q90_h2_box_3.webp" width="85" height="200" alt="Categorías de productos (facets) en Amazon" title="Categorías de productos (facets) en Amazon" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Otra de las funcionalidades que nos puede interesar es que ES nos ofrezca sugerencias para determinados términos, en el siguiente ejemplo solicitamos además de la búsqueda sugerencias para algunas palabras que tienen fallos de escritura.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fuzzy&#34; : { &#34;descripcion.es&#34;: &#34;tapestry&#34; }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;suggest&#34;: {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;suggest1&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;text&#34; : &#34;tapestyr desarrallo&#34;,&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;term&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;field&#34; : &#34;descripcion.es&#34;  &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-10.sh</span>
    </div>
</div>
<p>Finalmente, otra cosa que nos puede interesar es que ES nos resalte las palabras de determinados campos para destacar las coincidencias de los resultados de forma visual que se han encontrado. Esto necesita { store: &ldquo;yes&rdquo; } en la correspondencia de la propiedad.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -XGET <span class="s1">&#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39;</span> -d <span class="s1">&#39;{&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;query_string&#34;: {  &#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;query&#34;: &#34;Tapestry&#34;&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;},&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&#34;highlight&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;fields&#34; : {&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#34;descripcion.es&#34; : { }&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">&nbsp;&nbsp;&nbsp;&nbsp;}&#10;</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-11.sh</span>
    </div>
</div>
<p>Estos son solo unos pocos ejemplos, ES seguro que puede ofrecer muchas cosas más que leyendo solo la documentación de referencia es difícil descubrir. Unos buenos libros que explican muchas de las posibilidades y opciones de forma más didáctica son <a href="https://amzn.to/2sChYkF">Elasticsearch: The Definitive Guide</a> y/o <a href="https://amzn.to/37GgF31">Elasticsearch Server</a>, en algunos casos la documentación propia del proyecto es suficiente pero en el caso de Elasticsearch algunos libros como estos son casi necesarios para dominarlo.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1449358543&amp;linkId=f844862e917834820c94b2dbae241b1c" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00JXLF7AK&amp;linkId=b790502cf2724f0007de5bc473e81c9e" title="Amazon" class="lozad"></iframe>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html">Búsquedas de texto completo en objetos de dominio</a></li>
<li><a href="http://www.elasticsearch.org">Elasticsearch</a></li>
<li><a href="http://exploringelasticsearch.com/">Exploring Elasticsearch</a></li>
<li><a href="http://www.elasticsearchtutorial.com/">Tutorial Elasticsearch</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/</id>
        <title>Ejemplo lista de tareas con Backbone y React</title>
        <updated>2015-10-01T20:00:00+02:00</updated>
        <published>2014-04-11T16:33:28+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>He desarrollado este ejemplo de lista de tareas usando diferentes herramientas javascript primeramente con solo Backbone y después con Marionette. En este caso realizaré el mismo ejemplo para ver las diferencias usando la combinación Backbone para los modelos y React para las vistas junto con otras herramientas como ReactJS, Mustache, Jasmine, Grunt e i18n. Un ejemplo bastante completo de lo que ofrece javascript en estos momentos con la composición de herramientas que más me ha gustado.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/backbone.svg" width="200" height="35" alt="Backbone" title="Backbone" class="" loading="false&#34;"></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/react.svg" width="200" height="200" alt="React" title="React" class="" loading="false&#34;"></p>
</div>
<p>En anteriores entradas explicaba como hacer el típico ejemplo que se suele usar como demostración en los <em>framework</em> MVC de JavaScript que consiste en una lista de tareas en la que se pueden añadir nuevas, marcarlas como completadas y eliminarlas. Realice este ejemplo en uno de ellos <a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">usando solo Backbone</a> y posteriormente <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">usando Marionette</a>. Estos ejemplos eran parte de una serie de artículos sobre JavaScript que la que mostraba como usar muchas otras herramientas como <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Require JS</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Mustache</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">logging con javscript</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">capturar errores en javascript</a>, <a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">introducción a Backbone</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">lista de tarea con Backbone, RESTEasy y Tapestry</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">pruebas unitarias con Jasmine y Sinon</a>, <a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código JavaScript</a> y que constituyen parte del actual «estado del arte» en cuanto a desarrollo con JavaScript.</p>
<p>La lista de tareas aunque es un ejemplo sencillo sirve perfectamente como ejercicio para mostrar el uso de los <em>frameworks</em> MVC. En esta entrada voy a mostrar como hacer el mismo ejemplo usando <a href="http://backbonejs.org/">Backbone</a> y <a href="https://reactjs.org/">React</a> y veremos, en mi opinión, que el ejemplo es mucho mas sencillo y lógico.</p>
<p>La parte más complicada y menos intuitiva del ejemplo de la lista de tareas con solamente Backbone o con <a href="https://marionettejs.com/">Marionette</a> probablemente era la V del MVC. Backbone es un <em>framework</em> que deja bastante libertad al desarrollador pudiendo usar únicamente las partes que necesitemos de él, sin embargo, esta sencillez nos obliga a gestionar ciertas «tareas de fontanería» y repetitivas nosotros mismos como la gestión de las vistas y la memoria. Marionette trata de dar solución a parte de estas tareas necesarias además de proporcionar unas guías y arquitectura para el desarrollo de las aplicaciones. Sin embargo, aún con Marionette la construcción de la parte de la vista con el uso de ItemView, CollectionView y Layout comentados en la <a href="https://github.com/marionettejs/backbone.marionette">documentación</a> me resultó poco intuitivo y en cierta medida todavía complicado, no acabé convencido del todo, con React he acabado con la sensación que hacer algo más complejo que este ejemplo es algo al menos manejable.</p>
<p>React es una librería que en algunos casos se está usando en aplicaciones junto con Backbone para proporcionar la parte de la vista y controlador que en conjunto definen lo que en React se conoce como un componente. De esta manera Backbone proporciona los modelos, eventos, routing , &hellip; y React proporciona la representación de esos modelos en html y el código encargado de gestionar el estado de esa vista. React tiene ciertas ventajas adicionales por su funcionamiento y es que cuando se cambia algo en la vista no se reemplaza el html completo de la vista y se inserta uno nuevo sino que React busca las diferencias entre la vista actual y la nueva y realiza únicamente los cambios necesarios para tener la vista nueva, esto tiene la ventaja de que el proceso es más eficiente y rápido y puede notarse en aplicaciones con muchos datos gestionados en el cliente. Pero lo que más me ha gustado de React es la definición del concepto de componente (vista + controlador) que por una parte hace que la creación de las vistas sea mucho más sencilla e intuitiva que en Backbone o Marionette y que junto con el controlador permite crear piezas reusables de código.</p>
<p>Los componentes de React reemplazan a las vistas de Backbone y vistas, controladores y layouts de Marionette. En el nuevo ejemplo los cambios principales se encuentran en el archivo tareas.js que contiene el código de la aplicación de lista de tareas.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span><span class="lnt">172&#10;</span><span class="lnt">173&#10;</span><span class="lnt">174&#10;</span><span class="lnt">175&#10;</span><span class="lnt">176&#10;</span><span class="lnt">177&#10;</span><span class="lnt">178&#10;</span><span class="lnt">179&#10;</span><span class="lnt">180&#10;</span><span class="lnt">181&#10;</span><span class="lnt">182&#10;</span><span class="lnt">183&#10;</span><span class="lnt">184&#10;</span><span class="lnt">185&#10;</span><span class="lnt">186&#10;</span><span class="lnt">187&#10;</span><span class="lnt">188&#10;</span><span class="lnt">189&#10;</span><span class="lnt">190&#10;</span><span class="lnt">191&#10;</span><span class="lnt">192&#10;</span><span class="lnt">193&#10;</span><span class="lnt">194&#10;</span><span class="lnt">195&#10;</span><span class="lnt">196&#10;</span><span class="lnt">197&#10;</span><span class="lnt">198&#10;</span><span class="lnt">199&#10;</span><span class="lnt">200&#10;</span><span class="lnt">201&#10;</span><span class="lnt">202&#10;</span><span class="lnt">203&#10;</span><span class="lnt">204&#10;</span><span class="lnt">205&#10;</span><span class="lnt">206&#10;</span><span class="lnt">207&#10;</span><span class="lnt">208&#10;</span><span class="lnt">209&#10;</span><span class="lnt">210&#10;</span><span class="lnt">211&#10;</span><span class="lnt">212&#10;</span><span class="lnt">213&#10;</span><span class="lnt">214&#10;</span><span class="lnt">215&#10;</span><span class="lnt">216&#10;</span><span class="lnt">217&#10;</span><span class="lnt">218&#10;</span><span class="lnt">219&#10;</span><span class="lnt">220&#10;</span><span class="lnt">221&#10;</span><span class="lnt">222&#10;</span><span class="lnt">223&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;tareas&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;underscore&#39;</span><span class="p">,</span> <span class="s1">&#39;backbone&#39;</span><span class="p">,</span> <span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;mustache&#39;</span><span class="p">,</span> <span class="s1">&#39;plantillas&#39;</span><span class="p">,</span> <span class="s1">&#39;i18n!i18n/nls/mensajes&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">React</span><span class="p">,</span> <span class="nx">Mustache</span><span class="p">,</span> <span class="nx">Plantillas</span><span class="p">,</span> <span class="nx">Mensajes</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">plantilla</span><span class="p">,</span> <span class="nx">datos</span><span class="p">,</span> <span class="nx">mensajes</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">datos</span> <span class="o">||</span> <span class="p">{};</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">mensajes</span> <span class="o">||</span> <span class="p">{};</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">vista</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nx">message</span><span class="o">:</span> <span class="nx">m</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">Plantillas</span><span class="p">[</span><span class="nx">plantilla</span><span class="p">];</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">pp</span> <span class="o">=</span> <span class="nx">p</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">pp</span><span class="p">(</span><span class="nx">vista</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// An example generic Mixin that you can add to any component that should react&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to changes in a Backbone component. The use cases we&#39;ve identified thus far&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// are for Collections -- since they trigger a change event whenever any of&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// their constituent items are changed there&#39;s no need to reconcile for regular&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// models. One caveat: this relies on getBackboneModels() to always return the&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// same model instances throughout the lifecycle of the component. If you&#39;re&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// using this mixin correctly (it should be near the top of your component&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// hierarchy) this should not be an issue.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">BackboneMixin</span> <span class="o">=</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="c1">// Whenever there may be a change in the Backbone data, trigger a reconcile.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">this</span><span class="p">.</span><span class="nx">getBackboneModels</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add change remove reset&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kc">null</span><span class="p">),</span> <span class="k">this</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">},</span> <span class="k">this</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="c1">// Ensure that we clean up any dangling references when the component is&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// destroyed.&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">this</span><span class="p">.</span><span class="nx">getBackboneModels</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">model</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">},</span> <span class="k">this</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">Tarea</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">urlRoot</span> <span class="o">:</span> <span class="s1">&#39;rest/tareas/tarea&#39;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">defaults</span> <span class="o">:</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nx">id</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nx">descripcion</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nx">completada</span> <span class="o">:</span> <span class="kc">false</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">toogle</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">,</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">Tareas</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;rest/tareas&#39;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">model</span><span class="o">:</span> <span class="nx">Tarea</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">findCompletadas</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">tarea</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">removeCompletadas</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">findCompletadas</span><span class="p">(),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">tarea</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">TareaComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">ui</span> <span class="o">=</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">completada</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=completada]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">())</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">			&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">completada</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">_this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">toogle</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">_this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>		&#10;</span></span><span class="line"><span class="cl">		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">//			return (&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//				&lt;label className=&#34;checkbox&#34;&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;input type=&#34;checkbox&#34; name=&#34;completada&#34; checked={(this.props.tarea.get(&#39;completada&#39;))?&#39;checked&#39;:&#39;&#39;}/&gt; &lt;span className={this.props.tarea.completada}&gt;{this.props.tarea.get(&#39;descripcion&#39;)}&lt;/span&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//				&lt;/label&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//			);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">label</span><span class="p">({</span><span class="nx">className</span><span class="o">:</span><span class="s1">&#39;checkbox&#39;</span><span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">input</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;checkbox&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;completada&#39;</span><span class="p">,</span> <span class="nx">checked</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">))</span><span class="o">?</span><span class="s1">&#39;checked&#39;</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">}),</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">span</span><span class="p">({</span><span class="nx">className</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">completada</span><span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;descripcion&#39;</span><span class="p">))</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">TareasComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">tareas</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">//		&nbsp;&nbsp;&nbsp;&nbsp;	return (&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//		&nbsp;&nbsp;&nbsp;&nbsp;		&lt;li&gt;&lt;TareaComponent tarea={tarea}/&gt;&lt;/li&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//		&nbsp;&nbsp;&nbsp;&nbsp;	);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">li</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">						<span class="nx">TareaComponent</span><span class="p">({</span><span class="nx">tarea</span><span class="o">:</span><span class="nx">tarea</span><span class="p">})</span>&#10;</span></span><span class="line"><span class="cl">				<span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">},</span> <span class="k">this</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">//			return (&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//				&lt;ul&gt;{tareas}&lt;/ul&gt;				&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//			);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">ul</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">tareas</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">EstadoComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getData</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="s1">&#39;COMPLETADAS_tareas_de_TOTAL_completadas&#39;</span><span class="o">:</span> <span class="nx">Mustache</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">Mensajes</span><span class="p">.</span><span class="nx">COMPLETADAS_tareas_de_TOTAL_completadas</span><span class="p">,</span> <span class="nx">d</span><span class="p">),</span>&#10;</span></span><span class="line"><span class="cl">				<span class="s1">&#39;Muy_bien_has_completado_todas_las_tareas&#39;</span><span class="o">:</span> <span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Muy_bien_has_completado_todas_las_tareas</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">estado</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span><span class="s1">&#39;estado&#39;</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">m</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">//			return (&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//				&lt;span className=&#34;estado&#34;&gt;{estado}&lt;/span&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//			);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">span</span><span class="p">({</span><span class="nx">className</span><span class="o">:</span><span class="s1">&#39;estado&#39;</span><span class="p">},</span> <span class="nx">estado</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Métodos&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">getData</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">completadas</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">findCompletadas</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">completadas</span><span class="o">:</span> <span class="nx">completadas</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">total</span><span class="o">:</span> <span class="nx">total</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">TareasApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span><span class="nx">BackboneMixin</span><span class="p">],</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">getBackboneModels</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">];</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="p">{</span><span class="nx">tareas</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Tareas</span><span class="p">()};</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">ui</span> <span class="o">=</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">nuevaTarea</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=nuevaTarea]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">()),</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">limpiar</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=limpiar]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">())</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">};</span>&#10;</span></span><span class="line"><span class="cl">			&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Eventos&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">keypress</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="c1">// Comprobar si la tecla pulsada es el return&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="kd">var</span> <span class="nx">descripcion</span> <span class="o">=</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">					<span class="c1">// Comprobar si se ha introducido descripción de la tarea&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">if</span> <span class="p">(</span><span class="nx">descripcion</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">						<span class="k">return</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">					<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">					<span class="c1">// Añadir la tarea y limpiar el input&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="kd">var</span> <span class="nx">tarea</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tarea</span><span class="p">({</span>&#10;</span></span><span class="line"><span class="cl">						<span class="nx">descripcion</span><span class="o">:</span> <span class="nx">descripcion</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">						<span class="nx">completada</span><span class="o">:</span> <span class="kc">false</span>&#10;</span></span><span class="line"><span class="cl">					<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">_this</span><span class="p">.</span><span class="nx">addTarea</span><span class="p">(</span><span class="nx">tarea</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">_this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">				<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">limpiar</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="nx">_this</span><span class="p">.</span><span class="nx">removeTareasCompletadas</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">		&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">//			return (&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//				&lt;div&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;h2&gt;{Mensajes.Lista_de_tareas}&lt;/h2&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;input type=&#34;text&#34; name=&#34;nuevaTarea&#34; className=&#34;form-control&#34; placeholder={Mensajes.Introduce_una_nueva_tarea} /&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;TareasComponent tareas={this.state.tareas} /&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;EstadoComponent tareas={this.state.tareas} /&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;br/&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//					&lt;input type=&#34;button&#34; name=&#34;limpiar&#34; value={Mensajes.Limpiar} disabled={(this.isTareasCompletadas())?null:&#39;disabled&#39;} className=&#34;btn&#34; /&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//				&lt;/div&gt;&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">//			);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">div</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">h2</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Lista_de_tareas</span><span class="p">),</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">input</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;nuevaTarea&#39;</span><span class="p">,</span> <span class="nx">className</span><span class="o">:</span><span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="nx">placeholder</span><span class="o">:</span><span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Introduce_una_nueva_tarea</span><span class="p">}),</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">TareasComponent</span><span class="p">({</span><span class="nx">tareas</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">}),</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">EstadoComponent</span><span class="p">({</span><span class="nx">tareas</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">}),</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">br</span><span class="p">(),</span>&#10;</span></span><span class="line"><span class="cl">					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">input</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;limpiar&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span><span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Limpiar</span><span class="p">,</span> <span class="nx">disabled</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isTareasCompletadas</span><span class="p">())</span><span class="o">?</span><span class="s1">&#39;&#39;</span><span class="o">:</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="nx">className</span><span class="o">:</span><span class="s1">&#39;btn&#39;</span><span class="p">})</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Métodos&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">isTareasCompletadas</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">findCompletadas</span><span class="p">().</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">addTarea</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tarea</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="nx">tarea</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">removeTareasCompletadas</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">removeCompletadas</span><span class="p">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">resetTareas</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tareas</span><span class="p">)</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span><span class="nx">tareas</span><span class="p">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">},</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="c1">// Con reset:true solo se lanza un evento para todos los cambios que se produzcan en la colección&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span><span class="nx">reset</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">});</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">Tarea</span><span class="o">:</span> <span class="nx">Tarea</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">Tareas</span><span class="o">:</span> <span class="nx">Tareas</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">TareaComponent</span><span class="o">:</span> <span class="nx">TareaComponent</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">TareasComponent</span><span class="o">:</span> <span class="nx">TareasComponent</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">EstadoComponent</span><span class="o">:</span> <span class="nx">EstadoComponent</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nx">TareasApp</span><span class="o">:</span> <span class="nx">TareasApp</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">};</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>tareas.js</span>
    </div>
</div>
<p>El resultado es el siguiente:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/images/backbone-react_hua47f19bdb771f96b8f9ecc179db0dc06_133834_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/images/backbone-react_hua47f19bdb771f96b8f9ecc179db0dc06_133834_300x200_fit_q90_h2_box_3.webp" width="237" height="200" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Los elementos de las vistas se recomienda definirlas con los elementos que proporciona React con React.DOM, pueden definirse más al estilo de html con jsx pero esto hace que el javascript haya de compilarse para transformar ese jsx/html a los elementos React.DOM, el mayor problema es que esto es un proceso costoso lo que puede ralentizar la carga de una página y que el compilador tiene un tamaño considerable de unos 300 KiB. El JSX es más claro y parecido al resultado final que el código equivalente React.DOM pero aún así el código javascript es suficientemente claro. Si aún así quisiésemos usar JSX lo recomendable sería que los archivos con contenido jsx se precompilase en un momento anterior de enviarlo al cliente, posiblemente antes del despliegue de la aplicación en el servidor.</p>
<p>Para probar el código podemos hacerlo abriendo el archivo test/javascript/SpecRunner.html, sin embargo, deberemos hacerlo con Chrome o Chromium y lanzándolo con un parámetro opcional para permitir la carga de los archivos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ chromium --allow-file-access-from-files&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>chromium.sh</span>
    </div>
</div>
<p>También podríamos probarlo usando gradle con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew jasmine&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew.sh</span>
    </div>
</div>
<p>Sin embargo, <a href="http://phantomjs.org/">PhantomJS</a> que es lo que se utiliza para simular el navegador en las pruebas con jasmine y grunt, no soporta la función bind produciéndose la siguiente excepción al usarse en la librería de React.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Error: define: &#39;undefined&#39; is not a function (evaluating &#39;RegExp.prototype.test.bind(&#10;</span></span><span class="line"><span class="cl">&gt;&gt;&nbsp;&nbsp;&nbsp;&nbsp; /^(data|aria)-[a-z_][a-z\d_.\-]*$/&#10;</span></span><span class="line"><span class="cl">&gt;&gt;   )&#39;)</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>error-bind.txt</span>
    </div>
</div>
<p>Para evitarlo debemos añadir un <em>polyfill</em>. Deberemos añadir los polyfills de <a href="https://github.com/cujojs/poly">cujojs/poly</a>, podemos hacer uso de ellos con RequireJS basta como añadirlo como dependencia:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;poly/function&#39;</span><span class="p">,</span> <span class="s1">&#39;specs/tareas-specs&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">});</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main-specs.js</span>
    </div>
</div>
<p>Este problema de la función <em>bind</em> ya esta incluido como <a href="https://code.google.com/p/phantomjs/issues/detail?id=522">petición en PhantomJS</a> y probablemente se resuelva en la versión 2.0.</p>
<p>El ejemplo con el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/BackboneReact">código fuente completo de este ejemplo</a> está en <a href="https://github.com/picodotdev">mi repositorio de GitHub</a>, puedes probarlo en tu equipo con el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew tomcatRun&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-tomcatRun.sh</span>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en JavaScript con log4javascript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos JavaScript</a></li>
<li><a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/06/moment-js-libreria-javascript-para-fechas/">Moment.js, librería JavaScript para fechas</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility">Function/bind#Compatibility</a></li>
<li><a href="http://neugierig.org/software/blog/2014/02/react-jsx-coffeescript.html">React, JSX, and CoffeeScript</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="programacion"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/</id>
        <title>Usar Grunt para ejecutar teses unitarios de código JavaScript</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2014-04-04T16:43:23+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/grunt.webp" width="200" height="236" alt="Grunt" title="Grunt" class="" loading="false&#34;"></p>
</div>
<p>En la <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">serie de artículos que escribí sobre javascript</a> hice un ejemplo más o menos complejo y parecido a lo que podría ser una aplicación real usando muchas de las herramientas que ahora se consideran una buena opción para desarrollar aplicaciones javascript como <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">RequireJS</a>, <a href="http://www.genbetadev.com/desarrollo-web/patron-de-diseno-mvc-del-lado-cliente-con-backbonejs">Backbone</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Marionette</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Jasmine y Sinon</a>. En el <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">ejemplo de la lista de tareas con estas herramientas</a> hice unas cuantas pruebas unitarias para mostrar en un ejemplo como son y la forma de usar <a href="http://jasmine.github.io/">Jasmine</a>.</p>
<p>Sin embargo, para ejecutar las pruebas unitarias se necesitaba un navegador y hacerlo de forma manual cuando quisiéramos comprobar el estado de las pruebas. Lo ideal tal y como se comenta en el libro <a href="https://amzn.to/2SVraLu">The Pragmatic programmer</a>, es que las pruebas unitarias se ejecuten de forma automatizada con la herramienta de construcción que usemos, esto evitará que se nos olvide ejecutarlas en cada cambio y así descubriremos los errores pronto, también podremos hacer que se ejecuten en un entorno de integración continua como podría ser <a href="http://jenkins-ci.org/">Jenkins</a>. En esta entrada mostraré como ejecutar esas pruebas unitarias de javascript con una tarea de la herramienta <a href="http://www.gradle.org/">Gradle</a> y usando una herramienta similar a Gradle pero para JavaScript llamada <a href="http://gruntjs.com/">Grunt</a>.</p>
<p>Primeramente necesitaremos instalar node.js y el paquete de javascript grunt-cli con de forma global en el sistema:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># pacman -S nodejs</span>&#10;</span></span><span class="line"><span class="cl"><span class="c1"># npm install -g grunt-cli</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-1.sh</span>
    </div>
</div>
<p>En caso de que tengamos pruebas unitarias con Jasmine como es el caso de este ejemplo deberemos instalar los siguientes paquetes en el directorio raíz del proyecto:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install grunt-contrib-jasmine&#10;</span></span><span class="line"><span class="cl">$ npm install grunt-template-jasmine-requirejs&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-2.sh</span>
    </div>
</div>
<p>La siguiente linea como se explica en <a href="https://www.npmjs.org/package/grunt-template-jasmine-requirejs">la documentación del paquete grunt-template-jasmine-requirejs</a> puede ser necesaria si en algún momento obtenemos el siguiente error:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install grunt-contrib-jasmine@0.5.3 --save-dev&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-3.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">npm ERR! peerinvalid The package grunt-contrib-jasmine does not satisfy its siblings&#39; peerDependencies requirements!&#10;</span></span><span class="line"><span class="cl">npm ERR! peerinvalid Peer grunt-template-jasmine-requirejs@0.1.10 wants grunt-contrib-jasmine@~0.5.3&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>mensaje.txt</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-4.sh</span>
    </div>
</div>
<p>Si usamos <a href="https://mochajs.org/">Mocha</a> como librería de pruebas unitarias probablemente disponemos de varios paquetes que podemos instalar de forma similar. Una vez instaladas estas herramientas debemos crear dos archivos necesarios para Grunt, que son <a href="https://github.com/picodotdev/elblogdepicodev/blob/master/MarionetteREST/package.json">package.json</a> y <a href="https://github.com/picodotdev/elblogdepicodev/blob/master/MarionetteREST/grunt.js">grunt.js</a>. El primero contiene la definición del paquete js para Grunt, quizá lo más destacable es que el nombre del paquete debe estar en minúsculas sino obtendremos un error parecido a «Error: Invalid name: &ldquo;MarionetteREST&rdquo; npm ERR! at ensureValidName». El archivo grunt.js es la descripción de las tareas de grunt que contiene un poco de configuración donde indicamos las especificaciones que contienen las pruebas unitarias, las dependencias necesarias para ejecutar las pruebas y las tareas que se definen. Con todo esto ya podemos ejecutar las pruebas con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ grunt --gruntfile grunt.js jasmine:requirejs&#10;</span></span><span class="line"><span class="cl">$ ./gradlew jasmine&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-5.sh</span>
    </div>
</div>
<p>Sin embargo, puede que deseemos ejecutarlas desde la herramienta de construcción que usemos, en mi caso con Gradle. Para añadir el soporte a Gradle de ejecutar las pruebas unitarias a su vez con Grunt debemos añadir la siguiente configuración a nuestro archivo build.gradle:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">jasmine</span><span class="o">(</span><span class="nl">type:</span> <span class="n">GruntTask</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">gruntArgs</span> <span class="o">=</span> <span class="s2">&#34;jasmine:requirejs&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">GruntTask</span> <span class="kd">extends</span> <span class="n">Exec</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">gruntExecutable</span> <span class="o">=</span> <span class="n">Os</span><span class="o">.</span><span class="na">isFamily</span><span class="o">(</span><span class="n">Os</span><span class="o">.</span><span class="na">FAMILY_WINDOWS</span><span class="o">)</span> <span class="o">?</span> <span class="s2">&#34;grunt.cmd&#34;</span> <span class="o">:</span> <span class="s2">&#34;grunt&#34;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">switches</span> <span class="o">=</span> <span class="s2">&#34;--gruntfile grunt.js&#34;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">gruntArgs</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span> &#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">GruntTask</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">super</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">setExecutable</span><span class="o">(</span><span class="n">gruntExecutable</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGruntArgs</span><span class="o">(</span><span class="n">String</span> <span class="n">gruntArgs</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">args</span> <span class="o">=</span> <span class="s2">&#34;$switches $gruntArgs&#34;</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s2">&#34; &#34;</span><span class="o">)</span> <span class="k">as</span> <span class="n">List</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Veremos como salida el siguiente resultado en la terminal.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/images/grunt-jasmine_hu79f9c7ae54435c10e67b3a5309b3972b_34504_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Ejecutar teses Jasmine con Grunt"><img src="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/images/grunt-jasmine_hu79f9c7ae54435c10e67b3a5309b3972b_34504_300x200_fit_q90_h2_box_3.webp" width="300" height="147" alt="Ejecutar teses Jasmine con Grunt" title="Ejecutar teses Jasmine con Grunt" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Al hacer esta entrada de forma que las pruebas se ejecuten con Grunt he movido las plantillas de Mustache de lugar, antes estaban embebidas en el html en el ejemplo <a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">Backbone</a> y las he movido a dentro del javascript de la aplicación de la lista de tareas. Esto hace que para pasar las pruebas no tengamos una dependencia sobre un archivo html externo en el que buscar las plantillas, también así el javascript es más autónomo y está incluido en él todo lo que necesita.</p>
<p>Aún tengo otra entrada preparada sobre javascript que es el mismo ejemplo de la lista de tareas pero en vez de usando las vistas de Backbone o Marionette usando <a href="https://reactjs.org/">React</a>. El <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/MarionetteREST">código fuente completo de este ejemplo sobre pruebas unitarias y Marionette</a> está en <a href="https://github.com/picodotdev">mi repositorio de GitHub</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en JavaScript con log4javascript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos JavaScript</a></li>
<li><a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="software"/>
            
                <category term="programacion"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/</id>
        <title>Novedades y nuevas características de Java 8</title>
        <updated>2016-03-12T12:00:00+01:00</updated>
        <published>2014-03-21T16:03:27+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>La octava versión de Java añade numerosas novedades importantes al lenguaje. Algunas de las más destacadas son las expresiones lambdas y los streams que dotan al lenguaje de características de programación funcional pero también lo hacen en muchas construcciones de código comunes más expresivo, menos extenso y más legible. Pero hay otras novedades relevantes que detallo en el artículo como los métodos por defecto en interfaces o la nueva API para fechas.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java" class="" loading="false&#34;"></p>
</div>
<p>El 18 de marzo de 2014 se publicó la nueva versión de la plataforma <a href="https://www.oracle.com/technetwork/java/javase/overview/java8-2100321.html">Java 8</a>, Java 7 fue liberada el en julio de 2011. Java 8 incorpora varias novedades siguiendo la tendencia de otros lenguajes como <em>lambdas</em> o <em>closures</em> o una demandada nueva API para el manejo de fechas entre otras muchas características más. La <a href="http://openjdk.java.net/projects/jdk8/features">lista completa de novedades</a> es bastante amplia, a continuación algunas características de Java explicadas con un poco más de detalle.</p>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="introducción">Introducción</h3>
<p>Java 8 representa una evolución notable en este lenguaje de programación al mismo nivel o más del que supuso la versión Java 5. Aunque tengas varios años de experiencia quizá aún no has tenido oportunidad de usar todas las novedades que se han incorporado en cada versión en proyectos reales, probablemente porque los caminos de migración de las empresas son lentos y muchas siguen usando versiones antiguas en sus aplicaciones. Para conocer y aprovechar todas estas novedades de Java recomiendo los siguientes libros que son de lo mejor que he encontrado como documentación, el primer libro es <a href="https://amzn.to/2Qt2Mzv">Thinking in Java</a> que nos introduce en este lenguaje de programación desde el inicio, aunque ya conozcas o uses Java el libro <a href="https://amzn.to/39FqX5c">Effective Java</a> contiene gran cantidad de información y consejos para usar Java de una forma más efectiva haciendo un repaso de las características del lenguaje que aunque no esté actualizado con las novedades que introduce Java 8 casi todo sigue siendo aplicable, el último libro es <a href="https://amzn.to/2QNW1XJ">Java 8 in Action</a> que explica en mucho más detalle que lo hecho en este artículo cada una de las nuevas características de Java 8 y complementa el libro Effective Java pero aprovechando las novedades introducidas en el lenguaje.</p>
<ul>
<li><a href="https://openjdk.java.net/projects/jdk8/">Características de Java 8</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/8-relnotes.html">Documentación de Java 8</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">Documentación Javadoc de Java 8</a></li>
</ul>
<p>La lista de novedades es la siguiente:</p>
<ul>
<li>Se añaden las expresiones <em>lambda</em> o closures y se adapta la API para usarlas en los sitios que se pueda.</li>
<li>Se definen nuevos perfiles compactos para dispositivos que no necesitan toda la API Java, esto es una alternativa a la modularización. Inicialmente la modularización era una característica que estaba planificada para Java 8 pero finalmente se ha aplazado a posteriores versiones.</li>
<li>Incluido nuevo <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/index.html">motor de JavaScript Nashorn</a> que implementa ECMAscript 5.1 y es más rápido que su predecesor Rhino.</li>
<li>Eliminación de espacio de memoria Permanent Generation (PermGen) que pasa a llamarse Metaspace. Su tamaño
será dinámico pero no evitará fugas de memoria.</li>
<li>Soporte para la creación de una máquina virtual menor a 3 MB.</li>
<li>Acceso mediante reflection a los nombres de los parámetros. Mejorará la legibilidad del código que use reflection y permitirá mejorar el soporte en los IDE.</li>
<li>Ordenación en java.util.Arrays de forma paralela.</li>
<li>Operaciones masivas sobre colecciones tales como filter/map/reduce (streams) de forma serializada o paralela.</li>
<li>Soporte de forma estándar para la codificación y decodificación Base64.</li>
<li>Nueva API para Date y Time.</li>
<li>Varias mejoras de seguridad.</li>
<li>Se incorporan en la máquina virtual Java HotSpot características que estaban en JRockit, convergiendo ambas máquinas virtuales. Se incorpora Mission Control.</li>
<li>Mejoras en JDBC la base para el acceso en bases de datos en Java.</li>
<li><a href="http://openjdk.java.net/projects/jdk8/features">Otras novedades</a>.</li>
</ul>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0131872486&amp;linkId=13cd447a466645c3dd9162d935caf076" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00B8V09HY&amp;linkId=8bb841ba7a877bb075e20d754e9df4fd" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291994&amp;linkId=51d39d999467395851bae9f3931e788c" title="Amazon" class="lozad"></iframe>
</div>
<h3 id="nuevas-características">Nuevas características</h3>
<h4 id="streams">Streams</h4>
<p>Los streams no son un nuevo tipo de colección son una nueva forma de recorrer las colecciones distinta a los <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">Iterator</a>. La ventaja de los streams es que pueden procesarse de forma serializada o paralela y proporcionan un estilo de operaciones más funcionales. Un flujo consiste un una fuente (una colección), varias operaciones intermedias (de filtrado o transformación) y una operación final que produce un resultado (suma, cuenta&hellip;). Los streams son lazy de modo que las operaciones solo se realizan cuando se llama a la operación final, también son eficientes no necesitando en algunos casos procesar todos los elementos del stream para devolver el resultado final.</p>
<p>Tradicionalmente en la API de colecciones la iteración sobre los elementos debíamos proporcionarla de forma externa. Con Java 8 podemos expresarla de forma interna, de la siguiente manera.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">alturaMedia</span> <span class="o">=</span> <span class="n">personas</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">mapToInt</span><span class="o">((</span><span class="n">Persona</span> <span class="n">p</span><span class="o">)</span> <span class="err">–</span><span class="o">&gt;</span> <span class="o">{</span> <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">getAltura</span><span class="o">();</span> <span class="o">})</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">average</span><span class="o">();</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Stream.java</span>
    </div>
</div>
<h4 id="lambda">Lambda</h4>
<p>Esta es una de las principales novedades y que más se estaba echando de menos en Java de otros lenguajes como <a href="https://www.groovy-lang.org/">Groovy</a> o <a href="https://www.python.org/">Python</a>. Las expresiones <em>lambda</em> son funciones que no está asociadas a un determinado nombre y que pueden pasarse como argumento a otras funciones. Tienen el siguiente aspecto:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">(</span><span class="n">Persona</span> <span class="n">persona</span><span class="o">)</span> <span class="err">–</span><span class="o">&gt;</span> <span class="o">{</span> <span class="k">return</span> <span class="n">persona</span><span class="o">.</span><span class="na">getAltura</span><span class="o">();</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Lambda.java</span>
    </div>
</div>
<p>El uso de expresiones lambdas junto con el stream API proporciona a Java 8 características de programación funcional, pero sobre todo hace el código más sencillo, menos extenso, más expresivo y más legible. En las expresiones <em>lambda</em> de Java podemos seguir aprovechándonos de la compilación estática y del tipado fuerte.</p>
<h4 id="referencias-de-métodos">Referencias de métodos</h4>
<p>Todo el código desarrollado previamente a Java 8 no hace uso de las lambdas, pero con las <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">referencias a métodos</a> podemos usar esos métodos ya implementados como si se tratasen de funciones lambdas. Hay diferentes formas de hacer referencias a métodos:</p>
<ul>
<li>A métodos estáticos</li>
<li>A un método de una instancia concreta</li>
<li>A un método de instancia de una instancia arbitraria de un tipo</li>
<li>A un constructor</li>
</ul>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Método estático&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">Persona:</span><span class="o">:</span><span class="n">compareAltura</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Método de una instancia concreta&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">persona:</span><span class="o">:</span><span class="n">getAltura</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Método de instancia de una instancia arbitraria de un tipo&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">Persona:</span><span class="o">:</span><span class="n">getAltura</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Constructor&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">Persona:</span><span class="o">:</span><span class="k">new</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ReferenciaMetodos.java</span>
    </div>
</div>
<h4 id="interfaces-funcionales">Interfaces funcionales</h4>
<p>Una interfaz funcional es aquella que solo tiene un método abstracto (sin implementación). Algunos ejemplos de interfaces funcionales son <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">Runnable</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/awt/event/ActionListener.html">ActionListener</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html">Comparator</a> y <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html">Callable</a>. Para definir una interfaz funcional se puede usar la anotación <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html">@FunctionalInterface</a> y pueden representarse con una expresión lambda. En el siguiente ejemplo puede apreciarse que con las interfaces funcionales y las lambdas podemos hacer lo mismo de forma más clara, menos verbosa y con código más legible.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">personas</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Persona</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Persona</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">getAltura</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">getAltura</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">});</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>InterfazFuncional-1.java</span>
    </div>
</div>
<p>En Java 8 podemos hacer:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">personas</span><span class="o">,</span> <span class="o">(</span><span class="n">Persona</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Persona</span> <span class="n">p2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">p2</span><span class="o">.</span><span class="na">getAltura</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">getAltura</span><span class="o">())</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">});</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>InterfazFuncional-2.java</span>
    </div>
</div>
<p>Java 8 incorpora varias interfaces funcionales que puede ser usadas en expresiones <em>lambda</em>, entre ellas están:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Predicate</a>: función que retorna un booleano dado un argumento.</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html">Function</a>: función que retorna un valor dado un argumento.</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">Supplier</a>: producen un tipo, al contrario que las funciones no tienen argumento</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html">Consumer</a>: representa una operación a realizarse en un argumento.</li>
</ul>
<h4 id="métodos-por-defecto-en-interfaces">Métodos por defecto en interfaces</h4>
<p>Hasta ahora las interfaces en Java solo podían definir métodos pero no sus implementaciones. El problema con las interfaces es que cuando se modifican se rompen todas las clases que las usan. Esto se ha resuelto de tal forma que se puedan añadir nuevos métodos con implementación a las interfaces y ha sido necesario para incorporar las lambdas a interfaces existentes como List. En Java 8 las interfaces podrán incorporar implementaciones para algunos de sus métodos, teniendo así algo parecido a herencia múltiple.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Math</span> <span class="o">{</span> &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"> &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">default</span> <span class="kt">int</span> <span class="nf">multiply</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MetodosDefault.java</span>
    </div>
</div>
<h4 id="métodos-estáticos-en-interfaces">Métodos estáticos en interfaces</h4>
<p>Además de definir métodos por defecto en las interfaces a partir de ahora podemos definir métodos estáticos. Definiendo métodos estáticos en las interfaces evitaremos tener que crear clases de utilidad. Podremos incluir en un mismo tipo (la interfaz) todos los métodos relacionados.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Persona</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="nf">getNombre</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">int</span> <span class="nf">getAltura</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="n">String</span> <span class="nf">toStringDatos</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getNombre</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34; &#34;</span> <span class="o">+</span> <span class="n">getAltura</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MetodosStatic.java</span>
    </div>
</div>
<h4 id="mejoras-en-la-programación-asíncrona">Mejoras en la programación asíncrona</h4>
<p>Los procesadores actuales están aumentando su capacidad de proceso más a base de concurrencia proporcionando más núcleos que a base de hacerlos más rápidos en Ghz o <a href="https://es.wikipedia.org/wiki/Instrucciones_por_ciclo">instrucciones por ciclo</a>, los lenguajes de programación tienen que adaptarse para facilitar su aprovechamiendo de forma fácil. Desde las primeras versiones de Java ya se incluía soporte para trabajar con hilos o threads sin embargo su programación es propensa a errores y difícil de depurar. Java 7 con el nuevo soporte conocido como <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html">Fork/Join</a> mejoraba la situación.</p>
<p>Por otra parte para maximizar el aprovechamiento de los recursos disponibles cuando surgen bloqueos de entrada/salida como acceso a disco o comunicación por red surge la programación asíncrona. Para ello Java 8 mejora el soporte existente desde Java 7 con la clase <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">Future</a> que permite recoger el resultado de una operación mientras se realiza otra al mismo tiempo, en Java 8 se proporciona la clase <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">CompletableFuture</a> que implementa la interfaz Future. La clase CompletableFuture soporta el uso de lambdas, hace más fácil la programación concurrente y programación asíncrona que el Fork/Join y el Future respectivamente permitiendo igualmente ejecutar tareas de forma concurrente, combinar el resultado de dos tareas que se ejecutan al mismo tiempo, realizar otra tarea al terminar una prevía o por supuesto esperar a que todas las tareas concurrentes finalicen.</p>
<h4 id="anotaciones-en-cualquier-uso-de-tipos">Anotaciones en cualquier uso de tipos</h4>
<p>Con la introducción de anotaciones en Java 5 podemos usar anotaciones en la declaración de los tipos (definición de clases, interfaces, propiedades, métodos, &hellip;). Desde ahora podremos usar las anotaciones en el uso de cualquier tipo como por ejemplo expresiones new, casts, cláusulas implements y cláusulas throws.</p>
<h4 id="java-time">Java Time</h4>
<p>Trabajar con fechas, horas y diferentes zonas horarias en Java tradicionalmente ha sido molesto, para tratar de mejorar la situación podíamos usar la librería JodaTime. Finalmente, después de mucho tiempo esperando a que se hiciera se va a proporcionar una mejor <a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">API en el JDK 8 para trabajar con fechas, horas y zonas horarias</a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/images/componentes-jpse8_hue75c3af3f21500b54941dca45968f0dd_53901_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/images/componentes-jpse8_hue75c3af3f21500b54941dca45968f0dd_53901_300x200_fit_q90_h2_box_3.webp" width="282" height="200" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<h3 id="futuro-con-java-9">Futuro con Java 9</h3>
<p>Viendo el pasado reciente de Java hablar del futuro puede ser precipitado, quizá la característica más comentada sea la modularización con el proyecto conocido como <a href="http://openjdk.java.net/projects/jigsaw/">Jigsaw</a>, pero ha sido abandonada para Java 8 según tengo entendido por ser difícil incorporarla manteniendo la compatibilidad hacia atrás, por el momento dispondremos de una solución intermedia con los compact profiles.</p>
<p>Otro de los puntos donde parece que se pondrá énfasis es en el soporte para entornos en la nube que son en estos momentos la tendencia hacia la que evolucionan las aplicaciones.</p>
<h3 id="versiones-anteriores-de-java">Versiones anteriores de Java</h3>
<p>Las versiones de Java 5, 6 y 7 también incluyeron varias novedades y dado que en el ámbito empresarial la tecnología se adopta de forma lenta es posible que mucha gente (incluido yo mismo) aún desconozca cuales eran algunas de las principales novedades y características de versiones anteriores.</p>
<h4 id="java-7">Java 7</h4>
<ul>
<li>Project coin</li>
<li>Strings en switchs</li>
<li>Gestión automática de recursos en sentencias try-catch</li>
<li>Multicatch</li>
<li>Rethrow de excepciones más precisos</li>
<li>Operador diamante &lt;&gt;</li>
<li>Literales binarios</li>
<li>Guiones bajos en literales numéricos</li>
<li>Fork/Join y utilidades de concurrencia</li>
<li>Mejoras en trabajo con archivos y carpetas</li>
</ul>
<p>Más en <a href="https://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html">Java 7 New Features and Enhancements</a> y <a href="https://www.javacodegeeks.com/2013/10/java7-a-look-back.html">Java 7 a look back</a></p>
<h4 id="java-6">Java 6</h4>
<ul>
<li>Lenguajes de scripting</li>
<li>API para el compilador</li>
<li>Nuevas anotaciones</li>
<li>Nueva API para XML (StaX)</li>
</ul>
<p>Más en <a href="https://www.oracle.com/technetwork/java/javase/features-141434.html">Java 6 New Features and Enhancements</a> y <a href="https://www.javabeat.net/introduction-to-java-6-0-new-features-part-i/">Introduction to java 6 new features</a></p>
<h4 id="java-5">Java 5</h4>
<ul>
<li>Generics</li>
<li>Bucle for mejorado</li>
<li>Autoboxing/unboxing</li>
<li>Enums</li>
<li>Varargs</li>
<li>Static import</li>
<li>Anotaciones</li>
</ul>
<p>Más en <a href="https://docs.oracle.com/javase/1.5.0/docs/relnotes/features.html">Java 5 New Features and Enhancements</a></p>
<h3 id="presentación">Presentación</h3>
<p>Finalmente, una presentación muy interesante en forma de <a href="https://www.youtube.com/watch?v=FTfAP29TjUk">vídeo de Youtube</a> en español y la <a href="http://www.javahispano.org/storage/documentacion/2013-JUG-Madrid.pdf">presentación de la que se habla en formato pdf</a> que fue publicada en <a href="http://www.javahispano.org/portada/2014/3/10/video-y-presentacion-de-la-charla-sobre-java-8.html">JavaHispano</a>, en él se habla de muchas de las novedades y de algunas futuras en Java 9.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/FTfAP29TjUk" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<hr>
<p>En los <a href="https://docs.oracle.com/javase/tutorial/">tutoriales de Java</a> hay algunos de estos puntos más ampliados y algunos apartados no comentados en esta entrada. Otros artículos muy completos son <a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">Java 8 Tutorial</a> y <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a>, en el apartado de referencia al final de la entrada hay algún enlace más digno de lectura.</p>
<p>Java es usado ampliamente en entornos empresariales ya sean públicos o privados, pequeños o grandes que con las <a href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/">especificaciones de Java EE 7</a> proporcionan a las aplicaciones un conjunto de funcionalidades estadarizadas con las que tendremos posibilidad de elegir la implementación que mejor consideremos no encadenándonos a un determinado vendedor.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://openjdk.java.net/projects/jdk8/">JDK 8</a></li>
<li><a href="https://www.javacodegeeks.com/2013/10/java8.html">Java 8</a></li>
<li><a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">Java 8 Tutorial</a></li>
<li><a href="http://zeroturnaround.com/rebellabs/java-8-explained-default-methods/">Java 8 Explained Default Methods</a></li>
<li><a href="https://www.javacodegeeks.com/2013/10/introduction-to-java-lambdas.html">Introduction to Java lambdas</a></li>
<li><a href="http://zeroturnaround.com/rebellabs/java-8-revealed-lambdas-default-methods-and-bulk-data-operations/">Java 8 revealed, lambdas, default methods and bulk data operations</a></li>
<li><a href="https://www.javacodegeeks.com/2013/07/lambdas-coming-to-a-java-8-near-you.html">Lambdas coming to a Java 8 near you</a></li>
<li><a href="http://viralpatel.net/blogs/java-8-default-methods-tutorial/">Java 8 default methods</a></li>
<li><a href="http://unpocodejava.wordpress.com/2014/01/22/novedades-relevantes-java-8/">Novedades relevantes Java 8</a></li>
<li><a href="https://www.javacodegeeks.com/2014/03/the-optional-type-api.html">The optional type API</a></li>
<li><a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a></li>
<li><a href="https://www.javacodegeeks.com/2014/03/8-new-features-for-java-8.html">8 new features for java 8</a></li>
<li><a href="https://www.javacodegeeks.com/2014/03/happy-8th-birthday-java.html">Happy 8th birthday Java</a></li>
<li><a href="https://www.javacodegeeks.com/2014/01/compiling-lambda-expressions-scala-vs-java-8.html">Compiling lambda expressions scala vs Java 8</a></li>
<li><a href="https://java.dzone.com/articles/java-8-permgen-metaspace">Java 8 PermGen to metaspace</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/</id>
        <title>Introducción y ejemplo sencillo de Java Message Service (JMS)</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2014-03-07T18:31:22+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>JMS es una especificación de Java que define en esta plataforma una forma comunicación entre aplicaciones basada en el intercambio de mensajes. Los mensajes permiten a las aplicaciones no conocerse entre sí y comunicarse de forma asíncrona pudiendo hacer que los mensajes de una cola solo sean consumidos por un único receptor o por varios suscriptores interesados en un determinado tema. En el código de ejemplo muestro tanto la comunicación con colas (queues) como con temas (topics)</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java" class="" loading="false&#34;"></p>
</div>
<p><a href="https://en.wikipedia.org/wiki/Java_Platform">La plataforma Java EE</a> (Java Enterprise Edition) pone a disposición de los desarrolladores varias especificaciones, estas especificaciones describen las funcionalidades y la API que deben proporcionar las implementaciones y proporcionan al desarrollador herramientas para facilitar, hacer mejor las aplicaciones y de forma estándar según estas especificaciones. Haciendo uso de una de estas especificaciones es posible cambiar de una implementación a otra de forma transparente y sin modificar ninguna línea de código de la aplicación (en teoría). Hay especificaciones para persistencia en base de datos (JPA), para transaccionalidad (JTA), para servicios web (JAX-WS ) y REST (JAX-RS) entre otras. En el siguiente enlace puede encontrarse el <a href="https://glassfish.java.net/downloads/ri/">listado completo de especificaciones y sus versiones de JEE 7</a>.</p>
<p>Una de ellas es el <a href="https://es.wikipedia.org/wiki/Java_Message_Service">servicio de mensajería JMS</a> (Java Message Service). JMS es un sistema de comunicación entre aplicaciones en base a mensajes. El usar mensajes como forma de comunicación entre aplicaciones tiene los siguientes beneficios o ventajas:</p>
<ul>
<li>Integración de sistemas: las aplicaciones que se comunican intercambiando mensajes puede ser desarrolladas con tecnologías diferentes el único requisito es que cada una de ellas tenga una forma de enviar y recibir los mensajes.</li>
<li>Escalabilidad: en caso de necesitar más capacidad para procesar los mensajes se pueden añadir más procesadores de mensajes sin que los emisores tengan ningún conocimiento de ello.</li>
<li>Asincronía: los mensajes puede ser procesados de forma asíncrona de forma que si un mensaje desencadena un proceso largo en tiempo el emisor del mensaje no tiene que esperar a que el proceso termine, el emisor puede enviar el mensaje y olvidarse. Además, el emisor no necesita que un receptor exista para enviar el mensaje tampoco el receptor necesita que que el emisor exista para recibir el mensaje. Cuando haya un receptor este se encargará de procesar los mensajes que se hayan enviado y estén aún sin procesar.</li>
<li>No acoplamiento: el emisor y el receptor no se conocen directamente de forma que cada uno de ellos puede reemplazarse por una nueva implementación de forma transparente para el otro.</li>
</ul>
<p>La comunicación puede realizarse de dos formas cada una con sus características:</p>
<ul>
<li>Punto a punto (P2P): mediante esta comunicación el mensaje se garantiza que es procesado únicamente una vez independientemente del numero de posibles procesadores que podrían recibir el mensaje. El procesado del mensaje puede ser síncrono o asíncrono. En caso de que no haya un receptor disponible el mensaje se guarda hasta poder entregarse a un receptor. Se realiza mediante colas (Queue). En este modelo al emisor se le denomina Sender y al receptor Receiver.</li>
<li>Pub/Sub: en este modelo un mensaje es recibido por todos los receptores suscritos a un tema (Topic) de forma similar a una emisión broadcast. Al emisor se le denomina Publisher y al receptor Subscriber. El emisor y receptor están más desacoplados ya que el emisor no conoce cual de los receptores procesará el mensaje.</li>
</ul>
<p>Esta comunicación de mensajes entre aplicaciones o entre diferentes partes de una aplicación tiene muchas posibilidades, podría ser utilizado para que un receptor enviase mensajes electrónicos en base a los mensajes enviados a una cola o para actualizar o precalcular datos de una base de datos que puede llevar un considerable tiempo y que de hacerlo en la misma petición de una aplicación web haría que el cliente estuviese esperando hasta que el proceso terminase, en ambos casos no es necesario que los procesos se hagan inmediatamente, son solo dos ejemplos de aplicación real. Esta es la misma funcionalidad que expliqué como hacerla con <a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">programación concurrente y el patrón de diseño Command</a> pero pudiéndola implementar con JMS.</p>
<p>Los mensajes puede tener cabeceras (asignada automáticamente por JMS o por el desarrollador), atributos y y los datos (payload) que pueden transportar texto, un stream de objetos primitivos, &hellip; en función del tipo de mensaje. Cualquiera de estas cabeceras, atributos y datos puede utilizarse como información	 para procesar el mensaje.</p>
<p>A continuación pondré el código de una sencilla aplicación que se conecta al servicio JMS de un <a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/">servidor de aplicaciones WildFly</a> de forma remota y envía y recibe unos pocos mensajes de texto.</p>
<p>Primero el código de un modelo Pub/Sub. Como es propio de este modelo los mensajes se reciben por todos los receptores (los dos threads que escuchan en un topic que debemos crear), en este caso hay un publicador y dos suscriptores:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.bitix.jms</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.Message</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.MessageListener</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.Session</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TextMessage</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TopicConnection</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TopicConnectionFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TopicPublisher</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TopicSession</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TopicSubscriber</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.naming.Context</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.naming.InitialContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Ejemplo que muestra como como enviar y recibir mensajes JMS de un Topic de forma remota.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Topic</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Antes de ejecutar este ejemplo, usando WildFly se ha de crear un usuario guest y clave guest con el &#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * script WILDFLY_HOME/bin/add-user.sh.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Usuario y password para conectarse al servidor JNDI y al Topic&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">String</span> <span class="n">usuario</span> <span class="o">=</span> <span class="s">&#34;guest&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">contrasena</span> <span class="o">=</span> <span class="s">&#34;guest&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Propiedades para crear el contexto: clase factoría, url del servidor JNDI y credenciales&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Properties</span> <span class="n">env</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">INITIAL_CONTEXT_FACTORY</span><span class="o">,</span> <span class="s">&#34;org.jboss.naming.remote.client.InitialContextFactory&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">PROVIDER_URL</span><span class="o">,</span> <span class="s">&#34;http-remoting://localhost:8080&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">SECURITY_PRINCIPAL</span><span class="o">,</span> <span class="n">usuario</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">SECURITY_CREDENTIALS</span><span class="o">,</span> <span class="n">contrasena</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// El objeto InitialContext permite obtener la referencias de los objetos registrado en el ábol JNDI&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">InitialContext</span> <span class="n">ic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InitialContext</span><span class="o">(</span><span class="n">env</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Objetos a obtener para usar JMS: &#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - TopicConnectionFactory&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - TopicConection&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - Topic&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - TopicSession&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - TopicSubscriber&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - TopicPublisher&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">TopicConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span> <span class="o">(</span><span class="n">TopicConnectionFactory</span><span class="o">)</span> <span class="n">ic</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&#34;jms/RemoteConnectionFactory&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">TopicConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createTopicConnection</span><span class="o">(</span><span class="n">usuario</span><span class="o">,</span> <span class="n">contrasena</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Obtener el Topic en el cual se publicarán y del cual se recibirán los mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Topic</span> <span class="n">topic</span> <span class="o">=</span> <span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Topic</span><span class="o">)</span> <span class="n">ic</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&#34;jms/topic/test&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Preparar el publicador y subscriptor al Topic&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Subscriber</span> <span class="n">subscriber1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Subscriber</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">topic</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Subscriber</span> <span class="n">subscriber2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Subscriber</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">topic</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Publisher</span> <span class="n">publisher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Publisher</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">topic</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Inicializar la recepción y envío de los mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Empezar a publicar mensajes en el Topic (y a recibirlos)&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">publisher</span><span class="o">);</span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Esperar a que el publicador termine de enviar mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">thread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Parar el envío y recepción de mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">connection</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Terminar liberando los recursos&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">subscriber1</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">subscriber2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">publisher</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">ic</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Subscriber</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">TopicSession</span> <span class="n">session</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">TopicSubscriber</span> <span class="n">subscriber</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="nf">Subscriber</span><span class="o">(</span><span class="n">TopicConnection</span> <span class="n">connection</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createTopicSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">subscriber</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">createSubscriber</span><span class="o">(</span><span class="n">topic</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">subscriber</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">subscriber</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">TextMessage</span> <span class="n">text</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Suscriptor (%s): El publicador dice: «%s»\n&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Publisher</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">TopicSession</span> <span class="n">session</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">TopicPublisher</span> <span class="n">publisher</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="nf">Publisher</span><span class="o">(</span><span class="n">TopicConnection</span> <span class="n">connection</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createTopicSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">publisher</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">createPublisher</span><span class="o">(</span><span class="n">topic</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">publisher</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">Message</span> <span class="n">mensaje</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;¡Hola mundo! (%d)&#34;</span><span class="o">,</span> <span class="n">i</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">publisher</span><span class="o">.</span><span class="na">publish</span><span class="o">(</span><span class="n">mensaje</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Topic.java</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/images/topic_hu56b39483b649e598428d5492a72852dc_134239_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Resultado de Topic.java"><img src="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/images/topic_hu56b39483b649e598428d5492a72852dc_134239_300x200_fit_q90_h2_box_3.webp" width="300" height="136" alt="Resultado de Topic.java" title="Resultado de Topic.java" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>A continuación el código de utilizando un modelo punto a punto en el que vuelve a haber un emisor y dos receptores. En el resultado de la ejecución puede observarse que a pesar de haber dos receptores solo uno de los dos recibe cada mensaje:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.bitix.jms</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.Message</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.MessageListener</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.QueueConnection</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.QueueConnectionFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.QueueReceiver</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.QueueSender</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.QueueSession</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.Session</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.TextMessage</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.naming.Context</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.naming.InitialContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> * Ejemplo que muestra como como enviar y recibir mensajes JMS de un Queue de forma remota.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Queue</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Antes de ejecutar este ejemplo, usando WildFly se ha de crear un usuario guest y clave guest con el &#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 * script WILDFLY_HOME/bin/add-user.sh.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Usuario y password para conectarse al servidor JNDI y al Queue&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">String</span> <span class="n">usuario</span> <span class="o">=</span> <span class="s">&#34;guest&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">contrasena</span> <span class="o">=</span> <span class="s">&#34;guest&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Propiedades para crear el contexto: clase factoría, url del servidor JNDI y credenciales&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Properties</span> <span class="n">env</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">INITIAL_CONTEXT_FACTORY</span><span class="o">,</span> <span class="s">&#34;org.jboss.naming.remote.client.InitialContextFactory&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">PROVIDER_URL</span><span class="o">,</span> <span class="s">&#34;http-remoting://localhost:8080&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">SECURITY_PRINCIPAL</span><span class="o">,</span> <span class="n">usuario</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">env</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">SECURITY_CREDENTIALS</span><span class="o">,</span> <span class="n">contrasena</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// El objeto InitialContext permite obtener la referencias de los objetos registrado en el ábol JNDI&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">InitialContext</span> <span class="n">ic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InitialContext</span><span class="o">(</span><span class="n">env</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Objetos a obtener para usar JMS: &#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - QueueConnectionFactory&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - QueueConection&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - Queue&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - QueueSession&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - QueueSubscriber&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// - QueuePublisher&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">QueueConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span> <span class="o">(</span><span class="n">QueueConnectionFactory</span><span class="o">)</span> <span class="n">ic</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&#34;jms/RemoteConnectionFactory&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">QueueConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createQueueConnection</span><span class="o">(</span><span class="n">usuario</span><span class="o">,</span> <span class="n">contrasena</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Obtener el Queue en el cual se publicarán y del cual se recibirán los mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Queue</span> <span class="n">queue</span> <span class="o">=</span> <span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Queue</span><span class="o">)</span> <span class="n">ic</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&#34;jms/queue/test&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Preparar el publicador y subscriptor al Queue&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Receiver</span> <span class="n">receiver1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Receiver</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Receiver</span> <span class="n">receiver2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Receiver</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Sender</span> <span class="n">sender</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sender</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Inicializar la recepción y envío de los mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Empezar a enviar mensajes en el Queue (y a recibirlos)&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">sender</span><span class="o">);</span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Esperar a que el enviador termine de enviar mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">thread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Parar el envío y recepción de mensajes&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">connection</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Terminar liberando los recursos&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">receiver1</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">receiver2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">sender</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">ic</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Receiver</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">QueueSession</span> <span class="n">session</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">QueueReceiver</span> <span class="n">receiver</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="nf">Receiver</span><span class="o">(</span><span class="n">QueueConnection</span> <span class="n">connection</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Queue</span> <span class="n">queue</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createQueueSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">receiver</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">createReceiver</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">receiver</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">receiver</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">TextMessage</span> <span class="n">text</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Receptor (%s): Un publicador dice: «%s»\n&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Sender</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">QueueSession</span> <span class="n">session</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">QueueSender</span> <span class="n">sender</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="nf">Sender</span><span class="o">(</span><span class="n">QueueConnection</span> <span class="n">connection</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">jms</span><span class="o">.</span><span class="na">Queue</span> <span class="n">queue</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createQueueSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">this</span><span class="o">.</span><span class="na">sender</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">createSender</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span>  <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">sender</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">Message</span> <span class="n">mensaje</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;¡Hola mundo! (%d)&#34;</span><span class="o">,</span> <span class="n">i</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">sender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">mensaje</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">					<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Queue.java</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/images/queue_huba3dbeccedc7d2cbd298ae503bd31db0_89085_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Resultado de Queue.java"><img src="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/images/queue_huba3dbeccedc7d2cbd298ae503bd31db0_89085_300x200_fit_q90_h2_box_3.webp" width="300" height="95" alt="Resultado de Queue.java" title="Resultado de Queue.java" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Comentar que los mensajes se procesan en serie por cada MessageListener, esto es, hasta que no termina el consumo de uno no se consume el siguiente. Esto se aplica por MensajeListener y sesión.</p>
<p>Si queremos probar los ejemplos deberemos disponer del servidor de aplicaciones WildFly. Para que los ejemplos funcionen deberemos configurarlo añadiendo un usuario «guest», de contraseña «guest» y de rol «guest», el añadirlo lo podemos hacer con la utilidad add-user.sh. También deberemos modificar el archivo standalone-full.xml añadiendo el topic y el queue en la sección de JMS e iniciar WildFly usando esa configuración:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./standalone.sh --server-config<span class="o">=</span>standalone-full.xml&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>standalone.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;subsystem</span> <span class="na">xmlns=</span><span class="s">&#34;urn:jboss:domain:messaging:2.0&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;hornetq-server&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;jms-destinations&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;jms-queue</span> <span class="na">name=</span><span class="s">&#34;testQueue&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;entry</span> <span class="na">name=</span><span class="s">&#34;jms/queue/test&#34;</span><span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;entry</span> <span class="na">name=</span><span class="s">&#34;java:jboss/exported/jms/queue/test&#34;</span><span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/jms-queue&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;jms-topic</span> <span class="na">name=</span><span class="s">&#34;testTopic&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;entry</span> <span class="na">name=</span><span class="s">&#34;jms/topic/test&#34;</span><span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;entry</span> <span class="na">name=</span><span class="s">&#34;java:jboss/exported/jms/topic/test&#34;</span><span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/jms-topic&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/jms-destinations&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/hornetq-server&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;/subsystem&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>standalone-full.xml</span>
    </div>
</div>
<p>Para terminar y conocer más sobre JMS un buen libro es <a href="https://amzn.to/3qxq7SK">Java Message Service</a> de O&rsquo;Reilly, que explica de forma mucho más extensa y completa este tema.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596000685&amp;linkId=70a9c20200ad5af74dc72b63f355aa27" title="Amazon" class="lozad"></iframe>
</div>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJMS">código fuente completo de estos ejemplos</a> los puedes descargar de <a href="https://github.com/picodotdev/blog-ejemplos">mi repositorio de GitHub</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.jboss.org/author/display/WFLY8/Messaging&#43;configuration">WildFly Messaging configuration</a></li>
<li><a href="https://docs.jboss.org/author/display/WFLY8/Getting&#43;Started&#43;Guide#GettingStartedGuide-WildFly8Configurations">WildFly8Configurations</a></li>
<li><a href="https://github.com/wildfly/quickstart/blob/master/helloworld-jms/src/main/java/org/jboss/as/quickstarts/jms/HelloWorldJMSClient.java">HelloWorldJMSClient.java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/">Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/publicacion-y-suscripcion-de-eventos-con-guava-eventbus-en-una-aplicacion-java/">Publicación y suscripción de eventos con Guava EventBus en una aplicación Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/</id>
        <title>Generar y convertir claves y certificados con OpenSSL</title>
        <updated>2020-07-27T12:00:00+02:00</updated>
        <published>2014-02-21T17:36:21+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Usando los comandos expuestos en este artículo y con OpenSSL podemos crear una clave pública y privada para usarlo con ssh o para cifrar y descifrar mensajes, un certificado autofirmado que podremos usar en un servidor de aplicaciones para usar un protocolo seguro y también convertir las claves y certificados a uno de los formatos aceptados por la aplicación que usemos.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/openssl.svg" width="400" height="124" alt="OpenSSL" title="OpenSSL" class="" loading="false&#34;"></p>
</div>
<p>Para un uso personal como enviar correos o archivos cifrados o firmados digitalmente usar <a href="https://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">GnuPG</a> es una buena opción. En Internet los servidores también se aprovechan del uso de criptografía para realizar comunicaciones seguras entre el usuario y el servidor.</p>
<p>Para hacer uso en un servidor de una comunicación https donde los datos viajan cifrados y sin que otras partes salvo el usuario y el servidor puedan acceder a los datos necesitamos un certificado digital. Un certificado es un archivo que contiene la clave pública sirviéndonos para verificar su autenticidad. Un certificado autofirmado es un certificado firmado con la misma clave privada asociada a la clave pública que contiene el certificado. Un certificado autofirmado es suficiente para un entorno de pruebas pero en un servidor para proporcionar confianza a los usuarios deberemos solicitar que una autoridad de certificados que nos firme con su clave nuestro certificado, si el usuario confía en esa autoridad de certificado puede de esta manera confiar en nuestro certificado y clave pública. Varias entidades de registro de dominios o alojamiento web ofrecen la compra de certificados SSL, en el artículo <a href="https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/">Certificado SSL, de empresa, «wildcard» y de validación extendida</a> comento con un poco más detalle los varios tipos de certificados y algunas opciones donde obtenerlos o comprarlos.</p>
<p>Dependiendo del tipo de certificado que solicitemos y nos entregue la autoridad de certificado el usuario podrá ver que está simplemente accediendo a un servidor con conexión segura, ver los detalles de nuestro certificado y en algunos casos el usuario podrá ver en la barra de direcciones en verde el nombre de la entidad, que puede darle al usuario más confianza y ver que realmente está accediendo al servidor correcto y no a uno que esté intentando suplantar una identidad. En este último caso la barra de direcciones no tendría en verde el nombre de la entidad, esto es algo que como usuarios debemos comprobar al acceder a determinados sitios de forma segura.</p>
<p>Con la herramienta <a href="https://www.openssl.org/">OpenSSL</a> y los siguientes comandos podemos generar claves y certificados y realizar las conversiones entre formatos que necesitemos. Una vez que disponemos de un certificado y del formato en el que necesitemos podemos hacer uso de él, por ejemplo, en un servidor de páginas web o aplicaciones para proporcionar acceso mediante el protocolo HTTPS y proporcionar seguridad SSL. En otros artículos muestro <a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">cómo configurar SSL/TLS en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</a>, por otro lado usar HTTPS es un requisito para <a href="https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/">utilizar el protocolo HTTP/2 en un servidor web</a>.</p>
<div class="alert alert-warning pt-0 pb-0 tableofcontents"><h2>Contenido del artículo</h2><toc></toc></div>
<h3 id="crear-claves-y-certificados">Crear claves y certificados</h3>
<h4 id="crear-una-clave-privada-y-pública">Crear una clave privada y pública</h4>
<p>Para generar un par de claves RSA pública y privada que nos permitan tanto cifrar datos como realizar firmas se emplea el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl genrsa -out localhost.key <span class="m">8192</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-1.sh</span>
    </div>
</div>
<p>Para cifrar la clave generada con el algoritmo <em>aes256</em> y protegerla por una contraseña se puede emplear el siguiente comando, en realidad al generar la clave indicando la misma opción <em>-aes256</em> en el comando anterior la clave se generará cifrada y protegida por una contraseña. Para cambiar la contraseña es el mismo comando y el segundo comando elimina la contraseña y la descifra:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl rsa -aes256 -in localhost.key -out localhost-encrypted.key&#10;</span></span><span class="line"><span class="cl">$ openssl rsa -in localhost-encrypted.key -out localhost.key&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-12.sh</span>
    </div>
</div>
<p>El contenido de un archivo de clave privada sin cifrar tiene el siguiente aspecto (los tres puntos son líneas de contenido omitidas).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----&#10;</span></span><span class="line"><span class="cl">MIISKAIBAAKCBAEAyMuPWmmTI4IkfoqQ2TWpqo79GEasdxn9McHb4I5Vk4c3rFIR&#10;</span></span><span class="line"><span class="cl">ExMozoWmCVvKD6Z9lT9aJ69jlwAR4KGownT4mXN0pRN3mSf6kZ854XssB6o63/0e&#10;</span></span><span class="line"><span class="cl">/D1xTYdcrP7OKMnHyZwcVKPXEz0RhUsUqH7wzIjwsoXDBDOVFM6EJ2RGo+MuTMDX&#10;</span></span><span class="line"><span class="cl">wMW3X/DvnDlaxes7ZZizrQ0F+hvopFZowZxRjj/RCJRdAbzNhVEyG+2qtaYlRIC3&#10;</span></span><span class="line"><span class="cl">mq/eYCJUi+jD1jnFr2daC4zFa6Cr7bGoxrXJlNg4iS1hjciaMV13kXXW1lsWOkPd&#10;</span></span><span class="line"><span class="cl">exctVEb/nuH64cozPhXJoBjR7rDvXPllnhTay3UnVqK7art1iqKZXmN7FGGM2nJv&#10;</span></span><span class="line"><span class="cl">w7PIYk25T7H3ucRwfT+svUzdooGNSpojKhFoaAvG4X5Z9wZgtTa24pz/T673DH+J&#10;</span></span><span class="line"><span class="cl">1Hujco+ufAwJ+ZMZDfnN2g49Y2hqrJmU177e+g6vW5xYAK8raYp6RzTYRuxKLaQg&#10;</span></span><span class="line"><span class="cl">mi4ctBsycbxETZUk1kSlOB2ebM6+8lArW8VOtCQGdNvvEfydrTHK3hxrEvW8oFAb&#10;</span></span><span class="line"><span class="cl">j5eU3oWzZL0wTMJ1S/Crbg2eRfCkWPvBdV3e5DUUlqMp2f5urxgOlHmkYEop8gBm&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">sH+8kfyWZP4x+ivVlTrtJMRPJLKAbIJ2CEN16YQtaE9tjCWcz4JjV2b7k79UEjLg&#10;</span></span><span class="line"><span class="cl">mVGXSWo8koxl8MJpSFlYJMAlhiLkoanNzW+u+LPvn2Abc6174u5QD+ihk8c=&#10;</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>localhost.key</span>
    </div>
</div>
<h4 id="exportar-la-clave-pública">Exportar la clave pública</h4>
<p>El archivo generado al crear el par de claves contiene tanto la clave pública como la privada. La privada no se debe distribuir y se debe mantener protegida de forma que solo la conozca su propietario por ejemplo guardándola en una base de datos de KeePassXC como un archivo adjunto de <a href="https://picodotdev.github.io/blog-bitix/2016/11/guardar-contrasenas-de-forma-segura-con-keepassxc/">la aplicación KeePassXC</a>. La clave pública es la que se distribuye a otras personas o entidades. Para extraer la clave pública del archivo generado anterior por OpenSSL usamos el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl rsa -in localhost.key -pubout &gt; localhost.pub&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-9.sh</span>
    </div>
</div>
<p>También se puede obtener la clave pública en formato <a href="https://www.openssh.com/">OpenSSH</a> y una representación gráfica de la huella digital.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ssh-keygen -y -f localhost.key &gt; localhost-openssh.pub&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-10.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ssh-keygen -lv -f localhost-openssh.pub&#10;</span></span><span class="line"><span class="cl"><span class="m">8192</span> SHA256:mxKfFP7NwwlZsvfxMqG9CQOjJssyOA/v1I67C4j8vwM no comment <span class="o">(</span>RSA<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">+---<span class="o">[</span>RSA 8192<span class="o">]</span>----+&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;. . .&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;   . . <span class="o">=</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>&nbsp;&nbsp;&nbsp;&nbsp;  . S * . o  <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>o. E . + * <span class="nv">O</span> <span class="o">=</span> + <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>o.o.o + B . <span class="nv">X</span> <span class="o">=</span> .<span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>  +<span class="o">=</span><span class="nv">o</span><span class="o">=</span> <span class="o">=</span>&nbsp;&nbsp;&nbsp;&nbsp; + <span class="o">=</span> <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="o">=</span>XO*&nbsp;&nbsp;&nbsp;&nbsp;   o  <span class="p">|</span>&#10;</span></span><span class="line"><span class="cl">+----<span class="o">[</span>SHA256<span class="o">]</span>-----+</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-15.sh</span>
    </div>
</div>
<h4 id="obtener-la-huella-digital-de-la-clave-pública">Obtener la huella digital de la clave pública</h4>
<p>La huella digital de una clave pública sirve para comprobar que la clave es la esperada. Son una cadena de números y letras pudiendo estar cada pareja de caracteres separados por <em>:</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl dgst -sha256 -c localhost.pub&#10;</span></span><span class="line"><span class="cl">SHA256<span class="o">(</span>localhost.pub<span class="o">)=</span> a4:39:88:cf:8b:cf:3c:13:23:c1:e6:f8:10:d3:e5:a4:95:6f:30:d6:11:b1:81:4b:ce:3d:c0:e5:1c:57:ca:ff&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-11.sh</span>
    </div>
</div>
<h4 id="crear-un-certificado">Crear un certificado</h4>
<p>Un certificado permite utilizar el protocolo seguro HTTPS en un servidor web y contiene la firma de una tercera parte que valida nuestra clave pública como auténtica. Para que esa tercera parte pueda firmar nuestra clave deberemos generar una petición de firma de certificado y enviársela a la autoridad de certificado que nos lo devolverá firmado. La petición firma de certificado se crea con el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl req -new -key localhost.key -out localhost.csr&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-2.sh</span>
    </div>
</div>
<p>Si no queremos tratar con una autoridad de certificado, ya que cobran por la firma, podemos crear un certificado autofirmado que puede ser suficiente para un entorno de pruebas de un servidor web. El comando para generar el certificado autofirmado es, la opción <em>-subj</em> indica la información del sujeto a autenticar:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl req -new -x509 -days <span class="m">1825</span> -subj <span class="s2">&#34;/C=ES/ST=Spain/L=/O=/CN=localhost&#34;</span> -key localhost.key -out localhost.crt&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-3.sh</span>
    </div>
</div>
<h3 id="convertir-un-certificado-a-otros-formatos">Convertir un certificado a otros formatos</h3>
<p>Dependiendo de la autoridad de certificado el certificado puede estar en diferentes formatos, también dependiendo del servidor donde se quiera usar es necesario convertirlo a al formato adecuado. OpenSSL permite para hacer las conversiones entre formatos DER, PEM y PKCS#12.</p>
<h4 id="convertir-un-certificado-en-formato-der-crt-cer-der-a-pem">Convertir un certificado en formato DER (.crt .cer .der) a PEM</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat localhost.key localhost.crt &gt; localhost.pem&#10;</span></span><span class="line"><span class="cl">$ openssl x509 -in localhost.crt -out localhost.pem&#10;</span></span><span class="line"><span class="cl">$ openssl x509 -inform der -in localhost.cer -out localhost.pem</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-4.sh</span>
    </div>
</div>
<h4 id="convertir-un-certificado-en-formato-pem-a-der">Convertir un certificado en formato PEM a DER</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl x509 -outform der -in localhost.pem -out localhost.der&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-5.sh</span>
    </div>
</div>
<h4 id="convertir-un-certificado-en-formato-pem-y-una-clave-privada-a-pkcs12-pfx-p12">Convertir un certificado en formato PEM y una clave privada a PKCS#12 (.pfx .p12)</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl pkcs12 -export -out localhost.p12 -inkey localhost.key -in localhost.crt&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-6.sh</span>
    </div>
</div>
<h4 id="convertir-un-archivo-en-formato-pkcs12-pfx-p12-que-contiene-una-clave-privada-y-certificado-a-pem">Convertir un archivo en formato PKCS#12 (.pfx .p12) que contiene una clave privada y certificado a PEM</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl pkcs12 -in localhost.p12 -out localhost.pem -nodes&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-7.sh</span>
    </div>
</div>
<h4 id="convertir-pkcs12-a-keystore-jks">Convertir PKCS#12 a keystore JKS</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ keytool -importkeystore -destkeystore localhost.keystore -srckeystore localhost.p12 -srcstoretype pkcs12&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-8.sh</span>
    </div>
</div>
<h3 id="examinar-certificados">Examinar certificados</h3>
<h4 id="examinar-un-certificado">Examinar un certificado</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl x509 -text -noout -in localhost.crt&#10;</span></span><span class="line"><span class="cl">Certificate:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;Data:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Serial Number:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;49:e5:32:9b:7f:be:bf:a6:90:14:34:5e:24:53:e8:96:51:8d:74:d4&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Signature Algorithm: sha256WithRSAEncryption&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Issuer: <span class="nv">C</span> <span class="o">=</span> ES, <span class="nv">ST</span> <span class="o">=</span> Spain, <span class="nv">CN</span> <span class="o">=</span> localhost&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Validity&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not Before: Jul <span class="m">27</span> 10:40:19 <span class="m">2020</span> GMT&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not After : Jul <span class="m">26</span> 10:40:19 <span class="m">2025</span> GMT&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject: <span class="nv">C</span> <span class="o">=</span> ES, <span class="nv">ST</span> <span class="o">=</span> Spain, <span class="nv">CN</span> <span class="o">=</span> localhost&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Public Key Info:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Public Key Algorithm: rsaEncryption&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RSA Public-Key: <span class="o">(</span><span class="m">8192</span> bit<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Modulus:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;00:c8:cb:8f:5a:69:93:23:82:24:7e:8a:90:d9:35:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a9:aa:8e:fd:18:46:ac:77:19:fd:31:c1:db:e0:8e:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exponent: <span class="m">65537</span> <span class="o">(</span>0x10001<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X509v3 extensions:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X509v3 Subject Key Identifier: &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;07:A0:9B:0F:8F:22:9D:AE:CF:F7:46:11:82:B7:7A:0C:43:88:58:8D&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X509v3 Authority Key Identifier: &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyid:07:A0:9B:0F:8F:22:9D:AE:CF:F7:46:11:82:B7:7A:0C:43:88:58:8D&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X509v3 Basic Constraints: critical&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CA:TRUE&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;Signature Algorithm: sha256WithRSAEncryption&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1b:9d:d1:a5:1a:2d:23:8c:09:8b:08:6c:fb:49:f6:88:e9:51:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 86:ce:19:53:74:ab:90:01:d9:ab:d1:9e:2b:56:ca:7c:a3:53:&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-13.sh</span>
    </div>
</div>
<h4 id="examinar-el-certificado-de-un-servidor-web">Examinar el certificado de un servidor web</h4>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl s_client -showcerts -connect duckduckgo.com:443&#10;</span></span><span class="line"><span class="cl">CONNECTED<span class="o">(</span>00000003<span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">2</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert Global Root CA&#10;</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1&#10;</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Secure Server CA&#10;</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1&#10;</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> Pennsylvania, <span class="nv">L</span> <span class="o">=</span> Paoli, <span class="nv">O</span> <span class="o">=</span> <span class="s2">&#34;Duck Duck Go, Inc.&#34;</span>, <span class="nv">CN</span> <span class="o">=</span> *.duckduckgo.com&#10;</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1&#10;</span></span><span class="line"><span class="cl">---&#10;</span></span><span class="line"><span class="cl">Certificate chain&#10;</span></span><span class="line"><span class="cl"> <span class="m">0</span> s:C <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> Pennsylvania, <span class="nv">L</span> <span class="o">=</span> Paoli, <span class="nv">O</span> <span class="o">=</span> <span class="s2">&#34;Duck Duck Go, Inc.&#34;</span>, <span class="nv">CN</span> <span class="o">=</span> *.duckduckgo.com&#10;</span></span><span class="line"><span class="cl">   i:C <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Secure Server CA&#10;</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----&#10;</span></span><span class="line"><span class="cl">MIIGNTCCBR2gAwIBAgIQAx42ydSKbld6na9pgqdX4zANBgkqhkiG9w0BAQsFADBN&#10;</span></span><span class="line"><span class="cl">MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMScwJQYDVQQDEx5E&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">-----END CERTIFICATE-----&#10;</span></span><span class="line"><span class="cl"> <span class="m">1</span> s:C <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Secure Server CA&#10;</span></span><span class="line"><span class="cl">   i:C <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert Global Root CA&#10;</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----&#10;</span></span><span class="line"><span class="cl">MIIElDCCA3ygAwIBAgIQAf2j627KdciIQ4tyS8+8kTANBgkqhkiG9w0BAQsFADBh&#10;</span></span><span class="line"><span class="cl">MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3&#10;</span></span><span class="line"><span class="cl">...&#10;</span></span><span class="line"><span class="cl">-----END CERTIFICATE-----&#10;</span></span><span class="line"><span class="cl">---&#10;</span></span><span class="line"><span class="cl">Server certificate&#10;</span></span><span class="line"><span class="cl"><span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> Pennsylvania, <span class="nv">L</span> <span class="o">=</span> Paoli, <span class="nv">O</span> <span class="o">=</span> <span class="s2">&#34;Duck Duck Go, Inc.&#34;</span>, <span class="nv">CN</span> <span class="o">=</span> *.duckduckgo.com&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Secure Server CA&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">---&#10;</span></span><span class="line"><span class="cl">...</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-14.sh</span>
    </div>
</div>
<h3 id="autoridad-de-certificación">Autoridad de certificación</h3>
<p>Los comandos anteriores permiten generar un certificado autofirmado válido para proporcionar una conexión cifrada entre un servidor y un cliente como es el caso de un servidor web y un navegador web. Pero los certificados autofirmados no permiten todas las validaciones de seguridad, el cliente no puede confiar en que realmente se está conectando al nombre del dominio del servidor que el certificado incluye y por ello en el cliente hay que eliminar la validación de comprobación del certificado. Para mayor seguridad y en un entorno de producción se ha de utilizar una autoridad de certificación, es posible <a href="https://picodotdev.github.io/blog-bitix/2020/08/comandos-para-crear-una-autoridad-de-certificacion-ca-con-openssl/">crear una autoridad de certificación propia con comandos de OpenSSL</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.openssl.org/">OpenSSL</a></li>
<li><a href="http://www.sslshopper.com/article-most-common-openssl-commands.html">The Most Common OpenSSL Commands</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="programacion"/>
            
                <category term="seguridad"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="web"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/</id>
        <title>Libro sobre desarrollo de aplicaciones con Apache Tapestry</title>
        <updated>2015-04-10T20:00:00+02:00</updated>
        <published>2014-02-14T20:10:34+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>Hace unos meses publiqué el libro PlugIn Tapestry, un libro acerca del desarrollo de aplicaciones y páginas web en el lenguaje Java y con el <em>framework</em> <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>
<h3 id="plugin-tapestry">PlugIn Tapestry</h3>
<p>Apache Tapestry es un <em>framework</em> orientado a componentes para crear aplicaciones web rápidas, dinámicas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como <a href="http://projects.spring.io/spring-framework/">Spring</a>, <a href="https://grails.org/">Grails</a> y <a href="http://www.playframework.com/">Play!</a> y también de los muchos otros en los que la principal diferencia es el lenguaje como <a href="https://www.djangoproject.com/">Django</a> (Python), <a href="http://symfony.com/">Symfony</a> (PHP), <a href="http://www.asp.net/mvc">ASP.NET MVC</a> (C#) o <a href="http://rubyonrails.org/">Ruby On Rails</a> (Ruby).</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/images/portada-plugintapestry_hudd958694a9c7fbaaf2a5b065abe3f288_268557_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/images/portada-plugintapestry_hudd958694a9c7fbaaf2a5b065abe3f288_268557_300x200_fit_q90_h2_box_3.webp" width="141" height="200" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Incluyendo la descripción de las características del <em>framework</em> el libro trata la mayoría de aspectos que puede necesitar una aplicación o página web, entre ellos:</p>
<ul>
<li>Introducción, principios y características</li>
<li>Inicio rápido</li>
<li>Páginas y componentes</li>
<li>Contenedor de dependencias (IoC)</li>
<li>Assets (imágenes, estilos, javascript) y módulos RequireJS</li>
<li>Formularios</li>
<li>Internacionalización (i18n) y localización (l10n)</li>
<li>Persistencia web</li>
<li>Persistencia en bases de datos</li>
<li>Ajax</li>
<li>Seguridad (autenticación, autorización, XSS, Inyección SQL, HTTPS)</li>
<li>Librerías de componentes</li>
<li>Pruebas unitarias, de integración y funcionales (<a href="http://junit.org/">JUnit</a>/<a href="http://code.google.com/p/mockito/">Mockito</a>, <a href="http://code.google.com/p/spock/">Spock</a>, <a href="http://www.gebish.org/">Geb</a>)</li>
<li>Y algunas cosas más sin entrar en muchos detalles como envió de correos, generación de informes, gráficas, una API REST, analizadores estáticos de código, CDN, &hellip;</li>
</ul>
<p>El libro está basado en la siguiente versión de Tapestry, la 5.4, que actualmente está en estado beta (aunque la mayoría servirá para la versión final y para la versión 5.3 actual). Esta nueva versión tiene como principal novedad la parte cliente de las aplicaciones con la inclusión de RequireJS y la definición de los archivos JavaScript mediante módulos. También incorpora una capa de abstracción que permite usar cualquier librería como apoyo a la funcionalidad que necesita proporcionar ya sea Prototype, jQuery o cualquier otra que prefiramos o nueva que se desarrolle en un futuro.</p>
<p>Además del libro he desarrollado una <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">pequeña aplicación con unos pocos ejemplos</a> (disponible en mi repositorio de GitHub) que puedes probar en tu equipo sin necesidad de instalar nada previamente, salvo Git y el JDK. Más de 250 páginas de documentación que permitirán al lector descubrir mucha de la magia que puede ofrecer este <em>framework</em>. Además en <a href="https://picodotdev.github.io/blog-bitix/">mi blog</a> (y <a href="https://elblogdepicodev.blogspot.com.es">elblogdepicodev</a>) puedes encontrar varias entradas sobre muchos de los temas tratados de forma individual y que he utilizado para escribir el libro.</p>
<p>Puedes obtenerlo desde los enlaces que proporciono de forma totalmente libre y al inmejorable precio de 0,00 € impuestos incluidos. Por si fuera poco puedes conseguirlo en el formato electrónico PDF. Tienes mi permiso (es más, animo a ello) para compartirlo, distribuirlo en redes P2P, subirlo a cualquier página web o «piratearlo» cuantas veces quieras, siempre que respetes la licencia Creative Commons bajo la cual lo he publicado.</p>
<div class="buttons">
    <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">Descargar el libro (PDF)</a>
    <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Obtener código fuente ejemplos</a>
</div>
<div class="share-this" style="text-align: center; margin-bottom: 20px">
  <h3>¡Y luego compártelo!</h3>
  <div class="sharethis-inline-share-buttons">
  <span class="st_twitter_vcount" st_title="He descargado el libro sobre desarrollo de apps web con Apache Tapestry. ¡Obtén tu copia! #PlugIn" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" st_via="picodotdev"></span>
  <span class="st_facebook_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icontext-600.png"></span>
  <span class="st_googleplus_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icontext-600.png"></span>
  <span class="st_linkedin_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/" st_image="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icontext-600.png"></span>
  </div>
</div>
<h3 id="apache-tapestry">Apache Tapestry</h3>
<p>Algunas características destacadas de Apache Tapestry son:</p>
<h4 id="java">Java</h4>
<p>Normalmente se usa el lenguaje Java con lo que el compilador y el asistente de código de tu IDE te ayudarán.</p>
<h4 id="políglota">Políglota</h4>
<p>Si prefieres puedes utilizar Groovy, Scala o cualquier otro lenguaje soportado por la JVM.</p>
<h4 id="productivo">Productivo</h4>
<p>La recarga de clases en caliente evitará que tengas que reiniciar el servidor para ver tus cambios aplicados. Simplemente actualiza el navegador.</p>
<h4 id="rápido">Rápido</h4>
<p>El <em>framework</em> está programado en Java sin hacer uso de reflection. Incorpora varias optimizaciones que harán tu aplicación más eficiente sin trabajo por tu parte como compresión gzip, minificación y agregación css/javascript, cacheo agresivo en el cliente de assets, supresión de espacios en blanco innecesarios, &hellip;</p>
<h4 id="basado-en-componentes">Basado en componentes</h4>
<p>Los componentes son piezas autónomas y resusables de código. Para usar uno simplemente necesitarás conocer sus parámetros todo lo demás como archivos javascript, hojas de estilo y mensajes localizados son proporcionados por el componente. Los componentes pueden lanzar eventos y diferentes contenedores comportarse de diferente forma ante el mismo evento.</p>
<h4 id="informe-de-error-avanzado">Informe de error avanzado</h4>
<p>El informe te proporciona mucha más información que simplemente la traza de la excepción, verás que se estaba haciendo, que fué mal y como corregirlo. Con toda esta información solucionar las excepciones será mucho más rápido y fácil. El informe de error también es presentado en caso de errores en las peticiones AJAX.</p>
<h4 id="testable">Testable</h4>
<p>Puedes probar los componentes de forma unitaria, el html generado o hacer pruebas de integración y funcionales. Los componentes son POJOs que no necesitan heredar ni implementar ninguna clase del <em>framework</em>. Podrás utilizar la herramienta que desees JUnit/Mockito, Spock, Geb, &hellip;</p>
<h4 id="extensible-adaptable-y-modular">Extensible, adaptable y modular</h4>
<p>Gracias al contenedor de dependencias y a que los servicios están programados en base a interfaces puedes definir una nueva implementación que modifique el comportamiento del <em>framework</em>. Todo servicio en el contenedor de dependencias puede ser redefinido, la mayoría de las cosas son servicios. Existen módulos para Hibernate, Apache Shiro, Quartz, &hellip; y si no existe puedes usar cualquier librería como RESTEasy, JasperReports, EHCache, JFreeChart, RestFB&hellip;</p>
<h4 id="i18n-y-l10n">i18n y l10n</h4>
<p>Puedes tener catálogos de mensajes por componente o de manera global en la aplicación. Los assets (imágenes, css, &hellip;) también son localizables y tener una plantilla con un contenido totalmente diferente según el idioma del usuario.</p>
<h4 id="convención-sobre-configuración">Convención sobre configuración</h4>
<p>Las convenciones permiten evitar la configuración y los posibles errores que podemos cometer al realizarla. Pero más importante, hace que cualquier programador que conozca las convenciones sepa inmediatamente como están organizadas todas las cosas con lo que el tiempo de aprendizaje se reduce considerablemente.</p>
<h4 id="librerías-de-componentes">Librerías de componentes</h4>
<p>Los componentes comunes a varios proyectos pueden ser agregados en una librería de componentes (no es más que un archivo jar) para ser reutilizados. Nuevamente para usar los componentes solo tendrás que preocuparte de los parámetros, todos los recursos que necesiten serán extraídos de la librería. No necesitarás copiar y pegar archivos de un proyecto a otro, solo agregar una dependencia o jar a tu proyecto.</p>
<p>Según su principal desarrollador (Howard Lewis Ship, que obtuvo el premio Java Champion en 2010 <a href="https://java.net/website/java-champions/bios.html#Ship">[1]</a> y Duke&rsquo;s Choice Award por el <em>framework</em> <a href="https://www.java.net/dukeschoice/2006">[2]</a> en la categoría <em>open source</em>), y modestia aparte, piensa que Tapestry ha sido un líder desde una perspectiva puramente tecnológica. Estas son algunas cosas que cree que hizo primero y todavía piensa que lo hace mejor que nadie:</p>
<ul>
<li>Componentes reusables (2001)</li>
<li>Informe de excepción detallado y útil (2001)</li>
<li>Instrumentación invisible en las plantillas (2002)</li>
<li>Informe de error con precisión de linea (2004)</li>
<li>Metaprogramación y modificación de bytecode (2005)</li>
<li>Recarga de clases en caliente (2006)</li>
<li>Informe de error completo para peticiones Ajax (2012)</li>
<li>Integración con RequireJS, less/sass y CoffeeScript (2013)</li>
</ul>
<p>¿Te ha parecido poco? <a href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/">¡Descubre alguna más en una presentación!</a>.</p>
<p>¡Que lo disfrutéis!, usar el siguiente <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf">enlace para ¡descargarlo!</a></p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a> (elblogdepicodev)</li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/</id>
        <title>Presentación sobre Apache Tapestry</title>
        <updated>2015-05-27T23:00:00+02:00</updated>
        <published>2014-02-14T16:05:53+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry" class="" loading="false&#34;"></p>
</div>
<p>El 10 de febrero tuve la oportunidad de dar una charla, la primera, sobre <a href="http://tapestry.apache.org/">Apache Tapestry</a> para el equipo de desarrolladores de la empresa en la que trabajo. Que en el equipo de desarrollo tengamos la posibilidad de vez en cuando dedicar un par de horas para juntarnos y compartir conocimiento es una buena iniciativa ya que siendo ya un equipo bastante grande de personas y con un nivel técnico elevado cada uno tiene un conocimiento que los demás pueden estar interesados en conocer al menos a nivel superficial, es motivador tener estas oportunidades.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/images/presentacion-apache-tapestry_hu5813c80b678e047881b7600768eec1cc_49900_2560x1440_fit_q90_h2_box.webp" data-gallery="" title="Presentación sobre Apache Tapestry"><img src="https://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/images/presentacion-apache-tapestry_hu5813c80b678e047881b7600768eec1cc_49900_300x200_fit_q90_h2_box.webp" width="300" height="200" alt="Presentación sobre Apache Tapestry" title="Presentación sobre Apache Tapestry" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Fue una charla simplemente como cultura general ya que el <em>framework</em> y el lenguaje que usamos como pila tecnológica es <a href="https://grails.org/">Grails</a> y <a href="https://www.groovy-lang.org/">Groovy</a> y eso es complicado que cambie. Otro motivo fue poder compartir el conocimiento de este <em>framework</em> para el desarrollo de aplicaciones y páginas web que a mi me gusta mucho. Si estás suscrito al <a href="http://feeds.feedburner.com/blog-bitix/">feed de mi blog</a> ya conocerás que de vez en cuando publico alguna entrada comentando algún aspecto sobre él (tengo ya algunas preparadas y otras en mente) y si estás suscrito desde hace unos meses conocerás que escribí un libro. La charla fue para comentar los «porque» alguien podría elegir este <em>framework</em> y no tanto el «como» se hacen las cosas en él, para esto último ya esta el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapestry</a>, <a href="https://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">otra documentación</a> y la propia <a href="http://tapestry.apache.org/documentation.html">documentación del proyecto</a>.</p>
<p>Probablemente la charla podría haberla explicado mucho mejor, fue lo mejor que fui capaz. También ya después de unas horas me dí cuenta de los detalles menores pero interesantes que se me pasaron comentar, unos cuantos. Pero teniendo en cuenta que es de las primeras charlas técnicas que doy, en general quedé satisfecho y por lo menos me servirá de experiencia para las siguientes. Dar una charla require tanto o mas esfuerzo que crear una entrada en el blog. Requiere crear una presentación, incluir en ella la información relevante que se quiere comentar según el objetivo y tener en cuenta el público al que va dirigida, poner la información de una forma que explique de forma coherente lo importante, tener cierta habilidad comunicativa (que creo no tengo) y ensayar la charla para ajustarla al tiempo del que se dispone y otras tantas cosas como estas. A pesar de que fue una charla de dos horas hay muchos detalles que se quedaron fuera, solo vimos la superficie de todo lo que tiene que ofrecer este <em>framework</em>.</p>
<p>En la charla surgió alguna pregunta interesante como ¿por que teniendo Tapestry ya más de 10 años de vida no es un <em>framework</em> más usado? Algunos de los motivos que dí fueron que Tapestry tiene una curva de aprendizaje mayor que otros <em>frameworks</em> ya que cambia el modelo de desarrollo de los <em>frameworks</em> basados en acciones a uno basado en componentes. El modelo basado en acciones lleva usándose desde Struts y es ampliamente usado en diversos <em>frameworks</em>. Struts fué uno de los <em>frameworks</em> más utilizados en su momento y por tanto usar otro <em>framework</em> basado en acciones en el que en muchos casos lo único que cambia en esencia es el lenguaje de programación, es más rápido y no require adquirir tanto conocimiento nuevo para usar uno que siga los mismos principios. Desde entonces han surgido nuevos <em>frameworks</em> <a href="https://grails.org/">Grails</a>, <a href="http://www.playframework.com/">Play!</a>, <a href="http://symfony.com/">Symfony</a>, <a href="https://www.djangoproject.com/">Django</a>, <a href="http://www.asp.net/mvc">ASP.NET MVC</a>, <a href="http://rubyonrails.org/">Ruby on Rails</a>, &hellip; como digo en esencia en todos ellos el principal cambio es el lenguaje de programación. Otro motivo puede ser que los desarrolladores de Tapestry no tienen detrás a una compañía que les apoya finaciandoles para promover su uso y evangelizar a tiempo completo, aunque de vez en cuando lo hacen, el proyecto está dentro de la <a href="http://www.apache.org/">fundación Apache</a> y los desarrolladores viven de la consultoría o proyectos que realizan. A pesar de tener unas características muy notables (IMHO), que se superan en cada nueva versión siguiendo la tendencia de las aplicaciones e innovando, a veces una buena solución no tiene por que ser la que más éxito tenga o sea la más usada, ¿por que linux no es un sistema operativo más usado en el escritorio? Los motivos serán diferentes en este caso pero el resultado es que lo que unos consideran la mejor opción no no tiene por que ser la más ampliamente usada.</p>
<p>Otra pregunta interesante que surgió fue que parte de lo que comenté sobre Tapestry también puede realizarse con el <em>framework</em> en concreto con el que lo comparamos, Grails aunque podría ser otro. Sí, probablemente estructurando las cosas de cierta forma en Grails se puede conseguir algunas cosas parecidas como reutilización de controladores, acciones y elementos visuales comunes (en el mismo proyecto, página y diferentes proyectos) pero desde luego habría que buscar una solución propia y resolver algunos problemas que ya resuelve Tapestry por nosotros como generación de ids únicos para los elementos visuales (ids de las etiquetas) de forma que no haya conflictos, inclusión de recursos según los componentes de la página, internacionalización (i18n) de assets (imágenes, plantillas), sin lógica en las plantillas y siguiendo el modelo pull en las vistas, reutilización en diferentes proyectos con librerías, configuración distribuida para el contenedor de dependencias, detección de errores de compilación en las plantillas, página de excepción informativa y para peticiones ajax, actualización de zonas de una página con cero javascript, actualización de multiples zonas de una página en una única petición ajax, servicios mutuamente dependientes, instrumentación invisible en las plantillas, integración de RequireJS en el lado del servidor y cliente, eventos y comportamiento diferente según el elemento contenedor ante un mismo evento, escalabilidad &hellip;. Algunas serían posibles, otras quizá no y posiblemente en las posibles tendríamos que implementar nosotros alguna solución propia, no seguirían las indicaciones que se proporcionan en el manual de Grails y quizá las cosas no serían manejables ni quedarían de una forma que quedásemos a gusto con el código. A pesar de todo la herramienta utilizada no es lo más importante, pero si es cierto que utilizar una u otra si puede contribuir a hacer ciertas cosas más de forma más sencilla y cuando las cosas alcanzan un volumen grande sigan siendo manejables (no haya duplicación, no se produzcan muchos errores al hacer cambios, reutilización) que es cuando Tapestry en teoría empieza a mostrar sus virtudes. Lo mismo que se puede hacer con Grails o Tapestry también se puede hacer con <em>servlets</em> y JSP pero probablemente acabaríamos simulando un nuevo Grails o Tapestry, mejor usar el que más nos facilite las tareas y uno que probablemente será mejor que cualquier cosa que podamos hacer nosotros además de no tener que encargarnos de hacerla ni mantenerla. Grails también tienen algunas cosas destacables «built-in» que en Tapestry hay que proporcionarlas con alguna librería, como GORM. Si hay tantos <em>frameworks</em>, librerías, etc ahí fuera probablemente sea porque hay diferentes necesidades, puntos de vista diferentes de como resolverlos, &hellip; en definitiva es cuestión de elegir el que más nos convenza por diferentes motivos y la elección puede ser subjetiva.</p>
<p>Y otra pero no menos interesante pregunta es por que tapestry se llama tapestry o por que el logo de tapestry es un unicornio, anteriormente fue similar a una T en la versión 3, para el nombre no tengo respuesta. Leyendo un <a href="http://mail-archives.apache.org/mod_mbox/tapestry-users/200605.mbox/%3Cop.s9k7abmko3wyor@liigo%3E">hilo en la lista de destribución</a> en la que se discutía el asunto se da algunas ideas pero no me ha quedado una clara.</p>
<p>A continuación la <a href="https://speakerdeck.com/picodotdev/plugin-tapestry">presentación completa de la charla</a> que dí y que contiene de forma más explícita todo lo que está incluido en el libro <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry</a>.</p>
<div class="media">
    <script async class="speakerdeck-embed" data-id="94de4cc06da70131c6665e5071095c76&#34;" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
    <noscript>$TODO</noscript>
</div>
<p>Un par de gracias, la sensación de haber aportado algo (o al menos haberlo intentado), el ruido que hicimos en twitter con el <em>hastag</em> <a href="https://twitter.com/search?q=tapestry5">#tapestry5</a>, unos pocos seguidores adicionales y algunos retweets incluido el del principal hacedor de Tapestry fue suficiente recompensa.</p>
<p>Un blog desde hace ya 4 años, un libro el año pasado, una charla este ¿que será lo siguiente? «Non gogoa, han zangoa».</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
                <category term="software"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/</id>
        <title>El servidor de aplicaciones JBoss/WildFly</title>
        <updated>2016-03-14T18:00:00+01:00</updated>
        <published>2014-02-07T22:35:31+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/wildfly.svg" width="300" height="300" alt="WildFly" title="WildFly" class="" loading="false&#34;"></p>
</div>
<p>Para una pequeña (o no tan pequeña) aplicación web desarrollada en la plataforma Java un servidor como <a href="http://tomcat.apache.org/">Tomcat</a> o <a href="http://www.eclipse.org/jetty/">Jetty</a> es suficiente. Pero una aplicación grande o un entorno empresarial probablemente empiece a requerir funcionalidades que Tomcat no proporciona de por si. En algunos casos una librería puede suplir esta carencia, este podría ser el caso de <a href="http://hibernate.org/">Hibernate</a> para la persistencia o <a href="http://shiro.apache.org/">Apache Shiro</a> para la seguridad de la aplicación. Sin embargo, cuando sea posible y tenga sentido es buena idea seguir alguna de las especificaciones o APIs que proporciona la plataforma <a href="https://en.wikipedia.org/wiki/Java_Platform">Java EE</a> ya que de esta manera podremos cambiar de implementación sin necesidad de modificar el código de la aplicación y permite integrar dos sistemas diferentes si ambos siguen una determinada especificación. Un ejemplo podría ser el caso de Hibernate con la especificación JPA que proporciona una funcionalidad equivalente (de hecho esta especificación se basa en Hibernate y se puede usar Hibernate como implementación a través de la API que define JPA) o de integración de sistemas con JMS.</p>
<p>Los servidores de aplicaciones se pueden distinguir por la cantidad de especificaciones que implementan, sus versiones, perfiles y la versión de Java EE que cumplen. Por una parte tendríamos los contenedores de <em>servlets</em> y JSP como podrían ser Apache Tomcat y Jetty, estos cumplen con un perfil web e implementan una parte de las especificación que engloba Java EE. Por otra parte están los servidores que cumplen con toda las especificaciones que define Java EE y se les suele denominar <em>full profile</em> o perfil completo. Ejemplos de servidores de aplicaciones full profile son:</p>
<ul>
<li><a href="https://glassfish.java.net/">Glashfish</a>: la implementación de referencia de un servidor de aplicaciones.</li>
<li><a href="https://www.oracle.com/us/products/middleware/cloud-app-foundation/weblogic/suite/overview/index.html">Weblogic</a>: el servidor de aplicaciones propietario que adquirió Oracle con la compra de la antigua BEA Systems.</li>
<li><a href="http://geronimo.apache.org/">Apache Geronimo</a>: servidor de aplicaciones proporcionado por la fundación Apache. Las implementaciones de las especificaciones son proporcionadas por muchos de los proyectos de la propia fundación.</li>
<li><a href="https://www.jboss.org/overview/">JBoss</a>/<a href="http://wildfly.org/">WildFly</a>: servidor de aplicaciones que adquirió <a href="http://www.redhat.com/">RedHat</a> de la comunidad JBoss pero al contrario que Oracle y Weblogic con licencia libre de software libre.</li>
</ul>
<p>De la plataforma Java EE hay varias versiones que a medida que se van publicando mejoran y amplían las especificaciones que ya estaban disponibles en una versión anterior o se incluyen nuevas especificaciones que han de soportar los servidores de aplicaciones si quieren certificarse como <em>full profile</em>. La última versión al momento de escribir esta entrada es la Java EE 7 publicada en abril de 2013. En la <a href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/">introducción y nuevas características de Java EE</a> comento un poco más, aunque este listado no es completo las especificaciones más destacables son:</p>
<ul>
<li>JSF (2.2): para desarrollar aplicaciones web sucesor de los JSP.</li>
<li>Servlets (3.1) y JSPs (2.3): los <em>servlets</em> son la base a partir de la cual desarrollar aplicaciones web dinámicas y los JSP una forma de <em>servlet</em> en el que la mayor parte de el código HTML, similar a PHP.</li>
<li>CDI (1.0): proporciona inyección de dependencias de forma parecida a <em>frameworks</em> como Spring.</li>
<li>EJB (3.2): beans gestionados por un contenedor administrando su ciclo de vida y proporcionales funcionalidades como persistencia y transacciones. Suelen usarse para incluir la lógica de negocio de la aplicación.</li>
<li>Bean Validation (1.1): funcionalidad que mediante anotaciones permite indicar restricciones sobre los valores que pueden contener los beans.</li>
<li>JPA (2.1): especificación que proporciona persistencia en una base de datos.</li>
<li>JTA (1.2): especificación que proporciona transaccionalidad.</li>
<li>JMS (2.0): especificación que permite a las aplicaciones comunicarse mediante mensajes de forma desacoplada.</li>
<li>JAX-RS (2.0): especificación sobre los servicios web basados en el modelo REST sobre el protocolo HTTP.</li>
<li>JAX-WS (1.3): especificación sobre servicios web basados en XML.</li>
<li>JavaMail (1.5): especificación para el envío de mensajes de correo electrónico.</li>
</ul>
<p>De entre los servidores de aplicaciones mencionados anteriormente está JBoss. WildFly es un servidor de aplicaciones Java desarrollado por <a href="https://www.redhat.com/es">Red Hat</a> que implementa las especificaciones Java EE. Es un servidor con una licencia libre y es la versión para la comunidad que Red Hat renombra como JBoss para su catálogo de productos destinados a las empresas.</p>
<p>WildFly arranca tremendamente rápido (unos 10 segundos, no mucho más que un Tomcat que ofrece muchas menos funcionalidades), tiene una licencia de software libre, ofrece soporte y detrás está una compañía que claramente apuesta por el software libre en su modelo de negocio. En sus versiones de JBoss, la 7.1, y 8 de WildFly ya no se producen los errores de conflictos entre librerías que se producían anteriormente con el <em>classpath hell</em>, ya que en vez de seguir un modelo jerárquico como antes sigue un modelo OSGi con JBoss Modules. Ahora se basa en módulos y cada war, ear o jar está aislado del resto. Puede administrarse mediante linea de comandos y a través de una consola web evitándose los conflictos. Para diferenciar más claramente la versión comercial de la ofrecida a la comunidad JBoss ha pasado a llamarse WildFly para la versión de la comunidad y la relación con JBoss será similar a la que tienen <a href="http://www.redhat.com/products/enterprise-linux/">RHEL</a> con <a href="https://fedoraproject.org/">Fedora</a> y desde hace poco con <a href="http://www.centos.org/">CentOS</a>.</p>
<p>A continuación unas pocas capturas de pantalla de la página de inicio de WildFly y de la consola de administración:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/images/wildfly_hu028109b5fde6d9cd9802c988bf410dd2_83141_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/images/wildfly_hu028109b5fde6d9cd9802c988bf410dd2_83141_300x200_fit_q90_h2_box_3.webp" width="293" height="200" class="&#34; " loading="lazy"></a>
<a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/images/wildfly-admin-1_hu3328fa2dcca4cbbd92a324da2dfb7f4c_85243_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Consola de administración"><img src="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/images/wildfly-admin-1_hu3328fa2dcca4cbbd92a324da2dfb7f4c_85243_300x200_fit_q90_h2_box_3.webp" width="224" height="200" alt="Consola de administración" title="Consola de administración" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/images/wildfly-admin-2_hu1134111a04d890440a675659779ddb69_108507_2560x1440_fit_q90_h2_box_3.webp" data-gallery="" title="Consola de administración"><img src="https://picodotdev.github.io/blog-bitix/2014/02/el-servidor-de-aplicaciones-jboss-slash-wildfly/images/wildfly-admin-2_hu1134111a04d890440a675659779ddb69_108507_300x200_fit_q90_h2_box_3.webp" width="257" height="200" alt="Consola de administración" title="Consola de administración" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>En las <a href="http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/">notas de publicación de WildFly 8</a> pueden consultarse las numerosas e interesantes funcionalidades añadidas. También en el siguiente <a href="http://wildfly.org/news/2013/11/21/WildFly-8-Webinar/">vídeo</a> se explican muchos de los detalles que incorpora.</p>
<p>En posteriores entradas y siguiendo la serie de entradas de seguridad (<a href="https://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.htmlindex-amp.html">I</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.htmlindex-amp.html">II</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.htmlindex-amp.html">III</a>, <a href="https://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/">IV</a>, <a href="https://picodotdev.github.io/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution/">V</a> y <a href="https://picodotdev.github.io/blog-bitix/2013/12/firmar-digitalmente-documentos-con-el-dnie-y-sinadura/">VI</a>) comentaré como crear certificados para usarlos con el protocolo seguro SSL y como configurar diferentes servidores web y de aplicaciones Java, entre ellos WildFly, para usar SSL y el protocolo HTTPS.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/">Introducción y nuevas características de Java EE 7</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Generar y convertir claves y certificados con OpenSSL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL/TLS en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/">Configurar HTTP/2 en Nginx, Apache HTTPD, WildFly o Jetty</a></li>
<li><a href="http://wildfly.org/">WildFly</a></li>
<li><a href="http://jbossas.jboss.org/">JBoss</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/</id>
        <title>Logging usando marcadores con slf4j y logback</title>
        <updated>2014-01-31T17:10:17+01:00</updated>
        <published>2014-01-31T17:10:17+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java" class="" loading="false&#34;"></p>
</div>
<p>Un sistema de logging en una aplicación es indispensable para saber lo que está sucediendo en la aplicación en el mismo momento o pasado un tiempo. Es de gran utilidad tanto para en el momento de desarrollar la aplicación como para una vez puesta en producción. Con el registro de las trazas podemos obtener información que nos permitirá descubrir un error o averiguar más fácilmente y rápidamente porque sucede algún comportamiento que no es como se espera.</p>
<p>En Java hay varios sistemas de logging entre los más utilizados están <a href="https://logging.apache.org/log4j/2.x/">Log4j</a>, <a href="https://logback.qos.ch/">logback</a>, <a href="https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html">java.util.logging</a> y la capa de abstracción <a href="https://www.slf4j.org/">slf4j</a> sobre varios de estas librerías. En estas librerías de logging las trazas se emiten a través de un logger que normalmente se corresponde con el nombre de la clase en la que se emite la traza. De esta forma las trazas se pueden filtrar por el nivel de importancia de la traza (debug, info, warn, &hellip;) y por el nombre del logger de forma que podemos obtener un registro de las trazas emitidas por los loggers que deseamos.</p>
<p>Sin embargo, el nivel de trazas y nombre de logger no son los más adecuados para determinadas necesidades. En algún caso nos puede interesar solo algunas trazas asociadas a determinada funcionalidad, el resto de trazas podríamos querer filtrarlas, pero únicamente con los filtros por nivel y nombre de logger no podríamos. Además, una funcionalidad puede estar dispersa entre varias clases con lo que si el nombre del logger es el nombre de la clase deberíamos especificar todos los logger que queremos individualmente y aunque los loggers tienen una relación jerárquica no es útil para obtener lo que queremos.</p>
<p>Para obtener las trazas específicas que queremos y que pueden estar dispersas en varias clases podemos usar los <a href="http://logback.qos.ch/manual/filters.html">filtros de logback</a>, una posibilidad es usar los marcadores pero hay otra buena cantidad de posibilidades dependiendo de nuestras necesidades.</p>
<p>Por ejemplo, para la siguientes clases nos podría interesar obtener las trazas asociadas a la funcionalidad de importación pero si indicamos que queremos la trazas del logger Importador y de nivel INFO obtendríamos todas la trazas de la clase incluidas las trazas de persistencia.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Marker</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.MarkerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Loggers&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="c1">// Marcadores&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Marker</span> <span class="n">importacion</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&#34;IMP&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Marker</span> <span class="n">importacionUtils</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&#34;UTL&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Marker</span> <span class="n">persistencia</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&#34;PER&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// Incluir en un marcador las trazas de otro &#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">importacionUtils</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">importacion</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Iniciando...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">,</span> <span class="s">&#34;Comenzando importación...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">new</span> <span class="n">Importador</span><span class="o">().</span><span class="na">importar</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">,</span> <span class="s">&#34;Importación finalizada&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Importador</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Importador</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">Importador</span><span class="o">()</span> <span class="o">{</span>		&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">importar</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">,</span> <span class="s">&#34;Realizando importación...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">Utils</span><span class="o">.</span><span class="na">importar</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">persistencia</span><span class="o">,</span> <span class="s">&#34;Persistiendo algo...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">Utils</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Importador.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Utils</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Comenzando persistencia (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">persistencia</span><span class="o">,</span> <span class="s">&#34;Persistido algo (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">importar</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Comenzando importación (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		&#10;</span></span><span class="line"><span class="cl">		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacionUtils</span><span class="o">,</span> <span class="s">&#34;Importado algo (utils)...&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>	&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Utils.java</span>
    </div>
</div>
<p>Este sería el resultado:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/sin-filtro_hu439f1dbb077c8cb8cf0057f867dacf86_68405_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/sin-filtro_hu439f1dbb077c8cb8cf0057f867dacf86_68405_300x200_fit_q90_h2_box_3.webp" width="300" height="80" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>Para conseguir solo las trazas de una funcionalidad se pueden utilizar los marcadores («markers») de forma que además de por el nivel del mensaje de traza y el logger podamos filtrar por el marcador asociado a la traza. El marcador de una traza es una etiqueta por la que posteriormente podemos filtrar. Si una funcionalidad estuviese repartida por varias clases podríamos usar el mismo marcador en todas esas trazas de forma que podamos filtrar luego por él. El resultado del ejemplo completo sería el siguiente:</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/con-filtro_huc90cfb2c4bb3573bace522560d85b989_47046_2560x1440_fit_q90_h2_box_3.webp" data-gallery=""><img src="https://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/images/con-filtro_huc90cfb2c4bb3573bace522560d85b989_47046_300x200_fit_q90_h2_box_3.webp" width="300" height="80" class="&#34; " loading="lazy"></a></p>
</figure>
</div>
<p>En ambos resultados puede verse el nombre del marcador (IMP de importación, PER de persistencia, UTL de utilidad) asociado a la traza, en el segundo solo se muestran las trazas con el marcador IMP de la funcionalidad de importación.</p>
<p>Utilizando la combinación slf4j y logback, la configuración para de logback y usando un filtro para obtener las trazas con el marcador asociado que deseamos es la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&#34;STDOUT&#34;</span> <span class="na">class=</span><span class="s">&#34;ch.qos.logback.core.ConsoleAppender&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&#34;io.github.picodotdev.log.markers.ImportacionFilter&#34;</span><span class="nt">&gt;&lt;/filter&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;encoder&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;pattern&gt;</span>%-23d{ISO8601} %-5p %-17marker %-17t %40.40C %-15M %m%n<span class="nt">&lt;/pattern&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/encoder&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/appender&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">&#34;io.github.picodotdev.log.markers&#34;</span> <span class="na">level=</span><span class="s">&#34;INFO&#34;</span><span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&#34;debug&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&#34;STDOUT&#34;</span> <span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&lt;/root&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>logback.xml</span>
    </div>
</div>
<p>Este sería el código del filtro que nos permitiría obtener las trazas de una determinada funcionalidad, en el caso del ejemplo las trazas relativas a la funcionalidad de importación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.log.markers</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.slf4j.Marker</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.spi.ILoggingEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ch.qos.logback.core.filter.Filter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ch.qos.logback.core.spi.FilterReply</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImportacionFilter</span> <span class="kd">extends</span> <span class="n">Filter</span><span class="o">&lt;</span><span class="n">ILoggingEvent</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">FilterReply</span> <span class="nf">decide</span><span class="o">(</span><span class="n">ILoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Marker</span> <span class="n">marker</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getMarker</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">marker</span><span class="o">)</span> <span class="o">||</span> <span class="n">marker</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">importacion</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">FilterReply</span><span class="o">.</span><span class="na">ACCEPT</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">FilterReply</span><span class="o">.</span><span class="na">DENY</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ImportacionFilter.java</span>
    </div>
</div>
<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/MarcadoresSLF4J">código fuente completo del ejemplo</a> de su repositorio de GitHub y probarlo en tu equipo.</p>
<p>¿Conocías y has usado alguna vez esta funcionalidad?</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/librerias-de-logging-para-java-slf4j.html">Librerías de logging para Java (slf4j, Log4j, java.util.logging, logback, MentaLog</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/</id>
        <title>Ejemplo del patrón de diseño No Operation</title>
        <updated>2015-09-28T21:00:00+02:00</updated>
        <published>2014-01-24T16:48:40+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java" class="" loading="false&#34;"></p>
</div>
<p>Hasta el momento ya he escrito alguna entrada sobre los <a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html">patrones de diseño</a> en general, sobre algunos casos particulares como el <a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">patrón de diseño Command</a> relacionado con la programación concurrente y sobre el <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html">patrón de diseño State</a> para hacer máquinas de estados. En esta entrada hablaré sobre otro patrón de diseño, el patrón No Operation y de que forma podemos aprovecharlo para resolver algún problema y hacer nuestro código más simple.</p>
<p>En un programa que emplea un lenguaje de programación orientado a objetos estos están constantemente relacionándose entre si a través de llamadas a métodos y a través de las referencias que un objeto posee de otros. Sin embargo, es habitual que un determinado método devuelva un null en vez de una referencia a un objeto. Esta referencia null puede ser un problema ya que nos obliga en el código hacer una comprobación antes de poder llamarlo. Si un método devuelve un null puede dar como resultado un <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html">NullPointerException</a> en otra parte de la aplicación en donde se intente usar esa referencia y no se haga la comprobación.</p>
<p>Para tratar de evitar llenar nuestro código java de sentencias if con la comprobación de null podemos utilizar el patrón de diseño No Operation. La idea de este patrón es que en vez de devolver un null como resultado de la llamada a un método devolvamos un objeto que no haga nada en las llamadas a los métodos en los que se use. Por ejemplo, supongamos que tenemos un método que en base a un enum se encarga de devolver un objeto que sigue el <a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">patrón Command</a>. Y ahora supongamos que para cierto valor del enum no hay objeto command que se pueda devolver, podríamos devolver null en cuyo caso nos veríamos obligados a realizar la comprobación por null o empleando la idea del patrón No Operation devolver un objeto que implemente la interfaz command en cuestión pero que no haga nada o haga una operación inocua. Si vemos que en un programa estamos llenándolo de sentencias if (objeto == null) tal vez podamos aplicar este patrón. Lo importante para poder eliminar esos if es determinar que es una operación inocua, si se trata de un objeto puede ser que el método no haga nada, si se trata de un número que se utiliza para sumar o multiplicar se puede devolver 0 o 1 respectivamente en vez de null, depende del caso y la operación a simular.</p>
<p>Esta patrón puede usarse también para evitar la excepción NullPointerException pero no es tanto la misión del patrón la misión como evitar preocuparnos por si las referencias son null o no y eliminar <em>ifs</em>, es cierto que empleándolo no dará la excepción pero si la aplicación continua puede producir otra excepción o un comportamiento no deseado más complicado de resolver y de averiguar su causa en otra parte del código.</p>
<p>Veámoslo con el ejemplo de una factoría que para determinados enumerados se devuelve un objeto que sigue el patrón command pero para ciertos valores del enumerado no hay command válido y en vez de devolver null devolvemos un command no operation, este es el caso de llamar a la factoría con un enumerado null. Para el enumerado <em>Operacion.MENSAJE</em> se devuelve un command que emite un mensaje, para <em>Operacion.NO_MENSAJE</em> y null se devuelve un command que no hace nada.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OperacionCommandFactory</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">enum</span> <span class="n">Operacion</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">MENSAJE</span><span class="o">,</span> <span class="n">NO_MENSAJE</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">OperacionCommand</span> <span class="nf">buildCommand</span><span class="o">(</span><span class="n">Operacion</span> <span class="n">operacion</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">operacion</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">new</span> <span class="n">NoOperacionCommand</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="o">(</span><span class="n">operacion</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">MENSAJE</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">MensajeCommand</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">NO_MENSAJE</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">NoOperacionCommand</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>OperacionCommandFactory.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OperacionCommand</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">operacion</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>OperacionCommand.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoOperacionCommand</span> <span class="kd">implements</span> <span class="n">OperacionCommand</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">operacion</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>NoOperacionCommand.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.nooperation</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MensajeCommand</span> <span class="kd">implements</span> <span class="n">OperacionCommand</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">operacion</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hola mundo!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MensajeCommand.java</span>
    </div>
</div>
<p>Y finalmente el caso de prueba donde puede verse que no hay ningún if ya que no se devuelve en ningún caso un null:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kn">package</span> <span class="n">io</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">picodotdev</span><span class="o">.</span><span class="na">pattern</span><span class="o">.</span><span class="na">nooperation</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.pattern.nooperation.OperacionCommand</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.pattern.nooperation.OperacionCommandFactory</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.pattern.nooperation.OperacionCommandFactory.Operacion</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">spock.lang.Specification</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OperacionCommandFactorySpec</span> <span class="kd">extends</span> <span class="n">Specification</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">OperacionCommandFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="kc">null</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OperacionCommandFactory</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nl">setup:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">OperacionCommand</span> <span class="n">operacion</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">buildCommand</span><span class="o">(</span><span class="n">Operacion</span><span class="o">.</span><span class="na">MENSAJE</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="nl">when:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">operacion</span><span class="o">.</span><span class="na">operacion</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nl">then:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nl">setup:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">OperacionCommand</span> <span class="n">operacion</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">buildCommand</span><span class="o">(</span><span class="n">Operacion</span><span class="o">.</span><span class="na">NO_MENSAJE</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="nl">when:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">operacion</span><span class="o">.</span><span class="na">operacion</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nl">then:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">test3</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="nl">setup:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">OperacionCommand</span> <span class="n">operacion</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">buildCommand</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">		<span class="nl">when:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">operacion</span><span class="o">.</span><span class="na">operacion</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="nl">then:</span>&#10;</span></span><span class="line"><span class="cl">		<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>OperacionCommandFactorySpec.groovy</span>
    </div>
</div>
<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PatronNoOperation">código fuente completo del ejemplo</a> de su repositorio de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PatronNoOperation">Código fuente del ejemplo del patrón de diseño No Operation</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.htmlindex-amp.html">Patrones de diseño en la programación orientada a objetos</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.htmlindex-amp.html">Ejemplo del patrón de diseño Command y programación concurrente en Java</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.htmlindex-amp.html">Ejemplo del patrón de diseño State</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/">Ejemplo del patrón de diseño Builder</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/</id>
    <updated>2021-10-28T19:00:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/</id>
        <title>Las contraseñas e información sensible en el código fuente o bytecode de Java no son seguras</title>
        <updated>2019-01-05T13:00:00+01:00</updated>
        <published>2019-01-04T19:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En Java el código fuente se compila a una representación en <em>bytecode</em> independiente de la arquitectura del procesador y sistema operativo donde posteriormente se ejecuta. Este <em>bytecode</em> es un formato binario pero que puede ser descompilado fácilmente con la herramienta <em>javap</em> incluida en el propio JDK o examinado su contenido simplemente con un editor de texto hexadecimal. Con estas herramientas es fácil ver las instrucciones del programa para la máquina virtual y los caracteres de las cadenas que fueron incluidas en el código fuente.</p>
<p>Lógicamente, de este modo <em>hardcodear</em> una contraseña en el código fuente hace que el código fuente sea inseguro pero es que incluso distribuir el binario compilado no es seguro ya que cualquier usuario que tenga acceso al binario de la aplicación es potencialmente capaz de recuperar la contraseña, tener acceso al binario quizá no sea sencillo pero aparte de eso no hay ninguna medida de seguridad adicional que añada más dificultad. Quien dice contraseña dice igualmente una clave privada de cifrado simétrico usada para cifrar o descifrar datos o un <em>bearer token</em> de OAuth. En definitiva es un problema de seguridad.</p>
<p>Compilado el programa y utilizando la herramienta <em>javap</em> se puede obtener el valor de la contraseña. ¿Adivinas cual es la contraseña en este archivo binario de <em>bytecode</em> examinado el contenido?</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/java-class-hex_hucc38684a2f2e126dcaa28adc7d18c1d8_94339_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Contenido hexadecimal de un archivo binario de bytecode Java"><img src="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/java-class-hex_hucc38684a2f2e126dcaa28adc7d18c1d8_94339_300x200_fit_box_3.png" width="284" height="200" alt="Contenido hexadecimal de un archivo binario de bytecode Java" title="Contenido hexadecimal de un archivo binario de bytecode Java"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/c-bin-hex_huba456bb72be79b51d2898e9d10ffeae8_61110_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Contenido hexadecimal de un archivo binario de C"><img src="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/c-bin-hex_huba456bb72be79b51d2898e9d10ffeae8_61110_300x200_fit_box_3.png" width="284" height="200" alt="Contenido hexadecimal de un archivo binario de C" title="Contenido hexadecimal de un archivo binario de C"  class="lozad "></a></p>
<figcaption>Contenido hexadecimal de un archivo binario de bytecode Java y C</figcaption>
</figure>
</div>
<p>El siguiente ejemplo sencillo de un programa Java incluye una cadena con una supuesta contraseña. Se observa que en el archivo visualizado en formato hexadecimal o descompilado los caracteres de la cadena son fácilmente reconocibles.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;Mz6K3P9rDZ7G6wH&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>Para compilar este pequeño programa se utiliza el comando <em>javac</em> que genera el archivo de <em>bytecode</em> <em>Main.class</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ javac Main.java&#10;$ xxd Main.class&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>javac.sh</span>
    </div>
</div>
<p>Para decompilar este pequeño programa se utiliza el comando <em>javap</em>, con él se ven las instrucciones interpretadas por la máquina virtual de Java y la cadena con la contraseña.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ javap -c Main.class&#10;Compiled from <span class="s2">&#34;Main.java&#34;</span>&#10;public class Main <span class="o">{</span>&#10;  public Main<span class="o">()</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;Code:&#10;&nbsp;&nbsp;&nbsp;&nbsp;   0: aload_0&#10;&nbsp;&nbsp;&nbsp;&nbsp;   1: invokespecial <span class="c1">#1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // Method java/lang/Object.&#34;&lt;init&gt;&#34;:()V</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   4: <span class="k">return</span>&#10;&#10;  public static void main<span class="o">(</span>java.lang.String<span class="o">[])</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;Code:&#10;&nbsp;&nbsp;&nbsp;&nbsp;   0: ldc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="c1">#2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // String Mz6K3P9rDZ7G6wH</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   2: astore_1&#10;&nbsp;&nbsp;&nbsp;&nbsp;   3: getstatic&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">#3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // Field java/lang/System.out:Ljava/io/PrintStream;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   6: ldc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="c1">#4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // String Hello World!</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   8: invokevirtual <span class="c1">#5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  11: <span class="k">return</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>javap.sh</span>
    </div>
</div>
<p>Que el contenido de la constante de las cadenas del programa sea incluido en el binario y examinable con un editor hexadecimal no es exclusivo de Java, en otros lenguajes de programación como C y formatos de ejecutables como ELF para Linux se da el mismo caso al examinar el binario como se observa en las imágenes anteriores. Seguramente en la mayoría de lenguajes, como C#, ocurra lo mismo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span><span class="cp"></span>&#10;<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>&#10;<span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">password</span> <span class="o">=</span> <span class="s">&#34;Mz6K3P9rDZ7G6wH&#34;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.c</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ gcc Main.c -o Main&#10;$ xxd Main&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gcc.sh</span>
    </div>
</div>
<p>Una solución para evitar este problema de seguridad es <a href="https://picodotdev.github.io/blog-bitix/2018/09/almacenar-cifrados-los-valores-de-configuracion-sensibles-en-spring-cloud-config/">ubicar la contraseña a un archivo de configuración incluso con los valores sensibles cifrados</a> y que sean descifrados únicamente por la aplicación en el momento de iniciarse. En el caso de ubicar este archivo de configuración en un servidor se puede proteger mediante permisos para que solo los administradores o algunos desarrolladores tenga acceso a él y no cualquier usuario que consiga acceso al sistema.</p>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="seguridad"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/</id>
        <title>Hemeroteca #14</title>
        <updated>2018-12-30T19:00:00+01:00</updated>
        <published>2018-12-30T19:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<p>Casi 9 años publicando de forma constante un artículo a la semana, dos artículos algunas semanas. Durante casi está década creo que ha habido pocas semanas en las que no he publicado. Este último años no ha sido distinto, el siguiente espero&hellip; espero que sea parecido o mejor ahora que tengo mi propio equipo personal que he estado mucho tiempo esperando hasta que fuese comercializado, un <a href="https://picodotdev.github.io/blog-bitix/2018/11/desempaquetado-intel-nuc-nuc8i5bek-bean-canyon-hyperx-impact-ram-y-samsung-970-evo-nvme-ssd/">Intel NUC Bean Canyon</a> del que en este semestre he publicado un artículo con de su desempaquetado junto con otros artículos del <a href="https://picodotdev.github.io/blog-bitix/2018/10/desempaquetado-y-analisis-de-monitor-benq-pd2700q-2k-qhd-ips-27-pulgadas/">monitor BenQ PD2700Q</a> y <a href="https://picodotdev.github.io/blog-bitix/2018/09/desempaquetado-y-analisis-de-teclado-y-raton-inalambrico-v7-ckw200/">teclado ratón</a> pero también comentando las opciones que he barajado.</p>
<p>Casi 9 años publicando artículos algunos mejor que otros pero siempre intentando compartir lo que sé o voy aprendiendo, para llegar a esta cifra hay que tener constancia para llegar a escribir tanto tiempo, dedicación, no abandonar fácil para no empezar una cosa y dejarlo al cabo de poco e incluso de publicar aún cuando el ánimo no es el de los mejores momentos, planificación y organización para saber que publicar, tiempo ya que cuesta escribir los artículos, motivación y perseverancia para tener más visitas, comentarios de algunos usuarios, más ingresos de AdSense, compartir, &hellip; No es fácil, en mi caso sabiendo que mucho de lo que escribo no lo aplico en el trabajo, donde actualmente tengo un Mac por obligación y no trabajo con Java y mis temas principales son GNU/Linux y Java, con lo que a veces tengo la sensación de no serme útil. Al finalizar este 2018 ya van 371 artículos publicados desde finales del 2013 que empecé a hacerlo en Blog Bitix.</p>
<p>Ahora que tengo mi propio equipo y como de nuevo estoy usando <a href="https://www.archlinux.org/">Arch Linux</a> podré publicar más artículos sobre <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a>, he empezado por publicar como jugar a <a href="https://eu.diablo3.com/es/">Diablo 3</a> u otros juegos de <a href="https://www.blizzard.com/es-es/">Blizzard</a> en Linux con <a href="https://www.winehq.org/">Wine</a>.</p>
<p>Durante <a href="https://picodotdev.github.io/blog-bitix/2018/">el año 2018 he escrito múltiples artículos</a> y este semestre he escrito varios relacionados con el ordenador que necesitaba y finalmente he comprado al final de año pero del que había noticias desde muchos meses antes, la espera de varios meses hasta que se comercializase se me hizo larga.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/desempaquetado-y-analisis-de-teclado-y-raton-inalambrico-v7-ckw200/">Desempaquetado y análisis de teclado y ratón inalámbrico V7 CKW200</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/desempaquetado-y-analisis-de-monitor-benq-pd2700q-2k-qhd-ips-27-pulgadas/">Desempaquetado y análisis de monitor BenQ PD2700Q 2K/QHD, IPS, 27 pulgadas</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/11/desempaquetado-intel-nuc-nuc8i5bek-bean-canyon-hyperx-impact-ram-y-samsung-970-evo-nvme-ssd/">Desempaquetado Intel NUC8i5BEK (Bean Canyon), HyperX Impact (RAM) y Samsung 970 EVO NVMe (SSD)</a></li>
</ul>
<p>He completado con algún artículo más la <a href="https://picodotdev.github.io/blog-bitix/series/graphql/">serie sobre GraphQL</a>.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/el-editor-explorador-e-ide-graphiql-para-una-api-con-graphql/">El editor, explorador e IDE GraphiQL para una API con GraphQL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/usando-directivas-en-graphql/">Usando directivas en GraphQL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/los-fragmentos-en-graphql/">Los fragmentos en GraphQL</a></li>
</ul>
<p>También he escrito varios artículos de la serie sobre <a href="https://picodotdev.github.io/blog-bitix/series/spring-cloud/">Spring Cloud</a> para escribir microservicios en Java.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/aplicaciones-basadas-en-microservicios/">Aplicaciones basadas en microservicios</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/registro-y-descubrimiento-de-servicios-con-spring-cloud-netflix/">Registro y descubrimiento de servicios con Spring Cloud Netflix</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/servicio-de-configuracion-para-microservicios-con-spring-cloud-config/">Servicio de configuración para microservicios con Spring Cloud Config</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/almacenar-cifrados-los-valores-de-configuracion-sensibles-en-spring-cloud-config/">Almacenar cifrados los valores de configuración sensibles en Spring Cloud Config</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/">Tolerancia a fallos en un cliente de microservicio con Spring Cloud Netflix y Hystrix</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/balanceo-de-carga-y-resilencia-en-un-microservicio-con-spring-cloud-netflix-y-ribbon/">Balanceo de carga y resilencia en un microservicio con Spring Cloud Netflix y Ribbon</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/proxy-para-microservicios-con-spring-cloud-netflix-y-zuul/">Proxy para microservicios con Spring Cloud Netflix y Zuul</a></li>
</ul>
<p>Algunos pocos artículos sobre GNU/Linux.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/como-recuperar-arch-linux-despues-de-una-actualizacion-que-provoca-el-sistema-no-inicie/">Como recuperar Arch Linux después de una actualización que provoca el sistema no inicie</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/">El editor de archivos e IDE minimalista Visual Studio Code</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/el-comando-fork-bomb-explicado/">El comando fork bomb explicado</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/11/flatpak-distribucion-e-instalacion-de-programas-de-escritorio-en-las-distribuciones-gnu-linux/">Flatpak, distribución e instalación de programas de escritorio en las distribuciones GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/como-usar-wine-para-jugar-en-gnu-linux-a-juegos-de-windows/">Cómo usar Wine para jugar en GNU/Linux a Diablo 3 u otros juegos de Blizzard o Windows</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-procesos-que-realizan-lectura-o-escritura-al-almacenamiento-en-gnu-linux/">Monitorizar procesos que realizan lectura o escritura al almacenamiento en GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/permitir-o-denegar-trafico-de-red-con-el-firewall-ufw-en-gnu-linux/">Permitir o denegar tráfico de red con el firewall UFW en GNU/Linux</a></li>
</ul>
<p>Sobre Java o programación algunos más.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/que-es-un-sut-fake-stub-mock-y-spy-en-las-pruebas-con-un-ejemplo/">Qué es un SUT, fake, stub, mock y spy en las pruebas con un ejemplo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/pruebas-funcionales-con-geb-en-una-aplicacion-web-java/">Pruebas funcionales con Geb en una aplicación web Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/la-libreria-log4j-para-emitir-trazas-en-aplicaciones-java/">La librería Log4j para emitir trazas en aplicaciones Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/identificar-todas-las-trazas-de-una-peticion-en-una-aplicacion-web-java-con-log4j/">Identificar todas las trazas de una petición en una aplicación web Java con Log4j</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/personalizar-el-mensaje-emitido-de-un-objeto-en-log4j/">Personalizar el mensaje emitido de un objeto en Log4j</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/recargar-la-configuracion-sin-reiniciar-una-aplicacion-spring-boot-con-spring-cloud-config/">Recargar sin reiniciar la configuración de una aplicación Spring Boot con Spring Cloud Config</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/">Novedades y nuevas características de Java 11</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/ejemplo-sencillo-de-como-leer-datos-de-un-archivo-excel-o-csv-en-java/">Ejemplo sencillo de cómo leer datos de un archivo Excel o CSV en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/11/formatear-con-color-sentencias-sql-o-codigo-fuente-en-la-terminal-con-java-y-jansi/">Formatear con color sentencias SQL o código fuente en la terminal con Java y Jansi</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/11/novedades-de-java-ee-8/">Novedades de Java EE 8</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/">Monitorizar una aplicación Java de Spring Boot con Micrometer, Prometheus y Grafana</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/exponer-las-metricas-de-hystrix-en-grafana-con-prometheus-de-una-aplicacion-spring-boot/">Exponer las métricas de Hystrix en Grafana con Prometheus de una aplicación Spring Boot</a></li>
</ul>
<p>Y varios de opinión o noticias relevantes como la caída de <a href="https://es.wikipedia.org/wiki/Sun_Microsystems">Sun</a> hace ya años o la compra de <a href="https://www.redhat.com/es">Red Hat</a> por parte de <a href="https://www.ibm.com/us-en/">IBM</a>.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/sobre-la-venta-entre-particulares-de-ebay-milanuncios-y-wallapop/">Sobre la venta entre particulares de eBay, milanuncios y Wallapop</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/despues-de-la-guerra-del-numero-de-nucleos-en-los-procesadores-vendra-la-guerra-de-la-computacion-heterogenea-o-manycores/">Después de la guerra del número de núcleos en los procesadores, ¿vendrá la guerra de la computación heterogénea o manycores?</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/08/sobre-las-competiciones-deportivas-de-videojuegos-o-esports/">Sobre las competiciones deportivas de videojuegos o eSports</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/sun-microsystems-cae-la-adquiere-oracle/">Sun Microsystems cae, la adquiere Oracle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/10/ibm-adquiere-red-hat-el-gigante-de-linux-y-codigo-abierto/">IBM adquiere Red Hat, el gigante de Linux y código abierto</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/11/el-agotamiento-de-direcciones-ipv4-y-el-protocolo-de-internet-ipv6/">El agotamiento de direcciones IPv4 y el protocolo de internet IPv6</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/articulo-6-de-yo-apoyo-al-software-libre/">Artículo #6 de Yo apoyo al software libre</a></li>
</ul>
<p>Revisando los artículos que he publicado en <a href="https://picodotdev.github.io/blog-bitix/series/hemeroteca/">otras hemerotecas</a> hay algunos que parece no los haya escrito hace 2 y 3 años sino mucho menos. El crecimiento tanto en visitas como en ingresos no ha sido tanto como años anteriores, supongo que ya llegado un cierto umbral es difícil conservar los mismos ratios de crecimiento. Todos estos nuevos artículos es nuevo contenido que hace que reciba algunas visitas más y que los ingresos sean algo mayores. Dependiendo de si miro en Analytics o AdSense unas 520K páginas vistas este 2018 no muchas más que las casi 500K del 2017. En cualquier caso en las siguientes imágenes están las estadísticas de este blog por si a alguien le sirven para comparar con el suyo o como previsión de una web similar, a mi me servirá para consultarlo en un futuro y ver la evolución de los datos, también el tiempo necesario para conseguirlo o el número de artículos requeridos.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/analytics-2018_hu2ada8cebf2023f92a50bb99f47b93326_64912_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Analytics 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/analytics-2018_hu2ada8cebf2023f92a50bb99f47b93326_64912_600x450_fit_box_3.png" width="600" height="254" alt="Analytics 2018 de Blog Bitix" title="Analytics 2018 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-2018_hu636faed4932c19361f2f0a556d5002dc_32098_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="AdSense 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-2018_hu636faed4932c19361f2f0a556d5002dc_32098_600x450_fit_box_3.png" width="600" height="258" alt="AdSense 2018 de Blog Bitix" title="AdSense 2018 de Blog Bitix"  class="lozad "></a></p>
<figcaption>Evolución visitas e ingresos en 2018</figcaption>
</figure>
</div>
<p>Incluyo además algunas métricas que proporciona AdSense de RPM, clics y CPC. Este final de año ha sido especialmente bueno con la semana del <em>black friday</em> como punto álgido llegando casi a 70 € en un mes, en todo el año han sido casi 500 € contra los 450 € del 2017.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-ingresos-2018_hu1b9e049b82ca37c55653dc9f7f608567_86318_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Ingresos 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-ingresos-2018_hu1b9e049b82ca37c55653dc9f7f608567_86318_300x200_fit_box_3.png" width="113" height="200" alt="Ingresos 2018 de Blog Bitix" title="Ingresos 2018 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-paginas-vistas-2018_hu9af27ceaf50279e6f09b10b7794973eb_87876_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Páginas vistas 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-paginas-vistas-2018_hu9af27ceaf50279e6f09b10b7794973eb_87876_300x200_fit_box_3.png" width="113" height="200" alt="Páginas vistas 2018 de Blog Bitix" title="Páginas vistas 2018 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-clics-2018_hued0fc56ac5576d06747e659b90f243e1_85483_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Clics 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-clics-2018_hued0fc56ac5576d06747e659b90f243e1_85483_300x200_fit_box_3.png" width="113" height="200" alt="Clics 2018 de Blog Bitix" title="Clics 2018 de Blog Bitix"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-crt-2018_hua934a19f5a838277c977312945230d48_84813_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="CRT 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-crt-2018_hua934a19f5a838277c977312945230d48_84813_300x200_fit_box_3.png" width="113" height="200" alt="CRT 2018 de Blog Bitix" title="CRT 2018 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-cpc-2018_hu5dd2148119d9c65dff7097ef6269582d_77672_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="CPC 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-cpc-2018_hu5dd2148119d9c65dff7097ef6269582d_77672_300x200_fit_box_3.png" width="113" height="200" alt="CPC 2018 de Blog Bitix" title="CPC 2018 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-rpm-2018_hu9d3b8ec4b7a7f5b5a4f8281d0b22755b_80426_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="RPM 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-rpm-2018_hu9d3b8ec4b7a7f5b5a4f8281d0b22755b_80426_300x200_fit_box_3.png" width="113" height="200" alt="RPM 2018 de Blog Bitix" title="RPM 2018 de Blog Bitix"  class="lozad "></a></p>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-tipos-de-puja-2018_hufd652d0bb9a4a214cdee3c8d07383e3c_22630_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Tipos de puja 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-tipos-de-puja-2018_hufd652d0bb9a4a214cdee3c8d07383e3c_22630_300x200_fit_box_3.png" width="273" height="200" alt="Tipos de puja 2018 de Blog Bitix" title="Tipos de puja 2018 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-plataformas-2018_hu3c48376a2ee051ee4cfb9dd80dd68b49_21354_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Plataformas 2018 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/gadsense-plataformas-2018_hu3c48376a2ee051ee4cfb9dd80dd68b49_21354_300x200_fit_box_3.png" width="274" height="200" alt="Plataformas 2018 de Blog Bitix" title="Plataformas 2018 de Blog Bitix"  class="lozad "></a></p>
<figcaption>Métricas de AdSense</figcaption>
</figure>
</div>
<p>Además, de AdSense incluyo enlaces de Amazon de algunos productos que compro y de los que publico algún artículo. Este año a través de los enlaces de afiliado de Amazon ha facturado a través de ellos casi 900 € y he recibido a cambio 50 € en comisiones.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/amazon-2018_hu745a46ebc42e3ba687315a0ce1b2c13d_83793_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Facturación e ingresos Amazon"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/amazon-2018_hu745a46ebc42e3ba687315a0ce1b2c13d_83793_600x450_fit_box_3.png" width="600" height="430" alt="Facturación e ingresos Amazon" title="Facturación e ingresos Amazon"  class="lozad "></a></p>
</figure>
</div>
<p>Como siempre mis deseos de que empecéis bien el nuevo año, en este caso el 2019, ¡buen 2019!.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/christmas-tux-2018_hu95daf3122e4db98487c9042ab621eb95_564556_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Christmas Tux 2018"><img src="https://picodotdev.github.io/blog-bitix/2018/12/hemeroteca-14/images/christmas-tux-2018_hu95daf3122e4db98487c9042ab621eb95_564556_600x450_fit_q90_box.jpg" width="600" height="338" alt="Christmas Tux 2018" title="Christmas Tux 2018"  class="lozad "></a></p>
<figcaption>¡Buen 2019! <br>Fuente: klowner.com</figcaption>
</figure>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/12/exponer-las-metricas-de-hystrix-en-grafana-con-prometheus-de-una-aplicacion-spring-boot/</id>
        <title>Exponer las métricas de Hystrix en Grafana con Prometheus de una aplicación Spring Boot</title>
        <updated>2018-12-21T11:30:00+01:00</updated>
        <published>2018-12-21T11:30:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/12/exponer-las-metricas-de-hystrix-en-grafana-con-prometheus-de-una-aplicacion-spring-boot/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<p><a href="https://github.com/Netflix/Hystrix">Hystrix</a> es una implementación del patrón <em>circuit breaker</em> para hacer que un servicio sea tolerante fallos cuando aquellos que utiliza fallan. Es conveniente tener una herramienta de monitorización para conocer el estado del sistema y actuar pronto o conocer si el comportamiento del sistema es diferente al hacer algún cambio. Hystrix proporciona varios datos como el número de peticiones realizadas, cuantas han fallado o cual es el estado del patrón <em>circuit breaker</em>. <a href="https://prometheus.io/">Prometheus</a> es una herramienta de monitorización que recoge las métricas de los servicios de forma periódica y las almacena para una consulta posterior, <a href="https://grafana.com/">Grafana</a> es otra herramienta de monitorización que permite visualizar en gráficas las métricas almacenadas en Prometheus y observar los valores a lo largo del tiempo.</p>
<p>En el artículo <a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/">Tolerancia a fallos en un cliente de microservicio con Spring Cloud Netflix y Hystrix</a> explicaba como crear un servicio de <a href="https://spring.io/">Spring</a> que implementa el patrón <em>circuit breaker</em> con Hystrix y en el artículo <a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/">Monitorizar una aplicación Java con Spring Boot, Micrometer, Prometheus y Grafana</a> explicaba como exportar las métricas de <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready">Spring Boot Actuator</a> a Prometheus y como crear gráficas en Grafana.</p>
<p>Hystrix ofrece un <em>dashboard</em> algo espartano con los datos de Hystrix de la propia aplicación. Los datos de las métricas de Hystrix por defecto no se exponen en Spring Boot Actuator pero se pueden añadir creando un <em>bean</em> <em>HystrixMetricsBinder</em> en la configuración de Spring.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="nd">@EnableCircuitBreaker</span>&#10;<span class="nd">@EnableHystrixDashboard</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;&#10;  <span class="o">...</span>&#10;&#10;	<span class="nd">@Bean</span>&#10;	<span class="n">HystrixMetricsBinder</span> <span class="nf">hystrixMetricsBinder</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">HystrixMetricsBinder</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;  <span class="o">...</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="o">...</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">excludeSpringBootStarterLogging</span> <span class="o">=</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework.boot&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;spring-boot-starter-logging&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-log4j2&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-ribbon&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;io.micrometer:micrometer-registry-prometheus:1.0.8&#39;</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Una vez hecho esto Spring en el <em>endpoint</em> <em>/actuator/metrics</em> se exponen las métricas de Hystrix, si además se configura Spring añadiendo la dependencia <em>io.micrometer:micrometer-registry-prometheus</em> para exponer las métricas en el formato para que Prometheus las recolecta también se añaden en el <em>endpoint</em> <em>/actuator/prometheus</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl http://client.127.0.0.1.xip.io:8095/actuator/metrics&#10;$ curl http://client.127.0.0.1.xip.io:8095/actuator/metrics/hystrix.requests&#10;$ curl http://client.127.0.0.1.xip.io:8095/actuator/metrics/hystrix.circuit.breaker.open&#10;$ curl http://client.127.0.0.1.xip.io:8095/actuator/metrics/hystrix.fallback&#10;$ http://client.127.0.0.1.xip.io:8095/actuator/metrics/hystrix.latency.total&#10;$ http://client.127.0.0.1.xip.io:8095/actuator/metrics/hystrix.errors&#10;&#10;$ curl http://client.127.0.0.1.xip.io:8095/actuator/prometheus&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>metrics-endpoints.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>&#10;  <span class="nt">&#34;names&#34;</span><span class="p">:</span> <span class="p">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="err">...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.requests&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.command.other&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.circuit.breaker.open&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.fallback&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.latency.execution&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.execution&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.latency.total&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.threadpool.concurrent.execution.rolling.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.errors&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;hystrix.threadpool.concurrent.execution.current&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="err">...</span>&#10;  <span class="p">]</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>actuator-metrics.json</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">...&#10;# HELP hystrix_threadpool_concurrent_execution_current  &#10;# TYPE hystrix_threadpool_concurrent_execution_current gauge&#10;hystrix_threadpool_concurrent_execution_current{group=&#34;ClientService&#34;,key=&#34;get&#34;,threadpool=&#34;ClientService&#34;,} 0.0&#10;# HELP hystrix_requests_total  &#10;# TYPE hystrix_requests_total counter&#10;hystrix_requests_total{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 137.0&#10;# HELP hystrix_circuit_breaker_open  &#10;# TYPE hystrix_circuit_breaker_open gauge&#10;hystrix_circuit_breaker_open{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;# HELP hystrix_latency_execution_seconds_max  &#10;# TYPE hystrix_latency_execution_seconds_max gauge&#10;hystrix_latency_execution_seconds_max{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.472&#10;# HELP hystrix_latency_execution_seconds  &#10;# TYPE hystrix_latency_execution_seconds summary&#10;hystrix_latency_execution_seconds_count{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 137.0&#10;hystrix_latency_execution_seconds_sum{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 2.839&#10;# HELP hystrix_execution_total Execution results. See https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#command-execution-event-types-comnetflixhystrixhystrixeventtype for type definitions&#10;# TYPE hystrix_execution_total counter&#10;hystrix_execution_total{event=&#34;emit&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_execution_total{event=&#34;success&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 137.0&#10;hystrix_execution_total{event=&#34;failure&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_execution_total{event=&#34;timeout&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_execution_total{event=&#34;bad_request&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_execution_total{event=&#34;short_circuited&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_execution_total{event=&#34;thread_pool_rejected&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_execution_total{event=&#34;semaphore_rejected&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;# HELP hystrix_threadpool_concurrent_execution_rolling_max  &#10;# TYPE hystrix_threadpool_concurrent_execution_rolling_max gauge&#10;hystrix_threadpool_concurrent_execution_rolling_max{group=&#34;ClientService&#34;,key=&#34;get&#34;,threadpool=&#34;ClientService&#34;,} 0.0&#10;# HELP hystrix_command_other_total Other execution results. See https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#other-command-event-types-comnetflixhystrixhystrixeventtype for type definitions&#10;# TYPE hystrix_command_other_total counter&#10;hystrix_command_other_total{event=&#34;exception_thrown&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_command_other_total{event=&#34;response_from_cache&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_command_other_total{event=&#34;cancelled&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_command_other_total{event=&#34;collapsed&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_command_other_total{event=&#34;command_max_active&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;# HELP hystrix_latency_total_seconds_max  &#10;# TYPE hystrix_latency_total_seconds_max gauge&#10;hystrix_latency_total_seconds_max{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.474&#10;# HELP hystrix_latency_total_seconds  &#10;# TYPE hystrix_latency_total_seconds summary&#10;hystrix_latency_total_seconds_count{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 137.0&#10;hystrix_latency_total_seconds_sum{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 2.857&#10;# HELP hystrix_errors_total  &#10;# TYPE hystrix_errors_total counter&#10;hystrix_errors_total{group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;# HELP hystrix_fallback_total Fallback execution results. See https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#command-fallback-event-types-comnetflixhystrixhystrixeventtype for type definitions&#10;# TYPE hystrix_fallback_total counter&#10;hystrix_fallback_total{event=&#34;fallback_emit&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_fallback_total{event=&#34;fallback_success&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_fallback_total{event=&#34;fallback_failure&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_fallback_total{event=&#34;fallback_rejection&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;hystrix_fallback_total{event=&#34;fallback_missing&#34;,group=&#34;ClientService&#34;,key=&#34;get&#34;,} 0.0&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>actuator-prometheus.prometheus</span>
    </div>
</div>
<p>Con estas métricas recolectadas por Prometheus se pueden visualizar en gráficas por Grafana. Hay algunos <a href="https://grafana.com/dashboards?search=hystrix">paneles de Grafana para Hystrix</a> como el <a href="https://grafana.com/dashboards/7145">7145</a> pero que necesitan ser adaptados según la nomenclatura de las propiedades expuestas por Spring Boot. En este caso se monitoriza el número de peticiones realizadas, el tiempo de latencia, si los circuitos están abiertos, los fallos, éxitos y <em>tiemouts</em> así como el estado de los <em>thread pools</em> que utiliza Hystrix para realizar las peticiones de un cliente a un servicio.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/exponer-las-metricas-de-hystrix-en-grafana-con-prometheus-de-una-aplicacion-spring-boot/images/grafana-hystrix-dashboard_hubb858c136f51315f74d2f101a3e561f6_151082_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Panel de Grafana pàra métricas de Hystrix"><img src="https://picodotdev.github.io/blog-bitix/2018/12/exponer-las-metricas-de-hystrix-en-grafana-con-prometheus-de-una-aplicacion-spring-boot/images/grafana-hystrix-dashboard_hubb858c136f51315f74d2f101a3e561f6_151082_600x450_fit_box_3.png" width="600" height="358" alt="Panel de Grafana pàra métricas de Hystrix" title="Panel de Grafana pàra métricas de Hystrix"  class="lozad "></a></p>
<figcaption>Panel de Grafana para métricas de Hystrix</figcaption>
</figure>
</div>
<p>Exponer las métricas en una aplicación de Spring Boot para Prometheus es muy sencillo y con Grafana se puede observar el estado del sistema de forma tan detallada como lo sean las métricas expuestas por la aplicación. Por defecto Spring Boot ya expone una buena cantidad de métricas del estado del servicio como uso de CPU, memoria, hilos o recolector de basura.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew client:run</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-run.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradle-run.sh</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/3004">Expose Hystrix metrics to Actuator /metrics (and /prometheus)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/</id>
        <title>Monitorizar una aplicación Java de Spring Boot con Micrometer, Prometheus y Grafana</title>
        <updated>2018-12-14T20:00:00+01:00</updated>
        <published>2018-12-14T20:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/prometheus.svg" width="200" height="200" alt="Promehteus" title="Promehteus"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/grafana.svg" width="200" height="217" alt="Grafana" title="Grafana"  class=""></p>
</div>
<p>Los <a href="https://spring.io/projects">proyectos de Spring</a> no son tan conservadores como Java EE o ahora Jakata EE y se desarrollan a una velocidad mayor cubriendo de forma más temprana las necesidades de los programadores según evolucionan las tecnologías y se adoptan nuevos modelos de arquitectura.</p>
<p>Con el advenimiento de los microservicios, contenedores, la nube y aplicaciones autocontenidas Spring se ha adaptado con proyectos como <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> y <a href="https://projects.spring.io/spring-cloud/">Spring Cloud</a>. En el asunto que ocupa este artículo de métricas con la versión 2 de Spring Boot se ha adoptado <a href="https://micrometer.io/">Micrometer</a> como librería para proporcionar las métricas.</p>
<p>Micrometer permite exportar a cualquiera de los más populares sistemas de monitorización los datos de las métricas. Usando Micrometer la aplicación se abstrae del sistema de métricas empleado pudiendo cambiar en un futuro si se desea. Uno de los sistemas más populares de monitorización es <a href="https://prometheus.io/">Prometheus</a> que se encarga de recoger y almacenar los datos de las métricas expuestas por las aplicaciones y ofrece un lenguaje de consulta de los datos con el que otras aplicaciones pueden visualizarlos en gráficas y paneles de control. <a href="https://grafana.com/">Grafana</a> es una de estas herramientas que permite visualizar los datos proporcionados por Prometheus. Estos sistemas de monitorización ofrecen un sistema de alertas que se integran entre otros con <a href="https://slack.com/">Slack</a>.</p>
<p>En el artículo <a href="https://picodotdev.github.io/blog-bitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator/">Información y métricas de la aplicación con Spring Boot Actuator</a> mostraba como configurar Spring Boot y <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready">Spring Boot Actuator</a> para exponer métricas en el <em>endpoint</em> <em>/actuator/metrics</em>, con estas herramientas solo se exponen la clave y valor de cada métrica y solo en un momento dado. Pueden ser métricas del servicio como cantidad de CPU usada, memoria consumida y libre, espacio en almacenamiento, etc&hellip; o métricas de aplicación como número de peticiones realizadas al servicio, tiempo de respuesta, etc&hellip; Una de las funcionalidades de Prometheus es recolectar cada cierto tiempo los valores de estas métricas que da lugar a una colección de datos que varía en el tiempo y que Grafana puede visualizar en gráficas para una mucha mayor facilidad de comprensión que la enorme cantidad de datos en crudo.</p>
<p>Usando Spring Boot 2 exportar los datos para Prometheus es realmente sencillo, basta con incluir la dependencia <em>io.micrometer:micrometer-registry-prometheus</em> mediante la herramienta de construcción, por ejemplo <a href="https://gradle.org/">Gradle</a>, y automáticamente se expone en el <em>endpoint</em> <em>/actuator/prometheus</em> con la información de las métricas en el formato que espera Prometheus para recolectarla.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">plugins</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;2.2.4.RELEASE&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">application</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springcloud.service.Main&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-dependencies:2.2.4.RELEASE&#34;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s2">&#34;org.springframework.cloud:spring-cloud-dependencies:Finchley.SR2&#34;</span><span class="o">))</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">excludeSpringBootStarterLogging</span> <span class="o">=</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework.boot&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;spring-boot-starter-logging&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-web&#34;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-log4j2&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-actuator&#34;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-bus-amqp&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;io.micrometer:micrometer-registry-prometheus:1.0.8&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.google.code.gson:gson:2.8.5&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.core:jackson-databind:2.9.6&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Micrometer y Prometheus ofrecen varios tipos de métricas:</p>
<ul>
<li><em>Counter</em>: representa un valor que se va incrementando a lo largo del tiempo. Puede ser el número de invocaciones recibidas por servicio.</li>
<li><em>Gauge</em>: representa un valor que arbitrariamente puede subir o bajar. Puede ser la cantidad de memoria usada.</li>
<li><em>Timer</em>: mide periodos de tiempo. Puede ser el tiempo de respuesta empleado para atender una petición de un servicio.</li>
<li><em>Distribution summaries</em>: recolecta la distribución de una serie de datos con los que se pueden obtener percentiles.</li>
</ul>
<h3 id="ejemplo-de-microservicio-con-spring-boot-micrometer-prometheus-y-grafana">Ejemplo de microservicio con Spring Boot, Micrometer, Prometheus y Grafana</h3>
<p>Utilizando el ejemplo que hice para la <a href="https://picodotdev.github.io/blog-bitix/series/spring-cloud/">serie de artículos sobre Spring Cloud</a> he añadido al micro servicio <em>service</em> un contador con el número de invocaciones que se le ha realizado. Este dato se expone en el <em>endpoint</em> con la clave <em>service.invocations</em> como se ha definido al registrar el contador en Micrometer con la clase <em>MeterRegistry</em>. Además de esta métrica propia del servicio Spring Boot Actuator añade otras muchas más del uso de la CPU, memoria, &hellip;</p>
<p>Una clase de una aplicación de Spring Boot que utiliza un <em>Counter</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.service</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">io.micrometer.core.instrument.Counter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">io.micrometer.core.instrument.MeterRegistry</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>&#10;&#10;<span class="nd">@RestController</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultController</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Random</span> <span class="n">random</span><span class="o">;</span>&#10;	<span class="kd">private</span> <span class="n">Counter</span> <span class="n">counter</span><span class="o">;</span>&#10;&#10;	<span class="kd">public</span> <span class="nf">DefaultController</span><span class="o">(</span><span class="n">MeterRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">&#34;service.invocations&#34;</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">&#34;Total service invocations&#34;</span><span class="o">).</span><span class="na">register</span><span class="o">(</span><span class="n">registry</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">counter</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span>&#10;&#10;		<span class="c1">// Timeout simulation&#10;</span><span class="c1"></span>		<span class="c1">//Thread.sleep(random.nextInt(2000));&#10;</span><span class="c1"></span>&#10;		<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello world (%s, %s)&#34;</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">(),</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DefaultController.java</span>
    </div>
</div>
<p>Las claves de las métricas por defecto exportadas por Spring Boot Actuator.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>&#10;   <span class="nt">&#34;names&#34;</span><span class="p">:[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.memory.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.threads.states&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;http.server.requests&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;process.files.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.gc.memory.promoted&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.cache.hit&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;rabbitmq.channels&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;system.load.average.1m&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.cache.access&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.memory.used&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.gc.max.data.size&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.gc.pause&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.memory.committed&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;system.cpu.count&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;spring.integration.channels&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;rabbitmq.connections&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.global.sent&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.buffer.memory.used&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.sessions.created&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.threads.daemon&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;system.cpu.usage&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.gc.memory.allocated&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.global.request.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.global.request&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;rabbitmq.rejected&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.sessions.expired&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.threads.live&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.threads.peak&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.global.received&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;process.uptime&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.sessions.rejected&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;process.cpu.usage&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.threads.config.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.classes.loaded&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;rabbitmq.consumed&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.classes.unloaded&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.global.error&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.sessions.active.current&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;service.invocations&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.sessions.alive.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.gc.live.data.size&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.servlet.request.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.threads.current&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.servlet.request&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;process.files.open&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.buffer.count&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;jvm.buffer.total.capacity&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.sessions.active.max&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;spring.integration.handlers&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.threads.busy&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;rabbitmq.published&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;process.start.time&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;tomcat.servlet.error&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;spring.integration.sources&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;rabbitmq.acknowledged&#34;</span>&#10;   <span class="p">]</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>actuator-metrics.json</span>
    </div>
</div>
<p>Los datos de una métrica en el <em>endpoint</em> <em>/actuator/metrics/service.invocations</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>&#10;   <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;service.invocations&#34;</span><span class="p">,</span>&#10;   <span class="nt">&#34;description&#34;</span><span class="p">:</span><span class="s2">&#34;Total service invocations&#34;</span><span class="p">,</span>&#10;   <span class="nt">&#34;baseUnit&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;measurements&#34;</span><span class="p">:[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="nt">&#34;statistic&#34;</span><span class="p">:</span><span class="s2">&#34;COUNT&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="nt">&#34;value&#34;</span><span class="p">:</span><span class="mf">1.0</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">}</span>&#10;   <span class="p">],</span>&#10;   <span class="nt">&#34;availableTags&#34;</span><span class="p">:[</span>&#10;&#10;   <span class="p">]</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>actuator-metrics-service-invocations.json</span>
    </div>
</div>
<p>Y las mismas métricas en el formato que espera Prometheus.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span><span class="lnt">172&#10;</span><span class="lnt">173&#10;</span><span class="lnt">174&#10;</span><span class="lnt">175&#10;</span><span class="lnt">176&#10;</span><span class="lnt">177&#10;</span><span class="lnt">178&#10;</span><span class="lnt">179&#10;</span><span class="lnt">180&#10;</span><span class="lnt">181&#10;</span><span class="lnt">182&#10;</span><span class="lnt">183&#10;</span><span class="lnt">184&#10;</span><span class="lnt">185&#10;</span><span class="lnt">186&#10;</span><span class="lnt">187&#10;</span><span class="lnt">188&#10;</span><span class="lnt">189&#10;</span><span class="lnt">190&#10;</span><span class="lnt">191&#10;</span><span class="lnt">192&#10;</span><span class="lnt">193&#10;</span><span class="lnt">194&#10;</span><span class="lnt">195&#10;</span><span class="lnt">196&#10;</span><span class="lnt">197&#10;</span><span class="lnt">198&#10;</span><span class="lnt">199&#10;</span><span class="lnt">200&#10;</span><span class="lnt">201&#10;</span><span class="lnt">202&#10;</span><span class="lnt">203&#10;</span><span class="lnt">204&#10;</span><span class="lnt">205&#10;</span><span class="lnt">206&#10;</span><span class="lnt">207&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"># HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool&#10;# TYPE jvm_buffer_total_capacity_bytes gauge&#10;jvm_buffer_total_capacity_bytes{id=&#34;direct&#34;,} 40960.0&#10;jvm_buffer_total_capacity_bytes{id=&#34;mapped&#34;,} 0.0&#10;# HELP process_files_max_files The maximum file descriptor count&#10;# TYPE process_files_max_files gauge&#10;process_files_max_files 4096.0&#10;# HELP system_cpu_count The number of processors available to the Java virtual machine&#10;# TYPE system_cpu_count gauge&#10;system_cpu_count 8.0&#10;# HELP tomcat_global_request_seconds  &#10;# TYPE tomcat_global_request_seconds summary&#10;tomcat_global_request_seconds_count{name=&#34;http-nio-8080&#34;,} 2.0&#10;tomcat_global_request_seconds_sum{name=&#34;http-nio-8080&#34;,} 0.111&#10;# HELP jvm_threads_states_threads The current number of threads having NEW state&#10;# TYPE jvm_threads_states_threads gauge&#10;jvm_threads_states_threads{state=&#34;runnable&#34;,} 7.0&#10;jvm_threads_states_threads{state=&#34;blocked&#34;,} 0.0&#10;jvm_threads_states_threads{state=&#34;waiting&#34;,} 16.0&#10;jvm_threads_states_threads{state=&#34;timed-waiting&#34;,} 9.0&#10;jvm_threads_states_threads{state=&#34;new&#34;,} 0.0&#10;jvm_threads_states_threads{state=&#34;terminated&#34;,} 0.0&#10;# HELP tomcat_cache_access_total  &#10;# TYPE tomcat_cache_access_total counter&#10;tomcat_cache_access_total 0.0&#10;# HELP rabbitmq_acknowledged_total  &#10;# TYPE rabbitmq_acknowledged_total counter&#10;rabbitmq_acknowledged_total{name=&#34;rabbit&#34;,} 0.0&#10;# HELP process_uptime_seconds The uptime of the Java virtual machine&#10;# TYPE process_uptime_seconds gauge&#10;process_uptime_seconds 46.087&#10;# HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the young generation memory pool after one GC to before the next&#10;# TYPE jvm_gc_memory_allocated_bytes_total counter&#10;jvm_gc_memory_allocated_bytes_total 8.47628712E8&#10;# HELP rabbitmq_consumed_total  &#10;# TYPE rabbitmq_consumed_total counter&#10;rabbitmq_consumed_total{name=&#34;rabbit&#34;,} 0.0&#10;# HELP tomcat_global_error_total  &#10;# TYPE tomcat_global_error_total counter&#10;tomcat_global_error_total{name=&#34;http-nio-8080&#34;,} 0.0&#10;# HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset&#10;# TYPE jvm_threads_peak_threads gauge&#10;jvm_threads_peak_threads 34.0&#10;# HELP jvm_gc_pause_seconds Time spent in GC pause&#10;# TYPE jvm_gc_pause_seconds summary&#10;jvm_gc_pause_seconds_count{action=&#34;end of major GC&#34;,cause=&#34;Metadata GC Threshold&#34;,} 1.0&#10;jvm_gc_pause_seconds_sum{action=&#34;end of major GC&#34;,cause=&#34;Metadata GC Threshold&#34;,} 0.137&#10;jvm_gc_pause_seconds_count{action=&#34;end of minor GC&#34;,cause=&#34;Metadata GC Threshold&#34;,} 1.0&#10;jvm_gc_pause_seconds_sum{action=&#34;end of minor GC&#34;,cause=&#34;Metadata GC Threshold&#34;,} 0.014&#10;jvm_gc_pause_seconds_count{action=&#34;end of minor GC&#34;,cause=&#34;Allocation Failure&#34;,} 2.0&#10;jvm_gc_pause_seconds_sum{action=&#34;end of minor GC&#34;,cause=&#34;Allocation Failure&#34;,} 0.052&#10;# HELP jvm_gc_pause_seconds_max Time spent in GC pause&#10;# TYPE jvm_gc_pause_seconds_max gauge&#10;jvm_gc_pause_seconds_max{action=&#34;end of major GC&#34;,cause=&#34;Metadata GC Threshold&#34;,} 0.137&#10;jvm_gc_pause_seconds_max{action=&#34;end of minor GC&#34;,cause=&#34;Metadata GC Threshold&#34;,} 0.014&#10;jvm_gc_pause_seconds_max{action=&#34;end of minor GC&#34;,cause=&#34;Allocation Failure&#34;,} 0.033&#10;# HELP http_server_requests_seconds  &#10;# TYPE http_server_requests_seconds summary&#10;http_server_requests_seconds_count{exception=&#34;None&#34;,method=&#34;GET&#34;,status=&#34;200&#34;,uri=&#34;/&#34;,} 1.0&#10;http_server_requests_seconds_sum{exception=&#34;None&#34;,method=&#34;GET&#34;,status=&#34;200&#34;,uri=&#34;/&#34;,} 0.038397291&#10;http_server_requests_seconds_count{exception=&#34;None&#34;,method=&#34;GET&#34;,status=&#34;200&#34;,uri=&#34;/**/favicon.ico&#34;,} 1.0&#10;http_server_requests_seconds_sum{exception=&#34;None&#34;,method=&#34;GET&#34;,status=&#34;200&#34;,uri=&#34;/**/favicon.ico&#34;,} 0.010500544&#10;# HELP http_server_requests_seconds_max  &#10;# TYPE http_server_requests_seconds_max gauge&#10;http_server_requests_seconds_max{exception=&#34;None&#34;,method=&#34;GET&#34;,status=&#34;200&#34;,uri=&#34;/&#34;,} 0.038397291&#10;http_server_requests_seconds_max{exception=&#34;None&#34;,method=&#34;GET&#34;,status=&#34;200&#34;,uri=&#34;/**/favicon.ico&#34;,} 0.010500544&#10;# HELP tomcat_sessions_created_sessions_total  &#10;# TYPE tomcat_sessions_created_sessions_total counter&#10;tomcat_sessions_created_sessions_total 0.0&#10;# HELP rabbitmq_published_total  &#10;# TYPE rabbitmq_published_total counter&#10;rabbitmq_published_total{name=&#34;rabbit&#34;,} 0.0&#10;# HELP spring_integration_handlers The number of message handlers&#10;# TYPE spring_integration_handlers gauge&#10;spring_integration_handlers 2.0&#10;# HELP jvm_memory_used_bytes The amount of used memory&#10;# TYPE jvm_memory_used_bytes gauge&#10;jvm_memory_used_bytes{area=&#34;heap&#34;,id=&#34;PS Survivor Space&#34;,} 0.0&#10;jvm_memory_used_bytes{area=&#34;heap&#34;,id=&#34;PS Old Gen&#34;,} 4.2640064E7&#10;jvm_memory_used_bytes{area=&#34;heap&#34;,id=&#34;PS Eden Space&#34;,} 2.21190608E8&#10;jvm_memory_used_bytes{area=&#34;nonheap&#34;,id=&#34;Metaspace&#34;,} 6.2586488E7&#10;jvm_memory_used_bytes{area=&#34;nonheap&#34;,id=&#34;Code Cache&#34;,} 1.9553024E7&#10;jvm_memory_used_bytes{area=&#34;nonheap&#34;,id=&#34;Compressed Class Space&#34;,} 8220544.0&#10;# HELP tomcat_servlet_error_total  &#10;# TYPE tomcat_servlet_error_total counter&#10;tomcat_servlet_error_total{name=&#34;default&#34;,} 0.0&#10;# HELP rabbitmq_connections  &#10;# TYPE rabbitmq_connections gauge&#10;rabbitmq_connections{name=&#34;rabbit&#34;,} 0.0&#10;# HELP spring_integration_sources The number of message sources&#10;# TYPE spring_integration_sources gauge&#10;spring_integration_sources 0.0&#10;# HELP tomcat_sessions_active_max_sessions  &#10;# TYPE tomcat_sessions_active_max_sessions gauge&#10;tomcat_sessions_active_max_sessions 0.0&#10;# HELP tomcat_global_received_bytes_total  &#10;# TYPE tomcat_global_received_bytes_total counter&#10;tomcat_global_received_bytes_total{name=&#34;http-nio-8080&#34;,} 0.0&#10;# HELP tomcat_threads_current_threads  &#10;# TYPE tomcat_threads_current_threads gauge&#10;tomcat_threads_current_threads{name=&#34;http-nio-8080&#34;,} 10.0&#10;# HELP tomcat_sessions_active_current_sessions  &#10;# TYPE tomcat_sessions_active_current_sessions gauge&#10;tomcat_sessions_active_current_sessions 0.0&#10;# HELP tomcat_global_request_max_seconds  &#10;# TYPE tomcat_global_request_max_seconds gauge&#10;tomcat_global_request_max_seconds{name=&#34;http-nio-8080&#34;,} 0.1&#10;# HELP tomcat_sessions_expired_sessions_total  &#10;# TYPE tomcat_sessions_expired_sessions_total counter&#10;tomcat_sessions_expired_sessions_total 0.0&#10;# HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use&#10;# TYPE jvm_memory_committed_bytes gauge&#10;jvm_memory_committed_bytes{area=&#34;heap&#34;,id=&#34;PS Survivor Space&#34;,} 3.2505856E7&#10;jvm_memory_committed_bytes{area=&#34;heap&#34;,id=&#34;PS Old Gen&#34;,} 3.00941312E8&#10;jvm_memory_committed_bytes{area=&#34;heap&#34;,id=&#34;PS Eden Space&#34;,} 6.17086976E8&#10;jvm_memory_committed_bytes{area=&#34;nonheap&#34;,id=&#34;Metaspace&#34;,} 6.6060288E7&#10;jvm_memory_committed_bytes{area=&#34;nonheap&#34;,id=&#34;Code Cache&#34;,} 2.0512768E7&#10;jvm_memory_committed_bytes{area=&#34;nonheap&#34;,id=&#34;Compressed Class Space&#34;,} 8912896.0&#10;# HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC&#10;# TYPE jvm_gc_memory_promoted_bytes_total counter&#10;jvm_gc_memory_promoted_bytes_total 2.5852976E7&#10;# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time&#10;# TYPE system_load_average_1m gauge&#10;system_load_average_1m 1.23&#10;# HELP system_cpu_usage The &#34;recent cpu usage&#34; for the whole system&#10;# TYPE system_cpu_usage gauge&#10;system_cpu_usage 0.09841353781068218&#10;# HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool&#10;# TYPE jvm_buffer_count_buffers gauge&#10;jvm_buffer_count_buffers{id=&#34;direct&#34;,} 5.0&#10;jvm_buffer_count_buffers{id=&#34;mapped&#34;,} 0.0&#10;# HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management&#10;# TYPE jvm_memory_max_bytes gauge&#10;jvm_memory_max_bytes{area=&#34;heap&#34;,id=&#34;PS Survivor Space&#34;,} 3.2505856E7&#10;jvm_memory_max_bytes{area=&#34;heap&#34;,id=&#34;PS Old Gen&#34;,} 5.59939584E9&#10;jvm_memory_max_bytes{area=&#34;heap&#34;,id=&#34;PS Eden Space&#34;,} 2.735210496E9&#10;jvm_memory_max_bytes{area=&#34;nonheap&#34;,id=&#34;Metaspace&#34;,} -1.0&#10;jvm_memory_max_bytes{area=&#34;nonheap&#34;,id=&#34;Code Cache&#34;,} 2.5165824E8&#10;jvm_memory_max_bytes{area=&#34;nonheap&#34;,id=&#34;Compressed Class Space&#34;,} 1.073741824E9&#10;# HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads&#10;# TYPE jvm_threads_live_threads gauge&#10;jvm_threads_live_threads 32.0&#10;# HELP service_invocations_total  &#10;# TYPE service_invocations_total counter&#10;service_invocations_total 1.0&#10;# HELP tomcat_threads_config_max_threads  &#10;# TYPE tomcat_threads_config_max_threads gauge&#10;tomcat_threads_config_max_threads{name=&#34;http-nio-8080&#34;,} 200.0&#10;# HELP jvm_threads_daemon_threads The current number of live daemon threads&#10;# TYPE jvm_threads_daemon_threads gauge&#10;jvm_threads_daemon_threads 29.0&#10;# HELP process_start_time_seconds Start time of the process since unix epoch.&#10;# TYPE process_start_time_seconds gauge&#10;process_start_time_seconds 1.544815302414E9&#10;# HELP rabbitmq_rejected_total  &#10;# TYPE rabbitmq_rejected_total counter&#10;rabbitmq_rejected_total{name=&#34;rabbit&#34;,} 0.0&#10;# HELP tomcat_servlet_request_max_seconds  &#10;# TYPE tomcat_servlet_request_max_seconds gauge&#10;tomcat_servlet_request_max_seconds{name=&#34;default&#34;,} 0.0&#10;# HELP process_files_open_files The open file descriptor count&#10;# TYPE process_files_open_files gauge&#10;process_files_open_files 189.0&#10;# HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool&#10;# TYPE jvm_buffer_memory_used_bytes gauge&#10;jvm_buffer_memory_used_bytes{id=&#34;direct&#34;,} 40960.0&#10;jvm_buffer_memory_used_bytes{id=&#34;mapped&#34;,} 0.0&#10;# HELP tomcat_threads_busy_threads  &#10;# TYPE tomcat_threads_busy_threads gauge&#10;tomcat_threads_busy_threads{name=&#34;http-nio-8080&#34;,} 1.0&#10;# HELP jvm_gc_live_data_size_bytes Size of old generation memory pool after a full GC&#10;# TYPE jvm_gc_live_data_size_bytes gauge&#10;jvm_gc_live_data_size_bytes 4.2640064E7&#10;# HELP tomcat_servlet_request_seconds  &#10;# TYPE tomcat_servlet_request_seconds summary&#10;tomcat_servlet_request_seconds_count{name=&#34;default&#34;,} 0.0&#10;tomcat_servlet_request_seconds_sum{name=&#34;default&#34;,} 0.0&#10;# HELP jvm_gc_max_data_size_bytes Max size of old generation memory pool&#10;# TYPE jvm_gc_max_data_size_bytes gauge&#10;jvm_gc_max_data_size_bytes 5.59939584E9&#10;# HELP tomcat_sessions_alive_max_seconds  &#10;# TYPE tomcat_sessions_alive_max_seconds gauge&#10;tomcat_sessions_alive_max_seconds 0.0&#10;# HELP tomcat_global_sent_bytes_total  &#10;# TYPE tomcat_global_sent_bytes_total counter&#10;tomcat_global_sent_bytes_total{name=&#34;http-nio-8080&#34;,} 1004.0&#10;# HELP rabbitmq_channels  &#10;# TYPE rabbitmq_channels gauge&#10;rabbitmq_channels{name=&#34;rabbit&#34;,} 0.0&#10;# HELP tomcat_sessions_rejected_sessions_total  &#10;# TYPE tomcat_sessions_rejected_sessions_total counter&#10;tomcat_sessions_rejected_sessions_total 0.0&#10;# HELP spring_integration_channels The number of message channels&#10;# TYPE spring_integration_channels gauge&#10;spring_integration_channels 4.0&#10;# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution&#10;# TYPE jvm_classes_unloaded_classes_total counter&#10;jvm_classes_unloaded_classes_total 0.0&#10;# HELP process_cpu_usage The &#34;recent cpu usage&#34; for the Java Virtual Machine process&#10;# TYPE process_cpu_usage gauge&#10;process_cpu_usage 0.0012776292616022062&#10;# HELP tomcat_cache_hit_total  &#10;# TYPE tomcat_cache_hit_total counter&#10;tomcat_cache_hit_total 0.0&#10;# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine&#10;# TYPE jvm_classes_loaded_classes gauge&#10;jvm_classes_loaded_classes 12793.0&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>actuator-metrics-prometheus.txt</span>
    </div>
</div>
<p>Para iniciar el ejemplo de Spring Cloud que consta de un servicio de registro y descubrimiento, un servicio de configuración, un servicio del que se pueden iniciar varias instancias y un cliente que hace peticiones hay que utilizar la siguiente serie de comandos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew client:run</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew-run.sh</span>
    </div>
</div>
<p>Una vez expuestas las métricas en el formato que espera Prometheus este ya puede recolectarlas. Para usar Prometheus y posteriormente Grafana de forma fácil evitando tener que instalar y configurar nada se puede usar <a href="https://www.docker.com/">Docker</a>, en este caso con <a href="https://docs.docker.com/compose/">Docker Compose</a>. En la <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie de artículos sobre Docker</a> explico que proporciona Docker y como usar las varias herramientas que ofrece.</p>
<p>El archivo de Docker Compose contiene dos contenedores uno para Prometheus y otro para Grafana, con sus archivos de configuración. En la configuración de Prometheus se crean un <em>job</em> que recolecta las métricas cada pocos segundos del servicio a través del <em>endpoint</em> de métricas. En la configuración de Grafana se añade como una fuente de datos Prometheus, se puede añadir otras varias.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ docker-compose up&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">prom/prometheus</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="s2">&#34;9090:9090&#34;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="l">./prometheus.yml:/etc/prometheus/prometheus.yml</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">network_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;host&#34;</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">grafana</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">grafana/grafana</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="s2">&#34;3000:3000&#34;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="l">./grafana-datasources.yml:/etc/grafana/provisioning/datasources/grafana-datasources.yml</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">network_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;host&#34;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">depends_on</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="l">prometheus</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;spring-actuator&#39;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">static_configs</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;service.127.0.0.1.xip.io:8080&#39;</span><span class="p">]</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">tls_config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">insecure_skip_verify</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>prometheus.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">datasources</span><span class="p">:</span><span class="w">&#10;</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Prometheus</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">direct</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus.127.0.0.1.xip.io:9090</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">basic_auth</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">with_credentials</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">is_default</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>grafana-datasources.yml</span>
    </div>
</div>
<p>Prometheus posee la funcionalidad básica de crear gráficas con las métricas recogidas pero no tiene la habilidad de crear paneles que recogen una colección de gráficas relacionadas o un editor de consultas más avanzado como tiene Grafana.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/prometheus-graph_hudb4fb1b3b4c5fc9bfe9195d2743ad9f9_62771_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Métrica de la aplicación en Prometheus"><img src="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/prometheus-graph_hudb4fb1b3b4c5fc9bfe9195d2743ad9f9_62771_300x200_fit_box_3.png" width="179" height="200" alt="Métrica de la aplicación en Prometheus" title="Métrica de la aplicación en Prometheus"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/grafana-graph_hu70e557534c16596229235e47193c737c_53439_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Métrica de la aplicación en Grafana"><img src="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/grafana-graph_hu70e557534c16596229235e47193c737c_53439_300x200_fit_box_3.png" width="300" height="152" alt="Métrica de la aplicación en Grafana" title="Métrica de la aplicación en Grafana"  class="lozad "></a></p>
<figcaption>Métrica de la aplicación en Prometheus y Grafana</figcaption>
</figure>
</div>
<p>Una vez que Prometheus recolecta los datos de las métricas al introducir las expresiones se proporciona asistencia de código. Por otro lado, en la sección <em>Status &gt; Targets</em> de
Prometheus se puede ver el estado de los servicios de los que recolecta métricas.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/prometheus-targets_hufff0caf060b535c26e9dd0ca59058429_51904_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estado de servicios en Prometheus"><img src="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/prometheus-targets_hufff0caf060b535c26e9dd0ca59058429_51904_300x200_fit_box_3.png" width="284" height="200" alt="Estado de servicios en Prometheus" title="Estado de servicios en Prometheus"  class="lozad "></a></p>
<figcaption>Estado de los servicios rastreados por Prometheus</figcaption>
</figure>
</div>
<p>Como Spring Boot Actuator exporta muchas métricas del funcionamiento del servicio Grafana puede crear gráficas de todas ellas. No hace falta crear un <em>dashboard</em> desde cero, se pueden descargar e importar <em>dashboards</em>. Este <a href="https://grafana.com/dashboards/4701">ejemplo para Micrometer</a> recoge la memoria de la JVM (<em>heap</em> y no <em>heap</em>), uso de CPU, carga, hilos, estado de hilos, descriptores de archivos, recolector de basura, <em>classloader</em> y entrada/salida básica.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/grafana-spring-boot-micrometer-dashboard_hu1e421ff25cd5fbc7f190e3d824bd4790_201078_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estado de servicios en Prometheus"><img src="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/images/grafana-spring-boot-micrometer-dashboard_hu1e421ff25cd5fbc7f190e3d824bd4790_201078_600x450_fit_box_3.png" width="600" height="331" alt="Estado de servicios en Prometheus" title="Estado de servicios en Prometheus"  class="lozad "></a></p>
<figcaption>Dashboard de una aplicación Spring Boot en Grafana</figcaption>
</figure>
</div>
<p><a href="https://grafana.com/plugins">Grafana tiene <em>plugins</em></a> para añadir como fuentes de datos bases de datos relacionales para extraer mediante sentencias SQL y visualizar datos almacenados en <a href="https://www.mysql.com/">MySQL</a>,  <a href="https://www.postgresql.org/">PostgreSQL</a> u <a href="https://www.oracle.com/">Oracle</a>.</p>
<p>Con la información de las métricas se conoce más en detalle cual es el comportamiento normal de una aplicación y observar de forma rápida cuando se introducen cambios como afectan al comportamiento de la misma tanto de forma negativa como de forma positiva. En cualquier aplicación que ofrece un servicio es importante conocer su estado y actuar incluso antes de que ofrezca un mal comportamiento e incluso deje de prestar su servicio. La monitorización no sustituye sino que complementa un sistema de trazas que en una aplicación Java es común que se realice con <a href="https://www.slf4j.org/">SLF4J</a> o <a href="https://logging.apache.org/log4j/2.x/">Log4j</a>.</p>
<p>Aún quedan algunas preguntas por responder ¿como agregar los datos de múltiples instancias? ¿si se crean nuevas instancias del servicio como puede conocer Prometheus los nuevos <em>targets</em> que se han creado? En el ejemplo solo hay una instancia del servicio y la configuración de Prometheus es proporcionada por un archivo estático. Aún desconozco las respuestas, no lo he investigado en detalle, hay alguna <a href="https://stackoverflow.com/questions/46910839/is-it-possible-to-setup-prometheus-with-eureka-sd-without-file-sd-configs">pregunta sobre este tema en StackOverflow</a> y por la respuesta Prometheus no tiene un adaptador para Eureka entre los <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">varios servicios de descubrimiento que sí soporta en su configuración</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew-run.sh, docker-compose up</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://njalnordmark.wordpress.com/2017/05/08/using-prometheus-with-spring-boot/">Using Prometheus with Spring Boot</a></li>
<li><a href="https://raymondhlee.wordpress.com/2016/09/24/monitoring-spring-boot-applications-with-prometheus/">Monitoring Spring Boot Applications with Prometheus – Part 1</a></li>
<li><a href="https://raymondhlee.wordpress.com/2016/10/03/monitoring-spring-boot-applications-with-prometheus-part-2/">Monitoring Spring Boot Applications with Prometheus – Part 2</a></li>
<li><a href="https://blog.sebastian-daschner.com/entries/prometheus-java-ee">Prometheus with Java EE</a></li>
<li><a href="https://github.com/prometheus/prometheus/pull/3369">Add Eureka Service Discovery</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/11/novedades-de-java-ee-8/</id>
        <title>Novedades de Java EE 8</title>
        <updated>2018-11-09T17:00:00+01:00</updated>
        <published>2018-11-09T17:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/11/novedades-de-java-ee-8/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java-ee.png" width="200" height="213" alt="Java EE" title="Java EE"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>La <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java2-los-modulos/">publicación de Java 9</a> en agosto de 2017 con la importante novedad de los módulos ha hecho que la publicación de Java EE 8 haya pasado desapercibida. También ha contribuido el hecho de que <a href="https://www.oracle.com/">Oracle</a> haya entregado el desarrollo de futuras nuevas especificaciones de Java EE a la <a href="https://eclipse.org">fundación Eclipse</a> con el objetivo de que sea más abierto a otras empresas, Java EE a partir de ahora bajo la fundación Eclipse se denominará <a href="https://jakarta.ee/">Jakarta EE</a>. Pasados algunos meses los servidores de aplicaciones ya están implementando las nuevas novedades de Java EE 8. Algunos de los servidores que ya soportan estas nuevas especificaciones y novedades son <a href="https://wildfly.org/">Wildfly</a>, <a href="https://www.payara.fish/">Payara</a> <a href="https://ee.kumuluz.com/">Kumuluz</a> o <a href="https://tomcat.apache.org/">Tomcat</a> 9.</p>
<p>Hay algunas novedades de Java EE 8 entre ellas:</p>
<ul>
<li>Java Servlet 4.0 API con soporte para el protocolo HTTP/2, incluido el soporte para enviar recursos desde el servidor sin que el cliente los haya pedido aún a través del método <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html#newPushBuilder--">newPushBuilder()</a> de la clase <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html">HttpServletRequest</a>.</li>
<li>Soporte para JSON mejorado incluyendo una nueva API de <em>binding</em>.</li>
<li>Eventos CDI asíncronos.</li>
<li>Una nueva API de seguridad simple, estandarizada y modernizada.</li>
<li>Soporte para las nuevas capacidades de Java 8 (pe. Date &amp; Time API, Streams API, mejoras en las anotaciones).</li>
</ul>
<p>El soporte para <a href="https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/">HTTP/2 y sus importantes novedades</a> hace que desde Java se puedan aprovechar las mejoras en la segunda versión del protocolo HTTP y se aprovechan las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">novedades de Java 8</a>. También en Java EE 8 se han actualizado de versión algunas de las especificaciones e incluido alguna nueva como la de la nueva API de seguridad que han de soportar los servidores de aplicaciones para ser compatibles:</p>
<ul>
<li>JSR 366 – Java EE 8 Platform</li>
<li>JSR 365 – Contexts and Dependency Injection (CDI) 2.0</li>
<li>JSR 367 – The Java API for JSON Binding (JSON-B) 1.0</li>
<li>JSR 369 – Java Servlet 4.0</li>
<li>JSR 370 – Java API for RESTful Web Services (JAX-RS) 2.1</li>
<li>JSR 372 – JavaServer Faces (JSF) 2.3</li>
<li>JSR 374 – Java API for JSON Processing (JSON-P)1.1</li>
<li>JSR 375 – Java EE Security API 1.0</li>
<li>JSR 380 – Bean Validation 2.0</li>
<li>JSR 250 – Common Annotations 1.3</li>
<li>JSR 338 – Java Persistence 2.2</li>
<li>JSR 356 – Java API for WebSocket 1.1</li>
<li>JSR 919 – JavaMail 1.6</li>
</ul>
<p>Hay un <a href="https://javaee.github.io/tutorial/">tutorial de Java EE 8</a> y con el <a href="https://javaee.github.io/firstcup/toc.html">ejemplo FirstCup</a> se puede adquirir un buen conocimiento para desarrollar aplicaciones con el lenguaje Java. En el artículo <a href="https://www.ibm.com/developerworks/opensource/library/j-whats-new-in-javaee-8/index.html">What’s new in Java EE 8</a> hay unos pocos ejemplos de código con varias de estas novedades. Finalmente, con el traspaso de Java EE a la fundación Eclipse y por motivos de marca registrada el proyecto ha sido renombrado a Jakarta EE. Java EE o ahora Jakarta EE, <a href="https://microprofile.io/">Microprofile</a> y <a href="https://spring.io/">Spring</a> junto con algunos <em>frameworks</em> especializados son las opciones más utilizadas para realizar aplicaciones en Java en el lado del servidor.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.oracle.com/technetwork/java/javaee/documentation/ee8-release-notes-3894362.html">Java Platform, Enterprise Edition 8 SDK - Release Notes</a></li>
<li><a href="https://www.ibm.com/developerworks/opensource/library/j-whats-new-in-javaee-8/index.html">What’s new in Java EE 8</a></li>
<li><a href="https://blogs.oracle.com/java/java-ee-8-overview">Java EE 8 Overview</a></li>
<li><a href="https://www.oracle.com/technetwork/java/javaee/overview/index.html">Java™ EE at a Glance</a></li>
<li><a href="https://javaee.github.io/">Java EE (GitHub)</a></li>
<li><a href="https://javaee.github.io/tutorial/">Java EE Tutorial</a></li>
<li><a href="https://javaee.github.io/tutorial/toc.html">Java EE Tutorial (Content)</a></li>
<li><a href="https://javaee.github.io/firstcup/toc.html">Java EE Tutorial: Your First Cup</a></li>
<li><a href="https://www.infoq.com/news/2018/02/from-javaee-to-jakartaee">From Java EE to Jakarta EE</a></li>
<li><a href="https://dzone.com/articles/an-overview-of-cdi-events">An Overview of CDI Events</a></li>
<li><a href="http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#firing_events_asynchronously">Firing CDI events asynchronously</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/11/formatear-con-color-sentencias-sql-o-codigo-fuente-en-la-terminal-con-java-y-jansi/</id>
        <title>Formatear con color sentencias SQL o código fuente en la terminal con Java y Jansi</title>
        <updated>2018-11-03T23:30:00+01:00</updated>
        <published>2018-11-03T23:30:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/11/formatear-con-color-sentencias-sql-o-codigo-fuente-en-la-terminal-con-java-y-jansi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Usando la librería <a href="https://github.com/fusesource/jansi">Jansi</a> es posible <a href="https://elblogdepicodev.blogspot.com.es/2012/12/color-en-la-terminal-con-jansi.htmlindex-amp.html">hacer que un programa Java emita texto en color en la terminal</a>. Emitir color en la terminal sirve para identificar más fácilmente y visualmente ciertas partes del texto, por ejemplo, emitiendo en rojo mensajes importantes o con color amarillo de fondo algún dato. Una utilidad práctica es formatear con color una sentencia SQL que se va a ejecutar en una aplicación a modo de traza o con colores el código fuente de un archivo Java u otro tipo de archivo de texto.</p>
<p>Una forma sencilla para formatear con colores un archivo de código fuente Java o una sentencia SQL sin llegar a hacer un procesador de sintaxis de ese lenguaje o formato es <a href="https://picodotdev.github.io/blog-bitix/2018/02/referencias-a-grupos-de-captura-en-expresiones-regulares-y-reemplazos/">utilizar expresiones regulares y grupos de captura</a>. En ambos casos hay partes que son palabras claves, números o cadenas en definitiva elementos que se deseen destacar. Con las clases <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html">Pattern</a> y <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Matcher.html">Matcher</a> de Java se van obteniendo los diferentes grupos de captura de forma secuencial. Según sea el grupo capturado del elemento actual se utiliza Jansi para formatearlo con el color que le corresponde.</p>
<p>Una formateador simple para cada uno de estos casos serían los siguientes donde se utiliza una expresión regular con diferentes grupos de captura con nombre. El primer caso es para formatear con color una sentencia SQL sencilla en el método <em>printSql()</em> y el segundo el programa <em>Hola mundo</em> de Java en el método <em>printJava()</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span><span class="lnt">86&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaregexformatter</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.fusesource.jansi.Ansi</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.fusesource.jansi.AnsiConsole</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.regex.Matcher</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_REGEXP_REFERENCEGROPUS</span> <span class="o">=</span> <span class="s">&#34;(?&lt;keyword&gt;select|from|where|and)|(?&lt;string&gt;&#39;[^&#39;]*&#39;)|(?&lt;number&gt;\\d+)|(?&lt;other&gt;.)&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">JAVA_REGEXP_REFERENCEGROPUS</span> <span class="o">=</span> <span class="s">&#34;(?&lt;keyword&gt;public|static|void|class)|(?&lt;type&gt;String|int)(?&lt;typequalifier&gt;\\[\\]|\\s)|(?&lt;string&gt;\&#34;[^\&#34;]*\&#34;)|(?&lt;number&gt;\\d+)|(?&lt;other&gt;[\\s\\S])&#34;</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AnsiConsole</span><span class="o">.</span><span class="na">systemInstall</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AnsiConsole</span><span class="o">.</span><span class="na">out</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">());</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">printSql</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">printJava</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AnsiConsole</span><span class="o">.</span><span class="na">out</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AnsiConsole</span><span class="o">.</span><span class="na">systemUninstall</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printSql</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">SQL_REGEXP_REFERENCEGROPUS</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="s">&#34;select * from dual where a = &#39;1&#39; and b = 23&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">StringBuffer</span> <span class="n">formatedSql</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">keyword</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;keyword&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;string&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">number</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;number&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">other</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;other&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">keyword</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">MAGENTA</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">keyword</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">YELLOW</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">string</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">other</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="n">other</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AnsiConsole</span><span class="o">.</span><span class="na">out</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="n">formatedSql</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printJava</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">JAVA_REGEXP_REFERENCEGROPUS</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="s">&#34;public class Main {\n\tpublic static void main(String[] args) {\n\t\tint number = 3;\n\t\tSystem.out.println(\&#34;Hello World!\&#34;);\n\t}\n}&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">StringBuffer</span> <span class="n">formatedSql</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">keyword</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;keyword&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">typeQualifier</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;typequalifier&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;string&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">number</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;number&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">other</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">&#34;other&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">keyword</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">MAGENTA</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">keyword</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">CYAN</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">typeQualifier</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="n">typeQualifier</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">YELLOW</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">string</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">fg</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">).</span><span class="na">a</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">other</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">formatedSql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="n">other</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">AnsiConsole</span><span class="o">.</span><span class="na">out</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">Ansi</span><span class="o">.</span><span class="na">ansi</span><span class="o">().</span><span class="na">reset</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="n">formatedSql</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">plugins</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;java&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">application</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mainClass</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javaregexformatter.Main&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span> <span class="s1">&#39;org.fusesource.jansi:jansi:2.3.2&#39;</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>El resultado en la terminal es el siguiente.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/11/formatear-con-color-sentencias-sql-o-codigo-fuente-en-la-terminal-con-java-y-jansi/images/JavaRegexFormatter_hu2eff5423e6ca8ce9c5c70066ea0b2fdc_48614_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Formateado de sentencia SQL y código Java"><img src="https://picodotdev.github.io/blog-bitix/2018/11/formatear-con-color-sentencias-sql-o-codigo-fuente-en-la-terminal-con-java-y-jansi/images/JavaRegexFormatter_hu2eff5423e6ca8ce9c5c70066ea0b2fdc_48614_650x450_fit_box_3.png" width="650" height="276" alt="Formateado de sentencia SQL y código Java" title="Formateado de sentencia SQL y código Java"  class="lozad "></a></p>
<figcaption>Formateado de sentencia SQL y código Java</figcaption>
</figure>
</div>
<p>Este ejemplo es una aplicación útil de las expresiones regulares. En este caso he usado Jansi para emitir en la terminal texto con color pero de forma similar esto se puede usar para formatear en una web el mismo texto transformándolo y generando el HTML con las clases CSS adecuadas.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRegexFormatter">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew installDist, ./build/install/JavaRegexFormatter/bin/JavaRegexFormatter</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/10/ejemplo-sencillo-de-como-leer-datos-de-un-archivo-excel-o-csv-en-java/</id>
        <title>Ejemplo sencillo de cómo leer datos de un archivo Excel o CSV en Java</title>
        <updated>2018-10-26T10:00:00+02:00</updated>
        <published>2018-10-26T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/10/ejemplo-sencillo-de-como-leer-datos-de-un-archivo-excel-o-csv-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Los formatos de archivo de columnas separadas por comas o CSV y los documentos en formato de hojas de cálculo excel del paquete ofimático <a href="https://products.office.com/es-es/">Microsoft Office</a> son muy utilizados como formato de archivo para intercambiar datos entre aplicaciones o simplemente como contenedores de datos. Para leer los datos en estos formatos de archivos en Java hay que emplear alguna librería que facilite y entienda estos formatos de los archivos. Para leer los archivos CSV está la librería <a href="http://opencsv.sourceforge.net/">OpenCSV</a> y para los archivos excel está la librería <a href="https://poi.apache.org/">Apache POI</a>.</p>
<p>Con Apache POI para acceder al archivo excel hay que usar unas pocas clases de su API como <a href="https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFWorkbook.html">HSSFWorkbook</a>, <a href="https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFSheet.html">HSSFSheet</a>, <a href="https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFRow.html">HSSFRow</a>, <a href="https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html">HSSFCell</a> y utilizar el método adecuado según el tipo de datos a obtener.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.holamundoapachepoi</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">DATA</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DATA</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;PlayStation 4 (PS4) - Consola 500GB&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;340.95&#34;</span><span class="o">),</span> <span class="s">&#34;https://www.amazon.es/PlayStation-4-PS4-Consola-500GB/dp/B013U9CW8A&#34;</span> <span class="o">},</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;Raspberry Pi 3 Modelo B (1,2 GHz Quad-core ARM Cortex-A53, 1GB RAM, USB 2.0)&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;41.95&#34;</span><span class="o">),</span> <span class="s">&#34;https://www.amazon.es/Raspberry-Modelo-GHz-Quad-core-Cortex-A53/dp/B01CD5VC92/&#34;</span> <span class="o">},</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;Gigabyte Brix - Barebón (Intel, Core i5, 2,6 GHz, 6, 35 cm (2.5\&#34;), Serial ATA III, SO-DIMM) Negro &#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;421.36&#34;</span><span class="o">),</span> <span class="s">&#34;https://www.amazon.es/Gigabyte-Brix-Bareb%C3%B3n-Serial-SO-DIMM/dp/B00HFCTUPM/&#34;</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writeExcel</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">readExcel</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writeCsv</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">readCsv</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readExcel</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HSSFWorkbook</span> <span class="n">wb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;data.xls&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HSSFSheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">getSheetAt</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">int</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">getLastRowNum</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HSSFRow</span> <span class="n">row</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">getRow</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HSSFCell</span> <span class="n">productCell</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HSSFCell</span> <span class="n">priceCell</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HSSFCell</span> <span class="n">linkCell</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">product</span> <span class="o">=</span> <span class="n">productCell</span><span class="o">.</span><span class="na">getStringCellValue</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">price</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">priceCell</span><span class="o">.</span><span class="na">getNumericCellValue</span><span class="o">()).</span><span class="na">setScale</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ROUND_HALF_DOWN</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">link</span> <span class="o">=</span> <span class="n">linkCell</span><span class="o">.</span><span class="na">getStringCellValue</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s, %s, %s%n&#34;</span><span class="o">,</span> <span class="n">product</span><span class="o">,</span> <span class="n">price</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">link</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-excel.java</span>
    </div>
</div>
<p>Para el caso de los CSV hay que utilizar la clase <a href="http://opencsv.sourceforge.net/apidocs/com/opencsv/CSVReader.html">CSVReader</a> que permite iterar sobre las líneas del archivo teniendo en cuenta el caracter separador de las columnas y las comillas de los datos. Para acceder a los valores de cada una de las columnas hay que convertir al tipo de datos deseado ya que siempre se devuelve un <em>String</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.holamundoapachepoi</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">DATA</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DATA</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;PlayStation 4 (PS4) - Consola 500GB&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;340.95&#34;</span><span class="o">),</span> <span class="s">&#34;https://www.amazon.es/PlayStation-4-PS4-Consola-500GB/dp/B013U9CW8A&#34;</span> <span class="o">},</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;Raspberry Pi 3 Modelo B (1,2 GHz Quad-core ARM Cortex-A53, 1GB RAM, USB 2.0)&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;41.95&#34;</span><span class="o">),</span> <span class="s">&#34;https://www.amazon.es/Raspberry-Modelo-GHz-Quad-core-Cortex-A53/dp/B01CD5VC92/&#34;</span> <span class="o">},</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;Gigabyte Brix - Barebón (Intel, Core i5, 2,6 GHz, 6, 35 cm (2.5\&#34;), Serial ATA III, SO-DIMM) Negro &#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;421.36&#34;</span><span class="o">),</span> <span class="s">&#34;https://www.amazon.es/Gigabyte-Brix-Bareb%C3%B3n-Serial-SO-DIMM/dp/B00HFCTUPM/&#34;</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writeExcel</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">readExcel</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writeCsv</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">readCsv</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readCsv</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">CSVReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CSVReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;data.csv&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">[]&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readAll</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lines</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">product</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">d</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BigDecimal</span> <span class="n">price</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">link</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">d</span><span class="o">[</span><span class="n">2</span><span class="o">];</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s, %s, %s%n&#34;</span><span class="o">,</span> <span class="n">product</span><span class="o">,</span> <span class="n">price</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">link</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-csv.java</span>
    </div>
</div>
<p>En ambos casos la salida en la consola al leer los datos de los documentos es la misma.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">PlayStation 4 (PS4) - Consola 500GB, 340.95, https://www.amazon.es/PlayStation-4-PS4-Consola-500GB/dp/B013U9CW8A&#10;Raspberry Pi 3 Modelo B (1,2 GHz Quad-core ARM Cortex-A53, 1GB RAM, USB 2.0), 41.95, https://www.amazon.es/Raspberry-Modelo-GHz-Quad-core-Cortex-A53/dp/B01CD5VC92/&#10;Gigabyte Brix - Barebón (Intel, Core i5, 2,6 GHz, 6, 35 cm (2.5&#34;), Serial ATA III, SO-DIMM) Negro , 421.36, https://www.amazon.es/Gigabyte-Brix-Bareb%C3%B3n-Serial-SO-DIMM/dp/B00HFCTUPM/&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>Las dependencias a incluir en el proyecto son las siguientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.holamundoapachepoi.Main&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.poi:poi:4.0.0&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;com.opencsv:opencsv:4.3&#39;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>También se puede <a href="https://picodotdev.github.io/blog-bitix/2016/05/ejemplo-sencillo-de-como-crear-un-excel-o-csv-en-java-con-apache-poi-y-opencsv/">utilizar Apache POI para crear hojas excel y OpenCSV para crear archivos CSV</a> con las columnas correctamente separadas por comas. Otra alternativa para leer o escribir archivos en formato CSV es <a href="https://commons.apache.org/proper/commons-csv/">Apache Commons CSV</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoApachePOI">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/08/ejemplo-sencillo-de-como-crear-un-documento-pdf-con-java-y-pdfbox/">Ejemplo sencillo de como crear un documento PDF con Java y PDFBox</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/10/proxy-para-microservicios-con-spring-cloud-netflix-y-zuul/</id>
        <title>Proxy para microservicios con Spring Cloud Netflix y Zuul</title>
        <updated>2018-10-13T23:00:00+02:00</updated>
        <published>2018-10-13T23:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/10/proxy-para-microservicios-con-spring-cloud-netflix-y-zuul/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Teniendo una buen número de microservicios con múltiples instancias ofreciendo cada uno una API y en una ubicación diferente para simplificar la visión de los que actúen clientes de los microservicios se puede utilizar un <em>proxy</em>. Con un <em>proxy</em> es posible centralizar todas las peticiones, que sea éste el encargado de conocer la ubicación de todas las instancias de los microservicios y de hacer la llamada allí donde se encuentre cada una de ellas.</p>
<p>Entre las varias funcionalidades que proporcionar el proyecto <a href="https://cloud.spring.io/spring-cloud-netflix/">Spring Cloud Netflix</a> es esta de <em>proxy</em> mediante <a href="https://github.com/Netflix/zuul">Zuul</a>. Para hacer de <em>proxy</em> Zuul necesita tener una correspondencia entre URLs y servicios que realmente proporcionan la funcionalidad, una forma que tiene Zuul de conocer la ubicación de las instancias es utilizando el servicio de registro y descubrimiento <a href="https://github.com/Netflix/eureka">Eureka</a>. Además, Zuul como cliente de los microservicios posee la funcionalidad de <a href="https://github.com/Netflix/Hystrix">Hystrix</a> que implementa el patrón <em>circuit breaker</em> para tolerancia a fallos, <a href="https://github.com/Netflix/ribbon">Ribbon</a> para hacer balanceo de carga entre varias instancias de los microservicios a nivel de servidor además de reintentos cuando una instancia falla.</p>
<p>En el ejemplo que he utilizado para esta <a href="https://picodotdev.github.io/blog-bitix/series/spring-cloud/">serie de artículos sobre Spring Cloud</a> hay un servicio que por defecto se inicia en el puerto <em>8080</em> y ofrece un <em>endpoint</em> <em>/</em> que devuelve un mensaje. Para crear un microservicio <em>proxy</em> con Zuul hay que crear una aplicación <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> anotar la clase principal con la anotación <em>@EnableZuulProxy</em> y proporcionar la configuración para la correspondencia de rutas y microservicios, además de las propiedades para hacer reintentos en caso de que un microservicio falle y de <em>timeouts</em> en caso de que se comporte no como se espera en cuanto tiempos de respuesta.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.proxy</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="nd">@EnableZuulProxy</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main (zuul).java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">plugins</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;2.1.12.RELEASE&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">application</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springcloud.proxy.Main&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-dependencies:2.1.12.RELEASE&#39;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR2&#39;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">excludeSpringBootStarterLogging</span> <span class="o">=</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework.boot&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;spring-boot-starter-logging&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-log4j2&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//implementation(&#39;org.springframework.cloud:spring-cloud-starter-bus-amqp&#39;, excludeSpringBootStarterLogging)&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-zuul&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.retry:spring-retry:1.2.2.RELEASE&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtimeOnly</span><span class="o">(</span><span class="s1">&#39;com.google.code.gson:gson:2.8.5&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtimeOnly</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.core:jackson-databind:2.9.6&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtimeOnly</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Se puede establecer un tiempo máximo para establecer la conexión, de tiempo de petición, el número de reintentos en la misma instancia si falla o en otro número de instancias, el número máximo de conexiones y el número máximo de conexiones al mismo <em>host</em>. Todas ellas definibles en cada servicio de forma individual bajo las propiedades <em>hystrix.command.service</em> y <em>service.ribbon</em> donde <em>service</em> es el identificativo del servicio. Las rutas se indican bajo la propiedad <em>zuul.routes</em> con la relación identificativo del servicio y <em>path</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8095}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">zuul</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/service/**&#39;</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">retryable</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">hystrix</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">command</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">service</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">execution</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">isolation</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">thread</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">timeoutInMilliseconds</span><span class="p">:</span><span class="w"> </span><span class="m">20000</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">circuitBreaker</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">requestVolumeThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">errorThresholdPercentage</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">ribbon</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ConnectTimeout</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ReadTimeout</span><span class="p">:</span><span class="w"> </span><span class="m">2000</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">MaxTotalHttpConnections</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">MaxConnectionsPerHost</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">MaxAutoRetries</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">MaxAutoRetriesNextServer</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ServerListRefreshInterval</span><span class="p">:</span><span class="w"> </span><span class="m">2000</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">OkToRetryOnAllOperations</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">retryableStatusCodes</span><span class="p">:</span><span class="w"> </span><span class="m">500</span><span class="p">,</span><span class="m">404</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>proxy.yml</span>
    </div>
</div>
<p>Dado que Zuul es un <em>proxy</em> para múltiples instancias de microservicios a cada microservicio hay que darle una ruta, cuando Zuul realiza la llamada a una instancia del microservicio se encarga de omitirla. En el ejemplo, la ruta en Zuul <em>/service/**</em> está asociada al microservicio <em>service</em> pero el servicio <em>service</em> ofrece su <em>endpoint</em> en <em>/</em>, Zuul se encarga de omitir la parte de la ruta para el <em>proxy</em> y hace la llamada a la ruta <em>/</em> como espera el microservicio.</p>
<p>Lógicamente los clientes deben contactar con el <em>proxy</em> en vez de con el microservicio directamente. Arrancado el servicio de descubrimiento y registro Eureka, el servidor de configuración de Spring Cloud, dos instancias del servicio y el <em>proxy</em> con Zuul haciendo las llamadas al <em>proxy</em> se observa que se obtiene el resultado del microservicio. Como en el ejemplo hay varias instancias del servicio Zuul realiza balanceo de carga entre ellas con Ribbon utilizando la política <em>round-robin</em> y el mensaje es diferente en cada una de las respuestas según la instancia invocada. Con Zuul además se consigue balanceo de carga a nivel de servidor que Ribbon solo ofrece a nivel de cliente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="nd">@EnableCircuitBreaker</span>&#10;<span class="nd">@EnableHystrixDashboard</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">ClientService</span> <span class="n">service</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">ProxyService</span> <span class="n">proxy</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.key&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.password&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.service&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getService</span><span class="o">());</span>&#10;&#10;		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">20000</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="n">configuration</span><span class="o">.</span><span class="na">getService</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;service&#34;</span><span class="o">))</span> <span class="o">?</span> <span class="n">service</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">:</span> <span class="n">proxy</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Service response: %s%n&#34;</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>&#10;			<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main (client).java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@Component</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxyService</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Autowired</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">LoadBalancerClient</span> <span class="n">loadBalancer</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">&#34;getFallback&#34;</span><span class="o">,</span> <span class="n">commandProperties</span> <span class="o">=</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;circuitBreaker.requestVolumeThreshold&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;4&#34;</span><span class="o">),</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;circuitBreaker.errorThresholdPercentage&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;50&#34;</span><span class="o">),</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;execution.isolation.thread.timeoutInMilliseconds&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;25000&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">})</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceInstance</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">loadBalancer</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="s">&#34;proxy&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">instance</span><span class="o">.</span><span class="na">getUri</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s%s&#34;</span><span class="o">,</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;/service&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Client</span><span class="o">.</span><span class="na">create</span><span class="o">().</span><span class="na">resource</span><span class="o">(</span><span class="n">resource</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="nf">getFallback</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="s">&#34;Fallback&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ProxyService.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8081&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8082&#34;</span>&#10;$ ./gradlew proxy:run --args<span class="o">=</span><span class="s2">&#34;--port=8085&#34;</span>&#10;$ ./gradlew client:run --args<span class="o">=</span><span class="s2">&#34;--service=proxy&#34;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-run.sh</span>
    </div>
</div>
<p>Las URLs del servicio en el microservicio y en el <em>proxy</em> son.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Microservicio</span>&#10;$ curl http://192.168.1.4:8080/&#10;&#10;<span class="c1"># Microservicio en el proxy</span>&#10;$ curl http://192.168.1.4:8085/service&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>curl.sh</span>
    </div>
</div>
<p>El cliente de ejemplo realiza peticiones al <em>proxy</em>, en la salida se muestra el resultado del balanceo de carga cuando hay varias instancias, cuando se añade una nueva instancia entra a formar parte del balanceo de carga. Otro beneficio de Zuul es que ofrece la funcionalidad de reintentos de modo que si una instancia de un servicio falla la petición se reintenta en otra. En el artículo <a href="https://picodotdev.github.io/blog-bitix/2018/10/balanceo-de-carga-y-resilencia-en-un-microservicio-con-spring-cloud-netflix-y-ribbon/">Balanceo de carga y resilencia en un microservicio con Spring Cloud Netflix y Ribbon</a> usando solo Ribbon se observaba que cuando una instancia falla se le siguen haciendo peticiones hasta que la lista de instancias del servicio en Eureka se actualiza quitando la fallida, con Hystrix se obtiene la respuesta <em>fallback</em> pero no se evita completamente el error. Zuul puede ocultar el error provocado por una instancia que falla reintentado la petición en la misma nuevamente, en otra u otras instancias según se configure. El comportamiento con Zuul cuando una instancia falla se puede comparar con el comportamiento incluido en el <a href="https://picodotdev.github.io/blog-bitix/2018/10/balanceo-de-carga-y-resilencia-en-un-microservicio-con-spring-cloud-netflix-y-ribbon/">artículo anterior usando en el cliente los microservicios directamente</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">$ ./gradlew client:run --args=&#34;--service=proxy&#34;&#10;... # initially two service instances (8080, 8081)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;... # new service instance, ./gradlew service:run --args=&#34;--port=8082&#34;&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8082/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8082/, value)&#10;... # kill service instance (8082), Ctrl+C&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>Zuul además es capaz de proporciona otras muchas funcionalidades como:</p>
<ul>
<li>Autenticación</li>
<li>Seguridad</li>
<li>Recolección de métricas y monitorización</li>
<li>Pruebas de carga</li>
<li>Pruebas de verificación o <em>canary testing</em></li>
<li>Enrutado dinámico</li>
<li>Migración de servicio</li>
<li>Abandono de carga o <em>load shedding</em></li>
<li>Manejo de respuesta estática</li>
<li>Gestión de tráfico active/active</li>
</ul>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew-run.sh</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/10/balanceo-de-carga-y-resilencia-en-un-microservicio-con-spring-cloud-netflix-y-ribbon/</id>
        <title>Balanceo de carga y resilencia en un microservicio con Spring Cloud Netflix y Ribbon</title>
        <updated>2018-10-12T20:46:00+02:00</updated>
        <published>2018-10-12T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/10/balanceo-de-carga-y-resilencia-en-un-microservicio-con-spring-cloud-netflix-y-ribbon/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Un servicio que recibe numerosas peticiones o es crítico para el funcionamiento de una aplicación es necesario escalarlo o crear múltiples instancias de él para atender toda la carga que se demanda o para que en caso de que una instancia falle haya otras disponibles que funcionen correctamente para atender las peticiones.</p>
<p>En este entorno de múltiples instancias se hace necesario un servicio de registro y descubrimiento que usando <a href="https://spring.io/">Spring</a>, <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> y <a href="https://cloud.spring.io/spring-cloud-netflix/">Spring Cloud Netflix</a> una implementación es <a href="https://github.com/Netflix/eureka">Eureka</a>. Una vez descubiertas las instancias que hay del servicio es necesario hacer balanceo de carga para conseguir escalabilidad y tolerancia a fallos, en el mismo proyecto de Spring Cloud Netflix para realizar balanceo de carga en el cliente se ofrece <a href="https://github.com/Netflix/ribbon">Ribbon</a>.</p>
<p>Hay varias formas de usar Ribbon una de ellas es con lo que denominan <em>feign client</em>, con <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">Spring RestTemplate</a> o directamente con <em>LoadBalancerClient</em> que es la que muestro en este artículo. Este cliente con Ribbon obtiene del servicio de registro y descubrimiento la lista inicial de instancias de un servicios registrado con sus ubicaciones siendo el <em>host</em> en el que se encuentran y el puerto en el que ofrecen su servicio. Con esta lista y el estado de los servicios se realiza el balanceo de carga. Sin embargo, dada la naturaleza de los microservicios se pueden añadir con posterioridad más instancias de un servicio o algunas pueden empezar fallar, Ribbon se encarga de mantener actualizada la lista de instancias de un servicio.</p>
<p>Combinado con <a href="https://github.com/Netflix/Hystrix">Hystrix</a> un ejemplo de cliente que hace peticiones a un servicio es el siguiente. Para demostrar su funcionamiento el cliente realiza varias llamadas a un servicio cada unos pocos milisegundos balanceando la carga entre las instancias que existan. Si con posterioridad se añade una nueva instancia del servicio Ribbon al cabo de un tiempo de que haya sido iniciada lo añadirá a la lista y empieza a seleccionarla para enviarle peticiones. Si una instancia falla hasta que Eureka no marca la instancia como fuera de servicio y el cliente no actualiza su lista de instancias en el ejemplo de cliente seguirá enviando peticiones a la instancia fuera de servicio y con Hystrix utilizando el método de <em>fallback</em> como respuesta.</p>
<p>Ante el fallo de una instancia para evitar que temporalmente el cliente empiece a fallar cuando le redirige una petición este puede reintentar las peticiones en otra instancia, esta funcionalidad se proporciona con <a href="https://github.com/spring-projects/spring-retry">Spring Retry</a> o utilizando <a href="https://github.com/Netflix/zuul">Zuul</a> como <em>proxy</em>.</p>
<p>El cliente usa la clase <em>LoadBalancerClient</em> que en cada invocación del método <em>choose()</em> devuelve una instancia diferente de servicio realizando balanceo de carga utilizando el método <em>round-robin</em>. La clase <em>ServiceInstance</em> proporciona la URL de la instancia del servicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="nd">@EnableCircuitBreaker</span>&#10;<span class="nd">@EnableHystrixDashboard</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">ClientService</span> <span class="n">service</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.key&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.password&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>&#10;&#10;		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">20000</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Service response: %s%n&#34;</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>&#10;			<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>&#10;&#10;<span class="nd">@Component</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientService</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Autowired</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">LoadBalancerClient</span> <span class="n">loadBalancer</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">&#34;getFallback&#34;</span><span class="o">,</span> <span class="n">commandProperties</span> <span class="o">=</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;circuitBreaker.requestVolumeThreshold&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;4&#34;</span><span class="o">),</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;circuitBreaker.errorThresholdPercentage&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;50&#34;</span><span class="o">),</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;execution.isolation.thread.timeoutInMilliseconds&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;1000&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">})</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceInstance</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">loadBalancer</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="s">&#34;service&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">instance</span><span class="o">.</span><span class="na">getUri</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Client</span><span class="o">.</span><span class="na">create</span><span class="o">().</span><span class="na">resource</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="nf">getFallback</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="s">&#34;Fallback&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ClientService.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">plugins</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;2.1.12.RELEASE&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">application</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springcloud.client.Main&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-dependencies:2.1.12.RELEASE&#39;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR2&#39;</span><span class="o">))</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">excludeSpringBootStarterLogging</span> <span class="o">=</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework.boot&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;spring-boot-starter-logging&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-log4j2&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-ribbon&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.glassfish.jersey.core:jersey-client:2.27&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.glassfish.jersey.inject:jersey-hk2:2.27&#39;</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.google.code.gson:gson:2.8.5&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.core:jackson-databind:2.9.6&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La clase del servicio y los comandos para iniciar el servicio de registro y descubrimiento, el servicio de configuración, las instancias del servicio en diferentes puertos y el cliente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.service</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@RestController</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultController</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Random</span> <span class="n">random</span><span class="o">;</span>&#10;&#10;	<span class="kd">public</span> <span class="nf">DefaultController</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="c1">// Timeout simulation&#10;</span><span class="c1"></span>		<span class="c1">//Thread.sleep(random.nextInt(2000));&#10;</span><span class="c1"></span>&#10;		<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello world (%s, %s)&#34;</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">(),</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DefaultController.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8081&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8082&#34;</span>&#10;$ ./gradlew client:run</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-run.sh</span>
    </div>
</div>
<p>Esta es la salida y funcionamiento del cliente realizando balanceado la carga entre las múltiples instancias y que ocurre cuando se añade una nueva o una empieza a fallar y se elimina de la lista.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">$ ./gradlew client:run&#10;... # initially two service instances (8080, 8081)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;... # new service instance, ./gradlew service:run --args=&#34;--port=8082&#34;&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8082/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8082/, value)&#10;... # kill service instance (8082), Ctrl+C&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Fallback&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Fallback&#10;... # service instances list is updated&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8081/, value)</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p><a href="https://github.com/Netflix/ribbon/blob/master/ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java">Ribbon posee numerosas propiedades de configuración</a> a nivel global para todos los clientes de servicios o de forma específica para cada servicio ya sea con la anotación <em>@RibbonClient</em> o mediante la configuración en archivos externos de Spring Boot. Algunas propiedades de configuración interesantes son las de <em>timeout</em> que permiten que un cliente no agote sus recursos esperando a que a los servicios que llama si tardan en responder y a su vez el cliente actuando de servidor recibe muchas llamadas de sus clientes. En un comando de Hystrix también se puede especificar un <em>timeout</em> de modo que si se realizan reintentos el tiempo total para Hystrix deberá ser superior que el tiempo total de todos los posibles reintentos teniendo en cuenta el <em>timeout</em> del cliente con Ribbon. Usando el cliente HTTP <a href="https://jersey.github.io/">Jersey</a> como en este caso también pueden establecerse <a href="https://jersey.github.io/apidocs/1.19.1/jersey/com/sun/jersey/api/client/Client.html"><em>timeouts</em> para una petición</a>.</p>
<p>El balanceo de carga que con Ribbon se realiza en el cliente es más sencillo que realizar el balanceo de carga en el servidor ya que no requiere una pieza más en la infraestructura pero requiere que el cliente tenga algo de lógica para hacer el balanceo de carga.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradle-run.sh</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/</id>
        <title>Tolerancia a fallos en un cliente de microservicio con Spring Cloud Netflix y Hystrix</title>
        <updated>2019-10-10T19:00:00+01:00</updated>
        <published>2018-10-05T20:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Los microservicios son independientes unos de otros y se comunican mediante operaciones de red. Dado que las operaciones se realizan a través de un medio no confiable como la red, dada su naturaleza efímera y a que pueden fallar en los microservicios es importante que los clientes estén preparados ante posibles fallos.</p>
<p>Un patrón o técnica que se suele emplear es el de <a href="https://www.martinfowler.com/bliki/CircuitBreaker.html">Circuit Breaker</a>, en Java y con <a href="https://spring.io/">Spring</a> se ofrece en el proyecto <a href="https://cloud.spring.io/spring-cloud-netflix/">Spring Cloud Netflix</a> mediante <a href="https://github.com/Netflix/Hystrix">Hystrix</a> y <a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica">Javanica</a>. Este patrón soluciona dos problemas cuando un microservicio del que se depende falla y hace al microservicio que lo usa tolerante a fallos.</p>
<ul>
<li>Uno es que cuando un microservicio empieza a fallar es necesario dejar de hacerle peticiones para permitirle recuperarse si está saturado que provoca esos fallos. Cuando ocurre un fallo es posible realizar una acción en sustitución de la llamada al microservicio y devolver un valor alternativo como medida paliativa y hacer que el microsevicio afectado tenga la posibilidad de seguir ofreciendo su servicio aunque sea de forma degradada.</li>
<li>Otro problema es que el microservicio aunque no falle tarde demasiado en responder, se puede establecer un <em>timeout</em> que si se supera se deja de esperar e igualmente se realiza la acción de sustitución lo que evita que los microservicios que usan uno que tarda demasiado en responder agoten sus recursos y empiecen a fallar o tardar demasiado también.</li>
</ul>
<p>En ambos casos se evita que la cadena de microservicios empiece a fallar y con ello sistema completo. El proyecto <a href="https://dzone.com/articles/resilience4j-and-sentinel-two-open-source-alternat">Hystrix ha dejado de desarrollarse de forma activa</a> tal como aparece en el propio <a href="https://github.com/Netflix/Hystrix/blob/master/README.md">README.md</a> y como alternativa se recomienda usar <a href="https://github.com/resilience4j/resilience4j">Resilience4j</a> que además está diseñado para Java 8 y la programación funcional, en el artículo <a href="https://picodotdev.github.io/blog-bitix/2019/08/implementar-tolerancia-a-fallos-con-resilience4j/">Implementar tolerancia a fallos con Resilience4j</a> muestro su implementación.</p>
<div class="media">
<figure>
<p>
<img src="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/hystrix_hub9140d7d7b18b1dc3937691a78958e9a_86330_2560x1440_fit_box_3.png" width="640" height="225" alt="Hystrix" title="Hystrix"  class="lozad "></p>
</figure>
</div>
<p>El patrón <em>circuit breaker</em> se denomina así ya que implementa una lógica similar a un circuito eléctrico. El circuito en su estado normal está cerrado y se realizan las llamadas al microservicio servidor. Si el microservicio servidor empieza a fallar se llama a la acción alternativa con su valor, si se supera un umbral de errores el circuito pasa a estado abierto y se dejan de hacer llamadas al microservicio servidor. Cada cierto tiempo definido se realiza una llamada al servicio servidor para comprobar su estado de forma que si responde correctamente el circuito pasa a estado cerrado nuevamente y las siguientes llamadas se realizan al microservicio servidor dejándose de utilizar la acción alternativa.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-diagram_hu4845d342695fc4ba4f8fa8d72c767f7b_90482_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Diagrama del patrón circuit breaker"><img src="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-diagram_hu4845d342695fc4ba4f8fa8d72c767f7b_90482_300x200_fit_box_3.png" width="127" height="200" alt="Diagrama del patrón circuit breaker" title="Diagrama del patrón circuit breaker"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-states_hu56e2a01b6636c9453b9193ae50db8c8e_29040_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Diagrama de estados"><img src="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-states_hu56e2a01b6636c9453b9193ae50db8c8e_29040_300x200_fit_box_3.png" width="222" height="200" alt="Diagrama de estados" title="Diagrama de estados"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/hystrix-fallback_hu341ff0d18f5e14bb81f44a2d6d1769ba_44880_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Fallback del patrón circuit breaker"><img src="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/hystrix-fallback_hu341ff0d18f5e14bb81f44a2d6d1769ba_44880_300x200_fit_box_3.png" width="300" height="197" alt="Fallback del patrón circuit breaker" title="Fallback del patrón circuit breaker"  class="lozad "></a></p>
<figcaption>Diagrama del patrón circuit breaker, de estados y método fallback</figcaption>
</figure>
</div>
<p>Para utilizar Hystrix como implementación del patrón <em>circuit breaker</em> en una aplicación Java con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> el método que realiza la llamada al microservicio servidor ha de  encapsularse en un método anotado con la anotación <a href="https://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html">@HystrixCommand</a>, como parámetro se indica un método con la acción alternativa o <em>fallback</em> que obtiene un valor en los fallos. También se puede indicar el <em>tiemout</em> de espera antes de considerar que la llamada ha fallado con la propiedad <em>execution.isolation.thread.timeoutInMilliseconds</em>. Igualmente se pueden indicar los valores para abrir el circuito con <em>circuitBreaker.requestVolumeThreshold</em> y <em>circuitBreaker.errorThresholdPercentage</em>. Esos son los básicos para utilizar este patrón de tolerancia a fallos. Tiene <a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica#configuration">algunos valores adicionales más que se pueden configurar</a> para adaptar el patrón a los valores óptimos de la aplicación.</p>
<p>En el ejemplo el cliente en un bucle realiza las llamadas al servicio con un método <em>get()</em> anotado con <em>@HystrixCommand</em>. En este método se encapsula la petición HTTP que puede fallar, utilizando la librería <a href="https://jersey.github.io/">Jersey</a> y obtenida la ubicación de una instancia del servicio a su vez del servicio de registro y descubrimiento <a href="https://github.com/Netflix/eureka">Eureka</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@Component</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientService</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Autowired</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">LoadBalancerClient</span> <span class="n">loadBalancer</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">&#34;getFallback&#34;</span><span class="o">,</span> <span class="n">commandProperties</span> <span class="o">=</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;circuitBreaker.requestVolumeThreshold&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;4&#34;</span><span class="o">),</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;circuitBreaker.errorThresholdPercentage&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;50&#34;</span><span class="o">),</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@HystrixProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;execution.isolation.thread.timeoutInMilliseconds&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;1000&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">})</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceInstance</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">loadBalancer</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="s">&#34;service&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">instance</span><span class="o">.</span><span class="na">getUri</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Client</span><span class="o">.</span><span class="na">create</span><span class="o">().</span><span class="na">resource</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="nf">getFallback</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="s">&#34;Fallback&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ClientService.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="nd">@EnableCircuitBreaker</span>&#10;<span class="nd">@EnableHystrixDashboard</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">ClientService</span> <span class="n">service</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.key&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.password&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>&#10;&#10;		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">20000</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Service response: %s%n&#34;</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>&#10;			<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>&#10;		<span class="o">}</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">plugins</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;2.1.12.RELEASE&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">application</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springcloud.client.Main&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-dependencies:2.1.12.RELEASE&#39;</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span><span class="o">(</span><span class="n">platform</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR2&#39;</span><span class="o">))</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">def</span> <span class="n">excludeSpringBootStarterLogging</span> <span class="o">=</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework.boot&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;spring-boot-starter-logging&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-log4j2&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-ribbon&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.glassfish.jersey.core:jersey-client:2.27&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.glassfish.jersey.inject:jersey-hk2:2.27&#39;</span><span class="o">)</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.google.code.gson:gson:2.8.5&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.core:jackson-databind:2.9.6&#39;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>El circuito se abre cuando el número de llamadas supera un umbral y un porcentaje de fallos, se han de cumplir las dos condiciones. Si el número de llamadas que se realizan no superan el umbral aunque todas fallen el circuito permanece cerrado. Ambos valores son personalizables con las propiedades <em>circuitBreaker.requestVolumeThreshold</em> y <em>circuitBreaker.errorThresholdPercentage</em>. El circuito permanece abierto al menos durante el tiempo indicado por <em>metrics.rollingStats.timeInMilliseconds</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.service</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@RestController</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultController</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="kd">private</span> <span class="n">Random</span> <span class="n">random</span><span class="o">;</span>&#10;&#10;	<span class="kd">public</span> <span class="nf">DefaultController</span><span class="o">()</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="c1">// Timeout simulation&#10;</span><span class="c1"></span>		<span class="c1">//Thread.sleep(random.nextInt(2000));&#10;</span><span class="c1"></span>&#10;		<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello world (%s, %s)&#34;</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">(),</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DefaultController.java</span>
    </div>
</div>
<p>En la aplicación ejemplo hay un microservicio servidor y un microservicio cliente, iniciada una instancia de microservicio servidor y una instancia del microservicio cliente que implementa el patrón <em>circuit breaker</em> inicialmente las peticiones se realizarán correctamente si no ocurre un <em>timeout</em>. Si se finaliza el proceso del microservicio servidor las peticiones del cliente al servidor empezarán a fallar y este obtiene el valor alternativo del método <em>fallback</em>, si se supera el umbral de llamadas y de fallos el circuito pasa a estado abierto. Mientras el circuito permanezca abierto el cliente sondea con una petición cada cierto tiempo el estado del servidor, si el servicio servidor se inicia unos instantes después de que esté disponible el cliente con la petición de sondeo comprobará que el servidor funciona, se cerrará el circuito y el cliente empezará a obtener los valores devueltos por el microservicio servidor.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">$ ./gradlew client:run&#10;...&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;... # kill service, Ctrl+C&#10;Service response: Fallback&#10;Service response: Fallback&#10;Service response: Fallback&#10;Service response: Fallback&#10;Service response: Fallback&#10;Service response: Fallback&#10;Service response: Fallback&#10;... # restart service&#10;Service response: Fallback&#10;Service response: Fallback&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;Service response: Hello world (http://192.168.1.4:8080/, value)&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>Para monitorizar en tiempo real el estado del sistema y de los circuitos se ofrece un <em>dashboard</em> en el que visualizan el número de peticiones que se están realizando, las fallidas, el estado de los circuitos, las que fallan por <em>timeout</em> o las que fallan con error. Para tener acceso a esta página hay que incluir la dependencia <em>org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard</em>. La página <em>dashboard</em> está disponible en la dirección <em>http://localhost:8085/hystrix</em>. Este <em>dashboard</em> que ofrece Hystrix es muy básico y con un diseño mejorable, se pueden <a href="https://picodotdev.github.io/blog-bitix/2018/12/exponer-las-metricas-de-hystrix-en-grafana-con-prometheus-de-una-aplicacion-spring-boot/">exponer las métricas de Hystrix en Grafana con Prometheus</a> para tener un panel con exactamente la información que se desee en una gráficas mucho más vistosas además de observar los datos exactamente en el periodo de tiempo deseado.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-closed_huce59696db4bb781bd0e709b415bf52e8_382684_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Circuit breaker cerrado"><img src="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-closed_huce59696db4bb781bd0e709b415bf52e8_382684_300x200_fit_box_3.png" width="300" height="183" alt="Circuit breaker cerrado" title="Circuit breaker cerrado"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-open_huce59696db4bb781bd0e709b415bf52e8_384418_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Circuit breaker abierto"><img src="https://picodotdev.github.io/blog-bitix/2018/10/tolerancia-a-fallos-en-un-cliente-de-microservicio-con-spring-cloud-netflix-y-hystrix/images/circuit-breaker-open_huce59696db4bb781bd0e709b415bf52e8_384418_300x200_fit_box_3.png" width="300" height="183" alt="Circuit breaker abierto" title="Circuit breaker abierto"  class="lozad "></a></p>
<figcaption>Estados del circuit breaker</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew client:run</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-run.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradle-run.sh</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.martinfowler.com/bliki/CircuitBreaker.html">CircuitBreaker</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.0.1.RELEASE/single/spring-cloud-netflix.html#_circuit_breaker_hystrix_clients">Circuit Breaker: Hystrix Clients</a></li>
<li><a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica#configuration">Hyxtrix Configuration (1)</a></li>
<li><a href="https://github.com/Netflix/Hystrix/wiki/Configuration">Hyxtrix Configuration (2)</a></li>
<li><a href="http://www.javamagazine.mozaicreader.com/SeptemberOctober2018/Twitter">Java Magazine Sep/Oct 2018</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/09/almacenar-cifrados-los-valores-de-configuracion-sensibles-en-spring-cloud-config/</id>
        <title>Almacenar cifrados los valores de configuración sensibles en Spring Cloud Config</title>
        <updated>2018-09-30T01:40:00+02:00</updated>
        <published>2018-09-30T01:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/09/almacenar-cifrados-los-valores-de-configuracion-sensibles-en-spring-cloud-config/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Para no tener que hacer cambios en el código que implica recompilar la aplicación y generar de nuevos los artefactos al cambiar algunos valores de la aplicación se utilizan los archivos de configuración. Los archivos de configuración son archivos de texto plano que pueden seguir algún formato como <em>properties</em>, <em>xml</em> o <em>yaml</em>, externos a la aplicación pero que lee sus propiedades al iniciarse. Algunas propiedades de configuración de ejemplo pueden ser la cadena de conexión a una base de datos, el usuario y contraseña.</p>
<p>Dado que algunos valores de configuración son sensibles como en el ejemplo anterior la cadena de conexión, usuario y contraseña es recomendable por mayor seguridad almacenar estos valores cifrados y que la aplicación los descifre con la clave correspondiente al necesitar su valor original. Estos valores no deben estar en el código fuente para <a href="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/">evitar un problema de seguridad aún con el código fuente compilado</a>.</p>
<p><a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config</a> permite guardar los archivos de configuración con algunos valores cifrados. Hay varias posibilidades de configuración para guardar los datos cifrados: mediante clave simétrica, clave privada-pública, guardarlos en el servicio externo <a href="https://www.vaultproject.io/">Vault</a> de <a href="https://www.hashicorp.com/">Hashicorp</a>, mantenerlos cifrados solo en el almacenamiento persistente o transmitirlos cifrados y que sea el cliente el que los descifre.</p>
<p>Utilizando la forma más simple para mantener los datos cifrados con una clave simétrica en el servicio de configuración hay que mantener en una propiedad de configuración la clave simétrica para cifrar y descifrar los datos, <em>encrypt.key</em>. En este ejemplo la clave simétrica y las propiedades cifradas están en archivos de configuración diferentes pero incluidos en el mismo servidor de configuración. Esto no parece que aporte mucha seguridad ya que si se tiene acceso al archivo de configuración de un servicio con una propiedad cifrada probablemente se tenga acceso al archivo con la clave cifrada y la medida de seguridad no es útil. Sin embargo, esto permite al estar separados los archivos de configuración añadir el archivo con la propiedad cifrada a un repositorio público sin peligro siempre y cuando la clave de cifrado se mantenga en secreto. Los archivos de configuración de los servicios en el servidor de configuración se podrían añadir a un repositorio de Git.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">native</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">searchLocations</span><span class="p">:</span><span class="w"> </span><span class="l">file:./misc/config</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">encrypt</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">ma8FvTm1t8uWRlYE3ghPsQxxESaZwpOGdlsFwIyPNIWE25yNg1dsvvnd7orlZL9FH0qJyRkG8kcf5CBVdjmi8b2yxKzpXyfxpMXj</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>bootstrap.yml</span>
    </div>
</div>
<p>Definida la clave simétrica e iniciado el servidor de configuración este ofrece dos <em>endpoints</em> para cifrar y descifrar datos. Utilizando el de cifrado se obtiene el valor cifrado del dato sensible que se quiere proteger. Con el <em>endpoint</em> de descifrado se puede descifrar. Se observa que utilizando varias veces el <em>endpoint</em> de cifrado se devuelve en cada una un valor distinto, sin embargo, descifrando cada uno de estos valores con el <em>endpoint</em> de descifrado siempre se obtiene el valor original. Esto es debido seguramente a que en la operación de cifrado se utiliza la técnica del <em>salt</em> para que a los valores cifrados se les pueda aplicar un ataque de diccionario, el <em>salt</em> es incluido en el valor devuelto para que la operación de descifrado devuelva el valor original.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl localhost:8090/encrypt -d secret&#10;fb416133716acf5b6e3ffb64a396d521cd68fb0c2cb58727d5e938badefa942b&#10;$ curl localhost:8090/encrypt -d secret&#10;2b5ab02e4653bebb1b325e88eb9711df0e97e8f7efbbffc0dd0c5ae532dceedc&#10;$ curl localhost:8090/encrypt -d secret&#10;df06bcf1e36d910851a6e3f866d0f014388d3ddcb479b9f0e43194d7cfb5d72c&#10;&#10;$ curl localhost:8090/decrypt -d fb416133716acf5b6e3ffb64a396d521cd68fb0c2cb58727d5e938badefa942b&#10;secret&#10;$ curl localhost:8090/decrypt -d 2b5ab02e4653bebb1b325e88eb9711df0e97e8f7efbbffc0dd0c5ae532dceedc&#10;secret&#10;$ curl localhost:8090/decrypt -d df06bcf1e36d910851a6e3f866d0f014388d3ddcb479b9f0e43194d7cfb5d72c&#10;secret</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>curl-1.sh</span>
    </div>
</div>
<p>El valor cifrado obtenido por este <em>endpoint</em> se puede guardar en los archivos de configuración entrecomillándolo y precediéndolo con la cadena <em>{cipher}</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{cipher}fb416133716acf5b6e3ffb64a396d521cd68fb0c2cb58727d5e938badefa942b&#39;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>client.yml</span>
    </div>
</div>
<p>En este caso el servicio al iniciarse obtiene su configuración del servicio de configuración, los datos se transmiten en forma plana sin cifrar y el cifrado utilizando en el servidor de configuración es transparente para el cliente. Accediendo al <em>endpoint</em> del servidor de configuración que devuelve la configuración de un servicio con una propiedad cifrada se observa que al obtener el valor se devuelve en texto plano al cliente, esta petición es la misma que hace el servicio para obtener su configuración, de modo que aunque la información está cifrada en el servidor de configuración se transmite al servicio sin cifrar en texto plano. En este ejemplo se utiliza el protocolo inseguro HTTP, lo recomendable es utilizar el protocolo HTTPS para cifrar el tráfico entre el servidor de configuración y el cliente de modo que los valores sensibles queden protegidos también en la transmisión.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl http://localhost:8090/client/default.yml&#10;<span class="o">{</span>&#10;   <span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;client&#34;</span>,&#10;   <span class="s2">&#34;profiles&#34;</span>:<span class="o">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;default.yml&#34;</span>&#10;   <span class="o">]</span>,&#10;   <span class="s2">&#34;label&#34;</span>:null,&#10;   <span class="s2">&#34;version&#34;</span>:null,&#10;   <span class="s2">&#34;state&#34;</span>:null,&#10;   <span class="s2">&#34;propertySources&#34;</span>:<span class="o">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;file:misc/config/client.yml&#34;</span>,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="s2">&#34;source&#34;</span>:<span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;server.port&#34;</span>:<span class="s2">&#34;</span><span class="si">${</span><span class="nv">port</span><span class="p">:</span><span class="nv">8085</span><span class="si">}</span><span class="s2">&#34;</span>,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;management.endpoints.web.exposure.include&#34;</span>:<span class="s2">&#34;*&#34;</span>,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;circuitBreaker.requestVolumeThreshold&#34;</span>:4,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;circuitBreaker.errorThresholdPercentage&#34;</span>:50,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;metrics.rollingStats.timeInMilliseconds&#34;</span>:10000,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;config.key&#34;</span>:<span class="s2">&#34;dev&#34;</span>,&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;config.password&#34;</span>:<span class="s2">&#34;secret&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="o">}</span>&#10;   <span class="o">]</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>curl-2.sh</span>
    </div>
</div>
<p>Iniciado el servicio de descubrimiento, el de configuración y un servicio que tiene un dato cifrado de configuración el valor que obtiene está ya descifrado. En este caso el servicio <em>client</em> obtiene el valor de la propiedad <em>config.password</em> descifrado con el valor <em>secret</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew client:run</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew-run.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">$ ./gradlew client:run&#10;...&#10;2018-09-30 00:56:08,193  INFO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler [&#34;http-nio-8085&#34;]&#10;2018-09-30 00:56:08,283  INFO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.apache.tomcat.util.net.NioSelectorPool Using a shared selector for servlet write/read&#10;2018-09-30 00:56:08,689  INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8085 (http) with context path &#39;&#39;&#10;2018-09-30 00:56:08,691  INFO  netflix.eureka.serviceregistry.EurekaAutoServiceRegistration Updating port to 8085&#10;2018-09-30 00:56:08,695  INFO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;io.github.picodotdev.blogbitix.springcloud.client.Main Started Main in 19.901 seconds (JVM running for 22.013)&#10;Valor de propiedad de configuración (config.key): dev&#10;Valor de propiedad de configuración (config.password): secret</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="nd">@EnableCircuitBreaker</span>&#10;<span class="nd">@EnableHystrixDashboard</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">ClientService</span> <span class="n">service</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&#10;	<span class="nd">@Override</span>&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.key&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.password&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>&#10;&#10;<span class="nd">@Configuration</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultConfiguration</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${config.key}&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">key</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${config.password}&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">password</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">key</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setKey</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">password</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DefaultConfiguration.java</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradle-run.sh, ./curl-1.sh</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/</id>
        <title>Novedades y nuevas características de Java 11</title>
        <updated>2018-09-29T14:00:00+02:00</updated>
        <published>2018-09-28T21:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Java 11 es la primera versión de soporte extendido publicada o LTS bajo el nuevo ciclo de publicaciones que adoptó Java en la versión 9. Añade varias novedades importantes en cuanto a seguridad y elimina otras que en versiones anteriores ya fueron marcadas como desaconsejadas.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En la plataforma Java era habitual que entre versión y versión mayor pasasen varios años normalmente 3 o más. Este ciclo de publicaciones no se adapta a las necesidades de todas las empresas, organizaciones y usuarios. Algunas empresas y usuarios desean ciclos de publicaciones más cortos quizá con no tantas novedades en cada uno de ellos pero sí de forma más constante incorporando mejoras. Otras organizaciones necesitan confiar en una versión que tenga un ciclo de soporte largo para sus aplicaciones.</p>
<p>Para adaptarse a ambos requerimientos Java a partir de Java 9 adoptó un nuevo ciclo de publicaciones siendo cada seis meses para los que desean mejoras de forma regular y cada tres años para los que necesitan soporte extendido. <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/">Java 9 incorporó la esperada modularización</a> que cambia la forma de desarrollo de las aplicaciones con numerosas mejoras. <a href="https://picodotdev.github.io/blog-bitix/2018/03/novedades-de-java-10/">Java 10 añadió la inferencia de tipos para variables locales</a> con la palabra reservada <em>var</em>. Ahora Java 11 siendo una versión de soporte extendido o LTS, el soporte de Java 11 está planificado que dure hasta 2023 y hasta 2026 de forma extendida lo que son 8 años de soporte.</p>
<div class="alert alert-warning tableofcontents">
    <h2>Contenido del artículo</h2>
    <toc></toc>
</div>
<h3 id="introducción">Introducción</h3>
<p>En esta nueva versión de Java 11 publicada el 25 de septiembre de 2018 las novedades no son tan relevantes como lo fuero Java 8 con las <em>lambadas</em> y Java 9 con los módulos pero continúa con las mejoras incrementales y proporciona una versión LTS en la que empresas grandes confiarán como base para sus desarrollos.</p>
<ul>
<li><a href="https://openjdk.java.net/projects/jdk/11/">Características de Java 11</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/11-relnote-issues.html">Notas de publicación de Java 11</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/">Java 11 Javadoc</a></li>
</ul>
<p>Las mejoras incluídas en esta versión son:</p>
<ul>
<li>181: <a href="http://openjdk.java.net/jeps/181">Nest-Based Access Control</a></li>
<li>309: <a href="http://openjdk.java.net/jeps/309">Dynamic Class-File Constants</a></li>
<li>315: <a href="http://openjdk.java.net/jeps/315">Improve Aarch64 Intrinsics</a></li>
<li>318: <a href="http://openjdk.java.net/jeps/318">Epsilon: A No-Op Garbage Collector</a></li>
<li>320: <a href="http://openjdk.java.net/jeps/320">Remove the Java EE and CORBA Modules</a></li>
<li>321: <a href="http://openjdk.java.net/jeps/321">HTTP Client (Standard)</a></li>
<li>323: <a href="http://openjdk.java.net/jeps/323">Local-Variable Syntax for Lambda Parameters</a></li>
<li>324: <a href="http://openjdk.java.net/jeps/324">Key Agreement with Curve25519 and Curve448</a></li>
<li>327: <a href="http://openjdk.java.net/jeps/327">Unicode 10</a></li>
<li>328: <a href="http://openjdk.java.net/jeps/328">Flight Recorder</a></li>
<li>329: <a href="http://openjdk.java.net/jeps/329">ChaCha20 and Poly1305 Cryptographic Algorithms</a></li>
<li>330: <a href="http://openjdk.java.net/jeps/330">Launch Single-File Source-Code Programs</a></li>
<li>331: <a href="http://openjdk.java.net/jeps/331">Low-Overhead Heap Profiling</a></li>
<li>332: <a href="http://openjdk.java.net/jeps/332">Transport Layer Security (TLS) 1.3</a></li>
<li>333: <a href="http://openjdk.java.net/jeps/333">ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</a></li>
<li>335: <a href="http://openjdk.java.net/jeps/335">Deprecate the Nashorn JavaScript Engine</a></li>
<li>336: <a href="http://openjdk.java.net/jeps/336">Deprecate the Pack200 Tools and API</a></li>
</ul>
<h3 id="nuevas-características">Nuevas características</h3>
<h4 id="eliminación-de-módulos-java-ee-y-corba">Eliminación de módulos Java EE y CORBA</h4>
<p>Se eliminan del JDK paquetes ya desaconsejados hace varias versiones anteriores y que no eran muy usados en cualquier caso. Estos paquetes son los de CORBA una forma de llamada a procedimientos remotos que se utilizó como alternativa a RMI pero que nunca tuvo un uso extendido prefiriéndose SOAP o más recientemente interfaces REST.</p>
<p>La lista de paquetes eliminados son los siguientes.</p>
<ul>
<li><em>java.xml.ws</em> (JAX-WS, plus the related technologies SAAJ and Web Services Metadata)</li>
<li><em>java.xml.bind</em> (JAXB)</li>
<li><em>java.activation</em> (JAF)</li>
<li><em>java.xml.ws.annotation</em> (Common Annotations)</li>
<li><em>java.corba</em> (CORBA)</li>
<li><em>java.transaction</em> (JTA)</li>
<li><em>java.se.ee</em> (Aggregator module for the six modules above)</li>
<li><em>jdk.xml.ws</em> (Tools for JAX-WS)</li>
<li><em>jdk.xml.bind</em> (Tools for JAXB)</li>
</ul>
<h4 id="sintaxis-de-variables-locales-para-parámetros-en-lambdas">Sintaxis de variables locales para parámetros en lambdas</h4>
<p>Ahora los parámetros de una lambda pueden declararse con <em>var</em> con inferencia de tipos. Esto proporciona uniformidad en el lenguaje al declarar los parámetros permite usar anotaciones en los parámetros de la función lambda como <em>@NotNull</em>.</p>
<p>Esta funcionalidad tiene algunas restricciones. No se puede mezclar el uso y no uso de <em>var</em> y no se puede mezclar el uso de <em>var</em> y tipos en <em>lambdas</em> explícitas. Son consideradas ilegales por el compilador y producirá un error en tiempo de compilación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">process</span><span class="o">.(</span><span class="n">y</span><span class="o">)</span>&#10;&#10;<span class="o">(</span><span class="n">var</span> <span class="n">x</span><span class="o">,</span> <span class="n">var</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">process</span><span class="o">.(</span><span class="n">y</span><span class="o">)</span>&#10;  &#10;<span class="o">(</span><span class="nd">@NotNull</span> <span class="n">var</span> <span class="n">x</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">var</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">process</span><span class="o">.(</span><span class="n">y</span><span class="o">)</span>&#10;  &#10;<span class="o">(</span><span class="n">var</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">process</span><span class="o">.(</span><span class="n">y</span><span class="o">)</span> <span class="c1">// no se puede mezclar var y no var&#10;</span><span class="c1"></span><span class="o">(</span><span class="n">var</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">process</span><span class="o">.(</span><span class="n">y</span><span class="o">)</span> <span class="c1">// no se puede mezclar var y tipos en lamdas explícitas&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Lambda.java</span>
    </div>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/0eWgRyanQI0" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h4 id="cliente-http">Cliente HTTP</h4>
<p>En Java 9 se incorporó de forma experimental un cliente HTTP con soporte para HTTP/2 en el propio JDK. En Java 11 alcanza la categoría de estable. Este cliente HTTP es una forma sencilla de hacer llamadas a servicios web ya sean REST o <a href="https://graphql.org/">GraphQL</a>. Las clases del nuevo cliente se encuentran en el paquete <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html">java.net.http</a>. Al estar este cliente HTTP incorporado en el JDK no será necesario depender de librerías de terceros.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/sZSdWq490Vw" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h4 id="ejecución-desde-archivo-de-código-fuente-único">Ejecución desde archivo de código fuente único</h4>
<p>Para ejecutar un programa Java es necesario compilarlo a <em>bytecode</em> y posteriormente ejecutarlos. Se necesitan dos pasos. Para facilitar la ejecución de los programas que se componen de un único archivo de código fuente se añade la posibilidad de lanzar un programa desde el archivo de código fuente. Esto es útil par programas pequeños o para los casos de estar aprendiendo el lenguaje.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello, World&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorld.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ java HelloWorld.java&#10;Hello, World&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>java-helloworld.sh</span>
    </div>
</div>
<p>Esta funcionalidad es compatible con los <em>shebang</em> de los sistemas Unix.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!.sdkman/candidates/java/current/bin/java --source 11&#10;</span><span class="cp"></span>&#10;public class HelloWorld <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;public static void main<span class="o">(</span>String<span class="o">[]</span> args<span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println<span class="o">(</span><span class="s2">&#34;Hello, World&#34;</span><span class="o">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>helloworld.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ chmod +x ./HelloWorld.sh&#10;$ ./HelloWorld.sh&#10;Hello, World</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>hello.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/images/java-helloworld_hudffca01b0a1961d9680fc7f7d030bedf_67656_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Java 11 HelloWorld!"><img src="https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/images/java-helloworld_hudffca01b0a1961d9680fc7f7d030bedf_67656_6500x450_fit_box_3.png" width="610" height="450" alt="Java 11 HelloWorld!" title="Java 11 HelloWorld!"  class="lozad "></a></p>
<figcaption>Java 11 HelloWorld!</figcaption>
</figure>
</div>
<h4 id="unicode-10">Unicode 10</h4>
<p>Tratar texto es una parte importante casi de cualquier aplicación, este soporte de Unicode 10 añade 16018 nuevos caracteres soportados, 128 nuevos emojis y 19 símbolos nuevos para el estándar en televisiones 4K.</p>
<h4 id="tls-13">TLS 1.3</h4>
<p>Algunas de las versiones anteriores de TLS ya no se consideran seguras añadir soporte para la versión más reciente TLS 1.3 permite a las aplicaciones Java ser más compatibles y más seguras. El protocolo TLS 1.3 proporciona dos beneficios principalmente, es más seguro y más rápido que sus versiones anteriores.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/HxDb5nwvN_Y" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h3 id="otras-mejoras">Otras mejoras</h3>
<p>Se añaden implementaciones específicas para la arquitectura Aarch64 para un mejor rendimiento en la plataforma <a href="https://www.arm.com/">ARM</a> en algunas funciones. Se añade de forma experimental un nuevo recolector de basura ZGC con pausas para recolectar basura menores capaz de manejar cantidades de memoria pequeñas de megabytes y grandes de terabytes. Al mismo tiempo se añade un recolector de basura Epsilon que no reclama la memoria. Se añade soporte para los algoritmos criptográficos <em>ChaCha20</em> y <em>Poly1305</em> junto con otras funcionalidades criptográficas <em>RSASSA-PSS</em>, <em>AES Encryption with HMAC-SHA2 for Kerberos 5</em>, &hellip;</p>
<p>Se añaden varios métodos a la clase <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html">String</a> muy utilizados con los que no será necesario recurrie a librerías de terceros. Estos métodos son <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#repeat%28int%29">repeat</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#isBlank%28%29">isBlank</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#strip%28%29">strip</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#stripLeading%28%29">stripLeading</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#stripTrailing%28%29">stripTrailing</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#lines%28%29">lines</a>. En otras clases de la API también se han añadido nuevos métodos.</p>
<p>Java que tradicionalmente marcaba como <em>deprecated</em> características pero que las seguía manteniendo por compatibilidad hacia atrás parece que ha empezado a eliminar varias de esas características desaconsejadas de forma más agresiva. No solo se añaden nuevas características, también se eliminan algunas y se desaconseja el uso de otras entre ellas el visor de <em>applets</em>, eliminación de <em>Unsafe.defineClass</em>, <em>Thread.destroy()</em> y <em>Thread.stop(Throwable)</em>, eliminación de las funcionalidades de despliegue de <em>Java Plugin</em> y <em>Java Web Start</em> que se marcaron como desaconsejadas en Java 9 y para eliminación en Java 10 finalmente en Java 11 se han eliminado sin reemplazo.</p>
<p>Oracle ya no ofrece el entorno de ejecución JRE ni versiones de 32 bits para Windows. JavaFX ya no está incluído en el JDK pero seguirá siendo utilizable como librería independiente.</p>
<p>Las anteriores son las funcionalidades que he considerado más destacables para todos los usuarios., También hay otras funcionalidades añadidas, soporte eliminado para funciones específicas o de funcionamiento interno.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://developer.oracle.com/java/java11">Introducing Java SE 11</a></li>
<li><a href="https://www.oracle.com/technetwork/java/javase/11-relnote-issues-5012449.html">JDK 11 Release Notes</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/">Java 11 Documentation</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/index.html">Java 11 Javadoc</a></li>
<li><a href="https://blogs.oracle.com/java-platform-group/introducing-java-se-11">Introducing Java SE 11 (blog)</a></li>
<li><a href="https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later">Oracle JDK Releases for Java 11 and Later</a></li>
<li><a href="https://blog.takipi.com/java-11-will-include-more-than-just-features/">Java 11 Will Include More Than Just Features</a></li>
<li><a href="https://www.azul.com/90-new-features-and-apis-in-jdk-11/">90 New Features (and APIs) in JDK 11</a></li>
<li><a href="https://4comprehension.com/java-11-string-api-updates/">Java 11 String API Updates</a></li>
<li><a href="https://github.com/eclipse/jetty.project/issues/2487">Java 11 removes EE and Corba packages</a></li>
<li><a href="https://twitter.com/java/status/1044609723012665344">Java Mission Control - Now serving OpenJDK binaries too!</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/migrate/index.html">Oracle JDK 11 Migration Guide</a></li>
<li><a href="http://www.java-countdown.xyz/">Countdown to Java Release Date</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="blog"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/09/recargar-sin-reiniciar-la-configuracion-de-una-aplicacion-spring-boot-con-spring-cloud-config/</id>
        <title>Recargar sin reiniciar la configuración de una aplicación Spring Boot con Spring Cloud Config</title>
        <updated>2018-09-23T00:50:00+02:00</updated>
        <published>2018-09-23T00:15:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/09/recargar-sin-reiniciar-la-configuracion-de-una-aplicacion-spring-boot-con-spring-cloud-config/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>No es raro la necesidad de querer cambiar algunos valores de la configuración de una aplicación sin ningún cambio adicional en el código. Normalmente la configuración se externaliza en un archivo de texto en un determinado formato como <em>properties</em> o <em>yaml</em> que se lee al iniciarse la aplicación pero que al querer hacer cambios y hacerlos efectivos requiere reiniciar la aplicación.</p>
<p>Para evitar la caída de servicio en un reinicio de aplicación requiere tener varias instancias de la aplicación, ir sacando del balanceador las instancias para que no le soliciten nuevas peticiones, reiniciarlas y añadirlas de nuevo al balanceador si se hace balanceo de carga en el servidor o reiniciar las aplicaciones progresivamente si se hace en el cliente. Y esto con todas las instancias del servicio. <a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config</a> y <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> entre sus funcionalidades de configuración posee una que consiste en recargar la configuración o ciertas partes de la misma. Para ello <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready">Spring Boot Actuator</a> ofrece un <em>endpoint</em> con el que disparar la recarga.</p>
<p>En el siguiente ejemplo de microservicio que posee una clase de configuración con algunas propiedades. El valor de estas propiedades se utilizan para el resultado de una acción en un <em>endpoint</em> del servicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.service</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.cloud.context.config.annotation.RefreshScope</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>&#10;&#10;<span class="nd">@Configuration</span>&#10;<span class="nd">@RefreshScope</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultConfiguration</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${config.key}&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">key</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">key</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setKey</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DefaultConfiguration.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.service</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>&#10;&#10;<span class="nd">@RestController</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultController</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Autowired</span>&#10;	<span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>&#10;&#10;	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>&#10;	<span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello world (%s, %s)&#34;</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">(),</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>DefaultController.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8080}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">cloud</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5672</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">guest</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">guest</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">management</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">endpoints</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">web</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">exposure</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>service.yml</span>
    </div>
</div>
<p>Iniciada la aplicación que requiere iniciar previamente el servicio de registro y descubrimiento y el servidor de configuración, la aplicación al iniciarse obtiene su configuración del servidor de configuración. Si se cambia la configuración de la variable <em>config.key</em> la aplicación no obtendrá el valor actualizado hasta que se invoque el <em>endpoint</em> <em>http://localhost:8080/actuator/refresh</em>. Para que Spring Boot recargue la configuración es necesario anotar con <em>@RefreshScope</em> la clase de configuración. Invocado el <em>endpoint</em> de recarga de configuración la aplicación toma de nuevo los nuevos valores del servicio de configuración.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-run-1.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl -i -X POST  http://localhost:8080/&#10;Hello world <span class="o">(</span>http://localhost:8080/, value<span class="o">)</span>&#10;&#10;$ vim configserver/misc/config/service.yml&#10;<span class="c1"># config.key: secret</span>&#10;&#10;$ curl -i -X POST  http://localhost:8080/actuator/refresh&#10;HTTP/1.1 <span class="m">200</span>&#10;Content-Type: application/vnd.spring-boot.actuator.v2+json<span class="p">;</span><span class="nv">charset</span><span class="o">=</span>UTF-8&#10;Transfer-Encoding: chunked&#10;Date: Sat, <span class="m">22</span> Sep <span class="m">2018</span> 21:19:03 GMT&#10;&#10;<span class="o">[</span><span class="s2">&#34;config.key&#34;</span><span class="o">]</span>&#10;&#10;$ curl http://localhost:8080/&#10;Hello world <span class="o">(</span>http://localhost:8080/, secret<span class="o">)</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>curl-1.sh</span>
    </div>
</div>
<p>En una aplicación orientada microservicios es muy posible que haya múltiples instancias del mismo servicio y para recargar la configuración de cada uno de ellos hay que hacerlo de forma individual con su <em>endpoint</em> de recarga de configuración. Dado el número de microservicios y su ubicación distribuida hacerlo de forma individual es un inconveniente.</p>
<p>Para resolver este inconveniente integrando <a href="https://cloud.spring.io/spring-cloud-bus/">Spring Cloud Bus</a> en las aplicaciones es posible recargar la configuración de todos los microservicios haciendo una única llamada al <em>endpoint</em> <em>http://localhost:8090/monitor</em> indicando el servicio a actualizar su configuración lo que es independiente del número de instancias y de su ubicación. Integrar Spring Cloud Bus requiere disponer de una instancia de mensajes como <a href="https://www.rabbitmq.com/">RabbitMQ</a> e incluir como dependencia tanto en el servidor de configuración como en el servicio la dependencia <em>spring-cloud-starter-bus-amqp</em>. Para esta comunicación de mensajes Spring Cloud Config crea en RabbitMQ una cola de mensajes que empieza por <em>springCloudBus</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="o">...</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-bus-amqp&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>configserver.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="o">...</span>&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-bus-amqp:2.0.0.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework.boot&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;spring-boot-starter-logging&#39;</span><span class="o">)</span> <span class="o">}</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>service.gradle</span>
    </div>
</div>
<p>Los pasos para probar estas funcionalidades con Spring Cloud Bus en una o varias varias instancias son iniciar una instancia o más del servidor de registro y descubrimiento, iniciar una o más instancias del servidor de configuración, iniciar una o varias instancias del servicio todas las instancias en un puerto y terminal diferente, invocar el servicio cuyo valor de respuesta depende de una propiedad de configuración, modificar el valor de la propiedad de configuración, recargar la configuración e invocar de nuevo el servicio para comprobar que el nuevo valor se ha hecho efectivo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8080&#34;</span>&#10;$ ./gradlew service:run --args<span class="o">=</span><span class="s2">&#34;--port=8081&#34;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-run-2.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl -i -X POST  http://localhost:8080/&#10;Hello world <span class="o">(</span>http://localhost:8080/, value<span class="o">)</span>&#10;$ curl -i -X POST  http://localhost:8081/&#10;Hello world <span class="o">(</span>http://localhost:8081/, value<span class="o">)</span>&#10;&#10;$ vim configserver/misc/config/service.yml&#10;<span class="c1"># config.key: secret</span>&#10;&#10;$ curl -X POST -d <span class="s1">&#39;path=service&#39;</span> http://localhost:8090/monitor&#10;<span class="o">[</span><span class="s2">&#34;service&#34;</span><span class="o">]</span>&#10;&#10;$ curl http://localhost:8080/&#10;Hello world <span class="o">(</span>http://localhost:8080/, secret<span class="o">)</span>&#10;&#10;$ curl http://localhost:8081/&#10;Hello world <span class="o">(</span>http://localhost:8081/, secret<span class="o">)</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>curl-2.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradle-run-1.sh, ./curl-1.sh</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-bus/2.0.0.RELEASE/single/spring-cloud-bus.html#_quick_start">Spring Cloud Bus - Quick Start</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.0.1.RELEASE/single/spring-cloud-config.html#_push_notifications_and_spring_cloud_bus">Spring CloudBus - Push Notifications and Spring Cloud Bus</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-configuration-classes.html">Spring Boot - Configuration Classes</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/09/servicio-de-configuracion-para-microservicios-con-spring-cloud-config/</id>
        <title>Servicio de configuración para microservicios con Spring Cloud Config</title>
        <updated>2018-09-15T19:30:00+02:00</updated>
        <published>2018-09-15T16:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/09/servicio-de-configuracion-para-microservicios-con-spring-cloud-config/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Al igual que un servicio de registro y descubrimiento es esencial para los microservicios un servicio de obtención de configuración de donde puedan obtener su configuración es también básico. Dado el gran número de microservicios de los que puede estar compuesta una aplicación, su carácter efímero, los varios entornos de ejecución (desarrollo, pruebas, producción, &hellip;) mantener centralizada la configuración en un único sitio hace las cosas mucho más sencillas cuando hay que cambiar el valor de alguna propiedad, en vez de la alternativa aún externalizada del artefacto del microservicio en el sistema de archivos del entorno de ejecución.</p>
<p>Dado que este servicio de configuración es esencial para que los microservicios puedan obtener su configuración sin la cual no podrían proporcionar su funcionalidad hay que configurarlo de tal manera que sea tolerante a fallos. Una de las medidas para hacerlo tolerante a fallos es iniciar varias instancias de servidores de configuración, estas instancias se autorregistran en el servicio de descubrimiento para que los microservicios puedan descubrirlos y obtener su configuración al iniciarse.</p>
<p>Con el comando <code>./gradlew configserver:run --args=&quot;--port=8090&quot;</code> se inicia una instancia de servicio de configuración en el puerto <em>8090</em>, cambiando el número de puerto se puede iniciar otra instancia en el puerto especificado. Una vez iniciadas varias instancias en el <em>dashboard</em> del servicio de descubrimiento se observa como se autorregistran y su estado.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8761&#34;</span>&#10;$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8762&#34;</span>&#10;$ ./gradlew discoveryserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8763&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8090&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8091&#34;</span>&#10;$ ./gradlew configserver:run --args<span class="o">=</span><span class="s2">&#34;--port=8092&#34;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew-run.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/09/servicio-de-configuracion-para-microservicios-con-spring-cloud-config/images/spring-eureka-2_hub1cbfdfec6fa7e0b16e220ff391ac48f_114116_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Servicios registrados en el servicio de registro y descubrimiento"><img src="https://picodotdev.github.io/blog-bitix/2018/09/servicio-de-configuracion-para-microservicios-con-spring-cloud-config/images/spring-eureka-2_hub1cbfdfec6fa7e0b16e220ff391ac48f_114116_300x200_fit_box_3.png" width="244" height="200" alt="Servicios registrados en el servicio de registro y descubrimiento" title="Servicios registrados en el servicio de registro y descubrimiento"  class="lozad "></a></p>
<figcaption>Servicios y su estado registrados en el servicio de registro y descubrimiento</figcaption>
</figure>
</div>
<p>Dado que los servicios de configuración no pueden confiar en obtener su configuración de una instancia de su servicio de configuración ha de establecerse en el propio microservicio los nombres de <em>host</em> de las instancias de registro y descubrimiento en las que registrarse, en la propiedad <em>eureka.client.serviceUrl.defaultZone</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">native</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">searchLocations</span><span class="p">:</span><span class="w"> </span><span class="l">file:./misc/config</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">encrypt</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">ma8FvTm1t8uWRlYE3ghPsQxxESaZwpOGdlsFwIyPNIWE25yNg1dsvvnd7orlZL9FH0qJyRkG8kcf5CBVdjmi8b2yxKzpXyfxpMXj</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>bootstrap.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8090}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">configserver</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">native</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5672</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">guest</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">guest</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">serviceUrl</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://ds1.127.0.0.1.xip.io:8761/eureka/,http://ds2.127.0.0.1.xip.io:8762/eureka/,http://ds3.127.0.0.1.xip.io:8763/eureka/</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>application.yml</span>
    </div>
</div>
<p>Los archivos de configuración para los microservicios en este ejemplo están en el directorio <em>misc/config</em> donde siguiendo algunas convenciones para asignar el nombre a los archivos se pueden personalizar las configuraciones de los microservicios según el entorno y perfil con el que se active. En este caso se utiliza lo que <a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config</a> denomina un <em>filesystem backend</em>, sin embargo, hay otras disponibles como un repositorio de <a href="https://git-scm.com/">git</a> el cual ofrece varias ventajas propias de un repositorio de código como historial, ramas de trabajo y hacer cambios con un <em>commit</em>.</p>
<p>Un microservicio o aplicación de <a href="https://spring.io/">Spring</a> que use un servidor de Spring Cloud Config una de las primeras acciones que realiza al iniciarse es obtener su configuración en función del nombre del microservicio y perfil con el que se inicie. Dado que la configuración se obtiene en el inicio en base a su nombre y perfil tanto el nombre del microservicio y su perfil de configuración se ha de configurar en el archivo <em>bootstrap.yml</em>.</p>
<p>El proceso de configuración de un microservicio está formado por dos pasos, en el primero el servicio se conecta al servicio de registro y descubrimiento obtiene los servicios registrados de configuración y en el segundo paso solicita a uno de ellos su configuración.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">failFast</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">discovery</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>bootstrap-service.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8080}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">cloud</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5672</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">guest</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">guest</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">management</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">endpoints</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">web</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">exposure</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>service.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8085}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">management</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">endpoints</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">web</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">exposure</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">include</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">circuitBreaker</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">requestVolumeThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">errorThresholdPercentage</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">metrics</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">rollingStats</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">timeInMilliseconds</span><span class="p">:</span><span class="w"> </span><span class="m">10000</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{cipher}fb416133716acf5b6e3ffb64a396d521cd68fb0c2cb58727d5e938badefa942b&#39;</span><span class="w">&#10;</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>client.yml</span>
    </div>
</div>
<p>El servicio de configuración es accesible mediante una interfaz REST. Para obtener la configuración del servicio <em>service</em> y del servicio <em>client</em> de este ejemplo las URLs para obtenerlas son las siguientes. Estos <em>endpoints</em> devuelven en formato <em>json</em> un documento con los valores de las propiedades principalmente están en el mapa <em>source</em> entre otros datos que Spring al iniciar la aplicación con ellos configura la aplicación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl http://localhost:8090/service/default.yml&#10;$ curl http://localhost:8090/client/default.yml&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>curl.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>  &#10;   <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;service&#34;</span><span class="p">,</span>&#10;   <span class="nt">&#34;profiles&#34;</span><span class="p">:[</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;default.yml&#34;</span>&#10;   <span class="p">],</span>&#10;   <span class="nt">&#34;label&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;version&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;state&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;propertySources&#34;</span><span class="p">:[</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">{</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;file:misc/config/service.yml&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="nt">&#34;source&#34;</span><span class="p">:{</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;server.port&#34;</span><span class="p">:</span><span class="s2">&#34;${port:8080}&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;spring.application.name&#34;</span><span class="p">:</span><span class="s2">&#34;service&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;spring.profiles.active&#34;</span><span class="p">:</span><span class="s2">&#34;cloud&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;spring.rabbitmq.host&#34;</span><span class="p">:</span><span class="s2">&#34;localhost&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;spring.rabbitmq.port&#34;</span><span class="p">:</span><span class="mi">5672</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;spring.rabbitmq.username&#34;</span><span class="p">:</span><span class="s2">&#34;guest&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;spring.rabbitmq.password&#34;</span><span class="p">:</span><span class="s2">&#34;guest&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;management.endpoints.web.exposure.include&#34;</span><span class="p">:</span><span class="s2">&#34;*&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;config.key&#34;</span><span class="p">:</span><span class="s2">&#34;value&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">}</span>&#10;   <span class="p">]</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>service-config.json</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>  &#10;   <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;client&#34;</span><span class="p">,</span>&#10;   <span class="nt">&#34;profiles&#34;</span><span class="p">:[</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s2">&#34;default.yml&#34;</span>&#10;   <span class="p">],</span>&#10;   <span class="nt">&#34;label&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;version&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;state&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>&#10;   <span class="nt">&#34;propertySources&#34;</span><span class="p">:[</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">{</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;file:misc/config/client.yml&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="nt">&#34;source&#34;</span><span class="p">:{</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;server.port&#34;</span><span class="p">:</span><span class="s2">&#34;${port:8085}&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;management.endpoints.web.exposure.include&#34;</span><span class="p">:</span><span class="s2">&#34;*&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;circuitBreaker.requestVolumeThreshold&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;circuitBreaker.errorThresholdPercentage&#34;</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;metrics.rollingStats.timeInMilliseconds&#34;</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;config.key&#34;</span><span class="p">:</span><span class="s2">&#34;dev&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;config.password&#34;</span><span class="p">:</span><span class="s2">&#34;secret&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="p">}</span>&#10;   <span class="p">]</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>client-config.json</span>
    </div>
</div>
<p>En otro artículo relacionado con la configuración de los microservicios comentaré <a href="https://picodotdev.github.io/blog-bitix/2018/09/recargar-la-configuracion-sin-reiniciar-una-aplicacion-spring-boot-con-spring-cloud-config/">como recargar la configuración de los microservicios sin necesidad de reiniciarlos</a> y <a href="https://picodotdev.github.io/blog-bitix/2018/09/almacenar-cifrados-los-valores-de-configuracion-sensibles-en-spring-cloud-config/">como almacenar datos sensibles de forma cifrada</a> para mayor seguridad.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloud">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run:configserver --args=&#34;port=8090&#34;</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.0.1.RELEASE/single/spring-cloud-config.html#_git_backend">Spring Cloud Config, Git</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.0.1.RELEASE/single/spring-cloud-config.html#vault-backend">Spring Cloud Config, Vault</a></li>
<li><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.0.1.RELEASE/single/spring-cloud-config.html#_jdbc_backend">Spring Cloud Config, JDBC</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config">Spring Cloud Config, Externalized Configuration</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/</id>
        <title>El editor de archivos e IDE minimalista Visual Studio Code</title>
        <updated>2018-09-09T11:00:00+02:00</updated>
        <published>2018-09-09T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/visual-studio-code.svg" width="200" height="199" alt="Visual Studio Code" title="Visual Studio Code"  class=""></p>
</div>
<p>Para trabajar y desde que empecé a usar un generador estático para el blog primero con <a href="http://octopress.org/">Octopress</a> y luego con <a href="https://gohugo.io/">Hugo</a> he necesitado un editor de archivos de texto y de código fuente. Uno de los más conocidos es <a href="https://www.sublimetext.com/">Sublime Text</a> con numerosas funcionalidades y atajos de teclado para realizar muchas acciones únicamente pulsado unas pocas teclas y sin necesidad de ratón en gran medida. Sublime Text está muy bien pero no es gratuito por lo que después de un tiempo empecé a usar <a href="https://atom.io/">Atom</a>, sin embargo, al estar este basado en <a href="https://electronjs.org/">Electron</a> que en realidad es un navegador <a href="https://www.google.es/chrome/browser/desktop/">Chrome</a> y <a href="https://es.wikipedia.org/wiki/JavaScript">JavaScript</a> con <a href="https://nodejs.org/en/">Node</a> su rendimiento se nota pobre. Buscando más alternativas la gente mencionaba bastante a menudo <a href="https://code.visualstudio.com/">Visual Studio Code</a>, lo probé, es el que más me ha gustado de todos y el que uso ahora.</p>
<p>Visual Studio Code es un editor de archivos de texto avanzado orientado a desarrolladores sin llegar a ser un IDE pero con algunas funcionalidades de estos. Visual Studio Code se nota mucho más rápido que Atom y soporta al igual que Sublime Text varias combinaciones de teclas para trabajar rápido con los archivos. Soporta numerosos formatos de archivos con resaltado de sintaxis entre ellos <a href="https://es.wikipedia.org/wiki/Markdown">Markdown</a>, <a href="https://www.yaml.org/">Yaml</a>, HTML, CSS, imágenes <em>png</em> y fotos <em>jpg</em> que son los formatos de archivo que utilizo para crear los artículos del blog. Permite visualizar imágenes y fotos sin necesidad de ir a la aplicación del sistema operativo para visualizarlas. Dada la popularidad que está alcanzando soporta un gran número de complementos o <em>plugins</em> que entre otros añaden resaltado de sintaxis para otros formatos de archivos que por defecto no soporta, como <a href="https://www.oracle.com/technetwork/java/index.html">Java</a>. En el caso del <a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"><em>plugin</em> para Java</a> también permite asistencia de código y detectar errores de compilación, aunque no llegue a las capacidades de un IDE como <a href="https://www.jetbrains.com/idea/">IntelliJ</a>, <a href="https://eclipse.org">eclipse</a> o <a href="https://visualstudio.microsoft.com/">Visual Studio</a> sirve para editar ocasionalmente archivos de código fuente Java sin necesidad de abrir el IDE y su proyecto. Hay complementos para <a href="https://www.python.org/">Python</a>, <a href="https://www.ruby-lang.org/es/">Ruby</a>, <a href="https://golang.org/">Go</a>, <a href="https://www.rust-lang.org/">Rust</a> o <a href="https://gradle.org/">Gradle</a> entre otros muchos, y por supuesto JavaScript o <a href="https://www.typescriptlang.org/">TypeScript</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/visual-studio-code-1_hu8172c8a741f24521f7cd7f3616353770_673782_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Visual Studio Code"><img src="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/visual-studio-code-1_hu8172c8a741f24521f7cd7f3616353770_673782_300x200_fit_box_3.png" width="300" height="183" alt="Visual Studio Code" title="Visual Studio Code"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/visual-studio-code-2_hu8172c8a741f24521f7cd7f3616353770_704519_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Visual Studio Code"><img src="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/visual-studio-code-2_hu8172c8a741f24521f7cd7f3616353770_704519_300x200_fit_box_3.png" width="300" height="183" alt="Visual Studio Code" title="Visual Studio Code"  class="lozad "></a></p>
<figcaption>Visual Studio Code</figcaption>
</figure>
</div>
<p>Incluye una <a href="https://code.visualstudio.com/docs/editor/integrated-terminal">terminal integrada</a> para ejecutar comandos sin necesidad de salir del editor a la terminal del sistema. Soporta <a href="https://code.visualstudio.com/docs/editor/emmet">Emmet</a> para crear código con <em>snippets</em> en los tipos de archivos que los soporten entre ellos HTML y CSS. También incluye soporte para el sistema de <a href="https://code.visualstudio.com/docs/editor/versioncontrol">control de versiones Git</a> y otros con <em>plugins</em> que permiten ver las modificaciones realizadas en los archivos y los archivos modificados, hay gran cantidad de complementos.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/git_hu8172c8a741f24521f7cd7f3616353770_1363988_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Git integrado"><img src="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/git_hu8172c8a741f24521f7cd7f3616353770_1363988_300x200_fit_box_3.png" width="300" height="183" alt="Git integrado" title="Git integrado"  class="lozad "></a></p>
<figcaption>Git integrado</figcaption>
</figure>
</div>
<p>Con la combinación <code>Ctrl + P</code> se abre una ventana emergente para abrir archivos por su nombre. Introduciendo <code>?</code> se obtienen las posibles acciones que se pueden realizar. Otra muy utilizada es <code>Ctrl + G</code> para ir a una línea específica del archivo, también se puede hacer desde la ventana emergente e introduciendo el carácter <code>:</code>. Con <code>Ctrl + Shift + O</code> se va a los símbolos detectados por editor según el tipo de archivo. Posee una buena <a href="https://code.visualstudio.com/docs">documentación</a> con la que ir aprendiendo a medida que se usa el mayor provecho posible.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/ventana-emergente_hu8172c8a741f24521f7cd7f3616353770_1615659_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Ventana emergente de acciones rápidas"><img src="https://picodotdev.github.io/blog-bitix/2018/09/el-editor-de-archivos-e-ide-minimalista-visual-studio-code/images/ventana-emergente_hu8172c8a741f24521f7cd7f3616353770_1615659_300x200_fit_box_3.png" width="300" height="183" alt="Ventana emergente de acciones rápidas" title="Ventana emergente de acciones rápidas"  class="lozad "></a></p>
<figcaption>Ventana emergente de acciones rápidas</figcaption>
</figure>
</div>
<p>En definitiva tiene una buena cantidad de opciones que como desarrolladores son muy útiles. Otras funcionalidades que tiene son:</p>
<ul>
<li>Minimapa del archivo abierto.</li>
<li>Ajuste de linea.</li>
<li>Buscar y reemplazar usando expresiones regulares.</li>
<li>Espacios de trabajo con múltiples directorios raíz.</li>
<li>Ampliar, reducir el tamaño del texto y ajuste automático de linea.</li>
<li>Diseño de archivos abiertos en columnas, filas y rejilla.</li>
<li>Soporte de secuencia final de línea Windows y Unix, con soporte para UTF-8.</li>
<li>Depurador de código.</li>
<li>Tiene un ritmo de actualización muy alto y en cada nueva versión se añaden numerosas funcionalidades o se mejoran las existentes.</li>
</ul>
<p>Por otro lado ocupa menos que los 260 MiB de Atom contra los 180 MiB de Visual Studio Code y está disponible en las plataformas más utilizadas <a href="https://www.microsoft.com/es-es/windows/">Windows</a>, <a href="https://www.apple.com/es/mac/">Mac</a> e incluso <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> aún siendo un producto de <a href="https://www.microsoft.com/">Microsoft</a>. Microsoft proporcionando software para la plataforma del pingüino, quien lo diría hace unas décadas.</p>
<p>En los sistemas Unix habrá gente que prefiera <a href="https://www.vim.org/">Vim</a> por sus enormes posibilidades, bajo consumo de memoria y exprimir al máximo cada megaherzio del procesador pero este requiere un tiempo de aprendizaje elevado inicial comparado con cualquiera de los editores anteriores.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://code.visualstudio.com/docs/setup/setup-overview">Setup</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/codebasics">Basics</a></li>
<li><a href="https://code.visualstudio.com/Docs/editor/tasks">Tasks</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/editingevolved">Edition evolved</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/integrated-terminal">Integrated terminal</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/emmet">Emmet</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/extension-gallery">Extension gallery</a></li>
<li><a href="https://code.visualstudio.com/docs/java/java-tutorial">Java tutorial</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
        
    </entry>
    
</feed>
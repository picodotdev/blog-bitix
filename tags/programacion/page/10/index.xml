<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/</id>
    <updated>2021-10-28T19:00:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-para-gestionar-errores-en-java/</id>
        <title>Las excepciones para gestionar errores en Java</title>
        <updated>2017-10-15T11:30:00+02:00</updated>
        <published>2017-10-15T11:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-para-gestionar-errores-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En la ejecución de los programas se pueden producir numerosas condiciones de error, algunas condiciones son un dato con un formato inesperado como una letra cuando se espera un número o fallos en la entrada o salida al trabajar con archivos o comunicación por red si un archivo que se quiere utilizar en realidad no existe en el sistema de archivos o el servidor no está disponible en la comunicación por red, estos son solo unos pocos ejemplo de errores posibles en un programa. Pero hay muchas otras condiciones de error que se puedan producir para las que un programa ha de estar preparado.</p>
<p>En la documentación Javadoc de cada clase y utilizando la asistencia de código de los entornos integrados de desarrollo al usar un método es posible conocer que excepciones <em>checked</em> lanza, el saber que excepciones lanza un método permite añadir el código necesario para tratar cada una de ellas de forma adecuada o lanzarlas para que el método invocante las trate.</p>
<h3 id="qué-son-las-excepciones-de-java">Qué son las excepciones de Java</h3>
<p>Las excepciones son un mecanismo para capturar y generar errores en un programa en tiempo de ejecución. Son una de las <a href="https://picodotdev.github.io/blog-bitix/2020/10/3-formas-de-gestionar-errores-en-los-lenguajes-de-programacion/">formas de gestionar errores</a> como alternativa al retorno de valores especiales, otra forma de gestionar errores alternativa a las excepciones son <a href="https://picodotdev.github.io/blog-bitix/2018/05/gestion-de-errores-con-either-o-try-en-vez-de-con-codigo-de-error-null-optional-checked-exception-o-unchecked-exception/">gestionar errores con la clase Either</a> de <a href="https://www.vavr.io/">Vavr</a>.</p>
<p>En Java las excepciones están incorporadas en el lenguaje desde Java desde la primera versión y que en posteriores se han mejorado. Las palabras reservadas del lenguaje para las excepciones son <em>try</em>, <em>catch</em>, <em>finally</em> para la captura y <em>throw</em> y <em>throws</em> para lanzar excepciones en los métodos. Las excepciones son uno de <a href="https://picodotdev.github.io/blog-bitix/2020/06/las-sentencias-de-control-de-flujo-en-java-if-switch-for-while-do-while-try-catch-break-continue-e-invocacion/">los tipos de sentencias y estructuras de control de flujo básicas de Java</a>.</p>
<p>En Java las excepciones son objetos que extienden la clase <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/lang/Throwable.html">Throwable</a> de la que en el JDK es extendida por la clase <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/lang/Error.html">Error</a> y <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/lang/Exception.html">Exception</a> de la que de esta última a su vez hereda <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/lang/RuntimeException.html">RuntimeException</a>. Entre las comprobaciones que realiza el compilador está que las excepciones <em>checked</em> lanzadas por un método son capturadas por el código que lo llama. Solo los objetos que hereden de <em>Throwable</em> pueden ser lanzados y capturados en los bloques <em>try-catch</em>.</p>
<h3 id="tipos-de-excepciones-_checked_-y-_unchecked_">Tipos de excepciones, <em>checked</em> y <em>unchecked</em></h3>
<p>Las excepciones que heredan de <em>Exception</em> se denominan <em>checked exceptions</em>, han declararse en los métodos siendo de obligada captura o relanzado para su tratamiento en el método que invoca al que lanza la excepción. Estas son los tipos de excepciones que normalmente crea un programa para gestionar sus propias excepciones. Para crear una nueva excepción basta con crear una nueva clase que extienda de <em>Exception</em>, para lanzar una excepción hay que crear una instancia de la clase y lanzarla con la palabra reservada <em>throws</em>, en la firma del método ha de declararse que puede lanzar una excepción con la palabra reservada <em>throws</em>.</p>
<p>Las excepciones que heredan de <em>RuntimeException</em> también se les conoce como <em>unchecked exception</em>, no necesitan declararse en los métodos para ser lanzadas, son empleadas para advertir de errores de programación como dividir por cero produciendo <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ArithmeticException.html">ArithmeticException</a>, desreferenciar un puntero nulo produciendo <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html">NullPointerException</a> o acceder a una posición inválida de un <em>array</em> produciendo <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</a>.</p>
<p>Las excepciones que heredan de <em>Error</em> son empleadas para casos en los que se han agotado recursos del sistema como la memoria o condiciones de error en el sistema que generalmente impiden el correcto funcionamiento del programa y de difícil tratamiento salvo terminar la ejecución.</p>
<h3 id="las-excepciones-más-comunes-de-java">Las excepciones más comunes de Java</h3>
<p>En la colección de clases de la API de Java se incluyen muchas excepciones, en la documentación Javadoc como en el resto de clases incluyen una descripción con la condición de error que indican. Algunas de las excepciones más comunes de Java son:</p>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html">NullPointerException</a>: se lanza cuando se intenta usar una referencia nula en el uso de un objeto. Es una de las excepciones más comunes y es debido a un error en la programación del programa.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBounds</a>: se lanza al acceder a una posición ilegal de un <em>array</em> al ser el índice negativo, mayor o igual que el tamaño del <em>array</em>.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassCastException.html">ClassCastException</a>: se lanza cuando se hace una operación de <em>cast</em> a un tipo de objeto de la que no es una instancia.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/IllegalArgumentException.html">IllegalArgumentException</a>: se lanza para indicar que el valor de un argumento es inválido, se suele utilizar para comprobar una precondición al inicio del método.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/IOException.html">IOException</a>: indica algún tipo de error en una operación de entrada/salida. El error de entrada/salida es posible al trabajar con archivos o con operaciones de red.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>: es un tipo de error de entrada/salida que indica que al abrir el archivo este no existe en el sistema de archivos.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassNotFoundException.html">ClassNotFoundException</a>: se lanza cuando se intenta cargar una clase pero esta no existe usando <em>forName</em>, <em>findSystemClass</em> o <em>loadClass</em>. Su causa suele ser porque una librería no se ha proporcionado en el <em>classpath</em> al iniciar el programa o la aplicación requiere otra versión de alguna librería.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NoClassDefFoundError.html">NoClassDefFoundError</a>: es similar a <em>ClassNotFoundException</em> pero se produce cuando la clase existe en tiempo de compilación pero no en tiempo de ejecución.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NoSuchMethodException.html">NoSuchMethodException</a>: se lanza cuando un método no se encuentra. Es posible cuando una nueva versión de una librería ha eliminado un método o ha cambiado su firma con un cambio no compatible con versiones anteriores.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/SQLException.html">SQLException</a>: se produce en el acceso a bases de datos relacionales, por ejemplo cuando la sentencia SQL no tiene una sintaxis correcta.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/StackOverflowError.html">StackOverflowError</a>: se produce cuando se hacen demasiadas llamadas recursivas a un método.</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/InterruptedException.html">InterruptedException</a>: se produce cuando un <em>thread</em> es interrumpido. Esto ocurre al trabajar en Java con hilos y operaciones de concurrencia.</li>
</ul>
<h3 id="ejemplo-de-código-usando-excepciones">Ejemplo de código usando excepciones</h3>
<p>Este sería un ejemplo de código que hace uso de una excepción propia para detectar una condición de error, una excepción es <em>checked</em> y otra <em>unchecked</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Account</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">checkIsPositiveAmount</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidOperationException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">checkIsPositiveAmount</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">amount</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">amount</span><span class="o">)</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidOperationException</span><span class="o">(</span><span class="s">&#34;No enough amount to do transfer&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">substract</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">account</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">getAmount</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">amount</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">checkIsPositiveAmount</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">amount</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">substract</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">checkIsPositiveAmount</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">amount</span><span class="o">.</span><span class="na">subtract</span><span class="err">​</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkIsPositiveAmount</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">amount</span><span class="o">.</span><span class="na">signum</span><span class="o">()</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidAmountException</span><span class="o">(</span><span class="s">&#34;Negative amount is invalid&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Account.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvalidAmountException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">InvalidAmountException</span><span class="o">()</span> <span class="o">{}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">InvalidAmountException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span> <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span> <span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>InvalidAmountException.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvalidOperationException</span> <span class="kd">extends</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">InvalidOperationException</span><span class="o">()</span> <span class="o">{}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">InvalidOperationException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span> <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span> <span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>InvalidOperationException.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">$ jshell&#10;|  Welcome to JShell -- Version 9&#10;|  For an introduction type: /help intro&#10;&#10;jshell&gt; /edit&#10;|  created class InvalidAmountException&#10;|  created class InvalidOperationException&#10;|  created class Account&#10;&#10;jshell&gt; Account account1 = new Account(new BigDecimal(&#34;600.50&#34;));&#10;account1 ==&gt; Account@4dfa3a9d&#10;&#10;jshell&gt; Account account2 = new Account(new BigDecimal(&#34;100&#34;));&#10;account2 ==&gt; Account@464bee09&#10;&#10;jshell&gt; account1.transfer(account2, new BigDecimal(&#34;150&#34;));&#10;&#10;jshell&gt; account1.getAmount();&#10;$7 ==&gt; 450.50&#10;&#10;jshell&gt; account2.getAmount();&#10;$8 ==&gt; 250&#10;&#10;jshell&gt; account1.transfer(account2, new BigDecimal(&#34;-150&#34;));&#10;|  REPL.$JShell$11$InvalidAmountException thrown: Negative amount is invalid&#10;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at Account.checkIsPositiveAmount (#3:40)&#10;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at Account.transfer (#3:12)&#10;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at (#9:1)&#10;&#10;jshell&gt; account1.transfer(account2, new BigDecimal(&#34;1050&#34;));&#10;|  REPL.$JShell$12$InvalidOperationException thrown: No enough amount to do transfer&#10;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at Account.transfer (#3:15)&#10;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at (#10:1)&#10;&#10;jshell&gt;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>jshell.out</span>
    </div>
</div>
<p>Aunque las excepciones son un buen mecanismo para el tratamiento de errores se les critica que rompen el flujo de ejecución de un programa y tienen un coste en rendimiento, aunque esta penalización de rendimiento en la mayoría de programas es irrelevante. Algunas recomendaciones que se hace para usar de forma efectiva las excepciones son:</p>
<ul>
<li>Las excepciones no deben reemplazar comprobaciones simples con sentencias <em>if</em>.</li>
<li>No se deben microgestionar las excepciones. Los bloques <em>try-catch</em> deben contener bloques de código de varias líneas de código en vez una única sentencia por cada bloque <em>try-catch</em>.</li>
<li>Se debe hacer un buen uso de la jerarquía de excepciones y capturar la excepción que se vaya a tratar en el bloque <em>catch</em>. Una excepción se puede convertir en otra por ejemplo convertir un <em>NumberFormatException</em> a <em>IOException</em>.</li>
<li>No se deben capturar excepciones para no hacer nada con ellas, esto es no debe haber bloques <em>catch</em> vacíos.</li>
<li>En algunos casos es mejor lanzar una excepción que un valor <em>null</em> que posiblemente produzca un <em>NullPointerException</em> en otra parte distante del código de dónde se devolvió el valor <em>null</em>.</li>
<li>Propagar excepciones no es un signo de poca sabiduría, puede haber motivos para ello sobre todo si no se le puede dar un tratamiento adecuado.</li>
</ul>
<p>Cuando se produce una excepción la clase <em>Throwable</em> posee métodos para emitir en la salida un informe de la pila de llamadas, también se puede personalizar la salida. Esta información es esencial y muy útil para conocer la causa de un error ya que indica entre otras cosas cada uno de los métodos, línea en el código fuente y clases donde se ha producido la excepción.</p>
<p>Hay una cierta <a href="https://picodotdev.github.io/blog-bitix/2018/04/la-controversia-sobre-las-excepciones-checked-y-unchecked/">controversia sobre las excepciones <em>checked</em> y <em>unchecked</em></a> ya que mejoran el control de errores pero pueden generar otros problemas. Ambas opciones tienen sus lados positivos y otros negativos. En Java se optó por implementar el mecanismo de excepciones donde las <em>checked</em> es obligatorio tratarlas o lanzarlas a un nivel superior de la pila de llamadas.</p>
<p>El siguiente <a href="http://tutorials.jenkov.com/java-exception-handling/exception-hierarchies.html">tutorial sobre el manejo de las excepciones en Java</a> las comenta desde el punto de vista teórico de como se usan y mejores prácticas al usarlas.</p>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/</id>
        <title>Obtener el mínimo o máximo de dos, una lista o stream de valores en Java</title>
        <updated>2017-10-12T11:00:00+02:00</updated>
        <published>2017-10-12T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Si tenemos dos valores y queremos obtener el menor con una línea de código, podemos obtenerlo con un a sentencia <em>if</em> o con el operador condicional <em>? :</em>. Si queremos obtener el menor de tres valores con sentencias <em>if</em> o el operador <em>? :</em>  el problema aparentemente sencillo se complica y si optamos por usar una lista de valores tratándola como si el tamaño fuese desconocido quizá usemos un bucle <em>for</em> junto con una variable que mantenga el menor valor encontrado hasta el momento usando un <em>if</em> que compare el valor menor encontrado con el valor actual de la lista.</p>
<p>Sin embargo, en la API de Java hay dos métodos que permiten simplificar esta tarea, para dos valores podemos usar el método <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#min-int-int-">Math.min()</a> y para una lista de valores de tamaño desconocido podemos usar el método <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#min-java.util.Collection-">Collections.min()</a>. Usando un <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html">Stream</a> aún es más sencillo ya que estos poseen un método <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#min-java.util.Comparator-">Stream.min()</a> y <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-">Stream.max()</a> que devuelven el valor mínimo y máximo.</p>
<p>Este sería el código para los casos de comparar dos elementos, una lista y un stream de valores. Se que se puede probar con <a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/">la herramienta JShell</a> incluída entre <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/">otras novedades de Java 9</a>. En la lista de 20 valores aleatorios el menor es el 2 y entre la variable <em>a</em> y <em>b</em> el valor mínimo es 19.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>&#10;&#10;<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">50</span><span class="o">);</span>&#10;<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">50</span><span class="o">);</span>&#10;<span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">ints</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">50</span><span class="o">).</span><span class="na">limit</span><span class="o">(</span><span class="n">20</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>&#10;<span class="n">IntStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">ints</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">50</span><span class="o">).</span><span class="na">limit</span><span class="o">(</span><span class="n">20</span><span class="o">);</span>&#10;&#10;<span class="c1">// Dos valores, mejor usar Math.min()&#10;</span><span class="c1"></span><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="o">;</span>&#10;&#10;<span class="c1">// Una forma de obtener el mínimo de una lista de valores, mejor usar el método Collections.min()&#10;</span><span class="c1"></span><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>&#10;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">ints</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>&#10;&#10;<span class="c1">// Dos valores usando el método Math.min()&#10;</span><span class="c1"></span><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>&#10;&#10;<span class="c1">// Obtener el mínimo usando el método Math.min()&#10;</span><span class="c1"></span><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span>&#10;&#10;<span class="c1">// Obtener el mínimo de un stream&#10;</span><span class="c1"></span><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">min</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">();</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/images/min-max_hu8cd2690b39faf2912ecde0a7e2758e39_81447_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Diferentes formas de obtener el valor mínimo y máximo"><img src="https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/images/min-max_hu8cd2690b39faf2912ecde0a7e2758e39_81447_300x200_fit_box_3.png" width="300" height="164" alt="Diferentes formas de obtener el valor mínimo y máximo" title="Diferentes formas de obtener el valor mínimo y máximo"  class="lozad "></a></p>
<figcaption>Diferentes formas de obtener el valor mínimo y máximo</figcaption>
</figure>
</div>
<p>Para obtener el máximo sería similar pero usando el método <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#max-int-int-">Math.max()</a>, <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#max-java.util.Collection-">Collections.max()</a> o <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-">Stream.max()</a>.</p>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/</id>
        <title>Ejemplo con el cliente HTTP/2 de Java</title>
        <updated>2019-09-22T14:00:00+02:00</updated>
        <published>2017-10-08T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Otra de las <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/">nuevas funcionalidades incluidas en Java 9</a> aunque en modo incubación e incorporado en Java 11 de forma estable es el cliente con soporte para HTTP/2 para realizar peticiones a recursos usando este protocolo más eficiente y rápido. Al mismo tiempo se ha simplificado el código necesario para realizar una petición y obtener el resultado de una URL. También se ha añadido la funcionalidad de realizar peticiones asíncronas y creación de conexiones de <em>WebSockets</em>.</p>
<p>Las clases importantes de esta nueva API con <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html">HttpClient</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpRequest.html">HttpRequest</a> y <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.html">HttpResponse</a>. Estas clases se encuentran en el módulo de incubación <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html">jdk.incubator.httpclient</a>, una vez que sea definitiva la API se renombrará el módulo.</p>
<p>El siguiente ejemplo realiza una petición a la página del buscador Google con unas cabeceras y obtiene el código de estado, las cabeceras devueltas y el cuerpo de la página de resultado. En la declaración del módulo para usar el cliente hay que indicar que tiene como requerimiento su módulo de <em>java.net.http</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.http</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.net.http.HttpClient</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.http.HttpClient.Redirect</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.http.HttpClient.Version</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.http.HttpRequest</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.http.HttpResponse</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.net.http.HttpResponse.BodyHandlers</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClient</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">version</span><span class="o">(</span><span class="n">HttpClient</span><span class="o">.</span><span class="na">Version</span><span class="o">.</span><span class="na">HTTP_2</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HttpResponse</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">HttpRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="k">new</span> <span class="n">URI</span><span class="o">(</span><span class="s">&#34;https://www.google.es/&#34;</span><span class="o">)).</span><span class="na">headers</span><span class="o">(</span><span class="s">&#34;User-Agent&#34;</span><span class="o">,</span> <span class="s">&#34;Mozilla/5.0 (X11; Linux x86_64; rv:56.0) Gecko/20100101 Firefox/56.0&#34;</span><span class="o">).</span><span class="na">GET</span><span class="o">().</span><span class="na">build</span><span class="o">(),</span> <span class="n">HttpResponse</span><span class="o">.</span><span class="na">BodyHandlers</span><span class="o">.</span><span class="na">ofString</span><span class="o">());</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Status Code: &#34;</span> <span class="o">+</span> <span class="n">response</span><span class="o">.</span><span class="na">statusCode</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Headers:&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">response</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">map</span><span class="o">().</span><span class="na">entrySet</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Body:&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">module</span> <span class="n">blogbitix</span><span class="o">.</span><span class="na">http</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">requires</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">http</span><span class="o">;</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>module-info.java</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/images/java-http2_hubaeef8c2828b46ac6c0352c111958aba_219179_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Petición con el cliente de Java para HTTP/2"><img src="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/images/java-http2_hubaeef8c2828b46ac6c0352c111958aba_219179_300x200_fit_box_3.png" width="300" height="164" alt="Petición con el cliente de Java para HTTP/2" title="Petición con el cliente de Java para HTTP/2"  class="lozad "></a></p>
<figcaption>Petición con el cliente de Java para HTTP/2</figcaption>
</figure>
</div>
<p>Otras formas de manejadores del resultado de la petición son los siguientes:</p>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofString%28%29">BodyHandlers.ofString()</a>: almacena el resultado de la petición en un String</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofByteArray%28%29">BodyHandlers.ofByteArray</a>: almacena el resultado de la petición en un array de bytes como sería el caso de obtener una imagen o un archivo PDF</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofFile%28java.nio.file.Path%29">BodyHandlers.ofFile(Path)</a>: almacena el resultado en un archivo del disco</li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html#discarding%28%29">BodyHandlers.discarding()</a>: descarta la respuesta y devuelve el valor indicado</li>
</ul>
<p>Se puede definir la política de cómo procesar las redirecciones para seguirlas o no seguirlas.</p>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.Redirect.html#ALWAYS">HttpClient.Redirect.ALWAYS</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.Redirect.html#NEVER">HttpClient.Redirect.NEVER</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.Redirect.html#NORMAL">HttpClient.Redirect.NORMAL</a></li>
</ul>
<p>Y añadir trazas de las peticiones que se realicen con el cliente.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/11/emitir-trazas-de-las-peticiones-y-respuestas-http-con-clientes-java/">Emitir trazas de las peticiones y respuestas HTTP con clientes Java</a></li>
</ul>
<p>Con la clase <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/net/ssl/SSLContext.html">SSLContext</a> es posible establecer autenticación para el cliente usando un certificado como muestro en el artículo <a href="https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/">Autenticación mutua de cliente y servidor con certificados</a>.</p>
<p>La ventaja del cliente HTTP incluido en el JDK es que no es necesario ninguna dependencia adicional en la aplicación, sin embargo es un cliente que require crear código de infraestructura para realizar las peticiones, recibir las respuestas y realizar las transformaciones de datos desde y a JSON. Otras alternativas permiten <a href="https://picodotdev.github.io/blog-bitix/2021/04/crear-de-forma-sencilla-un-cliente-de-un-servicio-rest-o-http-con-retrofit/">Crear de forma sencilla un cliente de un servicio REST o HTTP con Retrofit</a>.</p>
<p>Para ejecutar el ejemplo usando <a href="https://gradle.org/">Gradle</a> y Java 11 hay que añadir un poco de configuración al <em>script</em> de construcción que posiblemente en un futuro no será necesaria cuando se mejore el soporte.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;&#10;<span class="n">ext</span><span class="o">.</span><span class="na">moduleName</span> <span class="o">=</span> <span class="s1">&#39;blogbitix.http&#39;</span>&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s2">&#34;$moduleName/io.github.picodotdev.blogbitix.http.Main&#34;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">compileJava</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">inputs</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s2">&#34;moduleName&#34;</span><span class="o">,</span> <span class="n">moduleName</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doFirst</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">compilerArgs</span> <span class="o">=</span> <span class="o">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;--module-path&#39;</span><span class="o">,</span> <span class="n">classpath</span><span class="o">.</span><span class="na">asPath</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">files</span><span class="o">()</span>  &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">run</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">inputs</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s2">&#34;moduleName&#34;</span><span class="o">,</span> <span class="n">moduleName</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">doFirst</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jvmArgs</span> <span class="o">=</span> <span class="o">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;--module-path&#39;</span><span class="o">,</span> <span class="n">classpath</span><span class="o">.</span><span class="na">asPath</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;--module&#39;</span><span class="o">,</span> <span class="n">mainClassName</span> &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">files</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHttp2">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/</id>
        <title>Evitar niveles de anidación de sentencias condicionales con guard clauses</title>
        <updated>2017-10-07T12:00:00+02:00</updated>
        <published>2017-10-07T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Al escribir el código de un método es habitual hacer algunas comprobaciones sobre los parámetros, por ejemplo, para comprobar que el parámetro tiene una referencia, si es nulo o cumple alguna condición, si es una lista que no esté vacía o para validar mediante alguna otra regla. Estas validaciones o aserciones se realizan al inicio del método con sentencias <em>if</em> que añaden un nivel de tabulación al código si se anidan. Estos niveles de tabulación con sentencias <em>if</em> anidadas hacen poco legible el código.</p>
<p>Este código que comprueba algunos parámetros no es tan sencillo de entender por los varios niveles de anidación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">getValue</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>&#10;   <span class="n">BigDecimal</span> <span class="n">result</span><span class="o">;</span>&#10;   <span class="k">if</span> <span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">isNew</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="n">result</span> <span class="o">=</span> <span class="n">car</span><span class="o">.</span><span class="na">getNewValue</span><span class="o">();</span>&#10;   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="k">if</span> <span class="o">(!</span><span class="n">car</span><span class="o">.</span><span class="na">isOlderThanYears</span><span class="o">(</span><span class="n">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">car</span><span class="o">.</span><span class="na">hasLessKilimetersThan</span><span class="o">(</span><span class="n">10000</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">result</span> <span class="o">=</span> <span class="n">car</span><span class="o">.</span><span class="na">getAlmostNewValue</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="k">else</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="k">if</span> <span class="o">(!</span><span class="n">car</span><span class="o">.</span><span class="na">isOlderThanYears</span><span class="o">(</span><span class="n">5</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">result</span> <span class="o">=</span> <span class="n">car</span><span class="o">.</span><span class="na">getSemiNewValue</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="k">else</span> &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">result</span> <span class="o">=</span> <span class="n">car</span><span class="o">.</span><span class="na">getOldValue</span><span class="o">();</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="o">}</span>&#10;   <span class="o">}</span>&#10;   <span class="k">return</span> <span class="n">result</span><span class="o">;</span>&#10;<span class="o">};</span>&#10;&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>NestedIf.java</span>
    </div>
</div>
<p>En vez de crear este nivel de anidación y crear varios flujos distintos por donde se bifurca el código, con aserciones, sentencias <em>if</em> o <em>guard clauses</em>  el código queda más legible. Después de cada cláusula <em>if</em> es seguro que la aserción que realiza se cumple.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="o">...</span>&#10;&#10;<span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">getValue</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">isNew</span><span class="o">())</span> <span class="k">return</span> <span class="n">car</span><span class="o">.</span><span class="na">getNewValue</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">car</span><span class="o">.</span><span class="na">isOlderThanYears</span><span class="o">(</span><span class="n">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">car</span><span class="o">.</span><span class="na">hasLessKilimetersThan</span><span class="o">(</span><span class="n">10000</span><span class="o">))</span> <span class="k">return</span> <span class="n">car</span><span class="o">.</span><span class="na">getAlmostNewValue</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">car</span><span class="o">.</span><span class="na">isOlderThanYears</span><span class="o">(</span><span class="n">5</span><span class="o">))</span> <span class="k">return</span> <span class="n">car</span><span class="o">.</span><span class="na">getSemiNewValue</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">car</span><span class="o">.</span><span class="na">getOldValue</span><span class="o">();</span>&#10;<span class="o">};</span> &#10;&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>GuardClauses.java</span>
    </div>
</div>
<p>También es una recomendación que los métodos solo tengan una sentencia <em>return</em>, de hecho en la enseñanza de programación se explica pero para estos casos de comprobaciones la ventaja de no tener varios <em>if</em> anidados es justificable tener varios <em>return</em>, el código queda más legible.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html">Replace Nested Conditional with Guard Clauses</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/</id>
        <title>JShell la herramienta REPL incorporada en Java 9</title>
        <updated>2017-09-29T22:00:00+02:00</updated>
        <published>2017-09-29T21:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Una de las <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java2-los-modulos/">novedades de Java 9</a> es la incorporación de una herramienta <em>Read-Evaluation-Print-Loop</em> o REPL similar a las disponibles en otros lenguajes dinámicos para permitir evaluar pequeños ejemplos de código, hacer pruebas o como herramienta para alguien que esté aprendiendo a programar sin la necesidad de utilizar un entorno integrado de desarrollo, una herramienta de construcción y los varios archivos y comandos necesarios para compilar y ejecutar el código Java.</p>
<p>El comando de la herramienta <a href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm">JShell</a> es <em>jshell</em> que inicia un símbolo del sistema donde empezar a introducir las expresiones, se sale de <em>jshell</em> con el comando <code>/exit</code>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell_hu5a1a6eb162003e8d56cf630d98bb91a2_16664_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="JShell"><img src="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell_hu5a1a6eb162003e8d56cf630d98bb91a2_16664_300x200_fit_box_3.png" width="300" height="187" alt="JShell" title="JShell"  class="lozad "></a></p>
<figcaption>JShell</figcaption>
</figure>
</div>
<p>Se pueden crear variables, crear y modificar definiciones de métodos y clases. Cada una de estas expresiones crea un <em>snippet</em> de código que pueden listarse con el comando <code>/list</code>. Al introducir las expresiones se soporta completado y asistencia de código con la tecla tabulador como ayuda para saber que métodos tiene un objeto.</p>
<p>Se pueden crear clases y métodos como en el ejemplo de la serie de Fibonacci implementada con un <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html">Stream</a> de la cual se muestran los elementos de la serie menores que el número 100.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-expressions_hu8473ae5cdf472fd51dbd7b04958fec3d_20059_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Expresiones"><img src="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-expressions_hu8473ae5cdf472fd51dbd7b04958fec3d_20059_300x200_fit_box_3.png" width="300" height="187" alt="Expresiones" title="Expresiones"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-completion_hu84ffb55c3f34fd3a881938a61fb6728e_45958_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Asistencia de código"><img src="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-completion_hu84ffb55c3f34fd3a881938a61fb6728e_45958_300x200_fit_box_3.png" width="300" height="187" alt="Asistencia de código" title="Asistencia de código"  class="lozad "></a></p>
<figcaption>Expresiones y asistencia de código</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-methods_hu80347eb88bdb9a3c5ac7fae1de2c8c4a_34305_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Serie de Fibonacci con un Stream en un método"><img src="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-methods_hu80347eb88bdb9a3c5ac7fae1de2c8c4a_34305_300x200_fit_box_3.png" width="300" height="129" alt="Serie de Fibonacci con un Stream en un método" title="Serie de Fibonacci con un Stream en un método"  class="lozad "></a></p>
<figcaption>Serie de Fibonacci con un Stream en un método</figcaption>
</figure>
</div>
<p>Para diferenciar las expresiones de código de los comandos estos últimos son precedidos por el caracter <em>/</em>. Hay varios como los ya citados para listar los <em>snippets</em> de código y salir de <em>jshell</em>, otros son para listar las definiciones de variables con <code>/vars</code>, métodos con <code>/methods</code>, tipos con <code>/types</code> e <em>imports</em> con <code>/imports</code>. La lista completa de comandos puede obtenerse pulsando la tecla tabulador después de la barra de comando.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-commands_huf7dd9e64613ad7ff7eae2f90be6c431f_18353_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Comandos"><img src="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/images/jshell-commands_huf7dd9e64613ad7ff7eae2f90be6c431f_18353_300x200_fit_box_3.png" width="300" height="187" alt="Comandos" title="Comandos"  class="lozad "></a></p>
<figcaption>Comandos</figcaption>
</figure>
</div>
<p>Para los <em>snippets</em> multilínea o algo complejos puede utilizarse un editor externo con el comando <code>/edit</code>. El editor de nuestra preferencia se establece con el comando <code>/set</code>.</p>
<p>También se pueden <a href="https://docs.oracle.com/javase/9/jshell/external-code.htm">añadir módulos o librerías</a> para usar las clases y tipos que contengan con el comando <code>/env</code> y las opciones <code>\-\-add-modules</code>  <code>\-\-module-path</code> y <code>\-\-class-path</code>. Los <em>snippets</em> creados en una sesión pueden guardarse en un archivo con el comando <code>/save</code> y ser cargados al inicio de JShell o con el comando <code>/open</code>.</p>
<p>En la <a href="https://docs.oracle.com/javase/9/jshell/toc.htm">guía oficial de JShell</a> se comenta algunas opciones más de esta nueva herramienta.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.pluralsight.com/guides/getting-started-with-jshell-part-1">Getting Started with JShell</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/</id>
        <title>Novedades de Java 9, más allá de la modularidad</title>
        <updated>2017-10-07T12:15:00+02:00</updated>
        <published>2017-09-24T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>La modularidad introducida en Java 9 no es la única novedad incorporada en esta nueva versión. Aunque haya llegado a eclipsar al resto hay otra buena colección de mejoras que sin duda facilitarán la programación con uno de los lenguajes más empleados por los programadores aún después de más de 20 años.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>La última versión mayor de Java fue publicada en el año 2014, hace ya mucho tiempo para la época actual donde las cosas avanzan a un ritmo muy rápido. <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Java 8 introdujo en el lenguaje notables cambios</a> como las expresiones <em>lambda</em> dotándolo de capacidades funcionales y mayor expresividad en menos líneas de código junto con referencias a métodos e interfaces funcionales que permite crear implementaciones anónimas de interfaces con una <em>lambda</em>, se añaden los <em>streams</em> como nueva forma de iterar sobre las colecciones, interfaces con métodos por defecto o estáticos que aumentan la compatibilidad hacia atrás que siempre se le ha dado gran importancia en la plataforma o una nueva API para fechas que solventa las deficiencias de la anterior. Grandes cambios en el lenguaje tan importantes como los que supusieron Java 5.</p>
<p>Después de algunos aplazamientos principalmente por implementar la modularización de la forma correcta sin que en un futuro suponga un problema ha sido publicada en septiembre de 2017 la versión de Java 9. La característica más llamativa es <a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java2-los-modulos/">la modularización de la plataforma con Java 9</a> que supone grandes mejoras como una mejor encapsulación de los paquetes, interfaces entre módulos bien definidas y dependencias explícitas que proporcionan optimización al usarse sólo los módulos que se necesitan, mayor seguridad al ser menor la superficie de ataque y configuración confiable al comprobar las dependencias al compilar o iniciarse la máquina virtual.</p>
<div class="alert alert-warning tableofcontents">
    <h2>Contenido del artículo</h2>
    <toc></toc>
</div>
<p>### Introducción</p>
<p>Pero Java 9 además de los módulos incorpora en la plataforma otros cambios destacables. Esta no es una lista exhaustiva pero si contiene muchas de ellas.</p>
<ul>
<li><a href="https://docs.oracle.com/javase/9/index.html">Oracle JDK 9 Documentation</a></li>
<li><a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm">What’s New in Oracle JDK 9</a></li>
<li><a href="https://docs.oracle.com/javase/9/javase-docs.htm">Guías descargables con documentación del JDK 9</a></li>
<li><a href="https://www.oracle.com/java/java9-screencasts.html">Varios <em>screencasts</em> sobre varias de las novedades de Java 9</a></li>
<li><a href="http://www.javamagazine.mozaicreader.com/SeptOct2017/Twitter">Java Magazine Sep/Oct 2017</a></li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/tabla-novedades-java-9_hu2ddf17fa6573a8642c53fe506bc499ba_121170_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Tabla de novedades de Java 9"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/tabla-novedades-java-9_hu2ddf17fa6573a8642c53fe506bc499ba_121170_300x200_fit_q90_box.jpg" width="300" height="169" alt="Tabla de novedades de Java 9" title="Tabla de novedades de Java 9"  class="lozad "></a></p>
<figcaption>Tabla de novedades de Java 9</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/duke-java-9_hu5d585ce271f4e7b37c2971ec66b5e26b_86941_2560x1440_fit_box_3.png" width="250" height="250" alt="Duke Java 9" title="Duke Java 9"  class="lozad "></p>
</figure>
</div>
<h3 id="nuevas-características">Nuevas características</h3>
<h4 id="métodos-factoría-para-colecciones">Métodos factoría para colecciones</h4>
<p>Aún Java no incorpora en el lenguaje una forma de definir como literales elementos tan comunes como listas, conjuntos o mapas. Como alternativa se proporcionan métodos factoría estáticos para crear este tipo de estructuras de datos usando métodos por defecto en sus respectivas interfaces. Además, estos métodos crean colecciones inmutables.</p>
<p>Aparte de definir este tipo de colecciones de una forma mucho más sencilla que hasta Java 8, las colecciones además son significativamente más eficientes. En el caso de Java 8 un <em>Set</em> con dos elementos de capacidad 3 requiere un objeto <em>wrapper</em> para la colección inmodificable, 1 <em>HashSet</em>, 1 <em>HashMap</em>, 1 Object[] de longitud 3, 2 dos nodos uno para cada elemento requiriendo en total unos 152 bytes. En el caso de Set creado con Java 9 requiere solo 20 bytes que comparados con los 152 es una mejora significativa más al tener en cuenta que este tipo de estructuras de datos son utilizadas de forma numerosa en cualquier programa. Aún estando hablando de bytes multiplicado por cada uso en algunos casos la reducción de memoria puede ser apreciable.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Java 8&#10;</span><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">));</span>&#10;&#10;<span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableSet</span><span class="o">(</span><span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">)));</span>&#10;&#10;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="n">2</span><span class="o">);</span>&#10;<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="n">3</span><span class="o">);</span>&#10;<span class="n">map</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>&#10;&#10;<span class="c1">// Java 9&#10;</span><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>&#10; &#10;<span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">Set</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>&#10; &#10;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Collections.java</span>
    </div>
</div>
<div class="media">
<iframe src="https://players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582422289001" width="640" height="360" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h4 id="mejoras-en-la-clase-_optional_">Mejoras en la clase <em>Optional</em></h4>
<p>Los métodos <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#or-java.util.function.Supplier-">or()</a> y <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#ifPresentOrElse-java.util.function.Consumer-java.lang.Runnable-">ifPresentOrElse()</a> así como <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#stream--">stream()</a> mejoran la experiencia de uso en esta clase que contiene o no un objeto. El método <em>or()</em> en caso de no contener el <em>Optional</em> un objeto permite proporcionar un <em>Optional</em> alternativo. Los métodos <em>ifPresent()</em> y <em>ifPresentOrElse()</em> permiten realizar una acción con el objeto del opcional si está presente u otra acción con un valor vacío si no está presente. El método <em>stream()</em> convierte el <em>Optional</em> en un <em>stream</em> de cero o un elemento.</p>
<h4 id="mejoras-en-la-api-de-_streams_">Mejoras en la API de <em>streams</em></h4>
<p>Los nuevos métodos de los <em>streams</em> <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#dropWhile-java.util.function.Predicate-">dropWhile()</a>, <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#takeWhile-java.util.function.Predicate-">takeWhile()</a> permiten descartar o tomar elementos del <em>stream</em> mientras se comprueba una condición. El método <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#ofNullable-T-">ofNullable()</a> devuelve un <em>stream</em> de un elemento o vacío dependiendo de si el objeto es <em>null</em> o no. Los métodos <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.Predicate-java.util.function.UnaryOperator-">iterate()</a> permiten generar un secuencia de valores similar a un bucle <em>for</em>.</p>
<p>También se añaden varias interfaces para el uso de <em>reactive streams</em>.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/03/ejemplo-de-reactive-streams-en-java/">Ejemplo de Reactive Streams en Java</a></li>
</ul>
<h4 id="repl-con-jshell">REPL con jshell</h4>
<p>Otra de las características destacables es la incorporación de <a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/">la herramienta JShell</a> para evaluar código siguiendo el patrón <em>Read-Evaluate-Print-Loop</em> o REPL para hacer pruebas de código sin la necesidad de un IDE, una herramienta de construcción o toda la infraestructura de un proyecto. Esta herramienta es el comando <em>jshell</em>.</p>
<p>Se pueden introducir expresiones que son evaluadas y comandos precedidos por el caracter <em>/</em>. Soporta asistencia de código con la tecla tabulador.</p>
<ul>
<li><a href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm#JSHEL-GUID-630F27C8-1195-4989-9F6B-2C51D46F52C8">Guía de usuario de jshell</a></li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/jshell_huf72a8991b2bf5dc9536110a52c1ee560_29761_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="jshell"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/jshell_huf72a8991b2bf5dc9536110a52c1ee560_29761_300x200_fit_box_3.png" width="300" height="187" alt="jshell" title="jshell"  class="lozad "></a></p>
<figcaption>jshell</figcaption>
</figure>
</div>
<div class="media">
<iframe src="https://players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429016001" width="640" height="360" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h4 id="jlink-para-generar-_runtimes_-mínimos">jlink para generar <em>runtimes</em> mínimos</h4>
<p>Java 8 proporciona varios <em>runtimes</em> reducidos con los <em>compact profiles</em> que contienen algunas clases menos de las que incluye el JDK completo. Sin embargo, estos <em>runtimes</em> están preconfigurados y las aplicaciones deben optar por el que ofrezca todas las clases que necesita.</p>
<p>En Java 9 se proporciona <a href="http://openjdk.java.net/jeps/282">jlink</a> que un sustituto más capaz que los <em>compact profiles</em>. Permite generar <em>runtimes</em> aprovechando la nueva modularidad del JDK con únicamente los módulos que necesite la aplicación.</p>
<p>Esto es especialmente útil para los contenedores de <a href="https://www.docker.com/">Docker</a> y los entornos <em>cloud</em> ya que permite generar imágenes de contenedores con un tamaño significativamente menor. Por ejemplo, una imagen de Docker basada en la distribución <a href="https://www.alpinelinux.org/">Alpine Linux</a> con el JDK completo ocupa unos 360 MiB, con <em>jlink</em> si una aplicación solo necesita del módulo <em>java.base</em> se puede generar un <em>runtime</em> con únicamente ese módulo, con este <em>runtime</em> adaptado la imagen del contenedor tiene un tamaño mucho menor, en este caso de únicamente de unos 40 MiB.</p>
<div class="media">
<iframe src="https://players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582437011001" width="640" height="360" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h4 id="concurrencia">Concurrencia</h4>
<p>Se añade un <em>framework</em> con un conjunto de clases para programación reactiva de publicación-subscripción con las clases <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html">Flow</a>, <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html">Flow.Processor</a>, <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html">Flow.Subscriber</a>, <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html">Flow.Publisher</a> y <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html">Flow.Subscription</a>. La clase <em>Subsription</em> posee dos métodos: <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#cancel--">cancel()</a> y <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#request-long-">request()</a> para dejar de recibir mensajes y solicitar recibir <em>n</em> mensajes en la siguientes llamadas de <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html#onNext-T-">onNext​()</a>.</p>
<p>El método <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#copy--">copy()</a> de la clase <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html">CompletableFuture</a> permite obtener un copia completándose con el mismo valor cuando la operación se completa normalmente.</p>
<h4 id="variable-handles">Variable Handles</h4>
<p>Una de las justificaciones de la modularidad es el uso que hasta ahora se le ha dado a la famosa clase interna del JDK <em>sun.misc.Unsafe</em>. Para proporcionar parte de la funcionalidad de esta clase en una API pública se introduce la clase <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html">VarHandle</a> para referenciar a variables estáticas y no estáticas así como a <em>arrays</em>. Estas instancias se obtienen mediante la clase <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/MethodHandles.Lookup.html">MethodHandle.Lookup</a>. Una vez obtenida una instancia de <em>VarHandle</em> se pueden realizar operaciones de bajo nivel sobre la variable que referencia como operaciones atómicas comparar y establecer pero sin la sobrecarga de rendimiento con las clases equivalentes del paquete <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/atomic/package-summary.html">java.util.concurrent.atomic</a>.</p>
<p>Para la mayoría de los programadores esto no les afectará directamente pero sí será una mejora para los desarrolladores de librerías importantes muy populares que si usan la clase <em>Unsafe</em> y deberían aprovechar estas nuevas capacidades para dejar de usar la clase interna del JDK en la medida de lo posible.</p>
<h4 id="actualizaciones-en-la-api-para-procesos">Actualizaciones en la API para procesos</h4>
<p>Ahora es posible obtener el identificador del proceso o <em>pid</em> con el método <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#pid--">pid()</a> y los procesos hijos y descendientes con los métodos <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#children--">children​()</a> y <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#descendants--">descendants​()</a> respectivamente.</p>
<h4 id="stackwalker">StackWalker</h4>
<p>La clase <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html">StackWalker</a> permite obtener un <em>stream</em> secuencial de <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.StackFrame.html">StackWalker.StackFrames</a> del <em>thread</em> actual para procesar la pila de llamadas o <em>stacktrace</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">StackWalker</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">walk</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="n">5</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">()));</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>StackWalker.java</span>
    </div>
</div>
<h4 id="strings-compactos">Strings compactos</h4>
<p>Internamente los la clase <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/String.html">String</a> contiene un array de <em>char</em>, cada <em>char</em> se representa en formato con la codificación UTF-8 ocupando 16 bits o 2 bytes por cada caracter. Para cadenas en aquellos lenguajes como inglés los caracteres pueden ser representados usando un único <em>byte</em>.</p>
<p>Una buena parte de la memoria ocupada en la JVM por cualquier aplicación es debido a las cadenas de modo que tiene sentido compactar aquellas cadenas en las que sea posible representándolas con un único <em>byte</em> por caracter.</p>
<p>Lo mejor de todo es que esta optimización será transparente para los programadores y para las aplicaciones proporcionando una reducción en el uso de la memoria y aumento del rendimiento, también en el recolector de basura.</p>
<ul>
<li><a href="https://www.javagists.com/compact-strings-java-9">Compact Strings In Java 9</a></li>
</ul>
<h4 id="recolector-de-basura-g1-por-defecto">Recolector de basura G1 por defecto</h4>
<p>Se cambia el recolector de basura por defecto al llamado <em>G1</em> optimizado para una balance adecuado entre alto rendimiento y baja latencia. En los siguientes artículos se explica de forma más detallada. Al igual que los <em>string</em> compactos para la mayoría de los programadores será un cambio transparente que no tenga repercusión en la forma de programar las aplicaciones.</p>
<ul>
<li><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">Getting Started with the G1 Garbage Collector</a></li>
<li><a href="https://www.infoq.com/articles/Make-G1-Default-Garbage-Collector-in-Java-9">Case for Defaulting to G1 Garbage Collector in Java 9</a></li>
</ul>
<div class="media">
<iframe src="https://players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582428191001" width="640" height="360" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<h4 id="identificador-para-variables-_">Identificador para variables _</h4>
<p>El identificador <em>_</em> queda reservado para en un futuro usarlo en parámetros a los que no se les dé un uso y no sean relevantes como por ejemplo en las <em>lambdas</em>. También se evaluará en el <a href="http://openjdk.java.net/projects/amber/">proyecto Amber</a> usar este identificador para tipos diamante parciales como <em>Foo&lt;String, _&gt;</em> o en referencias a métodos <em>foo.&lt;String, _&gt;bar()</em>.</p>
<ul>
<li><a href="http://blog.takipi.com/project-amber-the-future-of-java-exposed/">Project Amber: The Future of Java Exposed</a></li>
</ul>
<h4 id="métodos-privados-en-interfaces">Métodos privados en interfaces</h4>
<p>Ahora se pueden crear métodos privados en interfaces como utilidad a las implementaciones de los métodos por defecto.</p>
<h4 id="mejor-_try-with-resource_">Mejor <em>try-with-resource</em></h4>
<p>Ahora las variables finales o efectivamente finales pueden ser colocadas en los bloques <em>try-with-resource</em> simplificando  algunos usos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">// A final resource&#10;</span><span class="c1"></span><span class="kd">final</span> <span class="n">Resource</span> <span class="n">resource1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">(</span><span class="s">&#34;resource1&#34;</span><span class="o">);</span>&#10;<span class="c1">// An effectively final resource&#10;</span><span class="c1"></span><span class="n">Resource</span> <span class="n">resource2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">(</span><span class="s">&#34;resource2&#34;</span><span class="o">);</span>&#10;&#10;<span class="c1">// Java 7, 8&#10;</span><span class="c1"></span><span class="k">try</span> <span class="o">(</span><span class="n">Resource</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">resource1</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">Resource</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">resource2</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span>&#10;&#10;<span class="c1">// New and improved try-with-resources statement in Java SE 9&#10;</span><span class="c1"></span><span class="k">try</span> <span class="o">(</span><span class="n">resource1</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">resource2</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TryWithResources.java</span>
    </div>
</div>
<h4 id="javadoc">Javadoc</h4>
<p>Ahora la documentación Javadoc se genera con marcado de HTML 5 e incluye un cuadro de búsqueda para encontrar más fácilmente tipos y métodos.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/javadoc_hu32f7ef0ead62f1ee7b4492db39ae0b1a_139775_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/images/javadoc_hu32f7ef0ead62f1ee7b4492db39ae0b1a_139775_300x200_fit_box_3.png" width="300" height="137" alt="Javadoc" title="Javadoc"  class="lozad "></a></p>
<figcaption>Javadoc</figcaption>
</figure>
</div>
<h4 id="archivos-jar-multiversión">Archivos Jar multiversión</h4>
<p>Los desarrolladores de librerías para dar soporte a varias versiones de Java debían optar entre generar un artefacto para cada versión o un único archivo <em>jar</em> limitándose a usar la mínima versión soportada y sin aprovechar las nuevas capacidades de siguientes versiones. Esto es un impedimento para el uso de nuevas versiones.</p>
<p>Con Java 9 se puede generar un único archivo <em>jar</em> con algunas clases para una o varias versiones de Java. Por ejemplo, en un archivo <em>jar</em> con las clases <em>A</em>, <em>B</em>, <em>C</em> y <em>D</em> compatibles con Java 6 el desarrollador ahora puede decidir que para la versión 9 la clase <em>A</em> y <em>B</em> sean unas optimizadas para esta versión. Esto se consigue con una estructura específica de directorios en el archivo <em>jar</em>, ubicándose la clase optimizada para Java 9 <em>A</em> en <em>META-INF/versions/9/A.class</em> y para Java 10 en <em>META-INF/versions/10/A.class</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">jar root&#10;  - A.class&#10;  - B.class&#10;  - C.class&#10;  - D.class&#10;  - META-INF&#10;&nbsp;&nbsp;&nbsp;&nbsp; - versions&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 9&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   - A.class&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   - B.class&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 10&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   - A.class</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Multirelease.out</span>
    </div>
</div>
<ul>
<li><a href="http://openjdk.java.net/jeps/238">JEP 238: Multi-Release JAR Files</a></li>
</ul>
<h3 id="nuevo-modelo-de-publicación">Nuevo modelo de publicación</h3>
<p>A partir de la publicación de Java 9 se cambia el modelo de publicación de nuevas versiones optando por una basada en calendario en vez de una por características a incluir. El caso de versiones que han de incluir las características previstas ocasiona el problema que si una se retrasa provoca un retraso en la versión. Con el modelo basado en fechas fijas preestablecidas la versión se liberará con aquellas características que estén listas en la fecha planificada de publicación sin ser retrasadas por aquellas que no.</p>
<p>Se ha optado por producir una nueva versión cada seis meses con el <a href="https://openjdk.java.net/">OpenJDK</a> y <a href="https://www.gnu.org/licenses/gpl.html">licencia GPL</a> para satisfacer las necesidades de los desarrolladores y una versión con soporte de largo plazo cada tres años para satisfacer las necesidades de tiempo de soporte prolongado de las empresas, <em>Oracle JDK</em>.</p>
<div class="media">
<iframe src="https://players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582439790001" width="640" height="360" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>Para finalizar un par de libros, <a href="http://amzn.to/2g0qu6t">Java 9 Revealed</a> y <a href="http://amzn.to/2fY3wwT">Java 9 Modularity Revealed</a> que explican detalladamente las novedades de la modularidad, las novedades incluídas en este artículo y algunas otras más.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484225910&amp;linkId=9c7874501bb32fa3318e285022e0207a" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484227123&amp;linkId=59d96101c25f9c16c4427b8ee9daef1a" title="Amazon" class="lozad"></iframe>
</div>
<p>Y unos buenos vídeos sobre las nuevas características de Java 9, uno en español y otro en inglés.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/CkmB86pCV6A" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/9EiLRD95zDg" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://zeroturnaround.com/rebellabs/the-best-java-9-language-and-api-improvements/">The best Java 9 Language and API improvements</a></li>
<li><a href="https://jaxenter.com/new-features-in-java-9-137344.html">New Java 9 features at a glance</a></li>
<li><a href="http://amzn.to/2ylsidI">Modern Java Recipes</a></li>
<li><a href="https://dzone.com/articles/try-with-resources-enhancement-in-java-9">Try-With-Resource Enhancements in Java 9</a></li>
<li><a href="http://www.javamagazine.mozaicreader.com/JulyAug2017/Twitter">Revista Java Magazine Jul/Aug 2017</a></li>
<li><a href="https://dzone.com/articles/java-9-and-intellij-idea">Java 9 and IntelliJ IDEA</a></li>
<li><a href="https://www.autentia.com/2017/09/13/java-9-mas-alla-de-la-modularidad/">Java 9 más allá de la modularidad</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/">JShell la herramienta REPL incorporada en Java 9</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/</id>
        <title>Novedades y nuevas características de Java 9, los módulos</title>
        <updated>2019-07-07T12:00:00+02:00</updated>
        <published>2017-09-23T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Si en Java 8 la característica más destacada fue la incorporación al lenguaje de las <em>lambdas</em> y los <em>streams</em> en Java 9 la característica que más destaca es la definición de los módulos que proporciona varios importantes beneficios.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Después de unos cuantos aplazamientos de fechas finalmente ha sido publicado el 21 de septiembre de 2017 la <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">versión 9 del lenguaje y plataforma Java</a>, tres años después de las también importantes <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">novedades y nuevas características de Java 8</a>. Al mismo tiempo se ha publicado versión de <a href="https://www.oracle.com/technetwork/java/javaee/downloads/index.html">Java EE 8</a>.</p>
<p>La incorporación de los módulos a la plataforma con Java 9 es una de las modificaciones más importantes en esta versión mayor del lenguaje. Aún siendo una de las características más destacadas y que ha eclipsado a otras modificaciones más allá de los módulos también importantes.</p>
<ul>
<li><a href="https://docs.oracle.com/javase/9/index.html">Oracle JDK 9 Documentation</a></li>
<li><a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm">What’s New in Oracle JDK 9</a></li>
<li><a href="https://docs.oracle.com/javase/9/javase-docs.htm">Guías descargables con documentación del JDK 9</a></li>
<li><a href="https://www.oracle.com/java/java9-screencasts.html">Varios <em>screencasts</em> sobre varias de las novedades de Java 9</a></li>
<li><a href="http://www.javamagazine.mozaicreader.com/SeptOct2017/Twitter">Java Magazine Sep/Oct 2017</a></li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/tabla-novedades-java-9_hu2ddf17fa6573a8642c53fe506bc499ba_121170_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Tabla de novedades de Java 9"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/tabla-novedades-java-9_hu2ddf17fa6573a8642c53fe506bc499ba_121170_300x200_fit_q90_box.jpg" width="300" height="169" alt="Tabla de novedades de Java 9" title="Tabla de novedades de Java 9"  class="lozad "></a></p>
<figcaption>Tabla de novedades de Java 9</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/duke-java-9_hu5d585ce271f4e7b37c2971ec66b5e26b_86941_2560x1440_fit_box_3.png" width="250" height="250" alt="Duke Java 9" title="Duke Java 9"  class="lozad "></p>
</figure>
</div>
<p>Los módulos van a mejorar una de las deficiencias existentes en la visibilidad de las clases entre paquetes. Los módulos de Java proporcionan una mayor encapsulación de las clases contenidas en un paquete y las librerías. Esta encapsulación evita que una aplicación u otra librería haga uso y dependa de clases y paquetes de los que no debería lo que mejora la compatibilidad con versiones futuras. Los desarrolladores de una librería con los módulos ahora tienen un mayor control de los paquetes que expone una librería y que forma parte de su API pública. Con lo que se evita casos que se han dado hasta ahora como que librerías y programas dependan de clases internas en la API de Java como <em>sun.misc.BASE64Encoder</em> o la famosa <em>sun.misc.Unsafe</em>, para la primera en Java se añadió un reemplazo con <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Base64.html">java.util.Base64</a>, para la segunda con Java 9 para parte de su funcionalidad se ha añadido algunas nuevas clases.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-version_hue819bab3f59c5b62c4b69e0ba1a5a1c7_29139_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Java 9"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-version_hue819bab3f59c5b62c4b69e0ba1a5a1c7_29139_300x200_fit_box_3.png" width="300" height="193" alt="Java 9" title="Java 9"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/jshell_huf72a8991b2bf5dc9536110a52c1ee560_29761_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="JShell"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/jshell_huf72a8991b2bf5dc9536110a52c1ee560_29761_300x200_fit_box_3.png" width="300" height="187" alt="JShell" title="JShell"  class="lozad "></a></p>
<figcaption>Java 9 y JShell</figcaption>
</figure>
</div>
<p>Los módulos proporcionan:</p>
<ul>
<li>Encapsulación fuerte: se diferencia entre que es la API pública y usable y la parte privada a la que impide su uso accidental y acoplamiento indeseado entre módulos. La parte privada está encapsulado y de esta forma puede modificarse libremente con la seguridad de no afectar a los usuarios del módulo.</li>
<li>Interfaces bien definidas: el código no encapsulado forma parte de la API del módulo, dado que otros módulos pueden usar esta API pública hay que tener especial cuidado al modificarlo al introducir cambios que sean incompatibles. Los módulos deben exportar una API bien definida y estable.</li>
<li>Dependencias explícitas: los módulos necesitan a menudo otros módulos, estas dependencias son parte de la definición del módulo. Las dependencias explícitas forman un grafo que es importante conocer para entender las necesidades de una aplicación y para ejecutarla con todas sus dependencias.</li>
</ul>
<p>Los beneficios son:</p>
<ul>
<li>Configuración confiable: el sistema de módulos comprueba si una combinación de módulos satisface todas las dependencias antes de compilar o ejecutar una aplicación.</li>
<li>Encapsulación fuerte: se evitan dependencias sobre detalles internos de implementación.</li>
<li>Desarrollo escalable: se crean límites entre el equipo que desarrolla un módulo y el que lo usa.</li>
<li>Optimización: dado que el sistema de módulos sabe que módulos necesita cada uno solo se consideran los necesarios mejorándose tiempos de inicio y memoria consumida.</li>
<li>Seguridad: la encapsulación y optimización limita la superficie de ataque.</li>
</ul>
<p>La modularización afecta al diseño, compilación, empaquetado y despliegue es mucho más que una nueva característica del lenguaje. Los módulos son artefactos con su propia entidad que contienen código y metadatos para describir el módulo y como se relaciona con otros módulos.</p>
<p>Hasta ahora se seguía una convención de poner clases en paquetes de nombre <em>.impl</em> o <em>.internal</em> pero realmente la gente seguía usando esas clases porque simplemente se podía. No había ninguna forma de ocultar las implementaciones de esos paquetes más allá del los modificadores de accesibilidad <em>protected</em> y <em>private</em> que no son satisfactorios para ocultar las implementaciones.</p>
<p>Java desde sus inicios ha hecho un buen trabajo en la definición de interfaces usando la palabra reservada <em>interface</em>. En el apartado de dependencias es donde había deficiencias. Sí, hay sentencias <em>import</em> explícitas pero desafortunadamente son únicamente para el tiempo de compilación.</p>
<p>En tiempo ejecución no hay ninguna noción de archivos JAR o agrupación lógica. En el <em>classpath</em> todas las clases son puestas en una lista plana. Cuando la JVM carga una clase la encuentra recorriendo esa lista en orden secuencial, tan pronto como la clase es encontrada la búsqueda finaliza y la clase es cargada. Si la clase no se encuentra se obtiene una excepción en tiempo de ejecución y dado que las clases son cargadas bajo demanda en el momento de uso esa excepción potencialmente puede ser lanzada en un momento posterior de haber iniciado la aplicación. La JVM no puede verificar eficientemente la corrección del <em>classpath</em> en el inicio o si se debería añadir otra librería <em>jar</em>. Otros problemas insidiosos suceden cuando hay clases duplicadas en el <em>classpath</em> por versiones diferentes de una misma librería.</p>
<p>Antes del sistema de módulos de Java la librería de tiempo de ejecución consistía en un gran archivo <em>rt.jar</em> con un tamaño de más de 60 MiB. Este archivo contiene la mayor parte de clases de la plataforma en forma de monolito. Para conseguir mayor flexibilidad y ser una plataforma de futuro se decidió modularizar el JDK.</p>
<p>Eliminar algunas tecnologías en desuso del JDK no era una opción viable. La compatibilidad hacia atrás es uno de los principios más importantes para Java que guían su desarrollo. Eliminar estas APIs rompería esta compatibilidad hacia atrás, a pesar de que afectaría a un pequeño porcentaje de usuarios todavía hay una buena cantidad de gente usando tecnologías como CORBA.</p>
<p>Descomponer el JDK en módulos ha sido un trabajo inmenso. Con más de 20 años de código heredado acumulados separar una enmarañada y grande base de código conteniendo cientos de clases en módulos bien definidos con límites claros mientras se mantiene la compatibilidad hacia atrás. Esto toma tiempo siendo el motivo de tomar tanto tiempo el incorporar un sistema de módulos en Java. Pero en el futuro este esfuerzo será recompensado en términos de velocidad de desarrollo y aumento de flexibilidad para el JDK.</p>
<p>Con el tiempo las dependencias entre los propios paquetes y clases de la API de Java estaba enmarañada, con Java 9 las dependencias entre paquetes se ha simplificado en gran medida.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-8-modules_hu4992ef986cd9b9e1305bcb4a37b17bac_440739_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Módulos de Java 8"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-8-modules_hu4992ef986cd9b9e1305bcb4a37b17bac_440739_300x200_fit_q90_box.jpg" width="300" height="154" alt="Módulos de Java 8" title="Módulos de Java 8"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-9-modules_hufe1284f4f1abd8a524e0328955d3ac3d_83888_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Módulos de Java 9"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-9-modules_hufe1284f4f1abd8a524e0328955d3ac3d_83888_300x200_fit_q90_box.jpg" width="300" height="154" alt="Módulos de Java 9" title="Módulos de Java 9"  class="lozad "></a></p>
<figcaption>Módulos de Java 8 y Java 9</figcaption>
</figure>
</div>
<p>El entorno de ejecución de Java y el compilador conocen exactamente ahora que módulo resolver al buscar los tipos para un paquete dado. Previamente la única forma de obtener un tipo arbitrario era hacer una búsqueda en todo el <em>classpath</em>. Por ejemplo, dos módulos con el mismo nombre producen un error en inicio de la aplicación, en vez de en tiempo de ejecución.</p>
<p>Los módulos permiten definir a cada librería los paquetes de clases que exporta como su API accesible por otra librería o programa que la requiera. Además, cada librería debe al mismo tiempo definir qué paquetes requiere. Las exportaciones y requerimientos permiten ahora detectar al iniciar la máquina virtual si el grafo de dependencias está completo cosa que antes se producía en un mayor número de casos en tiempo de ejecución posiblemente con la excepción <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/NoClassDefFoundError.html">NoClassDefFound</a>. Una de los efectos que se mejoran en Java y que ya es una característica a la que se le da mucha importancia es la compatibilidad hacia atrás y también la encapsulación ya que los desarrolladores de las librerías tienen mayor control de que paquetes se permite su uso evitando dependencias no deseadas que impidan en un futuro que aplicaciones que hipotéticamente las usasen dejasen de ser compatibles con nuevas versiones.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ java --list-modules&#10;java.activation@9&#10;java.base@9&#10;java.compiler@9&#10;java.corba@9&#10;java.datatransfer@9&#10;java.desktop@9&#10;java.instrument@9&#10;java.logging@9&#10;java.management@9&#10;java.management.rmi@9&#10;java.naming@9&#10;java.prefs@9&#10;java.rmi@9&#10;java.scripting@9&#10;java.se@9&#10;java.se.ee@9&#10;java.security.jgss@9&#10;java.security.sasl@9&#10;java.smartcardio@9&#10;java.sql@9&#10;java.sql.rowset@9&#10;java.transaction@9&#10;java.xml@9&#10;java.xml.bind@9&#10;java.xml.crypto@9&#10;java.xml.ws@9&#10;java.xml.ws.annotation@9&#10;jdk.accessibility@9&#10;jdk.attach@9&#10;jdk.charsets@9&#10;jdk.compiler@9&#10;jdk.crypto.cryptoki@9&#10;jdk.crypto.ec@9&#10;jdk.dynalink@9&#10;jdk.editpad@9&#10;jdk.hotspot.agent@9&#10;jdk.httpserver@9&#10;jdk.incubator.httpclient@9&#10;jdk.internal.ed@9&#10;jdk.internal.jvmstat@9&#10;jdk.internal.le@9&#10;jdk.internal.opt@9&#10;jdk.internal.vm.ci@9&#10;jdk.jartool@9&#10;jdk.javadoc@9&#10;jdk.jcmd@9&#10;jdk.jconsole@9&#10;jdk.jdeps@9&#10;jdk.jdi@9&#10;jdk.jdwp.agent@9&#10;jdk.jlink@9&#10;jdk.jshell@9&#10;jdk.jsobject@9&#10;jdk.jstatd@9&#10;jdk.localedata@9&#10;jdk.management@9&#10;jdk.management.agent@9&#10;jdk.naming.dns@9&#10;jdk.naming.rmi@9&#10;jdk.net@9&#10;jdk.pack@9&#10;jdk.policytool@9&#10;jdk.rmic@9&#10;jdk.scripting.nashorn@9&#10;jdk.scripting.nashorn.shell@9&#10;jdk.sctp@9&#10;jdk.security.auth@9&#10;jdk.security.jgss@9&#10;jdk.unsupported@9&#10;jdk.xml.bind@9&#10;jdk.xml.dom@9&#10;jdk.xml.ws@9&#10;jdk.zipfs@9</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>java-list-modules.sh</span>
    </div>
</div>
<p>La definición de un módulo se realiza con un nuevo archivo de código fuente de nombre <em>module-info.java</em>. Con la palabra reservada <em>requires</em> y una línea por paquete se definen qué paquetes requiere el módulo, con la palabra reservada <em>exports</em> se define que paquetes del módulo se exportan y son visibles por algún otro módulo que lo requiera. También se han añadido las palabras reservadas <em>provides</em> y <em>uses</em> para proporcionar y usar definiciones de servicios que con anterioridad se realizaba en archivos ubicados en <em>META-INF/services</em> como muestro en el ejemplo <a href="https://picodotdev.github.io/blog-bitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader/">Aplicación Java extensible con la clase ServiceLoader</a>. También se puede hacer que la directiva <em>requires</em> sea de forma transitiva para que el módulo que lo use pueda usar ese paquete sin requerirlo de forma explícita, la directiva <em>opens</em> permite hacer uso de reflectividad usando el método <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/reflect/AccessibleObject.html">setAccesible</a>.</p>
<p>Dado que la transición hacia el uso de los módulos puede generar problemas de compatibilidad con aplicaciones existentes se han añadido algunos parámetros para la máquina virtual en el comando <em>java</em> e incluso en el caso más grave desactivar completamente el sistema de módulos, aunque lógicamente esto está desaconsejado. En la <a href="https://docs.oracle.com/javase/9/migrate/toc.htm">guía de migración a Java 9</a> están detallados los aspectos a tener en cuenta en la migración de una versión anterior a Java 9.</p>
<p>Este es el típico ejemplo <em>Hola Mundo</em> con Java 9 en que que muestro como compilar un programa usando los módulos y como ejecutarlo directamente desde la linea de comandos. En el código de la clase <em>Main</em> no hay ningún cambio respecto al que sería con una versión anterior de Java sin embargo se añade el nuevo archivo de código fuente <em>module-info.java</em> donde se definen sus dependencias que este programa no tiene salvo la implícita sobre el módulo <em>java.base</em>. Los comandos para compilar y ejecutar el ejemplo directamente con los comandos <em>javac</em> y <em>java</em> si cambian, ahora se usa en vez de <em>classpath</em> la opción <em>module-path</em> y se indica la clase del módulo que contiene el método <em>main</em> del programa, <a href="https://picodotdev.github.io/blog-bitix/2019/01/comandos-para-compilar-codigo-fuente-y-ejecutar-programas-java/">comparar con un ejemplo en Java 8 o anteriores versiones</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.java9.helloworld</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Java 9 World!&#34;</span><span class="o">);</span>&#10;   <span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">module</span> <span class="n">helloworld</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//requires java.base;&#10;</span><span class="c1"></span><span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>module-info.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/usr/bin/env bash&#10;</span><span class="cp"></span>javac -d build src/helloworld/module-info.java src/helloworld/io/github/picodotdev/blogbitix/java9/helloworld/Main.java&#10;java --module-path build --module helloworld/io.github.picodotdev.blogbitix.java9.helloworld.Main</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>java.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-9-helloworld_hu17f6cdaf9ef2474a11b1dd4682233de4_18979_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Hola Mundo con Java 9"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/java-9-helloworld_hu17f6cdaf9ef2474a11b1dd4682233de4_18979_300x200_fit_box_3.png" width="300" height="193" alt="Hola Mundo con Java 9" title="Hola Mundo con Java 9"  class="lozad "></a></p>
<figcaption>Hola Mundo con Java 9</figcaption>
</figure>
</div>
<p>El comando <em>jdeps</em> muestra las dependencias de los módulos muy útil para tareas de análisis o depuración.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/jdeps_hu86a35386c64afee888e71c15e0f86fb0_37004_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Dependencias del ejemplo Hola Mundo con Java 9"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/jdeps_hu86a35386c64afee888e71c15e0f86fb0_37004_300x200_fit_box_3.png" width="300" height="51" alt="Dependencias del ejemplo Hola Mundo con Java 9" title="Dependencias del ejemplo Hola Mundo con Java 9"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/jdeps-java-sql_hu70714e6477317676e10d651084513725_94502_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Dependencias del módulo java.sql"><img src="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/images/jdeps-java-sql_hu70714e6477317676e10d651084513725_94502_300x200_fit_box_3.png" width="300" height="198" alt="Dependencias del módulo java.sql" title="Dependencias del módulo java.sql"  class="lozad "></a></p>
<figcaption>Análisis de dependencias con jdeps</figcaption>
</figure>
</div>
<p>Con el objetivo de mantener la compatibilidad en la mayor medida posible con las librerías existentes y una transición progresiva de un sistema sin módulos a uno con módulos <a href="https://picodotdev.github.io/blog-bitix/2019/07/los-tipos-de-modulos-de-jmps-anadidos-a-partir-de-java-9/">la plataforma de módulos de Java define varios tipos de módulos</a>, los módulos con nombre, los automáticos y el módulo anónimo. Para profundizar más en los detalles de la modularidad y el resto de novedades de Java 9 están los libros <a href="http://amzn.to/2g0qu6t">Java 9 Revealed</a> y <a href="http://amzn.to/2fY3wwT">Java 9 Modularity Revealed</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484225910&amp;linkId=9c7874501bb32fa3318e285022e0207a" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484227123&amp;linkId=59d96101c25f9c16c4427b8ee9daef1a" title="Amazon" class="lozad"></iframe>
</div>
<p>Para finalizar este artículo incluyo un vídeo sobre los módulos que comenta los aspectos más destacados. Hay <a href="https://www.oracle.com/java/java9-screencasts.html">otros vídeos sobre las novedades de Java 9</a> de no más de 15 minutos cada uno.</p>
<div class="media">
<iframe src="https://players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429007001" width="640" height="360" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJava9">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./java.sh</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://dzone.com/articles/java-9-its-heeeere">Java 9: It’s Heeeere</a></li>
<li><a href="https://docs.oracle.com/javase/9/migrate/toc.htm">Java Platform, Standard Edition Oracle JDK 9 Migration Guide</a></li>
<li><a href="https://jaxenter.com/java-9-modules-jpms-basics-135885.html">Java 9 modules – JPMS basics</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/">JShell la herramienta REPL incorporada en Java 9</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/03/la-herramienta-jlink-para-generar-runtimes-de-java-incluyendo-exclusivamente-los-modulos-que-usa-una-aplicacion/">La herramienta jlink para generar runtimes de Java incluyendo exclusivamente los módulos que usa una aplicación</a></li>
<li><a href="https://blog.codefx.org/java/java-9-tutorial/">Code First Java 9 Tutorial</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/</id>
        <title>Cambiar y personalizar los estilos de la documentación Javadoc</title>
        <updated>2017-09-16T22:00:00+02:00</updated>
        <published>2017-09-16T22:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>La documentación generada por <a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/">la herramienta Javadoc</a> se puede adaptar a las necesidades propias ya que tiene mecanismos para extenderla. <a href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/">Crear un <em>taglet</em> propio</a> es una forma pero también se pueden modificar los estilos aplicados al HTML generado, por ejemplo, para adaptar el Javadoc a los colores de la organización o para incluir un logotipo en la cabecera o un texto en el pie de página.</p>
<p>El comando <em>javadoc</em> con el que se genera la documentación posee opciones para modificar la cabecera, el pie de página o usar una hoja de estilos propia. Estas opciones son  <em>-header</em>, <em>-footer</em> y <em>-stylesheetfile</em>. Un punto de partida para modificar los estilos es usar la hoja de estilos generada por defecto, realizar en ella las modificaciones oportunas y finalmente indicar que se use con el opción <em>-stylesheetfile</em>.</p>
<p>En el caso de este ejemplo en vez de usar el color azul por defecto he modificado la hoja de estilos para que sea uno verde. En los cambios he partido de la hoja de estilos original del <em>javadoc</em> e inspeccionando los elementos con las herramientas del navegador para sustituir sus colores por otros de una paleta de colores basada en el verde en la que cambia la tonalidad de color hacia más claro. También se puede modificar la cabecera y el pie de página para incluir una nota con un mensaje de derechos de autor o un enlace y añadir nuevos estilos para el <em>taglet</em> <em>todo</em>.</p>
<div style="float: left; width: 50px; height: 50px; background: rgb(96, 177, 79);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(116, 197, 99);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(136, 217, 119);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(156, 237, 139);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(176, 255, 159);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(196, 255, 179);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(216, 255, 199);"></div>
<div style="float: left; width: 50px; height: 50px; background: rgb(236, 255, 219);"></div>
<div style="clear: both;"></div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-CSS" data-lang="CSS"><span class="p">.</span><span class="nc">todoLabel</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-size</span><span class="p">:</span> <span class="mi">12</span><span class="kt">px</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-weight</span><span class="p">:</span> <span class="kc">bold</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;&#10;<span class="nt">ul</span><span class="p">.</span><span class="nc">todo</span> <span class="nt">li</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-size</span><span class="p">:</span> <span class="mi">14</span><span class="kt">px</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-family</span><span class="p">:</span> <span class="s1">&#39;DejaVu Serif&#39;</span><span class="p">,</span> <span class="n">Georgia</span><span class="p">,</span> <span class="s2">&#34;Times New Roman&#34;</span><span class="p">,</span> <span class="n">Times</span><span class="p">,</span> <span class="kc">serif</span><span class="p">;</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>stylesheet.css</span>
    </div>
</div>
<p>La <a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html">tarea de Gradle para generar la documentación Javadoc</a> posee <a href="https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html">opciones</a> equivalentes al comando <em>javadoc</em>, unas de ellas como ejemplo son <em>footer</em> y <em>bottom</em> que añaden un texto en en el pie de página de cada página.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;&#10;<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;<span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javadoc.Main&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s2">&#34;/usr/lib/jvm/default/lib/tools.jar&#34;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">javadoc</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">charSet</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">tagletPath</span> <span class="o">=</span> <span class="o">[</span><span class="k">new</span> <span class="n">File</span> <span class="o">(</span><span class="s1">&#39;build/classes/java/main/&#39;</span><span class="o">)]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">taglets</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;io.github.picodotdev.blogbitix.javadoc.TodoTaglet&#39;</span><span class="o">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">stylesheetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s1">&#39;src/main/resources/stylesheet.css&#39;</span><span class="o">)</span>&#10;	<span class="c1">//options.footer = &#34;Copyleft © 2017 Blog Bitix&#34;&#10;</span><span class="c1"></span>	<span class="c1">//options.bottom = &#34;Copyleft © 2017 Blog Bitix&#34;&#10;</span><span class="c1"></span><span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">javadocZip</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependsOn</span> <span class="n">javadoc</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classifier</span> <span class="s1">&#39;javadoc&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="s1">&#39;build/docs/javadoc/&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">artifacts</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">archives</span> <span class="n">javadocZip</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-1_hu04469e726b2e07d610dde160caf01b4e_35856_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estilos personalizados de la documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-1_hu04469e726b2e07d610dde160caf01b4e_35856_300x200_fit_box_3.png" width="300" height="137" alt="Estilos personalizados de la documentación Javadoc" title="Estilos personalizados de la documentación Javadoc"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-2_huc397fab49cadc6a895f3237f50636432_57343_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estilos personalizados de la documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-2_huc397fab49cadc6a895f3237f50636432_57343_300x200_fit_box_3.png" width="300" height="137" alt="Estilos personalizados de la documentación Javadoc" title="Estilos personalizados de la documentación Javadoc"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-3_hu11ff17c52c30725c9c0df63aca6eed63_103308_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estilos personalizados de la documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-3_hu11ff17c52c30725c9c0df63aca6eed63_103308_300x200_fit_box_3.png" width="217" height="200" alt="Estilos personalizados de la documentación Javadoc" title="Estilos personalizados de la documentación Javadoc"  class="lozad "></a></p>
<figcaption>Estilos personalizados de la documentación Javadoc</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-jdk-1_hu259f2f4eba6ece03e48dcac6c8f0878c_129668_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estilos por defecto de la documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-jdk-1_hu259f2f4eba6ece03e48dcac6c8f0878c_129668_300x200_fit_box_3.png" width="300" height="137" alt="Estilos por defecto de la documentación Javadoc" title="Estilos por defecto de la documentación Javadoc"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-jdk-2_hu0fee14229827f570f8501fcbbe02793d_111486_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Estilos por defecto de la documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/images/javadoc-jdk-2_hu0fee14229827f570f8501fcbbe02793d_111486_300x200_fit_box_3.png" width="300" height="137" alt="Estilos por defecto de la documentación Javadoc" title="Estilos por defecto de la documentación Javadoc"  class="lozad "></a></p>
<figcaption>Estilos por defecto de la documentación Javadoc</figcaption>
</figure>
</div>
<p>El comando <em>javadoc</em> tiene una buena cantidad de opciones, con la opción <em>-help</em> se obtiene una listado y descripción de cada una de ellas. Dependiendo del destinatario de la documentación, se pueden limitar las clases que son incluidas en el Javadoc si por ejemplo solo se quiere ofrecer la documentación de la parte pública.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ javadoc -help&#10;...&#10;-public&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	Show only public classes and members&#10;-protected&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   	Show protected/public classes and members <span class="o">(</span>default<span class="o">)</span>&#10;-package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 	Show package/protected/public classes and members&#10;-private&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 	Show all classes and members&#10;...&#10;-doctitle &lt;html-code&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	Include title <span class="k">for</span> the overview page&#10;-header &lt;html-code&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	Include header text <span class="k">for</span> each page&#10;-footer &lt;html-code&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	Include footer text <span class="k">for</span> each page&#10;-top	&lt;html-code&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	  Include top text <span class="k">for</span> each page&#10;-bottom &lt;html-code&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	Include bottom text <span class="k">for</span> each page&#10;-linksource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	Generate <span class="nb">source</span> in HTML&#10;-stylesheetfile &lt;path&gt;&nbsp;&nbsp;&nbsp;&nbsp;   	 File to change style of the generated documentation&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>javadoc-help.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew javadoc</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">Documentacion Javadoc del JDK</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/</id>
        <title>Crear anotaciones de Javadoc personalizadas con taglets</title>
        <updated>2017-09-16T10:00:00+02:00</updated>
        <published>2017-09-16T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p><a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/">La herramienta de documentación es Javadoc de Java</a> permite a partir del código fuente de un programa o librería generar un conjunto de documentos en formato HTML enlazados entre si consultables con un navegador web y accesibles desde internet si son accesibles con un servidor web. La documentación se genera a partir de las clases y métodos del código fuente y también a partir de los comentarios de las clases y métodos.</p>
<p>En los comentarios se pueden incluir anotaciones que enriquecen la documentación, por ejemplo, para indicar el autor o en qué versión se incluyó una clase o método, incluir enlaces, &hellip; en el propio JDK ya se incluye un amplio <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags">conjunto completo de anotaciones</a>. Pero además de usar las anotaciones ya incorporados por defecto en la herramienta también es posible añadir nuevos propios, escribiendo un <em>taglet</em>. Con la <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html">API de los <em>taglets</em></a> basta implementar una clase que implemente la interfaz <a href="https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html">Taglet</a>. La <a href="http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html">interfaz Taglet de Java 9</a> ha sido modificada ligeramente pero en esencia proporciona la misma información, en vez de un método para indicar si es posible el <em>taglet</em> en una localización hay un único método que devuelve un <em>Set</em> con todas las posibles localizaciones, en vez de necesitar un método <em>register</em> hay un método <a href="http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html#init-jdk.javadoc.doclet.DocletEnvironment-jdk.javadoc.doclet.Doclet-">init</a> y un único método para generar el contenido, <a href="http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html#toString-java.util.List-javax.lang.model.element.Element-">toString</a>.</p>
<p>La clase tiene varios métodos uno que indica el nombre único del <em>taglet</em> que identificará la anotación en los comentarios de Javadoc, varios métodos para indicar en que localizaciones es usable y dos métodos que generan el contenido a incluir en el HTML resultante. Las clases <a href="https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/Tag.html">Tag</a> que recibe el método <a href="https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html#toString-com.sun.javadoc.Tag-">Taglet.toString()</a> o <a href="https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/ParamTag.html">ParamTag</a> permite obtener diversa información utilizable para generar el contenido apropiado.</p>
<p>Los <em>taglets</em> pueden ser de tipo bloque con su propia entidad o ser embebidos en linea en un comentario del <em>javadoc</em>. En ejemplo de <em>taglet</em> de bloque siguiente consiste en permitir incluir elementos que quedan por hacer en el código, una anotación <em>todo</em>. Con esta anotación el desarrollador incluye un comentario descriptivo de cuales son las cosas pendientes para un futuro. El código del <em>taglet</em> sería el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javadoc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.sun.tools.doclets.Taglet</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.sun.javadoc.Tag</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * A sample Taglet representing @todo. This tag can be used in any kind of&#10;</span><span class="cm"> * {@link com.sun.javadoc.Doc}.  It is not an inline tag. The text is displayed&#10;</span><span class="cm"> * in yellow to remind the developer to perform a task. For&#10;</span><span class="cm"> * example, &#34;@todo Fix this!&#34; would be shown as.&#10;</span><span class="cm"> *&#10;</span><span class="cm"> * @author picodotdev&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TodoTaglet</span> <span class="kd">implements</span> <span class="n">Taglet</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">NAME</span> <span class="o">=</span> <span class="s">&#34;todo&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">HEADER</span> <span class="o">=</span> <span class="s">&#34;To do:&#34;</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">NAME</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">inField</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">inConstructor</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">inMethod</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">inOverview</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">inPackage</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">inType</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInlineTag</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">Map</span> <span class="n">tagletMap</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="n">TodoTaglet</span> <span class="n">tag</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TodoTaglet</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="n">Taglet</span> <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="n">Taglet</span><span class="o">)</span> <span class="n">tagletMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tag</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="n">tagletMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">tag</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="n">tagletMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">tag</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">tag</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="n">Tag</span> <span class="n">tag</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="s">&#34;&lt;b&gt;&#34;</span> <span class="o">+</span> <span class="n">HEADER</span> <span class="o">+</span> <span class="s">&#34;&lt;/b&gt;&lt;span style=\&#34;background-color: yellow;\&#34;&gt;&#34;</span> <span class="o">+</span> <span class="n">tag</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;&lt;/span&gt;\n&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="n">Tag</span><span class="o">[]</span> <span class="n">tags</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">tags</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&#34;&lt;b&gt;&#34;</span> <span class="o">+</span> <span class="n">HEADER</span> <span class="o">+</span> <span class="s">&#34;&lt;/b&gt;&lt;ul&gt;&#34;</span> <span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">Tag</span> <span class="n">tag</span> <span class="o">:</span> <span class="n">tags</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">result</span> <span class="o">+=</span> <span class="s">&#34;&lt;li&gt;&lt;span style=\&#34;background-color: yellow;\&#34;&gt;&#34;</span> <span class="o">+</span> <span class="n">tag</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;&lt;/span&gt;&lt;/li&gt;&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;	<span class="n">result</span> <span class="o">+=</span> <span class="s">&#34;&lt;/ul&gt;&#34;</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">result</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TodoTaglet.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javadoc</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * Clase main de la aplicación.&#10;</span><span class="cm"> *&#10;</span><span class="cm"> * @see &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc&lt;/a&gt;&#10;</span><span class="cm"> * @see &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;Javadoc JDK&lt;/a&gt;&#10;</span><span class="cm"> * @author picodotdev&#10;</span><span class="cm"> * @version 1.0&#10;</span><span class="cm"> *&#10;</span><span class="cm"> * @todo &lt;span style=&#34;text-decoration: line-through;&#34;&gt;Implementar in taglet personalizado&lt;/span&gt;&#10;</span><span class="cm"> * @todo Añadir estilos al javadoc&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Método que imprime un mensaje.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * &#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * @param args Argumentos del programa&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; *&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hola mundo&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>}
<p>Una vez escrito el código fuente del <em>taglet</em> hay que compilarlo e indicar su ubicación al generar la documentación con la herramienta <em>javadoc</em>. Hay que indicar varias opciones (<em>tagletPath</em> y <em>taglets</em>) que también se usarían como parámetros empleando directamente la herramienta <em>javadoc</em>, los comandos serían los siguientes usando <a href="https://gradle.org/">Gradle</a>. También hay que incluir de forma explícita como dependencia la librería <em>tools.jar</em> ubicado en el JDK.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;&#10;<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;<span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javadoc.Main&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s2">&#34;/usr/lib/jvm/default/lib/tools.jar&#34;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">javadoc</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">charSet</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">tagletPath</span> <span class="o">=</span> <span class="o">[</span><span class="k">new</span> <span class="n">File</span> <span class="o">(</span><span class="s1">&#39;build/classes/java/main/&#39;</span><span class="o">)]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">taglets</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;io.github.picodotdev.blogbitix.javadoc.TodoTaglet&#39;</span><span class="o">]</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">javadocZip</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependsOn</span> <span class="n">javadoc</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classifier</span> <span class="s1">&#39;javadoc&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="s1">&#39;build/docs/javadoc/&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">artifacts</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">archives</span> <span class="n">javadocZip</span>&#10;<span class="o">}</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>}
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/images/javadoc-taglet_hu991b320183f092f57d37b803d1f12a4a_56987_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Contenido del taglet todo en el javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/images/javadoc-taglet_hu991b320183f092f57d37b803d1f12a4a_56987_300x200_fit_box_3.png" width="300" height="137" alt="Contenido del taglet todo en el javadoc" title="Contenido del taglet todo en el javadoc"  class="lozad "></a></p>
<figcaption>Contenido del taglet todo en el javadoc</figcaption>
</figure>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew javadoc</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html">Javadoc Technology</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html">Taglet Overview</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/</id>
        <title>Cómo generar la documentación Javadoc con Gradle</title>
        <updated>2017-09-14T10:00:00+02:00</updated>
        <published>2017-09-14T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Habiendo explicado <a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/">qué es la herramienta Javadoc</a>, y en otros artículos <a href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/">como crear taglets</a> para incluirlos en los comentarios y generar contenido con los mecanismos de extensión que ofrece y explicado <a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/">como cambiar los estilos que se usan por defecto en el Javadoc</a> para por ejemplo cambiar los colores según la organización o incluir un texto de derechos de autor en el pie de página, hay que generar la documentación <em>javadoc</em> usando la herramienta de construcción que usemos. En este artículo muestro como generar la documentación <em>javadoc</em> con <a href="https://gradle.org/">Gradle</a>.</p>
<p>Lo primero es incluir en el proyecto el <em>plugin</em> de java. Con el <em>plugin</em> incluido se añade una tarea con la que generar la documentación <em>javadoc</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew javadoc&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle.sh</span>
    </div>
</div>
<p>Para indicar en Gradle <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#options">las opciones del comando javadoc</a> hay que ver cuales son en las clases <a href="https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/MinimalJavadocOptions.html">MinimalJavadocOptions</a>, <a href="https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html">CoreJavadocOptions</a> y <a href="https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html">StandardJavadocDocletOptions</a>. Las opciones permiten indicar la clase de <em>taglet</em> propio y lo mismo para usar una hoja de estilos propia que puede estar basada pero con pequeñas modificaciones sobre la que usa <em>javadoc</em> por defecto, también para incluir un texto en cada página en el pie. Lo mismo sería para usar cualquiera de las otras opciones que tiene el comando <em>javadoc</em>. En el ejemplo se usan dos opciones para la codificación de caracteres.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;&#10;<span class="n">javadoc</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">charSet</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-1.gradle</span>
    </div>
</div>
<p>Para generar un artefacto con la documentación comprimida en un archivo <em>zip</em> hay que incluir la siguiente configuración en el archivo <em>build.gradle</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">task</span> <span class="nf">javadocArtifact</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependsOn</span> <span class="n">javadoc</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classifier</span> <span class="s1">&#39;javadoc&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="s1">&#39;build/docs/javadoc/&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">artifacts</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">archives</span> <span class="n">javadocArtifact</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-2.gradle</span>
    </div>
</div>
<p>Con Gradle la documentación Javadoc se genera en el directorio <em>build/xxx</em> y el artefacto en el directorio <em>build/xxx</em>. Con las opciones anteriores este es el resultado del HTML generado.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/images/javadoc_hud2fb6f51032c2c77c58ff9b687eefcea_26626_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Artefacto generado con la documentación javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/images/javadoc_hud2fb6f51032c2c77c58ff9b687eefcea_26626_300x200_fit_box_3.png" width="300" height="148" alt="Artefacto generado con la documentación javadoc" title="Artefacto generado con la documentación javadoc"  class="lozad "></a></p>
<figcaption>Artefacto generado con la documentación javadoc</figcaption>
</figure>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew build</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/</id>
        <title>La herramienta de documentación Javadoc de Java</title>
        <updated>2017-09-11T13:00:00+02:00</updated>
        <published>2017-09-11T13:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Programar y desarrollar requiere además de poseer diversos conocimientos disponer de una buena documentación de consulta y referencia. Una de las cosas buenas que me gustaron de Java cuando empecé a programar en este lenguaje, cuando aún estaba lejos de tener internet y aún me lo sigue pareciendo, fue su <a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">documentación Javadoc</a> de toda la API de clases incluidas en el JDK.</p>
<p>La documentación Javadoc es una colección de páginas HTML de todas las clases, métodos, parámetros y retornos junto con la información y especificaciones que quiera incluir el desarrollador de la API que en el caso de las clases de JDK incluye abundantes e interesantes detalles de implementación a tener en cuenta al usar las clases. El Javadoc es también es una herramienta de línea de comandos que permite generar la colección de páginas HTML a partir del código fuente Java.</p>
<p>Se genera a partir del propio código fuente de las clases con los comentarios incluidos que siguen cierto formato precediendo la definición de las clases y métodos. Al estar código y documentación en el propio archivo de código fuente es más fácil mantener sincronizados el código y su documentación.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-jdk_hu22225ea2ebfcb47e780555ab9a320050_134236_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Documentación Javadoc del JDK"><img src="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-jdk_hu22225ea2ebfcb47e780555ab9a320050_134236_300x200_fit_box_3.png" width="300" height="137" alt="Documentación Javadoc del JDK" title="Documentación Javadoc del JDK"  class="lozad "></a></p>
<figcaption>Documentación Javadoc del JDK</figcaption>
</figure>
</div>
<p>La documentación en el código fuente se incluye en comentarios que preceden una clase o método, además, con anotaciones se pueden documentar los parámetros y el valor de retorno. Se pueden incluir etiquetas HTML junto con algunas de las anotaciones o <em>doclets</em>/<em>taglets</em>, algunas <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags">anotaciones Javadoc incluidas en el JDK</a> son las siguientes pero también se pueden <a href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/">desarrollar <em>doclets</em>/<em>taglets</em> propios</a> o <a href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/">personalizar los estilos de la documentación</a> para cambiar el contenido, información incluida o adaptar los estilos a unos según los colores de la organización.</p>
<ul>
<li><em>@author</em>: indica el autor de la clase o método.</li>
<li><em>{@code}</em>: incluye en el comentario un trozo de código que se formatea de forma especial.</li>
<li><em>{@docRoot}</em>: incluye una ruta relativa al directorio raíz donde se genera la documentación.</li>
<li><em>@deprecated</em>: indica que un método ha quedado obsoleto, se desaconseja su uso y puede que en futuras versiones desaparezca.</li>
<li><em>@exception</em>: es sinónima de throws.</li>
<li><em>{@inheritDoc}</em>: hereda el comentario Javadoc de la clase o método superior en la jerarquía de clases.</li>
<li><em>{@link}</em>: incluye un enlace a otra sección de la documentación, método o clase.</li>
<li><em>{@linkplain}</em>: es idéntica a @link pero el enlace es un texto plano.</li>
<li><em>{@literal}</em>: muestra un texto sin interpretar el texto como HTML.</li>
<li><em>@param</em>: documenta un parámetro de un método.</li>
<li><em>@return</em>: documenta el valor de retorno de un método.</li>
<li><em>@see</em>: incluye un enlace con documentación adicional en la sección final de la documentación.</li>
<li><em>@serial</em></li>
<li><em>@serialData</em></li>
<li><em>@serialField</em></li>
<li><em>@since</em>: indica a partir de que versión de la API fue incluida la clase o método.</li>
<li><em>@throws</em>: documenta una posible excepción que puede ser lanzada por el método.</li>
<li><em>{@value}</em>: muestra el valor de un campo estático.</li>
<li><em>@version</em>: para documentar la versión de cuando se hizo <em>checkout</em> del sistema de control de versiones.</li>
</ul>
<p>Un ejemplo usando estas anotaciones en una clase sería el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javadoc</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * Clase main de la aplicación.&#10;</span><span class="cm"> *&#10;</span><span class="cm"> * @see &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc&lt;/a&gt;&#10;</span><span class="cm"> * @see &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;Javadoc JDK&lt;/a&gt;&#10;</span><span class="cm"> * @author picodotdev&#10;</span><span class="cm"> * @version 1.0&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Método que imprime un mensaje.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * &#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * @param args Argumentos del programa&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hola mundo&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>Una vez documentado el código fuente hay que usar la <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html">herramienta Javadoc</a> para generar la documentación. Mediante la herramienta de construcción <a href="https://gradle.org/">Gradle</a> se hace con la tarea <em>javadoc</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew javadoc&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;&#10;<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;<span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javadoc.Main&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;	<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">javadoc</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">charSet</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">options</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">zipJavadoc</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependsOn</span> <span class="n">javadoc</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classifier</span> <span class="s1">&#39;javadoc&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="s1">&#39;build/docs/javadoc/&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">artifacts</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">archives</span> <span class="n">zipJavadoc</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La propia documentación de las clases del JDK está generada con la herramienta Javadoc. Este es el aspecto de la documentación de este ejemplo que tiene exactamente el mismo aspecto que la del JDK.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-1_hub362be29bcaf834d0fb430d45693271c_31057_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-1_hub362be29bcaf834d0fb430d45693271c_31057_300x200_fit_box_3.png" width="300" height="137" alt="Documentación Javadoc" title="Documentación Javadoc"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-2_hu2ee4ff9d4a22bf8e42b6be7f69fe5e64_58801_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-2_hu2ee4ff9d4a22bf8e42b6be7f69fe5e64_58801_300x200_fit_box_3.png" width="300" height="137" alt="Documentación Javadoc" title="Documentación Javadoc"  class="lozad "></a></p>
<figcaption>Documentación Javadoc del ejemplo</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-archivos_hu6d7f9d41b8db34fead8a8ca9b9ac4969_38225_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Archivos de la documentación Javadoc"><img src="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/images/javadoc-archivos_hu6d7f9d41b8db34fead8a8ca9b9ac4969_38225_300x200_fit_box_3.png" width="300" height="141" alt="Archivos de la documentación Javadoc" title="Archivos de la documentación Javadoc"  class="lozad "></a></p>
<figcaption>Archivos de la documentación Javadoc</figcaption>
</figure>
</div>
<p>La documentación Javadoc al ser una colección de archivos HTML y demás recursos estáticos pueden copiarse a cualquier servidor web si es necesario que estén disponibles a través de internet y accesibles con cualquier navegador web.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew javadoc</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html">Javadoc 8</a></li>
<li><a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html">Javadoc 7</a></li>
<li><a href="https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html">How to Write Doc Comments for the Javadoc Tool</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/los-tipos-de-referencias-debiles-soft-weak-y-phantom-en-java/</id>
        <title>Los tipos de referencias débiles soft, weak y phantom en Java</title>
        <updated>2017-09-30T10:30:00+02:00</updated>
        <published>2017-09-10T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/los-tipos-de-referencias-debiles-soft-weak-y-phantom-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Cuando un objeto ya no es alcanzable a través de ninguna referencia directa o cadena de referencias fuertes el objeto es seleccionable para reclamar su memoria y el recolector de basura o <em>garbage collector</em> de Java lo hace cuando estima oportuno, liberándonos a los programadores de esta tarea, simplificando el código y evitando fugas de memoria. El lenguaje Java le debe al recolector de basura entre otras varias cosas una buena parte de su éxito.</p>
<p>En Java en realidad hay 4 tipos de referencias a objetos, además de las fuertes hay otras 3 más débiles que no impiden al recolector de basura reclamar el objeto referenciado. Es raro tener la necesidad de usar otra que no sean las fuertes o <em>strong</em> pero es interesante conocerlas por si en algún caso nos resultase de utilidad. Los otros 3 tipos de referencias denominadas débiles son <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/SoftReference.html">SoftReference</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/WeakReference.html">WeakReference</a> y <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/PhantomReference.html">PhantomReference</a> que extienden de <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html">Reference</a>. Usar una de estas otras 3 referencias es muy simple basta usar el constructor de cada tipo de referencia.</p>
<p>Después de la llamada de varias veces al recolector de basura en este caso de forma explícita con el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#gc--">System.gc()</a> las referencias son encoladas.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javareference</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.lang.ref.*</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ReferenceQueue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReferenceQueue</span><span class="o">&lt;&gt;();</span>&#10;&#10;	<span class="n">String</span> <span class="n">strong</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">soft</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">),</span> <span class="n">queue</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">weak</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">),</span> <span class="n">queue</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">PhantomReference</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">phantom</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PhantomReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">),</span> <span class="n">queue</span><span class="o">);</span>&#10;&#10;	<span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>&#10;	<span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>&#10;	<span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>&#10;	<span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>&#10;	<span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Reference</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="n">reference</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">reference</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">reference</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">java.lang.ref.PhantomReference&#10;java.lang.ref.WeakReference&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>El objeto de una referencia <em>soft</em> es recolectable a discreción del recolector de basura ante necesidades de memoria, el objeto de una referencias <em>weak</em> es recolectable si solo es alcanzable por referencias <em>weak</em> y las referencias <em>phantom</em> son una mejor y más flexible alternativa al mecanismo de finalización de los objetos.</p>
<p>Algunos usos prácticos de las referencias <em>soft</em> y <em>weak</em> son como caches de datos posiblemente usando la clase <a href="https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html">WeakHashMap</a>, en el caso de las referencias <em>phantom</em> como mecanismo alternativo a la finalización de objetos incorporada en los objetos desde la versión inicial de Java.</p>
<p>El mecanismo de finalización de los objetos Java con el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--">finalize</a> que puede ser implementado por cualquier clase presenta los siguientes problemas:</p>
<ul>
<li>La llamada al método <em>finalize</em> es impredecible ya que depende de cuando del recolector de basura reclame el objeto.</li>
<li>No hay garantía de que el método <em>finalize</em> sea llamado ya que puede perdurar durante toda la vida de la JVM.</li>
<li>Una referencia fuerte al objeto puede ser revivida en el método <em>finalize</em> si se implementa de forma inadecuada.</li>
</ul>
<p>En los constructores de las referencias débiles se puede indicar un <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html">ReferenceQueue</a> en el que se encolará la referencia cuando el objeto al que referencia cambia su alcanzabilidad. Este mecanismo de notificación es utilizado con las referencias <em>phantom</em> para proporcionar el mecanismo de finalización alternativo. En la <a href="https://docs.oracle.com/javase/8/docs/">documentación javadoc</a> con la descripción del paquete de las referencias se comenta este <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/package-summary.html">proceso de notificación</a>. Las referencias son encoladas cuando el recolector de basura determina que son solo alcanzables por referencias <em>soft</em>, <em>weak</em> o <em>phantom</em>.</p>
<p>En el artículo <a href="http://resources.ej-technologies.com/jprofiler/help/doc/helptopics/cpu/finalizers.html">Replacing Finalizers With Phantom References</a> se explica junto con su código como implementar el mecanismo alternativo al método <em>finalize</em>. La librería <a href="https://github.com/google/guava">Guava</a> proporciona las clases <a href="https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/FinalizablePhantomReference.html">FinalizablePhantomReference</a> y <a href="https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/FinalizableReferenceQueue.html">FinalizableReferenceQueue</a> con una forma un poco más sencilla de usar las referencias <em>phantom</em>, en esa documentación también hay un ejemplo de código con su uso para liberar un recurso (<em>ServerSocket</em>) asociado a un objeto (<em>MyServer</em>).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServer</span> <span class="kd">implements</span> <span class="n">Closeable</span> <span class="o">{</span>&#10;   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">FinalizableReferenceQueue</span> <span class="n">frq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FinalizableReferenceQueue</span><span class="o">();</span>&#10;   <span class="c1">// You might also share this between several objects.&#10;</span><span class="c1"></span>&#10;   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Reference</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">references</span> <span class="o">=</span> <span class="n">Sets</span><span class="o">.</span><span class="na">newConcurrentHashSet</span><span class="o">();</span>&#10;   <span class="c1">// This ensures that the FinalizablePhantomReference itself is not garbage-collected.&#10;</span><span class="c1"></span>&#10;   <span class="kd">private</span> <span class="kd">final</span> <span class="n">ServerSocket</span> <span class="n">serverSocket</span><span class="o">;</span>&#10;&#10;   <span class="kd">private</span> <span class="nf">MyServer</span><span class="o">(...)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="o">...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="k">this</span><span class="o">.</span><span class="na">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(...);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="o">...</span>&#10;   <span class="o">}</span>&#10;&#10;   <span class="kd">public</span> <span class="kd">static</span> <span class="n">MyServer</span> <span class="nf">create</span><span class="o">(...)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">MyServer</span> <span class="n">myServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyServer</span><span class="o">(...);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="kd">final</span> <span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="n">myServer</span><span class="o">.</span><span class="na">serverSocket</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">Reference</span><span class="o">&lt;?&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FinalizablePhantomReference</span><span class="o">&lt;</span><span class="n">MyServer</span><span class="o">&gt;(</span><span class="n">myServer</span><span class="o">,</span> <span class="n">frq</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">finalizeReferent</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">references</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">this</span><span class="o">):</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="k">if</span> <span class="o">(!</span><span class="n">serverSocket</span><span class="o">.</span><span class="na">isClosed</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="o">...</span><span class="na">log</span> <span class="n">a</span> <span class="n">message</span> <span class="n">about</span> <span class="n">how</span> <span class="n">nobody</span> <span class="n">called</span> <span class="nf">close</span><span class="o">()...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">serverSocket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="o">...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="o">};</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">references</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">reference</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="k">return</span> <span class="n">myServer</span><span class="o">;</span>&#10;   <span class="o">}</span>&#10;&#10;   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">serverSocket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;   <span class="o">}</span>&#10; <span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MyServer.java</span>
    </div>
</div>
<p>Las referencias débiles añaden una indirección a la referencia que contienen, usando el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html#get--">get()</a> se accede al objeto referenciado pero hay que tener en en cuenta que el método <em>get</em> puede devolver un <em>null</em> ya que no impiden al recolector de basura reclamar el objeto referenciado, en el caso de las <em>PhantomReferences</em> el método <em>get</em> siempre devuelve <em>null</em> para evitar que la referencia a un objeto sea revivida.</p>
<p>Otro artículo que recomiendo leer es <a href="https://dzone.com/articles/weak-soft-and-phantom-references-in-java-and-why-they-matter">Weak, Soft, and Phantom References in Java (and Why They Matter)</a>, explica el concepto de estas referencias con un símil más fácil de comprender de un restaurante y sus clientes que dependiendo de su comportamiento se asemeja a estas referencias y el por que de los recolectores de basura, que no es algo novedoso de Java sino que ya fué utilizado en 1959 con el lenguaje Lisp.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaReference">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://dzone.com/articles/weak-soft-and-phantom-references-in-java-and-why-they-matter">Weak, Soft, and Phantom References in Java (and Why They Matter)</a></li>
<li><a href="http://www.guajava.net/tipos-de-referencias-en-java/">Tipos de referencias en Java</a></li>
<li><a href="https://javarevisited.blogspot.com.es/2014/03/difference-between-weakreference-vs-softreference-phantom-strong-reference-java.html">Difference between WeakReference vs SoftReference vs PhantomReference vs Strong reference in Java</a></li>
<li><a href="https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references">Understanding Weak References</a></li>
<li><a href="https://dzone.com/articles/finalization-and-phantom">Finalization and Phantom References</a></li>
<li><a href="http://www.kdgregory.com/index.php?page=java.refobj">Java Reference Objects</a></li>
<li><a href="https://stackoverflow.com/questions/14494875/weakreference-string-didnt-garbage-collected-how">WeakReference string didn’t garbage collected? How?</a></li>
<li><a href="https://stackoverflow.com/questions/26211657/understanding-phantom-reference-vs-weak-reference-with-respect-to-reference-queu">Understanding Phantom reference vs weak reference with respect to Reference queue</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/los-cuantificadores-greedy-reluctant-y-possessive-en-expresiones-regulares/</id>
        <title>Los cuantificadores greedy, reluctant y possessive en expresiones regulares</title>
        <updated>2017-09-09T11:30:00+02:00</updated>
        <published>2017-09-09T11:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/09/los-cuantificadores-greedy-reluctant-y-possessive-en-expresiones-regulares/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<p>En el mundo de las expresiones regulares hay tres tipos de cuantificadores que varían el comportamiento según el número caracteres que toman para encontrar ocurrencias. Son <em>greedy</em> o avaricioso, <em>reluctant</em> o reacio y <em>possessive</em> o posesivo. Cada cuantificador tiene una expresión en una expresión regular. La opción más habitual es el cuantificador <em>greedy</em>, añadiendo una <em>?</em> se convierte en <em>reluctant</em> y añadiendo un <em>+</em> se convierte en <em>possessive</em>.</p>
<pre>
Greedy  Reluctant  Possessive  Significado
X?      X??        X?+         X, uno o ninguno
X*      X*?        X*+         X, cero o mas
X+      X+?        X++         X, uno o más
X{n}    X{n}?      X{n}+       X, exactamente n veces
X{n,}   X{n,}?     X{n,}+      X, al menos n veces
X{n,m}  X{n,m}?    X{n,m}+     X, al menos n veces pero no mas de m
</pre>
<p>Aparentemente cada uno de los cuantificadores realiza lo mismo, sin embargo, hay diferencias en su comportamiento al hacer emparejamientos entre los elementos de la expresión regular y la cadena en la que se está aplicando.</p>
<ul>
<li><em>Greedy</em> o avaricioso: este cuantificador intenta obtener el emparejamiento más largo que pueda, tantos caracteres como pueda, si el emparejamiento no es válido elimina un caracter de la cadena que se está comprobando y lo intenta de nuevo.</li>
<li><em>Reluctant</em>, reacio o vago: funciona al contrario que el cuantificador <em>greedy</em>, intentando inicialmente ningún caracter, tan pocos caracteres como pueda, si el emparejamiento no es válido añade un caracter de la cadena que se está comprobando y lo intenta de nuevo.</li>
<li><em>Possessive</em> o posesivo: funciona igual que <em>greedy</em> salvo que si el emparejamiento no es válido no elimina un caracter de la cadena que se está comprobando y finaliza la comprobación.</li>
</ul>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaregexquantifiers</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.regex.Matcher</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">String</span><span class="o">[]</span> <span class="n">tests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span>&#10;			<span class="s">&#34;Greedy&#34;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="s">&#34;xfooxxxxxxfoo&#34;</span><span class="o">,</span> <span class="s">&#34;.*foo&#34;</span><span class="o">,</span>&#10;			<span class="s">&#34;Reluctant&#34;</span><span class="o">,</span>  <span class="s">&#34;xfooxxxxxxfoo&#34;</span><span class="o">,</span> <span class="s">&#34;.*?foo&#34;</span><span class="o">,</span>&#10;			<span class="s">&#34;Possessive&#34;</span><span class="o">,</span> <span class="s">&#34;xfooxxxxxxfoo&#34;</span><span class="o">,</span> <span class="s">&#34;.*+foo&#34;</span><span class="o">,</span>&#10;			<span class="s">&#34;Greedy&#34;</span><span class="o">,</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="s">&#34;xfooxxxxxxfoo&#34;</span><span class="o">,</span> <span class="s">&#34;.{2,5}&#34;</span><span class="o">,</span>&#10;			<span class="s">&#34;Reluctant&#34;</span><span class="o">,</span>  <span class="s">&#34;xfooxxxxxxfoo&#34;</span><span class="o">,</span> <span class="s">&#34;.{2,5}?&#34;</span><span class="o">,</span>&#10;			<span class="s">&#34;Possessive&#34;</span><span class="o">,</span> <span class="s">&#34;xfooxxxxxxfoo&#34;</span><span class="o">,</span> <span class="s">&#34;.{2,5}+&#34;</span>&#10;		<span class="o">};</span>&#10;&#10;		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tests</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">3</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="n">String</span> <span class="n">quantifier</span> <span class="o">=</span> <span class="n">tests</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>&#10;			<span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">tests</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">];</span>&#10;			<span class="n">String</span> <span class="n">regex</span> <span class="o">=</span> <span class="n">tests</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">2</span><span class="o">];</span>&#10;&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s, %s, %s%n&#34;</span><span class="o">,</span> <span class="n">quantifier</span><span class="o">,</span> <span class="n">string</span><span class="o">,</span> <span class="n">regex</span><span class="o">);</span>&#10;&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">{</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">regex</span><span class="o">);</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">while</span> <span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;I found the text \&#34;%s\&#34; starting at index %d and ending at index %d.%n&#34;</span><span class="o">,</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(),</span> <span class="n">matcher</span><span class="o">.</span><span class="na">start</span><span class="o">(),</span> <span class="n">matcher</span><span class="o">.</span><span class="na">end</span><span class="o">());</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;		<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext">Greedy, xfooxxxxxxfoo, .*foo&#10;I found the text &#34;xfooxxxxxxfoo&#34; starting at index 0 and ending at index 13.&#10;&#10;Reluctant, xfooxxxxxxfoo, .*?foo&#10;I found the text &#34;xfoo&#34; starting at index 0 and ending at index 4.&#10;I found the text &#34;xxxxxxfoo&#34; starting at index 4 and ending at index 13.&#10;&#10;Possessive, xfooxxxxxxfoo, .*+foo&#10;&#10;Greedy, xfooxxxxxxfoo, .{2,5}&#10;I found the text &#34;xfoox&#34; starting at index 0 and ending at index 5.&#10;I found the text &#34;xxxxx&#34; starting at index 5 and ending at index 10.&#10;I found the text &#34;foo&#34; starting at index 10 and ending at index 13.&#10;&#10;Reluctant, xfooxxxxxxfoo, .{2,5}?&#10;I found the text &#34;xf&#34; starting at index 0 and ending at index 2.&#10;I found the text &#34;oo&#34; starting at index 2 and ending at index 4.&#10;I found the text &#34;xx&#34; starting at index 4 and ending at index 6.&#10;I found the text &#34;xx&#34; starting at index 6 and ending at index 8.&#10;I found the text &#34;xx&#34; starting at index 8 and ending at index 10.&#10;I found the text &#34;fo&#34; starting at index 10 and ending at index 12.&#10;&#10;Possessive, xfooxxxxxxfoo, .{2,5}+&#10;I found the text &#34;xfoox&#34; starting at index 0 and ending at index 5.&#10;I found the text &#34;xxxxx&#34; starting at index 5 and ending at index 10.&#10;I found the text &#34;foo&#34; starting at index 10 and ending at index 13.</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>En el primer ejemplo del cuantificador <em>greedy</em> se usa <em>.*</em> para encontrar cualquier cosa, cero o más veces, seguido de las letras <em>f</em> <em>o</em> <em>o</em>. Dado que el cuantificador de la expresión la expresión <em>.*</em> es avaricioso primero consume toda la cadena. En este punto, no hay coincidencia dado que las tres últimas letras (<em>f</em> <em>o</em> <em>o</em>) han sido consumidas. De modo que se busca con una letra menos sucesivamente hasta que la la ocurrencia más a la derecha de <em>foo</em> ha sido regurgitada, en este punto hay coincidencia y la búsqueda finaliza.</p>
<p>En el segundo ejemplo, sin embargo, el cuantificador es reacio o vago de modo que empieza consumiendo nada. Dado que <em>foo</em> no aparece en el inicio de la cadena es forzado a tomar la primera letra <em>x</em> con la que se encuentra la primera coincidencia entre 0 y 4. Se siguen encontrando coincidencias hasta que la cadena de entrada ha sido consumida. Encuentra otra coincidencia en 4 y 13.</p>
<p>En el tercer caso se se hayan coincidencias ya que el cuantificador es posesivo. En este caso, la cadena completa es consumida por <em>.*+</em> dejando nada que satisfaga el patrón <em>foo</em> al final de la expresión. Dado que no vuelve hacia atrás tiene mejor rendimiento que el cuantificador <em>greedy</em> en los casos que se quiera encontrar una coincidencia completa en algo.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRegexQuantifiers">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/05/extraer-elementos-de-una-cadena-con-una-expresion-regular/">Extraer elementos de una cadena con una expresión regular</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/02/referencias-a-grupos-de-captura-en-expresiones-regulares-y-reemplazos/">Referencias a grupos de captura en expresiones regulares y reemplazos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/02/ofuscar-datos-sensibles-en-las-trazas-con-log4j/">Ofuscar datos sensibles en las trazas con Log4j</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/02/lookahead-y-lookbehind-en-expresiones-regulares-con-java/">Lookahead y lookbehind en expresiones regulares con Java</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/regex/quant.html">Regular Expression Quantifiers</a></li>
<li><a href="https://stackoverflow.com/questions/5319840/greedy-vs-reluctant-vs-possessive-quantifiers">Greedy vs. Reluctant vs. Possessive Quantifiers</a></li>
<li><a href="http://www.rexegg.com/regex-quantifiers.html">Regex Quantifier Tutorial: Greedy, Lazy, Possessive</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/</id>
        <title>Cache simple de datos y con Ehcache en Java</title>
        <updated>2017-08-25T11:00:00+02:00</updated>
        <published>2017-08-25T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En ocasiones es necesario usar una cache que contenga un número de elementos hasta un límite y que cuando se vayan añadiendo más se vayan borrando otros según algún criterio. En Java si no queremos añadir una nueva dependencia al proyecto con una librería especializada como <a href="https://www.ehcache.org/">Ehcache</a> la clase <a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html">LinkedHashMap</a> sirve para aquellos casos de uso simples sin necesidad de dependencias adicionales.</p>
<p>Si el coste de obtener algunos datos es costoso ya sean porque hay que obtenerlos de una base de datos, mediante una operación de disco o red o hay que hacer algún cálculo sobre ellos en estos casos guardar los datos en una cache supondrá un aumento notable de rendimiento de mayor o menor medida según el coste de la operación que evita la cache. Usar una cache es viable si es posible usar datos no completamente actualizados y dedicar algo de espacio en memoria para la cache. Si en la mayor parte de las búsquedas que se hacen en la cache el elemento buscado está ya presente se considera un acierto o <em>hit</em> y si no está presente un fallo o <em>miss</em>, cuando mayor sea el número de aciertos en la cache mayor será el aumento rendimiento percibido.</p>
<p>Para usar la clase <em>LinkedHashMap</em> como estructura de datos para una cache simple basta que creemos una nueva clase que extienda de esta con una implementación personalizada para el método <a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-">removeEldestEntry</a> que devuelva <em>true</em> para eliminar entrada más antigua, un caso sería cuando en el mapa se alcance el límite de elementos a almacenar como máximo.</p>
<p>En el ejemplo se crea una cache que tiene como máximo 5 elementos y se insertan en ella 15, cuando se intenta insertar en elemento más de la capacidad máxima el elemento más viejo se elimina de modo que la cache siempre tiene como máximo 5 elementos. Si la cache va a ser accedida tanto para operaciones de lectura como de escritura desde múltiples <em>threads</em> hay que prevenir posibles problemas de concurrencia sincronizando su acceso con el método <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedMap-java.util.Map-">Collections.synchronizedMap</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javacache</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.ehcache.Cache</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.CacheManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.builders.CacheConfigurationBuilder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.builders.CacheManagerBuilder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.builders.ResourcePoolsBuilder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.units.EntryUnit</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.expiry.Duration</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.expiry.Expirations</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LinkedHashMap&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleCache</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">5</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">IntStream</span><span class="o">.</span><span class="na">rangeClosed</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">15</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">));</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cache</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-1.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javacache</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.LinkedHashMap</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">SimpleCache</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">SimpleCache</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">removeEldestEntry</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span> <span class="n">eldest</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">size</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>SimpleCache.java</span>
    </div>
</div>
<p>Si son necesarias funcionalidades más avanzadas como que los elementos expiren pasado un tiempo y para mayores cantidades de datos guardar parte de la cache en disco con un límite de espacio ocupado una de las opciones más conocidas es Ehcache.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javacache</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.ehcache.Cache</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.CacheManager</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.builders.CacheConfigurationBuilder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.builders.CacheManagerBuilder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.builders.ResourcePoolsBuilder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.config.units.EntryUnit</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.expiry.Duration</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.ehcache.expiry.Expirations</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Ehcache&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">CacheManager</span> <span class="n">cacheManager</span> <span class="o">=</span> <span class="n">CacheManagerBuilder</span><span class="o">.</span><span class="na">newCacheManagerBuilder</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withCache</span><span class="o">(</span><span class="s">&#34;cache&#34;</span><span class="o">,</span> <span class="n">CacheConfigurationBuilder</span><span class="o">.</span><span class="na">newCacheConfigurationBuilder</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ResourcePoolsBuilder</span><span class="o">.</span><span class="na">newResourcePoolsBuilder</span><span class="o">().</span><span class="na">heap</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="n">EntryUnit</span><span class="o">.</span><span class="na">ENTRIES</span><span class="o">).</span><span class="na">build</span><span class="o">())</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withExpiry</span><span class="o">(</span><span class="n">Expirations</span><span class="o">.</span><span class="na">timeToLiveExpiration</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">build</span><span class="o">())</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Cache</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">cacheManager</span><span class="o">.</span><span class="na">getCache</span><span class="o">(</span><span class="s">&#34;cache&#34;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">IntStream</span><span class="o">.</span><span class="na">rangeClosed</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">15</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">));</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">cache</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map1</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">6000</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">cache</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">map2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map2</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-2.java</span>
    </div>
</div>
<p>Cachear datos se puede hacer en varios puntos de una aplicación, si se trata de una aplicación web <a href="https://varnish-cache.org/">Varnish</a> cachea el HTML, CSS y JavaScript además de los códigos de estado incluso <a href="https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/">nginx incorpora la funcionalidad de cache</a>, la propia aplicación puede cachear ciertos datos con alguna de las formas expuestas en este artículo y las propias bases de datos pueden cachear en memoria ciertos datos para evitar acceder al sistema de ficheros o disco. En definitiva una cache usada de forma efectiva ayuda a mitigar la penalización de operaciones costosas de acceso a red o a disco comparado con el acceso a memoria.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/images/java-cache_hu24417735680f24a8b596a3b72d14d101_37299_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Ejecución del ejemplo"><img src="https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/images/java-cache_hu24417735680f24a8b596a3b72d14d101_37299_300x200_fit_box_3.png" width="300" height="193" alt="Ejecución del ejemplo" title="Ejecución del ejemplo"  class="lozad "></a></p>
</figure>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaCache">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/</id>
        <title>37 buenos libros sobre sobre Java, Linux, DevOps y desarrollo que he leído</title>
        <updated>2017-08-19T11:00:00+02:00</updated>
        <published>2017-08-18T23:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con el buscador Google y usando las palabras clave adecuadas es raro no encontrar información sobre aquello que estemos buscando. Pero en internet la información suele estar muy dispersa y en cada sitio la información no es completa y con profundidad, internet esta muy bien como apoyo o para precisar una determinada cuestión. Sin embargo, los libros siguen siendo un buen material de aprendizaje, entre sus ventajas está que la información está mejor organizada con una estructura más didáctica y dependiendo del libro el tema tratado es explicado con profundidad. Desde el 2014 son unos cuantos libros más los que he leído.</strong></p>]]>
        <![CDATA[<p>En internet hay cantidad de información que nos permiten aprender sobre cualquier cosa a nuestro libre albedrío y que queramos teniendo el tiempo para dedicárselo ya sea en forma de escuetas presentaciones en <a href="https://speakerdeck.com/">SpeakerDeck</a> o <a href="https://es.slideshare.net/">SlideShare</a>, páginas sobre temas de programación, artículos en bitácoras como esta que estás leyendo u otras, vídeos en <a href="https://www.youtube.com/">YouTube</a>, convenciones presenciales o <em>hangouts</em>.</p>
<p>Algunas páginas dedicadas a la programación relativa a <a href="https://www.oracle.com/technetwork/java/index.html">Java</a> y <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> a las que estoy suscrito son:</p>
<ul>
<li><a href="https://jaxenter.com/">JAXenter</a></li>
<li><a href="https://www.javaworld.com/">JavaWorld</a></li>
<li><a href="http://www.javamagazine.mozaicreader.com/">JavaMagazine</a></li>
<li><a href="https://virtualjug.com/">VirtualJUG</a></li>
<li><a href="https://bsdmag.org/">BSD Magazine</a></li>
<li><a href="https://lwn.net">LWN.net</a></li>
<li><a href="https://www.linux.com/">linux.com</a></li>
</ul>
<p>En la biblioteca digital <a href="https://openlibra.com">OpenLibra</a> encontramos una gran cantidad de libros de diversos temas cuyas licencias permiten su libre acceso.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/images/openlibra_hu11f175be90bae01d7e917b568a6f6457_823820_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="OpenLibra"><img src="https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/images/openlibra_hu11f175be90bae01d7e917b568a6f6457_823820_300x200_fit_box_3.png" width="300" height="143" alt="OpenLibra" title="OpenLibra"  class="lozad "></a></p>
<figcaption>Web de OpenLibra</figcaption>
</figure>
</div>
<p>Podemos leer libros cuya información no está relacionada con un determinado herramienta técnica sino que su conocimiento es más generalista e independiente de la tecnología, en el artículo <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8+ libros para mejorar como programadores</a> recogía varios de los más mencionados y recomendados por mucha gente todavía válidos a pesar del tiempo transcurrido desde que fueron escritos, son atemporales. En la época que estaba en la universidad hace unos 15-20 años para mi internet aún estaba llegando, lo más parecido que tenía era la biblioteca en la que pedía prestados libros pero lógicamente con mayor limitación de material disponible. Hoy en día los alumnos, de universidad o bachillerato y gente con interés que quiera formarse mediante internet tiene acceso a material del que aprender mucho mejor en cantidad, facilidad y seguramente en calidad. A la gente que ahora está en la universidad le recomendaría que no se limiten a aprender lo que les enseñan en clases magistrales sus profesores sino que tomen parte activa en su formación aprovechándose de los recursos que pueden encontrar en internet.</p>
<p>Estos son los que me ha parecido que están bastante bien, algunos he leído de forma completa otros solo ciertos capítulos, algunos después de leídos olvidados en parte por falta de uso y porque mi inglés no es muy bueno. Son libros relacionados con la programación, la web o el lenguaje Java en su mayoría. Hay algún libro más que he leído pero estos son los que quería destacar. Además de aprender leer esta buena cantidad de libros me da ideas para escribir algunos artículos, algunos de los cuales he incluído en este artículo como relacionados.</p>
<div class="alert alert-warning tableofcontents">
    <h2>Contenido del artículo</h2>
    <toc></toc>
</div>
<h3 id="libros-sobre-java">Libros sobre Java</h3>
<h4 id="java-9-modularity">Java 9 Modularity</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491954167&amp;linkId=a4ac0f67b92d5e64b2f115dec0ed246c" title="Amazon" class="lozad"></iframe>
</div>
<p>La modularidad no es la única característica que se incorporará en Java 9 hay muchas otras pero quizá la que más llama la atención en parte porque estaba prevista ya para versiones anteriores y finalmente se ha postergado desde la versión 7. En cualquier caso la modularidad mejora la encapsulación, seguridad, rendimiento y compatibilidad con versiones futuras aspecto de la compatibilidad hacia atrás que siempre se la ha dado y es destacado en la plataforma Java.</p>
<p><a href="https://amzn.to/2ic88Qc">Java 9 Modularity</a> explica los cambios que afectan principalmente a algún nuevo archivo de código fuente para definir de forma explícita las dependencias que posee un módulo y los paquetes que exporta que definen su interfaz pública. También explica los cambios que afectan a comandos básicos como <em>javac</em> para compilar y <em>java</em> para ejecutar una aplicación. Hasta que los módulos se empiecen a adoptar por las librerías, y será lento, se explican los mecanismos para usar en Java 9 con módulos librerías de código que no hayan sido adaptadas aún.</p>
<p>Java 9 será publicado en septiembre y ya tengo ideados unos cuantos artículos para publicar.</p>
<h4 id="java-generics-and-collections">Java Generics and Collections</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596527756&amp;linkId=7392be28d1ec52d1dca41e10fc216fc1" title="Amazon" class="lozad"></iframe>
</div>
<p>Los tipos genéricos se añadieron en Java 5, en el año 2004, que el copilador utiliza para validar la corrección del código evitando problemas que serían producidos en tiempo de ejecución. En la API de colecciones se usa de forma extensiva.</p>
<p>El concepto no es difícil pero dominar las declaraciones de los <em>generics</em> no lo es, se puede complicar bastante. El libro <a href="https://amzn.to/2whneuf">Java Generics and Collections</a> es antiguo pero no está anticuado y sigue tiendo plena validez hoy, explica porque los <em>generics</em> fueron implementados en Java como fueron implementados, las limitaciones que causa y las ponderaciones que realizaron sus desarrolladores.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/">Tutorial sobre los tipos genéricos de Java</a></li>
</ul>
<h4 id="cloud-native-java">Cloud Native Java</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B074R4B7LY&amp;linkId=cb4b120dd4eac60796de0ec4796fbf8e" title="Amazon" class="lozad"></iframe>
</div>
<p>La flexibilidad que aporta la computación en la nube (o en los ordenadores de otros como dice la FSF) es en gran medida su éxito. Los programas que adopten esta nueva arquitectura obtienen varias ventajas como escalabilidad, tolerancia a fallos o administración de automatizada. Sin embargo, las aplicaciones tiene que diseñarse o adaptarse a este nuevo entorno.</p>
<p>Algunas librerías como <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> proporciona a las aplicaciones Java facilidades para desarrollar aplicaciones que se consideran nativas para la computación en la nube. <a href="https://amzn.to/2v7T4EK">Cloud Native Java</a> hace un repaso a los factores a tener en cuenta en las aplicaciones.</p>
<h4 id="java-the-good-parts">Java The Good Parts</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596803737&amp;linkId=c8d9a7967ea7439451a570b1f2659e9d" title="Amazon" class="lozad"></iframe>
</div>
<p>El lenguaje de programación Java es uno de los lenguajes más populares y que más desarrolladores posee desde ya muchos años. Su éxito se debe a varios principios que los arquitectos de la plataforma incorporaron desde sus inicios. Un lenguaje orientado a objetos, con excepciones para el tratamiento de errores, organización de clases en paquetes, recolector de basura que libera al programador de la tarea y evitar fugas de memoria o errores no controlados, la máquina virtual que posibilita escribir el código una vez y ejecutarlo en cualquier plataforma para la que haya una JVM, la gran documentación en <em>javadoc</em> que sirve como consulta y como formato para documentar en el propio código fuente, las colecciones que proporcionan estructuras de datos básicas y útiles para cualquier programa, concurrencia con hilos y primitivas para la sincronización y con el paso del tiempo un ecosistema muy grande de librerías, herramientas y entornos integrados de desarrollo.</p>
<p>Todas estas características se comentan detalladamente en <a href="https://amzn.to/2xaP6wf">Java The Good Parts</a>.</p>
<h4 id="building-maintainable-software-java-edition">Building Maintainable Software Java Edition</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491953527&amp;linkId=6a378c8faf06d2e362cdeb9226b925cf" title="Amazon" class="lozad"></iframe>
</div>
<p>Hay conocimiento que es independiente del lenguaje que se utilice como tratar de escribir funciones o métodos con pocas líneas de código, mantener las interfaces pequeñas, separar en módulos, mantener el acoplamiento bajo y balanceados, que la base de código sea pequeña, automatizar las pruebas o escribir código limpio. Aunque <a href="https://amzn.to/2vPOQ6v">Building Maintainable Software Java Edition</a> es una edición para Java con los ejemplos en este lenguaje las motivaciones que describe de cada uno de los puntos anteriores es universal.</p>
<h4 id="the-well-grounded-java-developer">The Well-Grounded Java Developer</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617290068&amp;linkId=1b305765190419f6de43b75335e43746" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://amzn.to/2fRQgJS">The Well-Grounded Java Developer</a> diserta sobre varios conceptos a tener en cuenta para tener una base sólida sobre la plataforma Java. Nuevas características de Java 7, cosas vitales como inyección de dependencias, concurrencia, ficheros <em>class</em> y <em>bytecode</em> o lenguajes alternativos para la máquina virtual.</p>
<h4 id="spring-boot-in-action">Spring Boot in Action</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292540&amp;linkId=86ce91eca968f6de1d0a777f48ca3069" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292540&amp;linkId=61b49fc8ef6bdf7c80975908df76d4af" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N750Z7H&amp;linkId=e4f7f44a8b854b00a547d526b83f6469" title="Amazon" class="lozad"></iframe>
</div>
<p>Spring Boot permite que una aplicación sea completamente autocontenida incluyendo un servidor web como <a href="https://tomcat.apache.org/">Tomcat</a> entre otros disponibles. En vez de distribuir la aplicación en formato <em>war</em> para ser desplegada en un contenedor de <em>servlets</em> o aplicaciones la aplicación se distribuye en formato <em>jar</em> y se inicia como una aplicación Java tradicional. Es la aplicación la que inicia el servidor web embebido y hace que proporcione su servicio. Esta es nueva tendencia que se sigue en las aplicaciones y en las aplicaciones basadas en la nube.</p>
<p>Spring Boot proporciona una integración con la parte del ecosistema de <a href="https://spring.io/">Spring</a> que requiera la aplicación. Para nuevos proyectos <a href="https://amzn.to/2v8gMk7">Spring Boot in Action</a> es muy interesante.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">Aplicación Java autocontenida con Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator/">Información y métricas de la aplicación con Spring Boot Actuator</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/">Ejemplo de API REST en Java con JAX-RS y Spring Boot</a></li>
</ul>
<h4 id="gradle-in-action">Gradle in Action</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291307&amp;linkId=86af7295a55368699341bfbe2ae7040e" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://gradle.org/">Gradle</a> es una herramienta de construcción de proyectos y gestión de dependencias que adopta las mejores características de <a href="https://ant.apache.org/">Ant</a> y <a href="https://maven.apache.org/">Maven</a> con pocas o ninguna de sus deficiencias. <a href="https://amzn.to/2uY2naN">Gradle in Action</a> explica en profundidad esta herramienta de construcción para llegar a dominarla.</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">Herramienta de construcción Gradle</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/usar-gradle-mediante-gradle-wrapper.htmlindex-amp.html">Usar Gradle mediante Gradle wrapper</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/">Ejemplo de multiproyecto con Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/">Incluir información de la versión en el artefacto distribuible con Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/07/iniciar-rapido-un-proyecto-de-java-con-gradle-o-de-spring-con-spring-initializr/">Iniciar rápido un proyecto de Java con Gradle o de Spring con Spring Initializr</a></li>
</ul>
<h4 id="java-testing-with-spock">Java Testing with Spock</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292532&amp;linkId=ac77f9a86125173cda19c2c4949ce0a3" title="Amazon" class="lozad"></iframe>
</div>
<p>Las pruebas automatizadas son indispensables para escribir código con menos errores y con mayor calidad. En Java hay varias herramientas de <em>testing</em> para hacer pruebas unitarias, de integración o funcionales. <a href="https://code.google.com/p/spock/">Spock</a> con el que se escriben especificaciones con un DSL y utilizando el lenguaje <a href="https://www.groovy-lang.org/">Groovy</a> permite automatizar las indispensables pruebas de todo código. <a href="https://amzn.to/2vPt5Ul">Java Testing with Spock</a> explica esta herramienta.</p>
<h4 id="portlets-in-action">Portlets in Action</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1935182544&amp;linkId=e954596f73982d6fc4c7338ffb4225b7" title="Amazon" class="lozad"></iframe>
</div>
<p>Los portales son utilizados por algunas organizaciones para gestionar el contenido que publican en su web. <a href="https://amzn.to/2w96DIn">Portlets in Action</a> explica como crear las unidades básicas de los portales en Java, los <em>portlets</em>.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/07/introduccion-a-los-portales-y-ejemplo-de-portlet-con-liferay/">Introducción a los portales y ejemplo de portlet con Liferay</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/07/portlets-con-el-framework-apache-tapestry-y-apache-pluto/">Portlets con el framework Apache Tapestry y Apache Pluto</a></li>
</ul>
<h3 id="bases-de-datos-relacionales-y-sql">Bases de datos relacionales y SQL</h3>
<h4 id="sql-antipatterns">SQL Antipatterns</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1934356557&amp;linkId=f6f8cc4cba1c24fdec9a4a47503e738d" title="Amazon" class="lozad"></iframe>
</div>
<p>Aún con la popularización de las bases de datos NoSQL las bases de datos relacionales siguen siendo perfectamente válidas. El libro <a href="https://amzn.to/2icem2F">SQL Antipatterns</a> es una colección de consejos a tener en cuenta al diseñar y utilizar las bases de datos relacionales. Algunas formas de uso que generan problemas están desaconsejados y se consideran antipatrones.</p>
<h4 id="beginning-sql-queries-y-learning-postgresql">Beginning SQL Queries y Learning PostgreSQL</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484219546&amp;linkId=6c88c8326d867c036266f6483f41477d" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1934356557&amp;linkId=2f3d39f7290758074e90a66beda9e253" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1800567499&amp;linkId=e91efc7d7df2c1cbbccc2793a1e9d0be" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783989181&amp;linkId=0b62f915f94acd860485c75946fa0392" title="Amazon" class="lozad"></iframe>
</div>
<p>El lenguaje declarativo SQL es muy potente y yo al menos desconocía o he usado poco muchas cosas que se han añadido al lenguaje en versiones más modernas y que algunas bases de datos como <a href="https://www.postgresql.org/">PostgreSQL</a> implementan. Algunas de estas cosas son las <em>windows functions</em>, tipos definidos por el usuario, <em>triggers</em>, <em>common table expression</em> o CTE, consultas recursivas, búsqueda de texto más avanzado y eficiente que la expresión <em>like</em>, <em>lateral subqueries</em>, &hellip;</p>
<p>Los libros <a href="https://amzn.to/2xbh62O">Beginning SQL Queries</a>, <a href="https://amzn.to/3C6IXlW">SQL Antipatterns</a> y <a href="http://amzn.to/2vaxQG8">Learning PostgreSQL</a> son una buena documentación sobre el lenguaje SQL que van más allá de lo enseñado en algunos cursos académicos.</p>
<h4 id="mongodb-in-action">MongoDB in Action</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291609&amp;linkId=497acae6ed525c559c046c38d3ed28c0" title="Amazon" class="lozad"></iframe>
</div>
<p>La misión de las bases de datos es almacenar información para una posterior consulta o búsqueda. <a href="https://amzn.to/2xb7KUJ">MongoDB in Action</a> trata sobre la base de datos orientada a documentos <a href="https://www.mongodb.com/">MongoDB</a> catalogada como NoSQL.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/">Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/06/usar-la-base-de-datos-nosql-mongodb-con-java/">Usar la base de datos NoSQL MongoDB con Java</a></li>
</ul>
<h3 id="programación-web">Programación web</h3>
<h4 id="learning-javascript">Learning JavaScript</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491914912&amp;linkId=380952682c6e61c533807cd32a6dd038" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://amzn.to/2xbmkMh">Learning JavaScript</a> explica este lenguaje de programación utilizado en los navegadores web. Denostado a veces por falta de conocimiento el libro explica muchas cosas interesantes del lenguaje e incorporadas la versión de ECMAScript 6. Es un libro que no requiere gran conocimiento previo y empieza desde un nivel básico.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/">Introducción al JavaScript de ECMAScript 6</a></li>
</ul>
<h4 id="the-book-of-css3">The Book of CSS3</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1593275803&amp;linkId=74be128029bfbd8f789af03a1b673aba" title="Amazon" class="lozad"></iframe>
</div>
<p>Al igual que JavaScript el denostado CSS también a veces lo es por el mismo motivo. <a href="https://amzn.to/2wgURft">The Book of CSS3</a> explica las nuevas posibilidades para aplicar estilos a documentos HTML en los navegadores. <em>Media queries</em>, selectores, pseudo-clases y pseudo-elementos, <em>web fonts</em>, efectos y estilos de tipografías, disposiciones en múltiples columnas, imágenes de fondo, bordes y efectos de caja, color y opacidad, gradientes transformaciones 3D, animaciones y transiciones, <em>layouts</em>, modos <em>blend</em>, filtros y máscaras es el contenido del libro.</p>
<h4 id="cors-in-action">CORS in Action</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=161729182X&amp;linkId=a1fec0248175841014bd8986c63eb82e" title="Amazon" class="lozad"></iframe>
</div>
<p><em>Cross-Origin Resource Sharing</em> permite a sitios distintos del origen de la página proporcionar su contenido. Por defecto, los navegadores solo permiten hacer peticiones al mismo sitio del origen de la página, con una combinación del navegador y cabeceras en las peticiones que proporcionan los sitios web permiten hacer llamadas entre diferentes sitios manteniendo la seguridad. El libro <a href="https://amzn.to/2vKvmlf">CORS in Action</a> trata en detalle este tema.</p>
<h4 id="learning-http2">Learning HTTP/2</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491962445&amp;linkId=1a89f93cde97f31c639b38ca79811040" title="Amazon" class="lozad"></iframe>
</div>
<p>La siguiente versión del protocolo HTTP mejora varios aspectos del anterior. Es más eficiente, con menos latencia, con mejor rendimiento mas seguro al requerirse una conexión cifrada y haciendo innecesarios varias técnicas que se usaban anteriormente. <a href="https://amzn.to/2xaScjO">Learning HTTP/2</a> es un buen material para conocer las diferencias y los problemas que presentaba HTTP/1.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/">Introducción al protocolo HTTP/2</a></li>
</ul>
<h4 id="mastering-oauth-20">Mastering OAuth 2.0</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=c62cfbc31fdea33038fa6650c9bf9686" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://oauth.net/">OAuth</a> es un protocolo para proporcionar autenticación y autorización a un sitio o aplicación sin que el usuario le proporcione las credenciales. Una aplicación que requiera acceso aun tercero necesita obtener un <em>bearer token</em> que mediante un proceso de autorización se puede obtener de cuatro formas diferentes dependiendo de la aplicación y de si el dispositivo autorizado es de confianza o no. <a href="https://amzn.to/2wXTEH6">Mastering OAuth 2.0</a> es una buena introducción.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/">Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/">Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot</a></li>
</ul>
<h3 id="servicios">Servicios</h3>
<h4 id="learning-rabbitmq-y-mastering-rabbitmq">Learning RabbitMQ y Mastering RabbitMQ</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=bffff9170b71717eb95f6be0a95274db" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=4cce33b79c609e875e6fb2a8b3b9ded2" title="Amazon" class="lozad"></iframe>
</div>
<p>Los libros <a href="https://amzn.to/2xbdSN2">Learning RabbitMQ</a> y <a href="https://amzn.to/2xbjaI2">Mastering RabbitMQ</a> tratan sobre la herramienta <a href="https://www.rabbitmq.com/">RabbitMQ</a> para desarrollar aplicaciones que se comuniquen mediante mensajes. Los mensajes son una forma efectiva de desacoplar dos aplicaciones tanto temporalmente como en el lenguaje utilizado en cada una de ellas.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/">Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</a></li>
</ul>
<h4 id="microservice-architecture">Microservice Architecture</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491956259&amp;linkId=57e9f172013ca12309e2ca2b5fa19fc2" title="Amazon" class="lozad"></iframe>
</div>
<p>El ámbito <em>cloud</em> y una nueva forma de arquitectura para las aplicaciones han originado los denominados microservicios. En vez de desarrollar una aplicación monolítica y grande se tiende hacia múltiples aplicaciones más pequeñas con un contexto específico que colaboran para proporcionar la misma funcionalidad. El libro <a href="https://amzn.to/2vPtaY3">Microservice Architecture</a> trata las motivaciones, que valor aportan los microservicios así como sus principios y cultura.</p>
<h3 id="libros-sobre-linux-y-devops">Libros sobre Linux y DevOps</h3>
<h4 id="git-mastering-version-control">Git: Mastering Version Control</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MXIFY5E&amp;linkId=f6eea55958b2783765b4bda371dd3e04" title="Amazon" class="lozad"></iframe>
</div>
<p>He leído varios libros sobre <a href="https://git-scm.com/">Git</a>, muchos empiezan explicando como es la estructura de información que guarda Git, no es necesario empezar por ahí. El libro <a href="https://amzn.to/2vKqyMR">Git: Mastering Version Control</a> es mucho más pragmático y explica muy bien los casos de uso que uno requiere de este sistema de control de versiones. Con este libro finalmente he aprendido mejor como usar un <em>rebase</em> interactivo para reescribir los <em>commits</em> o hacer un <em>squash</em>, también como crear <em>alias</em> y <em>hooks</em>, los diferentes modos de <em>reset</em> además de como crear <em>commits</em>, hacer búsquedas en el repositorio y otras muchas cosas que no he usado aún.</p>
<h4 id="gitlab-cookbook">GitLab Cookbook</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783986840&amp;linkId=153454430c956fe5335fe123ab829a40" title="Amazon" class="lozad"></iframe>
</div>
<p>Como servidor de Git me gustan de <a href="https://about.gitlab.com/">GitLab</a> dos cosas: que tiene una versión para la comunidad usable por ejemplo en un servidor propio de una empresa u organización y que tiene varias herramientas integradas como son una wiki, un sistema de <em>tracking</em> para las tareas de un proyecto junto con tableros y soporte para hacer integración y entrega continua sin necesidad de más herramientas lo que simplifica la infraestructura para el desarrollo en gran medida. También soporta otras características presentes en GitHub como <em>merge request</em>, revisiones entre pares o calidad de código entre otras muchas otras, la <a href="https://about.gitlab.com/features/">lista completa de <em>features</em></a> es grande. <a href="https://amzn.to/2icQyvr">GitLab Cookbook</a> es un libro introductorio para empezar a manejarlo.</p>
<h4 id="docker-in-action-y-the-devops-21-toolkit">Docker in Action y The DevOps 2.1 Toolkit</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=f257277b2f9112d7cd77aa1147bafd1d" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=f250891fe3d29d340f3fd3f82af96671" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://www.docker.com/">Docker</a> y los contenedores junto con la computación en la nube han cambiado la forma de distribuir y desplegar las aplicaciones en los servidores. Docker es una gran herramienta muy interesante de conocer. Son varias las herramientas del ecosistema, <a href="https://amzn.to/2icqdxN">Docker in Action</a> explica <em>docker</em> y <a href="https://docs.docker.com/compose/"><em>docker compose</em></a> y <a href="https://amzn.to/2uXSwBT">The DevOps 2.1 Toolkit</a> explica <a href="https://docs.docker.com/swarm/"><em>docker swarm</em></a> para crear <em>clusters</em> de servidores.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/series/docker/">Serie de artículos sobre Docker</a></li>
</ul>
<h4 id="ansible-up-and-running-y-implementing-devops-with-ansible-2">Ansible Up and Running y Implementing DevOps with Ansible 2</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491979801&amp;linkId=35c25b05f8577bf1bf72e0797ca47367" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1787120538&amp;linkId=2e83b442739bb1c91a6637a6f3d50a6c" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://www.ansible.com/">Ansible</a> es una herramienta para automatizar tareas en una o múltiples máquinas locales o remotas. Otra de sus propiedades en la mayoría de los casos es que es idempotente, es decir, se pueden ejecutar las acciones múltiples veces aplicando los cambios pertinentes o no haciendo nada según el estado de la máquina y el estado deseado.</p>
<p>La herramienta es muy útil para tratar a los servidores siendo numerosos como ganado en vez de como mascotas y los libros <a href="https://amzn.to/2wY1LDM">Ansible Up and Running</a> y <a href="https://amzn.to/2wgRIMR">Implementing DevOps with Ansible 2</a> lo explican.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/introduccion-a-ansible/">Introducción a Ansible</a></li>
</ul>
<h4 id="unix-and-linux-system-administration-handbook-linux-administration-a-beginners-guide-y-how-linux-works">UNIX and Linux System Administration Handbook, Linux Administration A Beginner’s Guide y How Linux Works</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0134277554&amp;linkId=7c91fcafae6964872c27d9bf3f68a9f1" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0071845364&amp;linkId=a7a84bf9b3f731a5b2e4cffba08c00b4" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1593275676&amp;linkId=09f1c68e67a12909a5af564fc43cf8d3" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://amzn.to/2vPg7WB">UNIX and Linux System Administration Handbook</a> es un libro que presenta al usuario los sistemas GNU/Linux, <a href="https://amzn.to/2wXrJae">Linux Administration A Beginner’s Guide</a> detalla las tareas administrativas para un servidor Linux y <a href="https://amzn.to/2uYcE6Z">How Linux Works</a> es un libro que explica detalles más profundos de aspectos internos de Linux.</p>
<h4 id="amazon-web-services-in-action-y-amazon-web-services-for-dummies">Amazon Web Services in Action y Amazon Web Services For Dummies</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292885&amp;linkId=88093372487f3f14280848b9bec59ef8" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1118571835&amp;linkId=03661313e03334c617b0ec833c2e2eb3" title="Amazon" class="lozad"></iframe>
</div>
<p>Aún habiendo leído <a href="https://amzn.to/2v8nI0F">Amazon Web Services in Action</a> y <a href="https://amzn.to/2icfumV">Amazon Web Services For Dummies</a> como no he tenido la oportunidad de practicar con la nube de Amazon casi todo de lo que leí lo tengo olvidado. <a href="https://aws.amazon.com/es/free/">Amazon ofrece una capa gratuita</a> para probarlo.</p>
<h3 id="publicaciones-más-breves">Publicaciones más breves</h3>
<p>Esto ya no son libros sino documentos más pequeños sobre diferentes temas.</p>
<h4 id="guide-to-the-java-ecosystem-2015">Guide to the Java Ecosystem 2015</h4>
<p>Aun es la <a href="https://dzone.com/guides/the-java-ecosystem-2015-edition">edición del 2015</a> y no he visto que hayan publicado una más reciente. Explica las tendencias y el ecosistema de Java. Microservicios, <em>docker</em>, Java 8, programación <em>reactiva</em>, mejores prácticas, &hellip;</p>
<h4 id="java-the-legend">Java The Legend</h4>
<p>¿A que es debido el éxito de Java? El libro <a href="http://www.oreilly.com/programming/free/java-the-legend.csp">Java The Legend</a> expone varios motivos como importancia de la compatibilidad hacia atrás, fácil de aprender y de leer, un sistema de tipos simple o la máquina virtual de Java o JVM. Aunque también según el documento con algunos fracasos como los <em>Java Bean</em> por promover la mutabilidad que es molesta para la concurrencia, la finalización de los objetos, sobre configuración de Java EE o la abstracción muy básica de hilos. Comenta el ecosistema alrededor de la plataforma Java con <a href="https://eclipse.org">Eclipse</a>, <a href="https://www.apache.org/">Apache</a> y <a href="https://spring.io/">Spring</a> junto con el futuro con Java 9, HTTP/2, JShell y quizá en un futuro el proyecto Panama para una nueva interfaz alternativa a JNI para código nativo y el proyecto Valhalla que trata sobre los tipos para usar cosas como definir colecciones genéricas con tipos primitivos.</p>
<h4 id="the-daemon-the-gnu-and-the-penguin">The daemon, the GNU and the penguin</h4>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=097903423X&amp;linkId=cf2cd5a87906b63405d49e3f74dc59a3" title="Amazon" class="lozad"></iframe>
</div>
<p><a href="https://amzn.to/2vKs5CH">The daemon, the GNU and the penguin</a> es un documento que repasa el origen, inicios y evolución del software libre y de código abierto desde el año 1968 con referencias a Unix, BSD, Minix, Sun, GPL, Hurd, la web, Tanenbaum, Torvalds, Linux, &hellip; Este documento y el siguiente son unos clásicos en internet.</p>
<h4 id="la-catedral-y-el-bazar">La catedral y el bazar</h4>
<p>La catedral y el bazar hace referencia a dos modelos distintos de desarrollo uno centralizado y controlado por una organización y otro distribuido de más libre albedrío pero también se ha demostrado muy efectivo posibilitado por la democratización de internet. <a href="http://catb.org/esr/writings/cathedral-bazaar/">La catedral y el bazar</a> está traducido a varios idiomas entre ellos el <a href="http://biblioweb.sindominio.net/telematica/catedral.html">español</a>.</p>
<p>Para acabar este artículo, viendo la cantidad de libros que he leído en unos 3 o 4 años con el tiempo que supone dedicado a adquirir estos conocimientos en gran parte en el tiempo libre y que en general empleamos los que trabajamos en el sector tecnológico hay que hacerse valer a la hora de recibir o postular a una oferta de trabajo y me refiero al ámbito económico que en muchas ofertas de <a href="https://www.infojobs.net/">InfoJobs</a> o <a href="https://www.tecnoempleo.com/">Tecnoempleo</a> no se corresponde con lo que supone los conocimientos que se solicitan.</p>
]]>
        </content>
        
            
                <category term="blog"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>
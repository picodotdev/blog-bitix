<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/</id>
    <updated>2022-09-08T11:00:00+02:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/10/como-crear-clases-factoria-sin-usar-if-else/</id>
        <title>Cómo crear clases factoría sin usar if-else</title>
        <updated>2015-10-19T19:00:00+02:00</updated>
        <published>2015-10-18T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/10/como-crear-clases-factoria-sin-usar-if-else/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En el artículo <a href="https://www.javacodegeeks.com/2014/10/factory-without-if-else.html">cómo crear clases factoría sin usar if-else</a> se comentan varias formas para conseguirlo. Las soluciones que se proponen son usar:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html"><em>Reflection</em></a>: sin embargo esta solución obliga a que el cliente de la factoría conozca el nombre completo de la clase a crear incluyendo el paquete en el que está y hace que la factoría no abstraiga al cliente de conocerlo que puede ser uno de sus objetivos. Además el parámetro es un <em>String</em> con lo que en los <em>refactors</em> el compilador no nos ayudará, el compilador es una de <a href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/">mis 10 razones para seguir usando Java</a>.</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html"><em>Map</em></a>: en esta solución se asocia una clave (en String) con la clase que devuelve la factoría. Igualmente usar un <em>String</em> como clave es algo a evitar ya que es propenso a errores al no tener ayuda del compilador en los valores de los Strings si estas cambian.</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html"><em>Enum</em></a>: en esta solución para eliminar los <em>if-else</em> se aprovecha de la propiedad del <a href="https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29">polimorfismo</a> de los lenguajes orientados a objetos. El tipo <em>Enum</em> usado tiene un método que es implementado en cada uno de los tipos concretos de enum, en función de que utilice se crea la instancia adecuada del objeto.</li>
</ul>
<p>Hay que notar otra diferencia entre la soluciones con <em>if-else</em>, <em>Reflection</em> y <em>Enum</em> y por otra parte la solución con <em>Map</em> y es que en el ejemplo las tres primeras crean una nueva instancia del validador cada vez que se llama a <em>newInstance</em> mientras que en la solución Map solo devuelve la instancia puesta en el mapa.</p>
<p>La solución del <em>Enum</em> el código resultante es bastante verboso y menos legible que las otras soluciones aún usando polimorfismo (en mi humilde opinión), por otra parte crear una nueva instancia de validador cada vez que se invoca a <em>newInstance</em> en la factoría puede que no sea lo que queramos (o quizá sí). Por esto voy a plantear una nueva solución que es usando un <em>Enum</em> como clave de un <em>Map</em>, que es una variante de la solución comentada en el artículo con <em>Map</em>. Es código de la nueva solución es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.java</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.EnumMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidatorFactory</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">enum</span> <span class="n">ValidatorType</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">INT</span><span class="o">,</span> <span class="n">LOOKUP</span><span class="o">,</span> <span class="n">DATE</span><span class="o">,</span> <span class="n">STRING_PATTERN</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">ValidatorType</span><span class="o">,</span> <span class="n">Validator</span><span class="o">&gt;</span> <span class="n">validators</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validators</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumMap</span><span class="o">&lt;&gt;(</span><span class="n">ValidatorType</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validators</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ValidatorType</span><span class="o">.</span><span class="na">INT</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntValidator</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validators</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ValidatorType</span><span class="o">.</span><span class="na">LOOKUP</span><span class="o">,</span> <span class="k">new</span> <span class="n">LookupValueValidator</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validators</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ValidatorType</span><span class="o">.</span><span class="na">DATE</span><span class="o">,</span> <span class="k">new</span> <span class="n">DateValidator</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validators</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ValidatorType</span><span class="o">.</span><span class="na">STRING_PATTERN</span><span class="o">,</span> <span class="k">new</span> <span class="n">StringPatternValidator</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="n">Validator</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">ValidatorType</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">validators</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>ValidatorFactory.java</span>
    </div>
</div>
<p>Si necesitásemos que la factoría devolviese una nueva instancia de <em>Validator</em> en cada llamada a <em>newInstance</em> (por ejemplo, porque no es <em>thread-safe</em>) podemos poner en el mapa una instancia de <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">Supplier</a> haciendo uso de las funciones <em>lambda</em> incluidas como una de las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">nuevas características incorporadas en Java 8</a>.</p>
<p>Cómo se comenta en los recomendables libros <a href="https://amzn.to/2sEy9hq">Refactoring: Improving the Design of Existing Code</a> y <a href="https://amzn.to/2tAwvgz">Effective Java</a> los <em>if-else</em> o <em>switches</em> son algo a evitar ya que se prefiere la pauta «abierto a extensión, cerrado a modificación», si necesitamos modificar código existente puede que introduzcamos algún error o se nos olvide modificar algún punto del código, por ello se prefiere el polimorfismo siendo la solución del <em>Enum</em> la más cercana a este principio o alguna de las otras soluciones. En el libro <a href="https://amzn.to/2SXy2bh">Effective Java</a> además se comentan ideas interesantes y ventajas sobre por que usar factorías (en ciertas situaciones) en vez de la palabra clave reservada <em>new</em>. Sin embargo, hay que saber cuando aplicar cierto patrón ya que son soluciones en algún sentido mejor pero que añaden algo de complejidad, nos tocará en función de las modificaciones que preveamos que pueda tener el código, de las necesidades o experiencia saber cual aplicar.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.javacodegeeks.com/2014/10/factory-without-if-else.html">Factory without if-else</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8+ libros para mejorar como programadores</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/</id>
        <title>Aplicación Java autocontenida con Spring Boot</title>
        <updated>2015-12-06T12:00:00+01:00</updated>
        <published>2015-10-13T00:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Si queremos una aplicación Java autocontenida ya sea una aplicación de linea de comandos, de escritorio o aplicación web que use el contenedor de dependencias de Spring podemos usar Spring Boot. Además de inicializar el contenedor IoC de Spring, Spring Boot proporciona en una aplicación web elegir el servidor de aplicaciones de entre el por defecto Tomcat y los seleccionables Jetty y Undertow junto con algunas funcionalidades más.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Tradicionalmente las aplicaciones Java web han sido instaladas en un contenedor de <em>servlets</em> como <a href="https://tomcat.apache.org/">Tomcat</a> o <a href="https://eclipse.org/jetty/">Jetty</a> y <a href="https://wildfly.org/">Wildfly</a>, <a href="https://www.jboss.org/">JBoss</a> o <a href="https://www.oracle.com/middleware/weblogic/">Weblogic</a> si necesita más servicios que son ofrecidos por la plataforma <abbr title="Java Enterprise Edition">Java EE</abbr> completa como <abbr title="Java Message Service">JMS</abbr>, <abbr title="Java Persistence API">JPA</abbr>, <abbr title="Java Transaction API">JTA</abbr> o <abbr title="Enterprise JavaBeans">EJB</abbr>. Aunque las aplicaciones se ejecutan independientemente unas de otras comparten el entorno de ejecución del servidor de aplicaciones, algunas aplicaciones no necesitarán todos los servicios que ofrecen los servidores de aplicaciones en su implementación del perfil completo Java EE y algunas nuevas aplicaciones pueden necesitar hacer uso de una nueva versión de un servicio como JMS con funcionalidades mejoradas. En el primer caso algunos servicios son innecesarios y en el segundo la actualización del servidor de aplicaciones se ha de producir para todas las aplicaciones que en él se ejecuten o tener varias versiones del mismo servidor de aplicaciones e ir instalando las aplicaciones en la versión del servidor según las versiones de los servicios para las que se desarrolló la aplicación.</p>
<p>Los microservicios proponen una aproximación diferente al despliegue de las aplicaciones prefiriendo entre otros aspectos que sean autocontenidos de tal forma que puedan evolucionar independientemente unas de otras. Se puede <a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/">ejecutar una aplicación web Java de forma autocontenida con la versión embebida de Tomcat</a>, Jetty también ofrece una versión embebible que puede usarse de forma similar de tal modo que ya no necesitemos instalar previamente además del <abbr title="Java Development Kit">JDK</abbr> la versión del servidor de aplicaciones que necesite.</p>
<p>Otra forma de poder hacer la aplicación autocontenida es con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a>, internamente usa una versión embebible del servidor de aplicaciones de la misma forma que lo podemos usar directamente, la ventaja al usar Spring Boot es que soporta Tomcat, Jetty o <a href="https://undertow.io/">Undertow</a> y pasar de usar uno a otro es muy sencillo y prácticamente transparente para la aplicación, además proporciona algunas características adicionales como inicializar el contenedor <abbr title="Inversion of Control">IoC</abbr> de <a href="https://spring.io/">Spring</a>, configuración, perfiles para diferentes entornos (desarrollo, pruebas, producción), monitorización y métricas del servidor de aplicaciones y soporte para <a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">la herramienta de automatización Gradle</a> entre algunas más. En el siguiente ejemplo mostraré como ejecutar una aplicación Java y una aplicación web Java con Spring Boot que usa <a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">jOOQ como alternativa a Hibernate</a>, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Apache Tapestry como <em>framework</em> web</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/05/modificar-la-base-de-datos-con-liquibase.htmlindex-amp.html">Liquibase para crear el esquema y tablas de la base de datos</a> y por simplicidad <a href="https://www.h2database.com/html/main.html">H2</a> como base de datos.</p>
<p>Los mostrado en este artículo es solo una pequeña parte de lo que ofrece Sring Boot, en el libro <a href="https://amzn.to/39GvW5x">Spring Boot in Action</a> se comenta en mucho más detalle y de forma didáctica, un libro muy recomendable para adentrarse rápidamente en ste nuevo mundo de posibilidades, <a href="https://amzn.to/3kxG3kh">Spring Boot: Up and Running</a> está orientado a aplicar Spring Bot en el contexto de microservicios aunque muchos conceptos aplicables en una aplicación de monolito modular.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1492076988&amp;linkId=09aa02ea0fe2a0a34dfd52a894557d39" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292540&amp;linkId=61b49fc8ef6bdf7c80975908df76d4af" title="Amazon" class="lozad"></iframe>
</div>
<p>Spring Boot proporciona un <em>plugin</em>, <em>spring-boot</em>, para <a href="https://gradle.org/">Gradle</a> que deberemos añadir al archivo <em>build.gradle</em>, a partir de este momento dispondremos algunas tareas adicionales en el proyecto como <em>bootRun</em> para ejecutar la aplicación desde Gradle (similar a la opción <em>run</em> y el parámetro <em>mainClassName</em> que añade el <em>plugin application</em>) y <em>bootRepackage</em> para poder ejecutar la aplicación con el comando <code>java -jar</code>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.GenerationTool</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Configuration</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.CustomType</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Database</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.ForcedType</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Generate</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Generator</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Jdbc</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Target</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;spring-boot&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springboot.Main&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kt">def</span> <span class="n">versions</span> <span class="o">=</span> <span class="o">[</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;gradle&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s1">&#39;2.9&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;tapestry&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;5.4-rc-1&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;spring&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s1">&#39;4.2.3.RELEASE&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;spring_boot&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="s1">&#39;1.3.0.RELEASE&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;hibernate_validator&#39;</span><span class="o">:</span> <span class="s1">&#39;5.2.2.Final&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;jooq&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;3.7.1&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;guava&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;18.0&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;h2&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s1">&#39;1.4.190&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;slf4j&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;1.7.13&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;log4j2&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="s1">&#39;2.4.1&#39;</span><span class="o">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="s1">&#39;servlet_api&#39;</span><span class="o">:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="s1">&#39;3.1.0&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">]</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// For access to Apache Staging (Preview) packages&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">maven</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">name</span> <span class="s1">&#39;Apache Staging&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">url</span> <span class="s1">&#39;https://repository.apache.org/content/groups/staging&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.springframework:spring-context:$versions.spring&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.springframework:spring-jdbc:$versions.spring&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.springframework:spring-tx:$versions.spring&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter:$versions.spring_boot&#34;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-web:$versions.spring_boot&#34;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-actuator:$versions.spring_boot&#34;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.hibernate:hibernate-validator:$versions.hibernate_validator&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tapestry&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.tapestry:tapestry-core:$versions.tapestry&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.tapestry:tapestry-webresources:$versions.tapestry&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.tapestry:tapestry-javadoc:$versions.tapestry&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.tapestry:tapestry-beanvalidator:$versions.tapestry&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.apache.tapestry:tapestry-spring:$versions.tapestry&#34;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Database	&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.jooq:jooq:$versions.jooq&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.jooq:jooq-meta:$versions.jooq&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;commons-dbcp:commons-dbcp:1.4&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span> <span class="s2">&#34;com.h2database:h2:$versions.h2&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Logging&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.slf4j:slf4j-api:$versions.slf4j&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j2&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.logging.log4j:log4j-api:$versions.log4j2&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.logging.log4j:log4j-core:$versions.log4j2&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Misc&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;org.apache.commons:commons-lang3:3.4&#34;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s2">&#34;javax.servlet:javax.servlet-api:$versions.servlet_api&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>El punto de inicio de una aplicación de Spring Boot es una clase Java con su tradicional método <em>main</em>, en el ejemplo la clase <em>Main</em>. Bastan tres lineas para iniciar la aplicación y una anotación. Anotando con <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/SpringBootApplication.html"><code>@SpringBootApplication</code></a> la clase que contiene el método <em>main</em> activaremos Spring Boot y el procesado de las anotaciones de Spring. En el método <em>main</em> estableciendo la clase contexto de la aplicación variaremos el tipo de aplicación <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html">AnnotationConfigApplicationContext</a> para una aplicación de linea de comandos o de escritorio y <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.html">AnnotationConfigWebApplicationContext</a> para las aplicaciones web que inicializará el servidor de aplicaciones embebido. Implementando la interfaz <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html">CommandLineRunner</a> en la clase que contiene la anotación <em>SpringBootApplication</em>  y su método <em>run</em> será el punto de entrada de la aplicación, en el método recibiremos los parámetros de la linea de comandos. Implementar esta interfaz es opcional en las aplicaciones web.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springboot</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.DSLContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.jooq.Keys</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.jooq.Tables</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.jooq.tables.records.DepartmentRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.jooq.tables.records.EmployeeDepartmentRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.jooq.tables.records.EmployeeRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.misc.RecordContainer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.service.AppService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">DSLContext</span> <span class="n">context</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">AppService</span> <span class="n">service</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Number employees: %d%n&#34;</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">countEmployees</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Number departments: %d%n&#34;</span><span class="o">,</span> <span class="n">service</span><span class="o">.</span><span class="na">countDepartments</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# Relations (with 1+N problem)&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DepartmentRecord</span> <span class="n">department</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">findDepartment</span><span class="o">(</span><span class="n">1l</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">EmployeeDepartmentRecord</span><span class="o">&gt;</span> <span class="n">eds</span> <span class="o">=</span> <span class="n">department</span><span class="o">.</span><span class="na">fetchChildren</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">DEPARTMENT_ID</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">EmployeeDepartmentRecord</span> <span class="n">ed</span> <span class="o">:</span> <span class="n">eds</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">EmployeeRecord</span> <span class="n">employee</span> <span class="o">=</span> <span class="n">ed</span><span class="o">.</span><span class="na">fetchParent</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">EMPLOYEE_ID</span><span class="o">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s %s%n&#34;</span><span class="o">,</span> <span class="n">employee</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">department</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# Multipletables (no 1+N)&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">RecordContainer</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">findDepartmentEmployees</span><span class="o">(</span><span class="n">1l</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">data</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">((</span><span class="n">RecordContainer</span> <span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s %s%n&#34;</span><span class="o">,</span> <span class="n">c</span><span class="o">.</span><span class="na">getEmployee</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="n">c</span><span class="o">.</span><span class="na">getDepartment</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;# Validation&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">EmployeeRecord</span> <span class="n">employee</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">newRecord</span><span class="o">(</span><span class="n">Tables</span><span class="o">.</span><span class="na">EMPLOYEE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">employee</span><span class="o">.</span><span class="na">setBirthday</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">plusDays</span><span class="o">(</span><span class="n">1</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Errors</span> <span class="n">errors</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">employee</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">errors</span><span class="o">.</span><span class="na">getFieldErrors</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s, %s, %s%n&#34;</span><span class="o">,</span> <span class="n">error</span><span class="o">.</span><span class="na">getField</span><span class="o">(),</span> <span class="n">error</span><span class="o">.</span><span class="na">getCode</span><span class="o">(),</span> <span class="n">error</span><span class="o">.</span><span class="na">getArguments</span><span class="o">(),</span> <span class="n">error</span><span class="o">.</span><span class="na">getRejectedValue</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">errors</span><span class="o">.</span><span class="na">getGlobalErrors</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s, %s, %s%n&#34;</span><span class="o">,</span> <span class="n">error</span><span class="o">.</span><span class="na">getObjectName</span><span class="o">(),</span> <span class="n">error</span><span class="o">.</span><span class="na">getCode</span><span class="o">(),</span> <span class="n">error</span><span class="o">.</span><span class="na">getArguments</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="c1">//application.setApplicationContextClass(AnnotationConfigApplicationContext.class);&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigWebApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>La clase <em>AppConfiguration</em> contiene la definición de <em>beans</em> propios del contenedor de inversión de control de las aplicaciones que serán inyectados en las clases donde se indiquen. Pero además definiendo algunos <em>beans</em> podremos configurar el servidor de aplicaciones embebido y la aplicación. Con el <em>bean</em> <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/SpringServletContainerInitializer.html">ServletContextInitializer</a> podemos definir parámetros de inicialización, filtros, <em>servlets</em>, listeners, propiedades de <em>cookies</em> y obtener información del entorno. Con el <em>bean</em> <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizer.html">EmbeddedServletContainerCustomizer</a> podemos añadir páginas de error para estados como 404 o 500, configurar el puerto de servicio, establecer la dirección IP, el contexto de la aplicación, directorio raíz de archivos del servidor web, SSL/TLS y tiempo de vida de las sesiones. Con el <em>bean</em> <a href="https://docs.spring.io/autorepo/docs/spring-boot/current/api/org/springframework/boot/context/embedded/tomcat/TomcatConnectorCustomizer.html">TomcatConnectorCustomizer</a> se pueden personalizar diferentes parámetros del conector y con el <em>bean</em> <a href="https://docs.spring.io/autorepo/docs/spring-boot/current/api/org/springframework/boot/context/embedded/tomcat/TomcatContextCustomizer.html">TomcatContextCustomizer</a> varios parámetros del contexto que en un Tomcat instalado como paquete de software configuraríamos mediante el archivo de configuración <em>server.xml</em> o <em>context.xml</em>. Para que las peticiones se procesen por el <em>framework</em> web Tapestry se define su filtro en el ejemplo o si fuese el caso un <em>servlet</em>. Toda esta configuración es similar a lo que definimos en el archivo <em>web.xml</em>, pero en código Java al ser validado por el compilador es menos propenso a errores que los archivos de texto xml.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.spring</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.DispatcherType</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.SessionTrackingMode</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.validation.Validator</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.catalina.connector.Connector</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.catalina.connector.Request</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.catalina.connector.Response</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.catalina.valves.ValveBase</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.commons.dbcp.BasicDataSource</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.spring.TapestrySpringFilter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.ConnectionProvider</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.DSLContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.SQLDialect</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.impl.DSL</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.impl.DataSourceConnectionProvider</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.impl.DefaultConfiguration</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.ErrorPage</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.ServletContextInitializer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.tomcat.TomcatConnectorCustomizer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.http.HttpStatus</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.transaction.support.ResourceTransactionManager</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.validation.beanvalidation.LocalValidatorFactoryBean</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.service.AppService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.service.DefaultAppService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.blogbitix.springboot.validator.EmployeeValidator</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>&#10;</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span> <span class="s">&#34;io.github.picodotdev.blogbitix.springboot&#34;</span> <span class="o">})</span>&#10;</span></span><span class="line"><span class="cl"><span class="nd">@EnableTransactionManagement</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfiguration</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span><span class="o">(</span><span class="n">destroyMethod</span> <span class="o">=</span> <span class="s">&#34;close&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">BasicDataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDataSource</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">&#34;org.h2.Driver&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&#34;jdbc:h2:./misc/database/app&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;sa&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ds</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;sa&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">ds</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ResourceTransactionManager</span> <span class="nf">transactionManager</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ConnectionProvider</span> <span class="nf">connectionProvider</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceConnectionProvider</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">org</span><span class="o">.</span><span class="na">jooq</span><span class="o">.</span><span class="na">Configuration</span> <span class="nf">config</span><span class="o">(</span><span class="n">ConnectionProvider</span> <span class="n">connectionProvider</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DefaultConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultConfiguration</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">connectionProvider</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">config</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">SQLDialect</span><span class="o">.</span><span class="na">H2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">config</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Validator</span> <span class="nf">validator</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">LocalValidatorFactoryBean</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">DSLContext</span> <span class="nf">dsl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">jooq</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">DSL</span><span class="o">.</span><span class="na">using</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ServletContextInitializer</span> <span class="nf">initializer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">ServletContextInitializer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartup</span><span class="o">(</span><span class="n">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">setInitParameter</span><span class="o">(</span><span class="s">&#34;tapestry.app-package&#34;</span><span class="o">,</span> <span class="s">&#34;io.github.picodotdev.blogbitix.springboot.tapestry&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">setInitParameter</span><span class="o">(</span><span class="s">&#34;tapestry.use-external-spring-context&#34;</span><span class="o">,</span> <span class="s">&#34;true&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="s">&#34;app&#34;</span><span class="o">,</span> <span class="n">TapestrySpringFilter</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">addMappingForUrlPatterns</span><span class="o">(</span><span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">,</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">ERROR</span><span class="o">),</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;/*&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">servletContext</span><span class="o">.</span><span class="na">setSessionTrackingModes</span><span class="o">(</span><span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">SessionTrackingMode</span><span class="o">.</span><span class="na">COOKIE</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">EmbeddedServletContainerCustomizer</span> <span class="nf">containerCustomizer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">EmbeddedServletContainerCustomizer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">customize</span><span class="o">(</span><span class="n">ConfigurableEmbeddedServletContainer</span> <span class="n">container</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ErrorPage</span> <span class="n">error404Page</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ErrorPage</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="s">&#34;/error404&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ErrorPage</span> <span class="n">error500Page</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ErrorPage</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">,</span> <span class="s">&#34;/error500&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">container</span><span class="o">.</span><span class="na">addErrorPages</span><span class="o">(</span><span class="n">error404Page</span><span class="o">,</span> <span class="n">error500Page</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">TomcatConnectorCustomizer</span> <span class="nf">connectorCustomizer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">TomcatConnectorCustomizer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">customize</span><span class="o">(</span><span class="n">Connector</span> <span class="n">connector</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">TomcatContextCustomizer</span> <span class="nf">contextCustomizer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">TomcatContextCustomizer</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">customize</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">TomcatEmbeddedServletContainerFactory</span> <span class="nf">containerFactory</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">TomcatEmbeddedServletContainerFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TomcatEmbeddedServletContainerFactory</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">addContextValves</span><span class="o">(</span><span class="k">new</span> <span class="n">ValveBase</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">getNext</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">factory</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Bean</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">AppService</span> <span class="nf">appService</span><span class="o">(</span><span class="n">DSLContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Validator</span> <span class="n">validator</span><span class="o">,</span> <span class="n">EmployeeValidator</span> <span class="n">employeeValidator</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">DefaultAppService</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">validator</span><span class="o">,</span> <span class="n">employeeValidator</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppConfiguration.java</span>
    </div>
</div>
<p>No será muy común pero si queremos configurar algunas propiedades internas como las <a href="https://tomcat.apache.org/tomcat-8.0-doc/config/valve.html">válvulas de Tomcat</a> que funcionalmente es similar a un filtro de una aplicación web Java podemos definir un <em>bean</em> del tipo <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.html">TomcatEmbeddedServletContainerFactory</a>, con esta factoría además podremos configurar muchas de las propiedades que podemos configurar con <em>ServletContextInitializer</em> y <em>EmbeddedServletContainerCustomizer</em> pero salvo por las válvulas que es específico de Tomcat la forma preferida hacer la configuración es con estas últimas clases.</p>
<p>Si en vez de usar Tomcat queremos usar Jetty o Undertow debemos cambiar las dependencias de la aplicación, excluimos la dependencia transitiva Tomcat y por defecto de <em>spring-boot-starter-web</em> e incluimos la propia del servidor que deseemos.
<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-use-jetty-instead-of-tomcat">spring-boot-starter-jetty</a> para Jetty y <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-use-undertow-instead-of-tomcat">spring-boot-starter-undertow</a> para Undertow. En el siguiente código la configuración a modificar en el archivo <em>build.gradle</em> para ambas.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">configurations</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">.</span><span class="na">exclude</span> <span class="nl">module:</span> <span class="s2">&#34;spring-boot-starter-tomcat&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-web:$versions.spring_boot&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-jetty:$versions.spring_boot&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-jetty.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">configurations</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">.</span><span class="na">exclude</span> <span class="nl">module:</span> <span class="s2">&#34;spring-boot-starter-tomcat&#34;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-web:$versions.spring_boot&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span><span class="o">(</span><span class="s2">&#34;org.springframework.boot:spring-boot-starter-undertow:$versions.spring_boot&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-undertow.gradle</span>
    </div>
</div>
<p>El resto de esta aplicación de ejemplo es propio de <a href="https://www.jooq.org/">jOOQ</a> y de <a href="https://tapestry.apache.org/">Apache Tapestry</a>. Para inicializar la base de datos H2 antes de ejecutar la aplicación debemos ejecutar la tarea de Gradle <em>updataDatabase</em> que creará las base de datos, esquema y tablas con la herramienta <a href="https://www.liquibase.org/">Liquibase</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew updateDatabase&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>update-database.sh</span>
    </div>
</div>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBoot">código fuente del ejemplo completo</a> puedes encontrarlo en el repositorio de ejemplos de Blog Bitix, arrancarlo y acceder con el navegador a la dirección <em>http://localhost:8080/</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew run&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>run.sh</span>
    </div>
</div>
<p>En el siguiente vídeo puede verse como es la salida en la terminal cuando la aplicación se arranca con Gradle y con el comando <code>java -jar</code>.</p>
<div class="media">
<script type="text/javascript" src="https://asciinema.org/a/27694.js" id="asciicast-27694" async></script>
<noscript><a href="https://asciinema.org/a/27694" target="_blank"><img src="https://asciinema.org/a/27694.png" width="650" height="450"></a></noscript>
</div>
<p>Añadiendo la dependencia <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready">Spring Boot Actuator</a> podemos <a href="https://picodotdev.github.io/blog-bitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator/">obtener información de estado y métricas en las aplicaciones Spring Boot</a>.</p>
<p>En un repositorio de GitHub de Spring hay muchos más <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples">ejemplos sobre Spring Boot</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Documentación de Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator/">Información y métricas de aplicación con Spring Boot Actuator</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config/">Configuración de una aplicación en diferentes entornos con Spring Cloud Config</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/">Aplicación web Java de forma autontenida con la versión embebida de Tomcat</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">La herramienta de automaticación Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">Alternativa a Hibernate u ORM y ejemplo de jOOQ</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/</id>
        <title>JavaFX Scene Builder, editor para crear archivos FXML</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-10-09T00:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con la aplicación JavaFX Scene Builder podemos construir la interfaz gráfica de una aplicación de escritorio Java de forma más sencilla. JavaFX Scene Builder genera archivos descriptores FXML que podemos cargar en la aplicación evitando la tediosa y no sencilla tarea de construir la interfaz gráfica mediante código. En el artículo comento la aplicación JavaFX Scene Builder, como usar los archivos FXML en una aplicación de escritorio, como asociar manejadores de eventos y como cambiar las propiedades de los controles.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Por lo poco que he visto JavaFX es una gran evolución sobre <abbr title="Abstract Window Toolkit">AWT</abbr> y Swing para desarrollar aplicaciones de escritorio en Java aportando varias mejoras. En el artículo <a href="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/">Introducción a JavaFX</a> comentaba que una de las cosas que me parecía más complicada usando tanto AWT y más tarde usando Swing era la construcción de los elementos visuales mediante código. El código para construir las ventanas, paneles, rejillas, botones, etiquetas, etc era extenso y difícil de comprender la composición leyéndolo. Con JavaFX se ha introducido una nueva herramienta visual llamada <a href="https://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html">JavaFX Scene Builder</a> que permite generar un archivo en formato FXML (declarativo en XML) que contiene la descripción de las ventanas o como llama JavaFX escenas. Este descriptor es similar a la forma de construir interfaces gráficas en la plataforma de Microsoft con los archivos <a href="https://msdn.microsoft.com/en-us/library/cc295302.aspx">XAML</a>.</p>
<p>Con los archivos FXML que genera la aplicación JavaFX Scene Builder crear aplicaciones gráficas es mucho más sencillo y más fácilmente mantenible. Proporciona un editor que sigue el principio lo que ves es lo que obtienes (<abbr title="What You See Is What You Get"><em>WYSIWYG</em></abbr>) y que permite generar los archivos FXML que posteriormente se pueden utilizar en la aplicación Java de escritorio para crear la interfaz visual. Podemos <a href="https://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-1x-archive-2199384.html">descargar la aplicación JavaFX Scene Builder</a> desde su página de descargas. En la siguiente imagen se puede ver la interfaz con el ejemplo <em>Hola Mundo</em>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/javafx-scene-builder_hu5eb60973931a676f7fb5b61184981468_51114_2560x1440_fit_box_3.png" data-gallery="" title="JavaFX Scene Builder con la aplicación ¡Hola Mundo!"><img src="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/javafx-scene-builder_hu5eb60973931a676f7fb5b61184981468_51114_300x200_fit_box_3.png" width="300" height="144" alt="JavaFX Scene Builder con la aplicación ¡Hola Mundo!" title="JavaFX Scene Builder con la aplicación ¡Hola Mundo!"  class="lozad "></a></p>
<figcaption>JavaFX Scene Builder con la aplicación ¡Hola Mundo!</figcaption>
</figure>
</div>
<p>Y el FXML que genera del mismo ejemplo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="cp">&lt;?import javafx.scene.effect.*?&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">&lt;?import javafx.scene.control.*?&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">&lt;?import java.lang.*?&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="cp">&lt;?import javafx.scene.layout.*?&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;HBox</span> <span class="na">alignment=</span><span class="s">&#34;CENTER&#34;</span> <span class="na">maxHeight=</span><span class="s">&#34;-Infinity&#34;</span> <span class="na">maxWidth=</span><span class="s">&#34;-Infinity&#34;</span> <span class="na">minHeight=</span><span class="s">&#34;-Infinity&#34;</span> <span class="na">minWidth=</span><span class="s">&#34;-Infinity&#34;</span> <span class="na">prefHeight=</span><span class="s">&#34;400.0&#34;</span> <span class="na">prefWidth=</span><span class="s">&#34;600.0&#34;</span> <span class="na">xmlns=</span><span class="s">&#34;http://javafx.com/javafx/8&#34;</span> <span class="na">xmlns:fx=</span><span class="s">&#34;http://javafx.com/fxml/1&#34;</span> <span class="na">fx:controller=</span><span class="s">&#34;io.github.picodotdev.javafx.HelloWorldFXMLController&#34;</span><span class="nt">&gt;</span>&#10;</span></span><span class="line"><span class="cl">   <span class="nt">&lt;children&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nt">&lt;Button</span> <span class="na">fx:id=</span><span class="s">&#34;button&#34;</span> <span class="na">mnemonicParsing=</span><span class="s">&#34;false&#34;</span> <span class="na">text=</span><span class="s">&#34;Hola mundo&#34;</span> <span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nt">&lt;Button</span> <span class="na">fx:id=</span><span class="s">&#34;controllerButton&#34;</span> <span class="na">mnemonicParsing=</span><span class="s">&#34;false&#34;</span> <span class="na">onAction=</span><span class="s">&#34;#onAction&#34;</span> <span class="na">text=</span><span class="s">&#34;Controlador&#34;</span> <span class="nt">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/children&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="nt">&lt;/HBox&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorld.fxml</span>
    </div>
</div>
<p>Que podemos usar en una aplicación con el siguiente código. Comparándolo con el <a href="https://github.com/picodotdev/blog-ejemplos/blob/master/HolaMundoJavaFX/src/main/java/io/github/picodotdev/javafx/HelloWorld.java">código del ejemplo sin FXML</a> vemos que el número de líneas necesarias son unas cuantas menos que se notará más cuanto más compleja sea la interfaz gráfica.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.javafx</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.fxml.FXMLLoader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.scene.Scene</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.scene.layout.HBox</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldFXML</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HBox</span> <span class="n">layout</span> <span class="o">=</span> <span class="o">(</span><span class="n">HBox</span><span class="o">)</span> <span class="n">FXMLLoader</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&#34;HelloWorld.fxml&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&#34;¡Hola JavaFX!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">layout</span><span class="o">,</span> <span class="n">300</span><span class="o">,</span> <span class="n">250</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorldFXML.java</span>
    </div>
</div>
<p>En la aplicación JavaFX Scene Builder disponemos de una amplia paleta de controles que podemos usar arrastrando y soltando para construir la interfaz, botones, <em>checkbox</em>, <em>radio buttons</em>, paneles, rejillas, menús, contenedores, miscelánea, formas, 3D, &hellip;</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/controles-javafx-scene-builder_huc3c632b7a6d31bc301875d08e6b4dc86_106871_2560x1440_fit_box_3.png" data-gallery="" title="Controles de JavaFX"><img src="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/controles-javafx-scene-builder_huc3c632b7a6d31bc301875d08e6b4dc86_106871_300x200_fit_box_3.png" width="300" height="107" alt="Controles de JavaFX" title="Controles de JavaFX"  class="lozad "></a></p>
<figcaption>Controles de JavaFX</figcaption>
</figure>
</div>
<p>Si con los archivos FXML construimos la interfaz queda como enlazar los elementos visuales con su comportamiento mediante eventos. Una forma es inyectar en propiedades con una anotación los elementos visuales y añadirles el código de comportamiento, otra es indicar en el propio archivo FXML la clase controlador que se encargará del manejo de los eventos del evento visual y otra es incluir el código manejador de evento en el propio archivo FXML.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.javafx</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ResourceBundle</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.event.ActionEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.event.EventHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.fxml.Initializable</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.scene.control.Button</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldFXMLController</span> <span class="kd">implements</span> <span class="n">Initializable</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@FXML</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Button</span> <span class="n">button</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@FXML</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Button</span> <span class="n">controllerButton</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@FXML</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">onAction</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World! (controllerButton)&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">URL</span> <span class="n">location</span><span class="o">,</span> <span class="n">ResourceBundle</span> <span class="n">resources</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">button</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="k">new</span> <span class="n">EventHandler</span><span class="o">&lt;</span><span class="n">ActionEvent</span><span class="o">&gt;()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World! (button)&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorldFXMLController.java</span>
    </div>
</div>
<p>La clase manejador de eventos se indica en el panel <em>Controller</em> y es una clase con métodos que posteriormente se indican en el editor con una almohadilla (<code>#</code>) delante en el panel <em>Code</em>. Por ejemplo, si el manejador de un botón se llama <em>onClick</em> en la clase controlador <em>HelloWorldFXMLController</em> deberemos tener ese método con el parámetro adecuado en este caso un <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/event/ActionEvent.html"><em>ActionEvent</em></a>.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/javafx-scene-builder-controller_hud70f6aee271a0340907c5ba58460c0dd_67154_2560x1440_fit_box_3.png" data-gallery="" title="Añadiendo comportamiento a aplicación JavaFX"><img src="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/javafx-scene-builder-controller_hud70f6aee271a0340907c5ba58460c0dd_67154_300x200_fit_box_3.png" width="300" height="131" alt="Añadiendo comportamiento a aplicación JavaFX" title="Añadiendo comportamiento a aplicación JavaFX"  class="lozad "></a></p>
<figcaption>Añadiendo comportamiento a aplicación JavaFX</figcaption>
</figure>
</div>
<p>Además de poder enlazar los componente visuales con el código para añadirles funcionalidad se pueden modificar las propiedades visuales como el texto, fuente y tamaño, alineación, opacidad, visibilidad, altura, anchura, margen, margen interior, rotación, escalado, &hellip; . Algunas propiedades son aplicables a varios componentes otras son específicas según el componente.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/propiedades-javafx-scene-builder_hu7ec71ec82ff2ca5e4df6229930c5bd14_98988_2560x1440_fit_box_3.png" data-gallery="" title="Propiedades de los controles JavaFX"><img src="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/propiedades-javafx-scene-builder_hu7ec71ec82ff2ca5e4df6229930c5bd14_98988_300x200_fit_box_3.png" width="217" height="200" alt="Propiedades de los controles JavaFX" title="Propiedades de los controles JavaFX"  class="lozad "></a></p>
<figcaption>Propiedades de los controles JavaFX, en este caso de un botón</figcaption>
</figure>
</div>
<p>Entre las <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">demostraciones y ejemplos de Java 8</a> está la aplicación <em>Modena</em> con la que podemos ver el aspecto visual de los componentes, en la aplicación <em>Ensemble</em> hay más ejemplos junto con código de muchos controles.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/modena_hu5fe037a6588ec720ac7076f9075b3b3f_106001_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación Modena"><img src="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/modena_hu5fe037a6588ec720ac7076f9075b3b3f_106001_300x200_fit_box_3.png" width="254" height="200" alt="Aplicación Modena" title="Aplicación Modena"  class="lozad "></a></p>
<figcaption>Aplicación Modena</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/ensemble_hufb2e4391d55bddbf5049c1b926a9d92d_114672_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación Ensemble"><img src="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/images/ensemble_hufb2e4391d55bddbf5049c1b926a9d92d_114672_300x200_fit_box_3.png" width="300" height="180" alt="Aplicación Ensemble" title="Aplicación Ensemble"  class="lozad "></a></p>
<figcaption>Aplicación Ensemble</figcaption>
</figure>
</div>
<p>En la propia página web de JavaFX, en el libro <a href="https://amzn.to/2ZQN8kp">JavaFX For Dummies</a> y otra documentación se puede encontrar explicado de forma más detallada JavaFX.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1118385349&amp;linkId=86e39a50525b1973ff3f39ad53d4dff6" title="Amazon" class="lozad"></iframe>
</div>
<p>En definitiva con la aplicación JavaFX Scene Builder y los archivos FXML construir la interfaces gráficas de una aplicación de escritorio Java es bastante más simple que lo era antiguamente. JavaFX además ofrece posibilidades que antes no eran posibles en Swing y AWT como rotar componentes, un componente visualizador de HTML, soporte para aceleración gráfica por hardware y más cosas. Después de haber conocido en algo más detalle JavaFX me quedo con una buena sensación. Como muestra de la flexibilidad de cambio de los estilos de los controles el proyecto <a href="http://www.jfoenix.com/">JFoenix</a> les aplica el <em>Material Desing</em> de las aplicaciones <a href="https://www.android.com/">Android</a> de Google.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/">Introducción a JavaFX</a></li>
<li><a href="https://docs.oracle.com/javafx/2/fxml_get_started/jfxpub-fxml_get_started.htm">FXML Get Started</a></li>
<li><a href="https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html">Introduction to FXML</a></li>
<li><a href="https://blogs.oracle.com/jmxetc/entry/connecting_scenebuilder_edited_fxml_to">Connecting SceneBuilder edited FXML to Java code</a></li>
<li><a href="https://docs.oracle.com/javase/8/scene-builder-2/get-started-tutorial/jfxsb-get_started.htm#JSBGS101">Building a JavaFX Application Using Scene Builder</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/</id>
        <title>Introducción a JavaFX, aplicaciones de escritorio en Java</title>
        <updated>2020-06-04T21:00:00+01:00</updated>
        <published>2015-10-02T19:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Java tiene una fuerte presencia en el ámbito de desarrollo para aplicaciones web, más recientemente ha sido empleado por la plataforma Android. En la misma medida que han crecido las aplicaciones web y móviles nativas las aplicaciones de escritorio han perdido presencia, sin embargo, para ciertos casos son la opción adecuada. JavaFX es una nueva colección de clases para desarrollar aplicaciones de escritorio multiplataforma «ricas» en la plataforma Java que sustituyen y mejoran las anteriores Swing o AWT. Podemos empezar por el ejemplo Hola Mundo de JavaFX de este artículo.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El lenguaje de programación Java es ampliamente usado en el ámbito empresarial destacando la programación de aplicaciones web. Las aplicaciones web se han extendido tanto por su fácil despliegue a los clientes (un navegador basta), un desarrollo no excesivamente complicado, fácil actualización (solo hace falta actualizar la aplicación en el servidor) y su seguridad tanto para el cliente (al ser el navegador el marco que limita las acciones de la aplicación) como para el servidor (al proteger los accesos a la base de datos por ejemplo). Sin embargo, las aplicaciones web también tienen algunas limitaciones a pesar de que mejoran con cada nueva versión de <abbr title="HyperText Markup Language">HTML</abbr>, <abbr title="Cascading Style Sheets">CSS</abbr>, JavaScript así como de los propios navegadores a medida que evolucionan incorporando nuevas APIs como el manejo de vídeo, audio e incluso aceleración 3D. Las aplicaciones web cada vez son más «ricas» pero aún no han llegado a las capacidades de las aplicaciones de escritorio tradicionales y en algún caso puede ser la solución elegida. En Java primeramente teníamos <a href="https://docs.oracle.com/javase/8/docs/api/java/awt/package-summary.html"><abbr title="Abstract Window Toolkit">AWT</abbr></a>, luego <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/package-summary.html">Swing</a> y ahora [JavaFX][javafx] con mejoras notables. Las aplicaciones web también tiene el problema de que si el servidor no está disponible o la conexión de red se pierde salvo que la aplicación esté preparada (como Google Docs) para ello será imposible usarla.</p>
<h3 id="qué-es-javafx-y-para-qué-sirve">Qué es JavaFX y para qué sirve</h3>
<p>JavaFX es una tecnología Java para el desarrollo de aplicaciones con interfaz gráfica interactivas multiplataforma para el escritorio y aplicaciones móviles. Está formada por un conjunto de clases y API junto con un editor gráfico <em>Scene Builder</em> para crear las interfaces visualmente.</p>
<p>Algunas de las características notables de JavaFX son:</p>
<ul>
<li><em>Java APIs</em>: las APIs están escritas en código nativo Java compatibles con otros lenguajes soportados por la máquina virtual.</li>
<li><em>FXML and Scene Builder</em>: <abbr title="FX Markup Language">FXML</abbr> es un lenguaje de marcado que describe las interfaces de usuario. Se pueden escribir directamente o usar la herramienta <a href="https://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html">JavaFX Scene Builder</a> para crearlos con una interfaz gráfica.</li>
<li><em>WebView</em>: permite embeber páginas HTML en las aplicaciones JavaFX. Ofrece soporte para JavaScript.</li>
<li><em>Built-in UI controls and CSS</em>: proporciona cantidad de controles para construir aplicaciones completas. El estilo de los controles puede ser modificado con CSS.</li>
<li><em>Canvas API</em>: para dibujar directamente en la pantalla.</li>
<li><em>Multitouch Support</em>: soporte para gestos táctiles múltiples en función de las posibilidades de la plataforma subyacente.</li>
<li><em>Hardware-accelerated graphics pipeline</em>: haciendo uso de la GPU se consiguen animaciones gráficas fluidas en las tarjetas gráficas soportadas, si la gráfica no está soportada de hace uso de la pila de software Java2D.</li>
<li>High-performance media engine: soporta la reproducción de contenido multimedia con baja latencia basándose en <a href="https://gstreamer.freedesktop.org/">GStreamer</a>.</li>
<li><em>Self-contained application deployment model</em>: las aplicaciones contenidas tiene todos los recursos y una copia privada de los entornos de ejecución de Java y JavaFX. Son distribuidos como paquetes instalables y proporcionan la misma experiencia de instalación e inicio que las aplicaciones nativas del sistema operativo.</li>
</ul>
<h1 id="ejemplo-hola-mundo-con-javafx">Ejemplo Hola Mundo con JavaFX</h1>
<p>A continuación mostraré los requerimientos y entorno que deberemos tener para realizar el ejemplo <em>Hola Mundo</em> que consistirá en una aplicación con una ventana que mostrará un botón. Si usamos el JDK 8 de Oracle, JavaFX ya está incorporado y podremos usarlo sin más requerimientos además de las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">otras muchas novedades incorporadas en Java 8</a>. En el caso de <a href="https://www.linux.com/">Linux</a> y más concretamente en <a href="https://www.archlinux.org/">Arch Linux</a>, aunque será similar otros sistemas operativos, usando el paquete <em>openjdk</em> deberemos instalar además el paquete <em>java-openjfx</em>. En Arch Linux si no tenemos instalado el paquete <em>java-openjfx</em> obtendremos en la terminal un mensaje no muy descriptivo similar a:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">Error: no se ha encontrado o cargado la clase principal ensemble.EnsembleApp&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>no-java-openjfx.txt</span>
    </div>
</div>
<p>En el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJavaFX">repositorio de GitHub del ejemplo de JavaFX</a> está el código fuente. Usando <a href="https://gradle.org/">Gradle</a> como herramienta automatizada de construcción y descargado el código podemos lanzar la aplicación de ejemplo con el comando de <em>run.sh</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;HolaMundoJavaFX&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.1&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;application&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.javafx.HelloWorld&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">jar</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">manifest</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">attributes</span><span class="o">(</span><span class="s1">&#39;Main-Class&#39;</span><span class="o">:</span> <span class="s1">&#39;io.github.picodotdev.javafx.HelloWorld&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">wrapper</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Wrapper</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">gradleVersion</span> <span class="o">=</span> <span class="s1">&#39;2.7&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew run&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>run.sh</span>
    </div>
</div>
<p>La clase <a href="https://github.com/picodotdev/blog-ejemplos/blob/master/HolaMundoJavaFX/src/main/java/io/github/picodotdev/javafx/HelloWorld.java">HelloWorld</a> extiende de <a href="https://docs.oracle.com/javafx/2/api/javafx/application/Application.html">Application</a> y en el método <em>start</em> definimos los controles de lo que será la escena (la ventana), principalmente un botón con un manejador de evento a ejecutar al ser pulsado.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.javafx</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.event.ActionEvent</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.event.EventHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.scene.Scene</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.scene.control.Button</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.scene.layout.StackPane</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Button</span> <span class="n">btn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">btn</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&#34;¡Hola mundo!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">btn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="k">new</span> <span class="n">EventHandler</span><span class="o">&lt;</span><span class="n">ActionEvent</span><span class="o">&gt;()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;¡Hola mundo!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">StackPane</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StackPane</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">root</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">btn</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&#34;¡Hola mundo!&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">300</span><span class="o">,</span> <span class="n">250</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorld.java</span>
    </div>
</div>
<p>Esta es la captura de pantalla de la aplicación y el mensaje emitido en la consola cuando se hace clic en el botón.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/images/helloworld_hua6b47c01a596ff6f9de5cbc6e9effa76_5445_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación ¡Hola Mundo!"><img src="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/images/helloworld_hua6b47c01a596ff6f9de5cbc6e9effa76_5445_300x200_fit_box_3.png" width="209" height="200" alt="Aplicación ¡Hola Mundo!" title="Aplicación ¡Hola Mundo!"  class="lozad "></a></p>
<figcaption>Aplicación ¡Hola Mundo! con JavaFX</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">¡Hola mundo!&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<h3 id="aplicaciones-demostración-de-javafx">Aplicaciones demostración de JavaFX</h3>
<p>En las <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">demostraciones y ejemplos de Java 8</a> hay unos cuantos referentes a JavaFX bastante completos. Iniciando la aplicación contenida en <em>Ensemble.jar</em> podemos ver numerosas funcionalidades (animación, efectos visuales, gráficas, controles, gráficos 2D, gráficos 3D, lenguaje, disposición, multimedia, &hellip;), también con la aplicación <em>Modena.jar</em> podemos ver como son visualmente por defecto los diferentes elementos gráficos de JavaFX.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ java -jar Ensemble.jar&#10;</span></span><span class="line"><span class="cl">$ java -jar Modena.jar&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>examples.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/images/ensemble_hufb2e4391d55bddbf5049c1b926a9d92d_114672_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación Ensemble"><img src="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/images/ensemble_hufb2e4391d55bddbf5049c1b926a9d92d_114672_300x200_fit_box_3.png" width="300" height="180" alt="Aplicación Ensemble" title="Aplicación Ensemble"  class="lozad "></a>
<a href="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/images/modena_hu5fe037a6588ec720ac7076f9075b3b3f_106001_2560x1440_fit_box_3.png" data-gallery="" title="Aplicación Modena"><img src="https://picodotdev.github.io/blog-bitix/2015/10/introduccion-a-javafx-aplicaciones-de-escritorio-en-java/images/modena_hu5fe037a6588ec720ac7076f9075b3b3f_106001_300x200_fit_box_3.png" width="254" height="200" alt="Aplicación Modena" title="Aplicación Modena"  class="lozad "></a></p>
<figcaption>Aplicaciones demostración Ensemble y Modena</figcaption>
</figure>
</div>
<p>El ejemplo de este artículo es muy sencillo y solo sirve para disponer de un entorno de desarrollo. Aunque no lo leído en el libro <a href="https://amzn.to/2SWtXnM">JavaFX For Dummies</a> explican bastante detalladamente y de forma didáctica muchas posibilidades de JavaFX y como en el resto de libros de la serie <em>for dummies</em> paso a paso y de forma simple sin suponer mucho conocimiento del lector.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1118385349&amp;linkId=d9e6cf1087da9526070be8f727f0d88e" title="Amazon" class="lozad"></iframe>
</div>
<p>Hace ya mucho tiempo cuando programaba alguna aplicación de escritorio con Swing una de las cosas más complicadas era construir la interfaz usando código, el código resultante era extenso, poco legible y bastante complicado por tener que construir cada elemento gráfico, posicionarlo y establecerle sus estilos. En JavaFX y al igual que en las plataformas de <a href="https://www.microsoft.com/">Microsoft</a> y <a href="https://www.gnome.org/">GNOME</a> los elementos gráficos de una ventana se puede definir en un documento y este documento se puede generar usando una aplicación con una interfaz gráfica arrastrando y soltando componentes, estableciendo valores de propiedades. En el siguiente artículo comentaré <a href="https://picodotdev.github.io/blog-bitix/2015/10/javafx-scene-builder-editor-para-crear-archivos-fxml/">cómo crear un documento FXML con la aplicación JavaFX Scene Builder y como usarlo en una aplicación</a>.</p>
<p>GNOME proporciona una librería de <em>bindings</em> para el lenguaje Java sin embargo teniendo JavaFX me parece mejor esta última ya que la aplicación será más portable además de estar mejor soportada, ya con los propios ejemplos de GNOME con Java he obtenido errores por lo que parecían incompatibilidades entre versiones.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJavaFX">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm">JavaFX Get Started Tutorial</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/</id>
        <title>Ejemplo del patrón de diseño Builder</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-09-27T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Construir objetos es una tarea básica en los lenguajes orientados a objetos. En Java, las instancias de una clase se crean con la palabra clave reservada <em>new</em> y un método especial llamado constructor. Al diseñar una clase debemos tener algunas cuestiones para evitar varios constructores <em>telescópicos</em>, evitar constructores que son combinación de varios argumentos opcionales y permitir obtener instancias de objetos con estado válido. Si se nos presentan estas situaciones podemos usar el patrón de diseño <em>Builder</em> que consiste en básicamente en una clase especializada en construir instancias de otra clase que podemos hacer usable con una API fluida y alguna cosa más deseable que explico en el artículo.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Al escribir los métodos constructores de instancias de una clase puede ocurrirnos que algunos de ellos tienen una lista larga de argumentos (cuatro o más parámetros puede considerarse larga) o el caso de que otros algunos argumentos son opcionales. En el caso de una lista larga de argumentos algunos puedan tomar valores por defecto creando métodos telescópicos (donde hay varios constructores y cada uno solo añade un nuevo argumento al anterior), en el caso de argumentos opcionales nos obliga a crear un constructor por cada combinación de argumentos, peor aún, ambas cosas se pueden producir a la vez.</p>
<p>Por ejemplo, supongamos que tenemos una entidad de dominio <em>Usuario</em> en la que el correo electrónico es requerido siendo opcionales su nombre, apellidos teléfono o dirección. Sin usar el patrón de diseño <em>Builder</em> probablemente tendríamos los siguientes constructores o tener solo el último de ellos y en los no necesarios usar como valor del argumento <em>null</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Contructores con el problema de ser telescópicos y ser mútiples por combinación de parámetros&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">nombre</span><span class="o">,</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">telefono</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">direccion</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">nombre</span><span class="o">,</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">,</span> <span class="n">String</span> <span class="n">telefono</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">nombre</span><span class="o">,</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">,</span> <span class="n">String</span> <span class="n">direccion</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">telefono</span><span class="o">,</span> <span class="n">String</span> <span class="n">direccion</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">nombre</span><span class="o">,</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">,</span> <span class="n">String</span> <span class="n">telefono</span><span class="o">,</span> <span class="n">String</span> <span class="n">direccion</span><span class="o">)</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Usuario-1.java</span>
    </div>
</div>
<p>Como vemos no son pocos constructores debido a las combinaciones de los parámetros opcionales, esta forma requiere una buena cantidad de líneas de código y si decidiésemos escribir solo el constructor con todos los parámetros al usarlo tendremos dificultades para saber a que argumento responde cada variable y probablemente deberemos consultar la firma del constructor para saber que lugar ocupa cada argumento, esto dificulta la legibilidad.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Uso de un contructor, ¿a que argumento corresponde cada dato?&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">Usuario</span><span class="o">(</span><span class="s">&#34;nombre.apellido@gmail.com&#34;</span><span class="o">,</span> <span class="s">&#34;Nombre&#34;</span><span class="o">,</span> <span class="s">&#34;Apellido&#34;</span><span class="o">,</span> <span class="s">&#34;555123456&#34;</span><span class="o">,</span> <span class="s">&#34;c\\ Rue el Percebe 13&#34;</span><span class="o">)</span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Usuario-2.java</span>
    </div>
</div>
<p>En este caso solo hay tres argumentos opcionales si hubiera más el número de combinaciones y por tanto de constructores aumentaría considerablemente. Puede que en vez de usar constructores usemos un método <em>set</em> de JavaBean de forma que tengamos un solo constructor y múltiples métodos <em>set</em> o un constructor con los argumentos requeridos y un <em>set</em> por cada argumento opcional.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Siguiendo las convenciones de los JavaBeans la clase Usuario deja de ser inmutable&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">Usuario</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">setEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">setNombre</span><span class="o">(</span><span class="n">String</span> <span class="n">nombre</span><span class="o">,</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">setTelefono</span><span class="o">(</span><span class="n">String</span> <span class="n">telefono</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">setDireccion</span><span class="o">(</span><span class="n">String</span> <span class="n">direccion</span><span class="o">)</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Usuario-3.java</span>
    </div>
</div>
<p>Sin embargo, esta solución aunque permite reducir el número de constructores también tiene problemas, uno de ellos es que el constructor y los <em>set</em> no obligan a crear un objeto con estado consistente o válido, otro es que usando los <em>set</em> de los JavaBean nos impide hacer el objeto inmutable, si no es devolviendo una nueva instancia, que con las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">nuevas características funcionales añadidas en Java 8</a> y en la programación concurrente es deseable.</p>
<h3 id="el-patrón-de-diseño-_builder_">El patrón de diseño <em>Builder</em></h3>
<p>El patrón de diseño <em>Builder</em> es un patrón de diseño clasificado en los creacionales que se encarga de la creación de instancias de clases. Sus ventajas son que solucionan el problema de los  constructores telescópicos y combinación de argumentos es usar el patrón de diseño <em>Builder</em>, además permite crear objetos complejos de forma flexible en varios pasos con propiedades opcionales.</p>
<p>Al igual que <a href="https://picodotdev.github.io/blog-bitix/2021/05/el-patron-de-diseno-factory-ventajas-sobre-new-y-diferencias-con-builder/">el patrón de diseño Factory</a> se encarga de crear instancias de una clase, sin embargo, tiene algunas diferencias como que el patrón <em>Factory</em> crea las instancias en un único paso cuando el <em>Builder</em> puede crear las instancias en varios pasos, el patrón <em>Builder</em> es más complejo pero más flexible. Otra diferencia es que el patrón de diseño <em>Builder</em> tiene estado y en el <em>Factory</em> no siempre es necesario, esto hace que la instancia de clase <em>Builder</em> no se pueda compartir ni utilizar para crear otras instancias.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/images/builder-pattern_hu02179daacd7b0e854d69456a34c6fd6c_49036_2560x1440_fit_box_3.png" data-gallery="" title="Diagrama de clases del patrón de diseño Builder"><img src="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/images/builder-pattern_hu02179daacd7b0e854d69456a34c6fd6c_49036_650x450_fit_box_3.png" width="650" height="223" alt="Diagrama de clases del patrón de diseño Builder" title="Diagrama de clases del patrón de diseño Builder"  class="lozad "></a></p>
<figcaption>Diagrama de clases del patrón de diseño Builder</figcaption>
</figure>
</div>
<h3 id="ejemplo-del-patrón-de-diseño-_builder_">Ejemplo del patrón de diseño <em>Builder</em></h3>
<p>Empleando el mismo caso que los anteriores de la siguiente forma.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.builder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Usuario</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">  &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">nombre</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">telefono</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">direccion</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">  &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="nf">Usuario</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">  &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Usuario</span><span class="o">(</span><span class="n">UsuarioBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">getEmail</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;email es requerido&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getEmail</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">nombre</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getNombre</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">apellidos</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getApellidos</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">telefono</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getTelefono</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">direccion</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getDireccion</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Usuario.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.builder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsuarioBuilder</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">nombre</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">telefono</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">direccion</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">UsuarioBuilder</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">UsuarioBuilder</span> <span class="nf">email</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">UsuarioBuilder</span> <span class="nf">nombre</span><span class="o">(</span><span class="n">String</span> <span class="n">nombre</span><span class="o">,</span> <span class="n">String</span> <span class="n">apellidos</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">nombre</span> <span class="o">=</span> <span class="n">nombre</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">apellidos</span> <span class="o">=</span> <span class="n">apellidos</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">UsuarioBuilder</span> <span class="nf">telefono</span><span class="o">(</span><span class="n">String</span> <span class="n">telefono</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">telefono</span> <span class="o">=</span> <span class="n">telefono</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">UsuarioBuilder</span> <span class="nf">direccion</span><span class="o">(</span><span class="n">String</span> <span class="n">direccion</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">direccion</span> <span class="o">=</span> <span class="n">direccion</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Usuario</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">Usuario</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Getters&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">email</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getNombre</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">nombre</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getApellidos</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">apellidos</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTelefono</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">telefono</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getDireccion</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">direccion</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>UsuarioBuilder.java</span>
    </div>
</div>
<p>Su uso sería de la siguiente manera algo más autoexplicativa y legible que la opción de usar constructores.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.pattern.builder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">  &#10;</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Usuario</span> <span class="n">usuario</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsuarioBuilder</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">email</span><span class="o">(</span><span class="s">&#34;nombre.apellido@gmail.com&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">nombre</span><span class="o">(</span><span class="s">&#34;Nombre&#34;</span><span class="o">,</span> <span class="s">&#34;Apellido&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">telefono</span><span class="o">(</span><span class="s">&#34;555123456&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">direccion</span><span class="o">(</span><span class="s">&#34;c\\ Rue el Percebe 13&#34;</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>   &#10;</span></span><span class="line"><span class="cl">  <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>La instancia de la clase <em>UsuarioBuilder</em> en su uso recoge los datos usando una API fluida, el método <em>build</em> es el que construye la instancia del usuario mediante el constructor con visibilidad de paquete en el que se valida que los datos al construir el objeto <em>Usuario</em> sean válidos, en este caso que el <em>email</em> es requerido.</p>
<p>En el libro <a href="https://amzn.to/2FngVHS">Effective Java</a> en el <em>Item #2</em> se comenta más detalladamente este patrón junto a otra buena colección de cosas sobre los constructores y más cosas sobre Java, es uno en mi lista de <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8+ libros recomendables para mejorar como programadores</a>.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0321356683&amp;linkId=b669e63080013f19e959a9d5b80e3f77" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596007124&amp;linkId=3fa600b62ab3a48a0c6a5dfc6b9c9651" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0201633612&amp;linkId=2d6122afa07f905f4c3f2a9bcc62ff23" title="Amazon" class="lozad"></iframe>
</div>
<p>En el apartado de referencia puedes encontrar más artículos que he escrito sobre otros patrones de diseño.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8+ libros para mejorar como programadores</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.htmlindex-amp.html">Patrones de diseño en la programación orientada a objetos</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.htmlindex-amp.html">Ejemplo del patrón de diseño <em>Command</em></a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.htmlindex-amp.html">Ejemplo del patrón de diseño <em>State</em></a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/">Patrón múltiples vistas de un mismo dato en Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/09/generar-recursos-estaticos-con-wro4j/</id>
        <title>Generar recursos estáticos con wro4j</title>
        <updated>2015-09-25T17:00:00+02:00</updated>
        <published>2015-09-25T17:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/09/generar-recursos-estaticos-con-wro4j/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con nuevas tecnologías como less, Sass o CoffeeScript el desarrollo y mantenimiento de una página web medianamente compleja mejora notablemente. Con la librería wro4j en una aplicación Java podemos procesar este tipo de recursos y convertirlos a los equivalentes que saben interpretar los navegadores de forma nativa CSS y JavaScript además de optimizar su tamaño u ofuscarlos.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El desarrollo y las tecnologías de las páginas web sigue evolucionando, HTML 5, JavaScript, CSS 3, <a href="https://es.wikipedia.org/wiki/Dise%C3%B1o_web_adaptable">diseño adaptable</a> (<em>responsive</em>), &hellip; Y también surgen nuevas herramientas que hacen el desarrollo más simple o hace que las aplicaciones sean más eficientes. Algunas de estas nuevas tecnologías son <a href="https://lesscss.org/">less</a> o <a href="https://sass-lang.com/">Sass</a> que permiten producir hojas de estilo CSS utilizando una mejor notación, si la hoja de estilos es grande usar una tecnología como esta puede reducir considerablemente su tamaño, hacerla más legible y de más fácil mantenimiento, <a href="https://coffeescript.org/">CoffeeScript</a> también puede hacer más simple el desarrollo de la parte cliente de una aplicación, proporciona una sintaxis más clara (para algunos) que la ofrecida por el propio lenguaje JavaScript, que compilados generan su equivalente en JavaScript.</p>
<p>También hay herramientas para optimizar los recursos eliminando los espacios innecesarios reduciendo su tamaño, la reducción conseguida variará en función del tamaño del archivo. En los archivos JavaScript la reducción puede ser mayor ya que aparte de eliminar los espacios en blanco se pueden renombrar los nombres de las variables, funciones y argumentos por otros más cortos consiguiendo una mayor reducción de tamaño. Esta minificación puede servirnos para ofuscar el código si queremos dificultar su lectura para las personas.</p>
<p>En Java disponemos de la librería <a href="https://github.com/wro4j/wro4j/">wro4j</a> (<em>Web Resource Optimizer for Java</em>) para hacer este procesado de conversión y optimización desde nuestra aplicación. Puede interesarnos si el <em>framework</em> web no ofrece esta funcionalidad o en una aplicación <em>standalone</em> como ha sido el caso de <a href="https://twitter.com/blogstackinfo">Blog Stack</a> donde la he usado para en vez de usar CSS directamente usar un archivo less y luego transformarlo a CSS. Su uso no es complicado y puede mejorar nuestra aplicación o el desarrollo de la misma notablemente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">Resource</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&#34;script.coffee&#34;</span><span class="o">,</span> <span class="n">ResourceType</span><span class="o">.</span><span class="na">JS</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;path/to/script.coffee&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Writer</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="s">&#34;path/to/script.js&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Transforming a CoffeeScript file into a JavaScript file&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">CoffeeScriptProcessor</span><span class="o">().</span><span class="na">process</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">reader</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Using UglifyJs&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">UglifyJsProcessor</span><span class="o">().</span><span class="na">process</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">reader</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">//&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">Resource</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&#34;style.css&#34;</span><span class="o">,</span> <span class="n">ResourceType</span><span class="o">.</span><span class="na">CSS</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Reader</span> <span class="n">lessReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;path/to/style.less&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Reader</span> <span class="n">sassReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;path/to/style.sass&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">Writer</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="s">&#34;path/to/style.css&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Using Less&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">LessCssProcessor</span><span class="o">().</span><span class="na">process</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">lessReader</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Using Sass&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">SassCssProcessor</span><span class="o">().</span><span class="na">process</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">sassReader</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Wro4j.java</span>
    </div>
</div>
<p>Aparte de los procesadores de este ejemplo wro4j tiene <a href="https://code.google.com/p/wro4j/wiki/AvailableProcessors">disponibles muchos otros</a>. Este procesado es algo costoso en cuanto a tiempo pero el archivo producido podemos cachearlo al inicio de la aplicación o después de compilarlo.</p>
<p>Si queremos usarlo en una aplicación web Java y el <em>framework</em> que usemos no lo usa internamente o no proporciona algo parecido podemos <a href="http://wro4j.github.io/wro4j/">seguir 3 para emplear wro4j</a>, añadir un filtro, una configuración en XML y una etiqueta <em>link</em> y otra <em>script</em> para incluirlos en las páginas, por supuesto habrá que añadir la dependencia de la librería con <a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">la herramienta de construcción automatizada Gradle</a> u otra.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/wro4j/wro4j/">wro4j</a></li>
<li><a href="https://lesscss.org/">less</a></li>
<li><a href="https://sass-lang.com/">sass</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/</id>
        <title>Ejemplo de multiproyecto con Gradle</title>
        <updated>2015-11-10T19:00:00+01:00</updated>
        <published>2015-09-15T19:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>En un proyecto grande podemos tener necesidad de dividir el monolito al menos en varios módulos y yendo un paso más lejos en microservicios. La herramienta de construcción que usemos deberá de facilitarnos automatizar la tarea de construcción del código fuente de cada módulo individual, de todos a la vez o de los microservicios si tienen alguna dependencia compartida. En el artículo y ejemplo explicaré cómo usando Gradle podemos dividir el proyecto en varios módulos. No deja de ser un ejemplo pero es bastante completo y está formado por dos aplicaciones web, una librería de componentes y otra librería con el modelo de persistencia, usa Spring, jOOQ, Tapestry, PostgreSQL, Docker, Liquibase, &hellip;</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<div class="logotypes">
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gradle.svg" width="200" height="165" alt="Gradle" title="Gradle"  class=""></p>
</div>
<p>Cuando una aplicación o proyecto crece en algún momento podemos tener necesidad de partir el monolito en varios módulos más pequeños y más manejables. Las arquitecturas basadas en microservicios proponen en vez de tener una aplicación grande que contenga toda la funcionalidad dividirla en varios servicios manejables, pequeños y lo más independientes posible. En el libro <a href="https://amzn.to/2MZWW6u">Building Microservices</a> explican muy bien la idea y conceptos de los microservicios. La división de una aplicación implica tener un repositorio de código fuente para cada proyecto, probablemente algunos proyectos dependan de otros y haya alguno que sea utilizado por varios como uno de utilidades. Aunque diría que en los microservicios se prefiere en cierta medida duplicar código que compartir para que cada proyecto tenga un ciclo de vida independiente, esto permite desplegarlos individualmente, aún así podemos aceptar compartir cierto código de utilidades o componentes, necesitando que unos proyectos dependan de otros.</p>
<p>Tener varios proyectos con dependencias entre ellos exige de la herramienta de construcción que esto sea posible y sencillo. En este artículo comentaré como crear un proyecto compuesto de varios componentes con <a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">la herramienta de construcción Gradle</a>. El ejemplo consistirá en dos aplicaciones web basadas en el <em>framework</em> web <a href="https://tapestry.apache.org/">Apache Tapestry</a>, una será la que vea el público (<em>web</em>) y otra de administración (<em>back</em>), estas dos aplicaciones compartirán una librería de componentes de Tapestry comunes como un <em>layout</em> (<em>library</em>), la cabecera y pie de las páginas de cada proyecto web, finalmente existirá una librería con métodos o servicios de utilidad comunes y el modelo de datos a persistir en una base de datos relacional usada tanto en las aplicaciones web como por la librería de componentes (<em>core</em>).</p>
<p>Necesitaremos 4 proyectos para los módulos y 5 proyectos Gradle, uno para cada módulo y otro que los englobe a todos. La estructura de directorios y archivos relativos a Gradle será la siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">MultiprojectGradle&#10;</span></span><span class="line"><span class="cl">- setttings.gradle (proyectos incluidos)&#10;</span></span><span class="line"><span class="cl">- build.gradle (cosas comunes a todos los proyectos)&#10;</span></span><span class="line"><span class="cl">- web (aplicación web pública)&#10;</span></span><span class="line"><span class="cl">  - build.gradle&#10;</span></span><span class="line"><span class="cl">- back (aplicación web privada)&#10;</span></span><span class="line"><span class="cl">  - build.gradle&#10;</span></span><span class="line"><span class="cl">- components (componentes comunes de Apache Tapestry: layout, header y footer)&#10;</span></span><span class="line"><span class="cl">  - build.gradle&#10;</span></span><span class="line"><span class="cl">- core (modelos, servicios y utilidades comunes)&#10;</span></span><span class="line"><span class="cl">  - build.gradle</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>estructura.txt</span>
    </div>
</div>
<p>En el archivo <em>build.gradle</em> global podemos incluir las cosas comunes a todos los proyectos como dependencias o <em>plugins</em>, en el archivo <em>settings.gradle</em> definimos de que componentes está formado el proyecto. Las cosas comunes a todos los proyectos será el uso del <em>plugin java</em> y <a href="https://eclipse.org"><em>eclipse</em></a>, el repositorio de dependencias de <em>mavenCentral</em>, algunas dependencias y una tarea para instalar el <em>wrapper</em> de Gradle que nos servirá para usarlo sin necesidad de instalar nada (se descargarán sus binarios automáticamente).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">subprojects</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// For access to Apache Staging (Preview) packages&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">maven</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">name</span> <span class="s1">&#39;Apache Staging&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">url</span> <span class="s1">&#39;https://repository.apache.org/content/groups/staging&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-api:1.7.12&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.logging.log4j:log4j-slf4j-impl:2.3&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.logging.log4j:log4j-api:2.3&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.logging.log4j:log4j-core:2.3&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">testCompile</span> <span class="s1">&#39;junit:junit:4.12&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">task</span> <span class="nf">wrapper</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Wrapper</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">gradleVersion</span> <span class="o">=</span> <span class="s1">&#39;2.7&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">include</span> <span class="s1">&#39;web&#39;</span><span class="o">,</span> <span class="s1">&#39;back&#39;</span><span class="o">,</span> <span class="s1">&#39;library&#39;</span><span class="o">,</span> <span class="s1">&#39;core&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>settings.gradle</span>
    </div>
</div>
<p>Podemos ver los módulos (o proyectos como los llama Gradle) de los que se compone la aplicación y las tareas que podemos ejecutar con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./gradlew -daemon projects&#10;</span></span><span class="line"><span class="cl">$ ./gradlew -daemon tasks&#10;</span></span><span class="line"><span class="cl">$ ./gradlew -daemon eclipse</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-info.sh</span>
    </div>
</div>
<div class="media">
<script type="text/javascript" src="https://asciinema.org/a/26292.js" id="asciicast-26292" async></script>
<noscript><a href="https://asciinema.org/a/26292" target="_blank"><img src="https://asciinema.org/a/26292.png" width="650" height="450"></a></noscript>
</div>
<p>En los proyectos web incluiremos como dependencias las propias de Apache Tapestry, el proyecto <em>library</em> y <em>core</em>, también aplicaremos el <em>plugin</em> de <a href="https://tomcat.apache.org/">Tomcat</a> para poder iniciar los proyectos con Gradle configurándolos para que cada uno se inicie en un puerto distinto 8080/8443 para web y 9080/9443 para back.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.bmuschko.tomcat&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">buildscript</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="s1">&#39;com.bmuschko:gradle-tomcat-plugin:2.2.2&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// All things JBoss/Hibernate&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">maven</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">name</span> <span class="s1">&#39;JBoss&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">url</span> <span class="s1">&#39;http://repository.jboss.org/nexus/content/groups/public/&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// For access to Apache Staging (Preview) packages&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">maven</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">name</span> <span class="s1">&#39;Apache Staging&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">url</span> <span class="s1">&#39;https://repository.apache.org/content/groups/staging&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s2">&#34;:core&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s2">&#34;:library&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tapestry&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-core:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-webresources:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-javadoc:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-beanvalidator:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;org.apache.tapestry:tapestry-spring:5.4-beta-36&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-jdbc:4.2.1.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-web:4.2.1.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-tx:4.2.1.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;commons-dbcp:commons-dbcp:1.4&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tomcat embedded&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tomcat</span> <span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-core:8.0.26&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tomcat</span> <span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0.26&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tomcat</span> <span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-jasper:8.0.26&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">tomcat</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpPort</span> <span class="o">=</span> <span class="mi">8080</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpsPort</span> <span class="o">=</span> <span class="mi">8443</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ajpPort</span> <span class="o">=</span> <span class="mi">8009</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stopPort</span> <span class="o">=</span> <span class="mi">8081</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">enableSSL</span> <span class="o">=</span> <span class="kc">true</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-web.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.bmuschko.tomcat&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">buildscript</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jcenter</span><span class="o">()</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="s1">&#39;com.bmuschko:gradle-tomcat-plugin:2.2.2&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s2">&#34;:core&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s2">&#34;:library&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tapestry&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-core:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-webresources:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-javadoc:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-beanvalidator:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Spring&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;org.apache.tapestry:tapestry-spring:5.4-beta-36&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-jdbc:4.2.1.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-web:4.2.1.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-tx:4.2.1.RELEASE&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;commons-dbcp:commons-dbcp:1.4&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tomcat embedded&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tomcat</span> <span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-core:8.0.26&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tomcat</span> <span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0.26&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tomcat</span> <span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-jasper:8.0.26&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">tomcat</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpPort</span> <span class="o">=</span> <span class="mi">9080</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">httpsPort</span> <span class="o">=</span> <span class="mi">9443</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ajpPort</span> <span class="o">=</span> <span class="mi">9009</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stopPort</span> <span class="o">=</span> <span class="mi">9081</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">enableSSL</span> <span class="o">=</span> <span class="kc">true</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-back.gradle</span>
    </div>
</div>
<p>En el proyecto <em>library</em> incluiremos los componentes que podemos reutilizar en cualquiera de los proyectos, será una librería de componentes de Apache Tapestry. Esta librería de componentes no es más que un archivo jar, cada proyecto que necesite utilizarlos basta con que lo incluya como una dependencia.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s2">&#34;:core&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Tapestry&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-core:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-webresources:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.apache.tapestry:tapestry-javadoc:5.4-beta-36&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">jar</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">manifest</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">attributes</span><span class="o">(</span><span class="s2">&#34;Tapestry-Module-Classes&#34;</span><span class="o">:</span> <span class="s2">&#34;io.github.picodotdev.gradle.library.services.LibraryModule&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-library.gradle</span>
    </div>
</div>
<p>En el último proyecto <em>core</em> incluiremos una clase de utilidad con los típicos métodos estáticos, incluiremos un <a href="https://github.com/picodotdev/blog-ejemplos/blob/master/MultiprojectGradle/core/src/main/java/io/github/picodotdev/gradle/core/services/ItemDAOImpl.java">servicio que nos facilitará la persistencia</a> y una <a href="https://github.com/picodotdev/blog-ejemplos/blob/master/MultiprojectGradle/core/src/main/java/io/github/picodotdev/gradle/core/models/tables/records/ItemRecord.java">clase de modelo a persistir</a> en una base de datos <a href="https://www.postgresql.org/">PostgreSQL</a> generada con <a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">jOOQ como alternativa a Hibernate</a>, añadiendo o eliminando instancias persistidas son visualizadas desde el proyecto <em>web</em> y <em>back</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.GenerationTool</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Configuration</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.CustomType</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Database</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.ForcedType</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Generate</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Generator</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Jdbc</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.jooq.util.jaxb.Target</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">buildscript</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">repositories</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="s1">&#39;org.jooq:jooq-codegen:3.6.2&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="s1">&#39;org.postgresql:postgresql:9.4-1202-jdbc41&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span> <span class="s1">&#39;org.apache.commons:commons-lang3:3.4&#39;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span> <span class="s1">&#39;joda-time:joda-time:2.3&#39;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.jooq:jooq:3.6.2&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;org.jooq:jooq-meta:3.6.2&#39;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">runtime</span> <span class="s1">&#39;org.postgresql:postgresql:9.4-1202-jdbc41&#39;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="n">generateModels</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withJdbc</span><span class="o">(</span><span class="k">new</span> <span class="n">Jdbc</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withDriver</span><span class="o">(</span><span class="s1">&#39;org.postgresql.Driver&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withUrl</span><span class="o">(</span><span class="s1">&#39;jdbc:postgresql://localhost:5432/app&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withUser</span><span class="o">(</span><span class="s1">&#39;sa&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withPassword</span><span class="o">(</span><span class="s1">&#39;sa&#39;</span><span class="o">))</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withGenerator</span><span class="o">(</span><span class="k">new</span> <span class="n">Generator</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withGenerate</span><span class="o">(</span><span class="k">new</span> <span class="n">Generate</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withInterfaces</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withRelations</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.jooq.util.DefaultGenerator&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withDatabase</span><span class="o">(</span><span class="k">new</span> <span class="n">Database</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withCustomTypes</span><span class="o">([</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="nf">CustomType</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.joda.time.DateTime&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withConverter</span><span class="o">(</span><span class="s1">&#39;io.github.picodotdev.gradle.core.jooq.DateTimeConverter&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">])</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withForcedTypes</span><span class="o">([</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="nf">ForcedType</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.joda.time.DateTime&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withTypes</span><span class="o">(</span><span class="s1">&#39;TIMESTAMP&#39;</span><span class="o">)</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">])</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withName</span><span class="o">(</span><span class="s1">&#39;org.jooq.util.postgres.PostgresDatabase&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withIncludes</span><span class="o">(</span><span class="s1">&#39;.*&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withExcludes</span><span class="o">(</span><span class="s1">&#39;&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withInputSchema</span><span class="o">(</span><span class="s1">&#39;gradle&#39;</span><span class="o">))</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withTarget</span><span class="o">(</span><span class="k">new</span> <span class="n">Target</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withPackageName</span><span class="o">(</span><span class="s1">&#39;io.github.picodotdev.gradle.core.models&#39;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">withDirectory</span><span class="o">(</span><span class="s1">&#39;src/main/java&#39;</span><span class="o">)));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">GenerationTool</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">configuration</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">updateDatabase</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;./liquibase.sh&#39;</span><span class="o">,</span> <span class="s1">&#39;update&#39;</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build-core.gradle</span>
    </div>
</div>
<p>Para arrancar los proyectos web deberemos inicializar la base de datos. Con <a href="https://docs.docker.com/compose/">docker-compose</a> y el <a href="https://github.com/picodotdev/blog-ejemplos/blob/master/MultiprojectGradle/core/misc/postgres/docker-compose.yml">archivo descriptor de Docker</a>) iniciamos el contenedor de <a href="https://www.docker.com/">Docker</a> con la base de datos PostgreSQL. La base de datos deberemos crearla manualmente pero el esquema donde se guardarán los datos los crearemos con <a href="https://elblogdepicodev.blogspot.com.es/2013/05/modificar-la-base-de-datos-con-liquibase.htmlindex-amp.html">Liquibase que nos permite hacer modificaciones a una BBDD</a>, deberemos tenerlo instalado y su comando incluido en el <em>PATH</em> del sistema para este ejemplo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux postgres<span class="o">]</span>$ docker-compose up&#10;</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -it postgres_postgres_1 bash&#10;</span></span><span class="line"><span class="cl">$ psql -U sa&#10;</span></span><span class="line"><span class="cl">CREATE DATABASE app<span class="p">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="se">\c</span> app&#10;</span></span><span class="line"><span class="cl"><span class="se">\q</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux core<span class="o">]</span>$ ./gradlew updateDatabase</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>database.sh</span>
    </div>
</div>
<p>Una vez tenemos en cada directorio los archivos <em>build.gradle</em> y el resto de archivos que necesite cada proyecto (archivos .java, .tml, &hellip;) podemos construir los módulos a la vez o de forma individual. Podemos iniciar los proyectos web y acceder a ellos con el navegador con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux MultiprojectGradle<span class="o">]</span>$ ./gradlew build&#10;</span></span><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux MultiprojectGradle<span class="o">]</span>$ <span class="nb">cd</span> back&#10;</span></span><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux back<span class="o">]</span>$ ./gradlew tomcatRun&#10;</span></span><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux MultiprojectGradle<span class="o">]</span>$ <span class="nb">cd</span> web&#10;</span></span><span class="line"><span class="cl"><span class="o">[</span>picodotdev@archlinux web<span class="o">]</span>$ ./gradlew tomcatRun</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>back-run.sh</span>
    </div>
</div>
<div class="media">
<script type="text/javascript" src="https://asciinema.org/a/26293.js" id="asciicast-26293" async></script>
<noscript><a href="https://asciinema.org/a/26293" target="_blank"><img src="https://asciinema.org/a/26293.png" width="650" height="450"></a></noscript>
</div>
<p>Creando un producto desde la consola de PostgreSQL y refrescando la página en el proyecto de <em>web</em> o <em>back</em> veremos que se visualizan sus datos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">gradle</span><span class="p">.</span><span class="n">item</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;dateCreate&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">stock</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="n">now</span><span class="p">(),</span><span class="w"> </span><span class="s1">&#39;A laptop&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="p">);</span><span class="w">&#10;</span></span></span><span class="line"><span class="cl"><span class="w">&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>insert.sql</span>
    </div>
</div>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/images/back_hu0820303a29b51ef307902e9cc24d0cdc_19324_2560x1440_fit_box_3.png" data-gallery="" title="Backoffice"><img src="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/images/back_hu0820303a29b51ef307902e9cc24d0cdc_19324_300x200_fit_box_3.png" width="300" height="138" alt="Backoffice" title="Backoffice"  class="lozad "></a></p>
<figcaption>Aplicación backoffice</figcaption>
</figure>
</div>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/MultiprojectGradle">código fuente completo del ejemplo</a> puedes verlo y descargarlo desde su repositorio de GitHub.</p>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">Herramienta de construcción Gradle</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/04/usar-gradle-mediante-gradle-wrapper.htmlindex-amp.html">Usar Gradle mediante Gradle wrapper</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/">Incluir información de la versión en el artefacto distribuible con Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro PlugIn Tapestry</a></li>
<li><a href="http://www.javamexico.org/blogs/windoctor/gradle_multiproyectos_java">Gradle: Multiproyectos Java</a></li>
<li><a href="https://www.youtube.com/watch?v=eP0NBHkAwwU">Gradle: Múltiples Proyectos en Java - P1</a></li>
<li><a href="https://www.youtube.com/watch?v=fkzPB3IgrB8">Gradle: Múltiples Proyectos en Java - P2</a></li>
<li><a href="https://www.youtube.com/watch?v=-ITQ7_94iMM">Gradle: Múltiples Proyectos en Java - P3</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money/</id>
        <title>Ejemplo práctico de ServiceLoader con ServiceProvider de Java Money</title>
        <updated>2015-09-13T11:00:00+02:00</updated>
        <published>2015-09-13T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Una aplicación que trabaje con importes y diferentes divisas necesitará ratios de conversión, estos ratios de conversión deberemos obtenerlos de algún servicio. Con la API de Java Money que aun en Java 8 no está incorporada en el JDK aunque si como una librería podremos trabajar de forma cómoda con importes, divisas y ratios. En este artículo explicaré un ejemplo de uso práctico de la clase ServiceLoader y como obtener ratios del servicio Open Exchange Rates.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>La semana pasada comentaba la <a href="https://picodotdev.github.io/blog-bitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader/">clase ServiceLoader disponibles en el JDK</a> y como nos puede servir para que nuestra aplicación o API sea extensible en futuras versiones o para alguien que quiera adaptarla a sus necesidades. La clase ServiceLoader es el método que se emplea en la <a href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/">API de Java para tratamiento de divisas, importes y conversiones</a> que quizá en un futuro se ofrezca en Java con la especificación JSR-354. Por el momento se puede usar la <a href="https://github.com/JavaMoney/jsr354-ri">librería con la implementación de referencia</a>. En este ejemplo mostraré cómo proporcionar un nuevo proveedor de ratios que obtenga <a href="https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/">ratios de conversión del servicio Open Exchange Rates</a>.</p>
<p>Para disponer del proveedor de ratios usable para Java Money deberemos implementar una clase que extienda de <a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/spi/AbstractRateProvider.java">AbstractRateProvider</a> junto con la implementación para el método <em>getExchangeRate</em> que devolverá los ratios, también el método <em>newDataLoaded</em> que procesará los datos de ratios obtenidos del servicio. El código del método <em>getExchangeRate</em> es una copia del <a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/convert/ECBAbstractRateProvider.java">proveedor del Banco Central Europeo</a> (ECB), el método <em>newDataLoaded</em> obtiene los ratios a partir de un <em>InputStream</em> con los ratios devueltos por la URL del servicio, en el caso de <a href="https://openexchangerates.org">Open Exchange Rates</a> en el <em>endpoint</em> <em>/api/latest.json?app_id=[api_key]</em>.</p>
<p>Internamente la implementación de referencia de Java Money usa la clase <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">ServiceLoader</a>. En el archivo <em>META-INF/services/javax.money.convert.ExchangeRateProvider</em> incluimos el nombre cualificado completo de la clase de la implementación de AbstractRateProvider, en este caso <em>io.github.picodotdev.javamoney.OpenExchangeRatesRateProvider</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">io.github.picodotdev.javamoney.OpenExchangeRatesRateProvider&#10;</span></span><span class="line"><span class="cl">&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>javax.money.convert.ExchangeRateProvider</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span><span class="lnt">172&#10;</span><span class="lnt">173&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.javamoney</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.math.MathContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDate</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.Period</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ConcurrentHashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.Monetary</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.ConversionContextBuilder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.ConversionQuery</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.CurrencyConversionException</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.ExchangeRate</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.ProviderContext</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.ProviderContextBuilder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.convert.RateType</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.money.spi.Bootstrap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.commons.io.IOUtils</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.javamoney.moneta.ExchangeRateBuilder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.javamoney.moneta.spi.AbstractRateProvider</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.javamoney.moneta.spi.DefaultNumberValue</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.javamoney.moneta.spi.LoaderService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.javamoney.moneta.spi.LoaderService.LoaderListener</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.json.JSONObject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OpenExchangeRatesRateProvider</span> <span class="kd">extends</span> <span class="n">AbstractRateProvider</span> <span class="kd">implements</span> <span class="n">LoaderListener</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DATA_ID</span> <span class="o">=</span> <span class="n">OpenExchangeRatesRateProvider</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ProviderContext</span> <span class="n">CONTEXT</span> <span class="o">=</span> <span class="n">ProviderContextBuilder</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;OER&#34;</span><span class="o">,</span> <span class="n">RateType</span><span class="o">.</span><span class="na">DEFERRED</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;providerDescription&#34;</span><span class="o">,</span> <span class="s">&#34;Open Exchange Rates&#34;</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;days&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">build</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">BASE_CURRENCY_CODE</span> <span class="o">=</span> <span class="s">&#34;USD&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">load</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">LocalDate</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ExchangeRate</span><span class="o">&gt;&gt;</span> <span class="n">rates</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">OpenExchangeRatesRateProvider</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">super</span><span class="o">(</span><span class="n">CONTEXT</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LoaderService</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">Bootstrap</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">LoaderService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">loader</span><span class="o">.</span><span class="na">addLoaderListener</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">getDataId</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">load</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">loadDataAsync</span><span class="o">(</span><span class="n">getDataId</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getDataId</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">DATA_ID</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">newDataLoaded</span><span class="o">(</span><span class="n">String</span> <span class="n">resourceId</span><span class="o">,</span> <span class="n">InputStream</span> <span class="n">is</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRateBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExchangeRateBuilder</span><span class="o">(</span><span class="n">ConversionContextBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">CONTEXT</span><span class="o">,</span> <span class="n">RateType</span><span class="o">.</span><span class="na">DEFERRED</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="n">date</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">rates</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">date</span><span class="o">,</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ExchangeRate</span><span class="o">&gt;());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">JSONObject</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">JSONObject</span> <span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&#34;rates&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setBase</span><span class="o">(</span><span class="n">Monetary</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(</span><span class="n">BASE_CURRENCY_CODE</span><span class="o">));</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">term</span> <span class="o">:</span> <span class="n">r</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">Monetary</span><span class="o">.</span><span class="na">isCurrencyAvailable</span><span class="o">(</span><span class="n">term</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">continue</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Double</span> <span class="n">factor</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">getDouble</span><span class="o">(</span><span class="n">term</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setTerm</span><span class="o">(</span><span class="n">Monetary</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(</span><span class="n">term</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setFactor</span><span class="o">(</span><span class="n">DefaultNumberValue</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">factor</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRate</span> <span class="n">exchangeRate</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">rates</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">date</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="n">term</span><span class="o">,</span> <span class="n">exchangeRate</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">ExchangeRate</span> <span class="nf">getExchangeRate</span><span class="o">(</span><span class="n">ConversionQuery</span> <span class="n">conversionQuery</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">load</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">conversionQuery</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">rates</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LocalDate</span><span class="o">[]</span> <span class="n">dates</span> <span class="o">=</span> <span class="n">getQueryDates</span><span class="o">(</span><span class="n">conversionQuery</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LocalDate</span> <span class="n">selectedDate</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ExchangeRate</span><span class="o">&gt;</span> <span class="n">targets</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">LocalDate</span> <span class="n">date</span> <span class="o">:</span> <span class="n">dates</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">targets</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">rates</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">date</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">targets</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">selectedDate</span> <span class="o">=</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">break</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">targets</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRateBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">getBuilder</span><span class="o">(</span><span class="n">conversionQuery</span><span class="o">,</span> <span class="n">selectedDate</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRate</span> <span class="n">sourceRate</span> <span class="o">=</span> <span class="n">targets</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">conversionQuery</span><span class="o">.</span><span class="na">getBaseCurrency</span><span class="o">().</span><span class="na">getCurrencyCode</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRate</span> <span class="n">target</span> <span class="o">=</span> <span class="n">targets</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">conversionQuery</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">().</span><span class="na">getCurrencyCode</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">createExchangeRate</span><span class="o">(</span><span class="n">conversionQuery</span><span class="o">,</span> <span class="n">builder</span><span class="o">,</span> <span class="n">sourceRate</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">LocalDate</span><span class="o">[]</span> <span class="nf">getQueryDates</span><span class="o">(</span><span class="n">ConversionQuery</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">LocalDate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">date</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">LocalDateTime</span> <span class="n">dateTime</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">dateTime</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">date</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">.</span><span class="na">toLocalDate</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">date</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">LocalDate</span><span class="o">[]</span> <span class="o">{</span> <span class="n">date</span><span class="o">,</span> <span class="n">date</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="n">Period</span><span class="o">.</span><span class="na">ofDays</span><span class="o">(</span><span class="n">1</span><span class="o">)),</span> <span class="n">date</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="n">Period</span><span class="o">.</span><span class="na">ofDays</span><span class="o">(</span><span class="n">2</span><span class="o">)),</span> <span class="n">date</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="n">Period</span><span class="o">.</span><span class="na">ofDays</span><span class="o">(</span><span class="n">3</span><span class="o">))</span> <span class="o">};</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">ExchangeRateBuilder</span> <span class="nf">getBuilder</span><span class="o">(</span><span class="n">ConversionQuery</span> <span class="n">query</span><span class="o">,</span> <span class="n">LocalDate</span> <span class="n">localDate</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRateBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExchangeRateBuilder</span><span class="o">(</span><span class="n">ConversionContextBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span> <span class="n">RateType</span><span class="o">.</span><span class="na">HISTORIC</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="n">localDate</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setBase</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getBaseCurrency</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setTerm</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">builder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">ExchangeRate</span> <span class="nf">createExchangeRate</span><span class="o">(</span><span class="n">ConversionQuery</span> <span class="n">query</span><span class="o">,</span> <span class="n">ExchangeRateBuilder</span> <span class="n">builder</span><span class="o">,</span> <span class="n">ExchangeRate</span> <span class="n">sourceRate</span><span class="o">,</span> <span class="n">ExchangeRate</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">areBothBaseCurrencies</span><span class="o">(</span><span class="n">query</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setFactor</span><span class="o">(</span><span class="n">DefaultNumberValue</span><span class="o">.</span><span class="na">ONE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">BASE_CURRENCY_CODE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">().</span><span class="na">getCurrencyCode</span><span class="o">()))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">sourceRate</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">reverse</span><span class="o">(</span><span class="n">sourceRate</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">BASE_CURRENCY_CODE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getBaseCurrency</span><span class="o">().</span><span class="na">getCurrencyCode</span><span class="o">()))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">target</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Get Conversion base as derived rate: base -&gt; EUR -&gt; term&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRate</span> <span class="n">rate1</span> <span class="o">=</span> <span class="n">getExchangeRate</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">toBuilder</span><span class="o">().</span><span class="na">setTermCurrency</span><span class="o">(</span><span class="n">Monetary</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(</span><span class="n">BASE_CURRENCY_CODE</span><span class="o">)).</span><span class="na">build</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ExchangeRate</span> <span class="n">rate2</span> <span class="o">=</span> <span class="n">getExchangeRate</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">toBuilder</span><span class="o">().</span><span class="na">setBaseCurrency</span><span class="o">(</span><span class="n">Monetary</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(</span><span class="n">BASE_CURRENCY_CODE</span><span class="o">)).</span><span class="na">setTermCurrency</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">()).</span><span class="na">build</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">nonNull</span><span class="o">(</span><span class="n">rate1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">nonNull</span><span class="o">(</span><span class="n">rate2</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setFactor</span><span class="o">(</span><span class="n">multiply</span><span class="o">(</span><span class="n">rate1</span><span class="o">.</span><span class="na">getFactor</span><span class="o">(),</span> <span class="n">rate2</span><span class="o">.</span><span class="na">getFactor</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">builder</span><span class="o">.</span><span class="na">setRateChain</span><span class="o">(</span><span class="n">rate1</span><span class="o">,</span> <span class="n">rate2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">CurrencyConversionException</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getBaseCurrency</span><span class="o">(),</span> <span class="n">query</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(),</span> <span class="n">sourceRate</span><span class="o">.</span><span class="na">getContext</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">areBothBaseCurrencies</span><span class="o">(</span><span class="n">ConversionQuery</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">BASE_CURRENCY_CODE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getBaseCurrency</span><span class="o">().</span><span class="na">getCurrencyCode</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">BASE_CURRENCY_CODE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">().</span><span class="na">getCurrencyCode</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">ExchangeRate</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">ExchangeRate</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">rate</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;Rate null is not reversible.&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">ExchangeRateBuilder</span><span class="o">(</span><span class="n">rate</span><span class="o">).</span><span class="na">setRate</span><span class="o">(</span><span class="n">rate</span><span class="o">).</span><span class="na">setBase</span><span class="o">(</span><span class="n">rate</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">()).</span><span class="na">setTerm</span><span class="o">(</span><span class="n">rate</span><span class="o">.</span><span class="na">getBaseCurrency</span><span class="o">())</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">setFactor</span><span class="o">(</span><span class="n">divide</span><span class="o">(</span><span class="n">DefaultNumberValue</span><span class="o">.</span><span class="na">ONE</span><span class="o">,</span> <span class="n">rate</span><span class="o">.</span><span class="na">getFactor</span><span class="o">(),</span> <span class="n">MathContext</span><span class="o">.</span><span class="na">DECIMAL64</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AbstractRateProvider.java</span>
    </div>
</div>
<p>También deberemos sobrescribir la propiedad <em>conversion.default-chain</em> en el archivo <em>javamoney.properties</em>,  junto con algunas otras propiedades necesarias para que cargue los datos a partir de una URL del servicio que proporciona los ratios. La URL será la del servicio Open Exchange Rates que devolverá un resultado en formato JSON, lo procesaremos y construiremos los ExchangeRates a partir de los datos que nos son proporcionados en la clase <em>AbstractRateProvider</em> con el método <em>newDataLoaded</em> en forma de <em>InputStream</em>. En el archivo <em>javamoney.properties</em> el número entre llaves ({}) indica la prioridad de la propiedad cuando haya varios archivos <em>javamoney.properties</em> en diferentes archivos jar, deberemos indicar 0 o más ya que la prioridad por defecto es -1.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl"># OER Rates&#10;</span></span><span class="line"><span class="cl">{0}load.OpenExchangeRatesRateProvider.type=SCHEDULED&#10;</span></span><span class="line"><span class="cl">{0}load.OpenExchangeRatesRateProvider.period=03:00&#10;</span></span><span class="line"><span class="cl">{0}load.OpenExchangeRatesRateProvider.resource=/java-money/defaults/OER/open-exchange-rates.json&#10;</span></span><span class="line"><span class="cl">{0}load.OpenExchangeRatesRateProvider.urls=https://openexchangerates.org/api/latest.json?app_id=9275a617a9d248129a32d996914c9344&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">#Currency Conversion&#10;</span></span><span class="line"><span class="cl">{0}conversion.default-chain=IDENT,ECB,IMF,ECB-HIST,ECB-HIST90,OER</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>javamoney.properties</span>
    </div>
</div>
<p>Implementado el servicio de ratios personalizado de Open Exchange Rates y configurado podemos usarlo con las siguientes líneas de código tal y como hacíamos con el servicio del Banco Central Europeo (ECB) proporcionado en la implementación de referencia de la librería de Java Money.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// exchange rates&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ExchangeRateProvider</span> <span class="n">exchangeRateProviderECB</span> <span class="o">=</span> <span class="n">MonetaryConversions</span><span class="o">.</span><span class="na">getExchangeRateProvider</span><span class="o">(</span><span class="s">&#34;ECB&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">ExchangeRateProvider</span> <span class="n">exchangeRateProviderOER</span> <span class="o">=</span> <span class="n">MonetaryConversions</span><span class="o">.</span><span class="na">getExchangeRateProvider</span><span class="o">(</span><span class="s">&#34;OER&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">ExchangeRate</span> <span class="n">exchangeRateECB</span> <span class="o">=</span> <span class="n">exchangeRateProviderECB</span><span class="o">.</span><span class="na">getExchangeRate</span><span class="o">(</span><span class="s">&#34;USD&#34;</span><span class="o">,</span> <span class="s">&#34;EUR&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">ExchangeRate</span> <span class="n">exchangeRateOER</span> <span class="o">=</span> <span class="n">exchangeRateProviderOER</span><span class="o">.</span><span class="na">getExchangeRate</span><span class="o">(</span><span class="s">&#34;USD&#34;</span><span class="o">,</span> <span class="s">&#34;EUR&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;exchange rates&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Ratio de conversión de USD a EUR (ECB, European Central Bank): %f\n&#34;</span><span class="o">,</span> <span class="n">exchangeRateECB</span><span class="o">.</span><span class="na">getFactor</span><span class="o">().</span><span class="na">doubleValue</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Ratio de conversión de USD a EUR (OER, Open Exchange Rates): %f\n&#34;</span><span class="o">,</span> <span class="n">exchangeRateOER</span><span class="o">.</span><span class="na">getFactor</span><span class="o">().</span><span class="na">doubleValue</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// conversion&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">CurrencyConversion</span> <span class="n">toEuroECB</span> <span class="o">=</span> <span class="n">MonetaryConversions</span><span class="o">.</span><span class="na">getConversion</span><span class="o">(</span><span class="s">&#34;EUR&#34;</span><span class="o">,</span> <span class="s">&#34;ECB&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">CurrencyConversion</span> <span class="n">toEuroOER</span> <span class="o">=</span> <span class="n">MonetaryConversions</span><span class="o">.</span><span class="na">getConversion</span><span class="o">(</span><span class="s">&#34;EUR&#34;</span><span class="o">,</span> <span class="s">&#34;OER&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">tenDollarToEuroECB</span> <span class="o">=</span> <span class="n">tenDollar</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">toEuroECB</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">tenDollarToEuroOER</span> <span class="o">=</span> <span class="n">tenDollar</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">toEuroOER</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;conversion&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;10 USD son %s EUR (ECB)\n&#34;</span><span class="o">,</span> <span class="n">tenDollarToEuroECB</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;10 USD son %s EUR (OER)\n&#34;</span><span class="o">,</span> <span class="n">tenDollarToEuroOER</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// exchange rates&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// Ratio de conversión de USD a EUR (ECB, European Central Bank): 0,887469&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// Ratio de conversión de USD a EUR (OER, Open Exchange Rates): 0,882016&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&#10;</span></span><span class="line"><span class="cl"><span class="c1">// conversion&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 10 USD son EUR 8.874689385871494 EUR (ECB)&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 10 USD son EUR 8.82016 EUR (OER)&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<p>La API de Java Money ofrece más posibilidades como obtener datos históricos de los ratios de conversión, Open Exchange Rates también ofrece datos históricos en un <em>endpoint</em> tal que <em>/api/historical/2011-10-18.json</em>. Sin embargo, cómo  hacer esto será tarea para el lector o tema para otro futuro artículo.</p>
<p>No es muy complicado lo que hay que hacer para integrar un proveedor de ratios sabiendo lo que hay que hacer y adaptando otro proveedor similar, sin embargo, no hay documentación que lo explique y he tenido que indagar en el código fuente del proyecto para saber cómo hacerlo, sin el código fuente me hubiese sido imposible escribir este artículo, esta es una de las ventajas del código abierto y software libre.</p>
<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaMoney">código fuente completo del ejemplo</a> del repositorio de ejemplos de este blog en GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/JavaMoney/jsr354-api">JSR-354 API</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri">JSR-354 RI</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/spi/Bootstrap.java">Bootstrap.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/convert/ExchangeRateProvider.java">ExchangeRateProvider.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/spi/AbstractRateProvider.java">AbstractRateProvider.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/convert/ECBAbstractRateProvider.java">ECBAbstractRateProvider.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/convert/ECBRateReadingHandler.java">ECBRateReadingHandler.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/convert/ECBCurrentRateProvider.java">ECBCurrentRateProvider.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/resources/META-INF/services/javax.money.convert.ExchangeRateProvider">javax.money.convert.ExchangeRateProvider</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/convert/MonetaryConversions.java">MonetaryConversions.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/spi/MonetaryConversionsSingletonSpi.java">MonetaryConversionsSingletonSpi.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/convert/DefaultMonetaryConversionsSingletonSpi.java">DefaultMonetaryConversionsSingletonSpi.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/loader/LoaderConfigurator.java">LoaderConfigurator.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/spi/MonetaryConfig.java">MonetaryConfig.java</a></li>
<li>[javamoney.properties](https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/resources/javamoney.properties &lt;- aqui está la configuración)</li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/loader/DefaultLoaderServiceFacade.java">DefaultLoaderServiceFacade.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/loader/LoadDataLoaderService.java">LoadDataLoaderService.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/loader/ResourceCache.java">ResourceCache.java</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri/blob/master/src/main/java/org/javamoney/moneta/internal/loader/DefaultResourceCache.java">DefaultResourceCache.java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader/</id>
        <title>Aplicación Java extensible con la clase ServiceLoader</title>
        <updated>2015-09-12T10:00:00+02:00</updated>
        <published>2015-09-12T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Java ofrece un mecanismo incluido en el propio JDK para hacer las aplicaciones extensibles o ampliables en un momento posterior al de desarrollo. La clase <em>ServiceLoader</em> permite obtener las implementaciones definidas en el <em>classpath</em> de una determinada interfaz. En este artículo explico esta clase y muestro un ejemplo sencillo de como usarla.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Puede que al desarrollar una aplicación necesitamos que esta sea extensible, esto significa que en el momento de desarrollo no conocemos las implementaciones de un determinado servicio que se proporcionarán en un futuro. Un servicio no es más que la implementación de una determinada interfaz que definimos en el momento de desarrollo. Java con la clase <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">ServiceLoader</a> proporciona un mecanismo estándar e incorporado en el JDK para cargar servicios con alguna propiedad interesante.</p>
<p>A través de la clase <em>ServiceLoader</em> y con su método estático <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html#load-java.lang.Class-">load</a> cargamos los servicios que implementen una determinada interfaz, en el parámetro de tipo <em>Class</em> indicamos la interfaz del servicio. Por ejemplo, supongamos que tenemos la siguiente definición de servicio:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.serviceloader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">interface</span> <span class="nc">Saludador</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Retorna el idioma en el que este servicio saluda.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Locale</span> <span class="nf">getLocale</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Imprime en la consola un mensaje de saludo.&#10;</span></span></span><span class="line"><span class="cl"><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">saluda</span><span class="o">(</span><span class="n">String</span> <span class="n">nombre</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Saludador.java</span>
    </div>
</div>
<p>En el momento de desarrollar esta aplicación podemos definir unos cuantos servicios que implementen la interfaz <em>Saludador</em> pero deseamos que en futuro podamos o un tercero pueda añadir más servicios para otros <em>locales</em>. La implementación de estos servicios en Español, Inglés y Euskera sería:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.serviceloader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EspanolSaludador</span> <span class="kd">implements</span> <span class="n">Saludador</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Locale</span> <span class="nf">getLocale</span><span class="o">(){</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">Locale</span><span class="o">(</span><span class="s">&#34;es&#34;</span><span class="o">,</span> <span class="s">&#34;ES&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">saluda</span><span class="o">(</span><span class="n">String</span> <span class="n">nombre</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;¡Hola %s!\n&#34;</span><span class="o">,</span> <span class="n">nombre</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>EspanolSaludador.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.serviceloader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InglesSaludador</span> <span class="kd">implements</span> <span class="n">Saludador</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Locale</span> <span class="nf">getLocale</span><span class="o">(){</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">Locale</span><span class="o">(</span><span class="s">&#34;en&#34;</span><span class="o">,</span> <span class="s">&#34;GB&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">saluda</span><span class="o">(</span><span class="n">String</span> <span class="n">nombre</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Hello %s!\n&#34;</span><span class="o">,</span> <span class="n">nombre</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>InglesSaludador.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.serviceloader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EuskeraSaludador</span> <span class="kd">implements</span> <span class="n">Saludador</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Locale</span> <span class="nf">getLocale</span><span class="o">(){</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">Locale</span><span class="o">(</span><span class="s">&#34;eu&#34;</span><span class="o">,</span> <span class="s">&#34;ES&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">saluda</span><span class="o">(</span><span class="n">String</span> <span class="n">nombre</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Kaixo %s!\n&#34;</span><span class="o">,</span> <span class="n">nombre</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>EuskeraSaludador.java</span>
    </div>
</div>
<p>Iniciando la aplicación podemos obtener los servicios disponibles para ser usados con el siguiente código:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.serviceloader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ServiceLoader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.StreamSupport</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main1</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceLoader</span><span class="o">&lt;</span><span class="n">Saludador</span><span class="o">&gt;</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">ServiceLoader</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">Saludador</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Saludador</span><span class="o">&gt;</span> <span class="n">iterable</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">loader</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Stream</span><span class="o">&lt;</span><span class="n">Saludador</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">iterable</span><span class="o">.</span><span class="na">spliterator</span><span class="o">(),</span> <span class="kc">false</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">Locale</span><span class="o">&gt;</span> <span class="n">locales</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">getLocale</span><span class="o">()).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Idiomas soportados:%s\n&#34;</span><span class="o">,</span> <span class="n">locales</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main1.java</span>
    </div>
</div>
<p>Para obtener el mensaje de saludo en el idioma que deseemos basta con obtenerlo de la lista si está disponible y usarlo:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.serviceloader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ServiceLoader</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.StreamSupport</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main2</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Locale</span><span class="o">(</span><span class="s">&#34;eu&#34;</span><span class="o">,</span> <span class="s">&#34;ES&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">nombre</span> <span class="o">=</span> <span class="s">&#34;picodotdev&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceLoader</span><span class="o">&lt;</span><span class="n">Saludador</span><span class="o">&gt;</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">ServiceLoader</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">Saludador</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Saludador</span><span class="o">&gt;</span> <span class="n">iterable</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">loader</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Stream</span><span class="o">&lt;</span><span class="n">Saludador</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">iterable</span><span class="o">.</span><span class="na">spliterator</span><span class="o">(),</span> <span class="kc">false</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Saludador</span> <span class="n">saludador</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">getLocale</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">locale</span><span class="o">)).</span><span class="na">findFirst</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Saludo en %s: &#34;</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">saludador</span><span class="o">.</span><span class="na">saluda</span><span class="o">(</span><span class="n">nombre</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main2.java</span>
    </div>
</div>
<p>La clase <em>ServiceLoader</em> busca los servicios en los archivos <em>META-INF/services/[interfaz]</em> que haya disponibles en cualquiera de las librerías jar incluidas en el <em>classpath</em>, en el caso de este ejemplo el archivo sería <em>META-INF/services/io.github.picodotdev.serviceloader.Saludador</em> y este su contenido con las tres implementaciones de servicios incluidas en el ejemplo:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">io.github.picodotdev.serviceloader.EspanolSaludador&#10;</span></span><span class="line"><span class="cl">io.github.picodotdev.serviceloader.InglesSaludador&#10;</span></span><span class="line"><span class="cl">io.github.picodotdev.serviceloader.EuskeraSaludador</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>io.github.picodotdev.serviceloader.Saludador</span>
    </div>
</div>
<p>La salida para el programa <em>Main1.java</em> y <em>Main2.java</em> respectivamente es:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl"># Main1.java&#10;</span></span><span class="line"><span class="cl">Idiomas soportados:[es_ES, en_GB, eu_ES]&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"># Main2.java&#10;</span></span><span class="line"><span class="cl">Saludo en eu_ES: Kaixo picodotdev!</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<p>Esta es una forma interesante de hacer extensible o ampliable una aplicación en un futuro. Destacar que simplemente incluyendo en el <em>classpath</em> una librería que incluya en el directorio <em>META-INF/services</em> un archivo con el nombre de la interfaz con su nombre cualificado, <em>io.github.picodotdev.serviceloader.Saludador</em>, las nuevas implementaciones de servicios se devolverán usando el método <em>Service.load(Saludador.class)</em> que se encargará de buscar los archivos en las librerías jar que los tengan.</p>
<p>Este mecanismo es que el se usa para permitir definir nuevos proveedores de ratios entre divisas en la librería de referencia <a href="https://javamoney.github.io/">Java Money</a> (JSR-354) que proporciona una <a href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/">API para el trabajo con importes monetarios, ratios y divisas en Java</a>. En otro artículo mostraré <a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money/">cómo definir un nuevo proveedor de ratios en esta API de Java Money</a>.</p>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ServiceLoader">código fuente completo del ejemplo</a> está en uno de mis repositorios de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">ServiceLoader</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8/</id>
        <title>Implementación de máquina de estados finita (FSM) con Java 8</title>
        <updated>2016-02-25T21:00:00+01:00</updated>
        <published>2015-08-01T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Es raro pero no he encontrado una librería adecuada en Java con una implementación de una máquina de estados. Stateless4j puede ser una candidata pero también tiene algunas deficiencias que pueden hacer que no nos sirva. Basándome en Stateless4j y usando Java 8 he creado una implementación de FSM con una funcionalidad similar y más ligera donde una única instancia de la máquina de estados es independiente del número de instancias de objetos en las que se use.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Hace un par de años escribía un artículo sobre <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.htmlindex-amp.html">cómo implementar una máquina de estados usando el patrón de diseño State</a>. El patrón de diseño State y el ejemplo era válido sin embargo podía tener algunas deficiencias. Una de ellas es que necesitaba una clase por cada estado diferente, si los estados son una docena el número de archivos necesarios son altos. Por otro lado cada estado debe implementar todas las posibles transiciones o métodos de la interfaz del estado que también pueden ser altos dependiendo del numero de estados y transiciones que se haga en ellos, aunque con la clase abstracta <a href="https://gist.github.com/picodotdev/6329908#file-abstractcomprastate-java">AbstractCompraState</a> del estado solo necesitamos implementar los métodos de transiciones propias del estado. Se podría añadir pero el ejemplo del patrón de diseño estado no tiene operaciones para saber si una determinada transición u operación puede realizarse y en el caso de añadir esa funcionalidad si tuviésemos varias máquinas de estados probablemente duplicaríamos parte del código en cada una de ellas. También viendo el código el flujo de estados no es muy obvio. Por todo ello en este artículo comentaré otra posibilidad, creo que mejor, que es implementando una <a href="https://es.wikipedia.org/wiki/M%C3%A1quina_de_estados">máquina de estados finita</a> (FSM, Finite State Machine) y <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">usando Java 8 aprovechando sus nuevas características</a> como los <em>streams</em> e interfaces funcionales.</p>
<p>Me ha parecido raro pero no he encontrado muchas librerías en Java que implementen una máquina de estados, la mejor que he visto ha sido <a href="https://github.com/oxo42/stateless4j">Stateless4j</a>. Es perfectamente usable, sin embargo, al hacer un ejemplo me he dado cuenta de que también tiene un defecto importante. Y es que si queremos aplicar una máquina de estados a una instancia de cierta clase, Stateless4j necesita una instancia de la máquina de estados por cada instancia de esa clase, puede ser usado para controlar, por ejemplo, el estado de unos cuantos personajes de un juego o del juego mismo pero si tenemos unos cuantas miles de instancias como puede ser en una aplicación de gestión el código será poco eficiente y el consumo de memoria mayor. Además usa Java 7 y con Java 8 algunas cosas son más fáciles y claras.</p>
<p>Basándome en Stateless4j he creado una nueva implementación y usando Java 8 la tarea ha sido más sencilla y potente. Las funcionalidades que posee la implementación de esta máquina de estados son:</p>
<ul>
<li>Definir estados.</li>
<li>Definir transiciones, manejadores de transiciones y opcionalmente condiciones que se deben dar para realizar el cambio de estado.</li>
<li>Definir manejadores de entrada y salida por transición.</li>
<li>Conocer el estado actual y si se está en un determinado estado.</li>
<li>Conocer los eventos aceptados para cambiar de estado.</li>
<li>Provocar eventos en la máquina de estados proporcionando un objeto y unos datos con información adicional para procesar el evento.</li>
<li>Definir manejadores para excepciones al realizar alguna transición o intentos de transiciones cuando no hay manejador definido.</li>
</ul>
<p>La API de la máquina de estados se compone de dos <em>builders</em> que proporcionan una API fluida, uno para crear los estados (StateBuilder) y otro para la máquina de estados (StateMachineBuilder). Además de la máquina de estados (StateMachine) y la clase que representa un estado (State).</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StateMachineBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span> <span class="kd">extends</span> <span class="n">Subject</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">stateBuilders</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">unhandledTriggerHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">exceptionHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">StateMachineBuilder</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stateBuilders</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">state</span><span class="o">(</span><span class="n">S</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">stateBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StateBuilder</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stateBuilders</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">state</span><span class="o">,</span> <span class="n">stateBuilder</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">stateBuilder</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateMachineBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">unhandledTriggerHandler</span><span class="o">(</span><span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">unhandledTriggerHandler</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">unhandledTriggerHandler</span> <span class="o">=</span> <span class="n">unhandledTriggerHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateMachineBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">exceptionHandler</span><span class="o">(</span><span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">exceptionHandler</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">exceptionHandler</span> <span class="o">=</span> <span class="n">exceptionHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateMachine</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">states</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stateBuilders</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">S</span> <span class="n">s</span><span class="o">,</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">states</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="na">build</span><span class="o">());</span> <span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">StateMachine</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;(</span><span class="n">states</span><span class="o">,</span> <span class="n">unhandledTriggerHandler</span><span class="o">,</span> <span class="n">exceptionHandler</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>StateMachineBuilder.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.BiConsumer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.BiFunction</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.BiPredicate</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">triggerBehaviours</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;&gt;</span> <span class="n">triggerEnters</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;&gt;</span> <span class="n">triggerExits</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">enters</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">exits</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">StateBuilder</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">triggerBehaviours</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">triggerEnters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">triggerExits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">enters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">exits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">permit</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">S</span> <span class="n">destination</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">permit</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="n">destination</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">permit</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">S</span> <span class="n">destination</span><span class="o">,</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">guard</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerBehaviours</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="n">TriggerBehaviour</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">destination</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">permit</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">BiFunction</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">,</span> <span class="n">S</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">permit</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="n">selector</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">permit</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">BiFunction</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">,</span> <span class="n">S</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">,</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">guard</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerBehaviours</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="k">new</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;&gt;(</span><span class="n">selector</span><span class="o">,</span> <span class="n">guard</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">ignore</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">ignore</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">ignore</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">guard</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerBehaviours</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="n">TriggerBehaviour</span><span class="o">.</span><span class="na">identity</span><span class="o">(</span><span class="n">guard</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">enter</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerEnters</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerEnters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">trigger</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">enter</span><span class="o">(</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">enters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">exit</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerExits</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerExits</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">trigger</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateBuilder</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">exit</span><span class="o">(</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">exits</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">State</span><span class="o">&lt;&gt;(</span><span class="n">triggerBehaviours</span><span class="o">,</span> <span class="n">triggerEnters</span><span class="o">,</span> <span class="n">triggerExits</span><span class="o">,</span> <span class="n">enters</span><span class="o">,</span> <span class="n">exits</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>StateBuilder.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StateMachine</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span> <span class="kd">extends</span> <span class="n">Subject</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">states</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">unhandledTriggerHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">exceptionHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">StateMachine</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">states</span><span class="o">,</span> <span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">unhandledTriggerHandler</span><span class="o">,</span> <span class="n">TriConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">exceptionHandler</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">states</span> <span class="o">=</span> <span class="n">states</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">unhandledTriggerHandler</span> <span class="o">=</span> <span class="n">unhandledTriggerHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">exceptionHandler</span> <span class="o">=</span> <span class="n">exceptionHandler</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">S</span> <span class="nf">getState</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">object</span><span class="o">.</span><span class="na">getState</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">S</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">object</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">state</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isState</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">S</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getState</span><span class="o">(</span><span class="n">object</span><span class="o">)</span> <span class="o">==</span> <span class="n">state</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">getTriggers</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">states</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getState</span><span class="o">(</span><span class="n">object</span><span class="o">)).</span><span class="na">getPermittedTriggers</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasTrigger</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getTriggers</span><span class="o">(</span><span class="n">object</span><span class="o">).</span><span class="na">contains</span><span class="o">(</span><span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canFire</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">canFire</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canFire</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">M</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">synchronized</span> <span class="o">(</span><span class="n">object</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Optional</span><span class="o">&lt;</span><span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">triggerBehaviour</span> <span class="o">=</span> <span class="n">states</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getState</span><span class="o">(</span><span class="n">object</span><span class="o">)).</span><span class="na">getHandler</span><span class="o">(</span><span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">triggerBehaviour</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">triggerBehaviour</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">isMet</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fire</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">fire</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fire</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">M</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">synchronized</span> <span class="o">(</span><span class="n">object</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Optional</span><span class="o">&lt;</span><span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">optTriggerBehaviour</span> <span class="o">=</span> <span class="n">states</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getState</span><span class="o">(</span><span class="n">object</span><span class="o">)).</span><span class="na">getHandler</span><span class="o">(</span><span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">optTriggerBehaviour</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">triggerBehaviour</span> <span class="o">=</span> <span class="n">optTriggerBehaviour</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">triggerBehaviour</span><span class="o">.</span><span class="na">isMet</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Optional</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="n">state</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">state</span> <span class="o">=</span> <span class="n">triggerBehaviour</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">exceptionHandler</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">states</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">exit</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">setState</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">states</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">enter</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">unhandledTriggerHandler</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>StateMachine.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.BiConsumer</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">State</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">triggerBehaviours</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;&gt;</span> <span class="n">triggerEnters</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;&gt;</span> <span class="n">triggerExits</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">enters</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">exits</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">State</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">triggerBehaviours</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;&gt;</span> <span class="n">triggerEnters</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;&gt;</span> <span class="n">triggerExits</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">enters</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">exits</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">triggerBehaviours</span> <span class="o">=</span> <span class="n">triggerBehaviours</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">triggerEnters</span> <span class="o">=</span> <span class="n">triggerEnters</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">triggerExits</span> <span class="o">=</span> <span class="n">triggerExits</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">enters</span> <span class="o">=</span> <span class="n">enters</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">exits</span> <span class="o">=</span> <span class="n">exits</span><span class="o">;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canHandle</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">trigger</span><span class="o">).</span><span class="na">isPresent</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="nf">getHandler</span><span class="o">(</span><span class="n">T</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">triggerBehaviours</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">trigger</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">getPermittedTriggers</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">triggerBehaviours</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">enter</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">M</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">enters</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">((</span><span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span> <span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerEnters</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">()).</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">((</span><span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span> <span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">exit</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">T</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">M</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">triggerExits</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">trigger</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">()).</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">((</span><span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span> <span class="o">});</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">exits</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">((</span><span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span> <span class="o">});</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>State.java</span>
    </div>
</div>
<p>Internamente se usa la clase <em>TransitionBehiavour</em> que define el comportamiento en una transición y ante un evento. Si posee una función de protección (guard) se comprueba antes de ejecutar la acción (selector) y que devolverá el nuevo estado.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.BiFunction</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.BiPredicate</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">BiFunction</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">,</span> <span class="n">S</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">guard</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">TriggerBehaviour</span><span class="o">(</span><span class="n">BiFunction</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">,</span> <span class="n">S</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">,</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">guard</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">selector</span> <span class="o">=</span> <span class="n">selector</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">guard</span> <span class="o">=</span> <span class="n">guard</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMet</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">M</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">guard</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">guard</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="nf">select</span><span class="o">(</span><span class="n">O</span> <span class="n">object</span><span class="o">,</span> <span class="n">M</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!</span><span class="n">isMet</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">))</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">selector</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">of</span><span class="o">(</span><span class="n">S</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;&gt;((</span><span class="n">O</span> <span class="n">o</span><span class="o">,</span> <span class="n">M</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">state</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">},</span> <span class="kc">null</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;</span><span class="n">S</span><span class="o">,</span> <span class="n">T</span><span class="o">,</span> <span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="nf">identity</span><span class="o">(</span><span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">O</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">guard</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">TriggerBehaviour</span><span class="o">&lt;&gt;((</span><span class="n">O</span> <span class="n">o</span><span class="o">,</span> <span class="n">M</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span> &#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">},</span> <span class="n">guard</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TriggerBehaviour.java</span>
    </div>
</div>
<p>El siguiente es un ejemplo de uso similar al del artículo del patrón de diseño State con un hipotético flujo de estados para una compra junto con el código de la máquina de estados necesario para implementarlo y con unas pruebas unitarias. El enumerado <em>State</em> define los posibles estados y el enumerado <em>Trigger</em> define los posibles eventos, en constructor <em>static</em> se define la única instancia de máquina de estados necesaria para manejar cualquier número de instancias de <em>Purchase</em> usando las clases <em>builder</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Purchase</span> <span class="kd">implements</span> <span class="n">Subject</span><span class="o">&lt;</span><span class="n">Purchase</span><span class="o">.</span><span class="na">State</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">enum</span> <span class="n">State</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">CREATED</span><span class="o">,</span> <span class="n">RESERVED</span><span class="o">,</span> <span class="n">TRANSIT</span><span class="o">,</span> <span class="n">DELIVERIED</span><span class="o">,</span> <span class="n">CANCELED</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">enum</span> <span class="n">Trigger</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">RESERVE</span><span class="o">,</span> <span class="n">DELIVERY</span><span class="o">,</span> <span class="n">DELIVERIED</span><span class="o">,</span> <span class="n">CANCEL</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">StateMachineBuilder</span><span class="o">&lt;</span><span class="n">State</span><span class="o">,</span> <span class="n">Trigger</span><span class="o">,</span> <span class="n">Purchase</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;&gt;</span> <span class="n">smb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StateMachineBuilder</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smb</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">CREATED</span><span class="o">).</span><span class="na">permit</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">,</span> <span class="n">Purchase</span><span class="o">::</span><span class="n">reserve</span><span class="o">).</span><span class="na">permit</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">CANCEL</span><span class="o">,</span> <span class="n">State</span><span class="o">.</span><span class="na">CANCELED</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smb</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">RESERVED</span><span class="o">).</span><span class="na">permit</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">DELIVERY</span><span class="o">,</span> <span class="n">State</span><span class="o">.</span><span class="na">TRANSIT</span><span class="o">,</span> <span class="n">Purchase</span><span class="o">::</span><span class="n">isDeliverable</span><span class="o">).</span><span class="na">permit</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">CANCEL</span><span class="o">,</span> <span class="n">State</span><span class="o">.</span><span class="na">CANCELED</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smb</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">TRANSIT</span><span class="o">).</span><span class="na">permit</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">DELIVERIED</span><span class="o">,</span> <span class="n">State</span><span class="o">.</span><span class="na">DELIVERIED</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smb</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">DELIVERIED</span><span class="o">).</span><span class="na">enter</span><span class="o">(</span><span class="n">Purchase</span><span class="o">::</span><span class="n">deliveried</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smb</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">CANCELED</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">smb</span><span class="o">.</span><span class="na">unhandledTriggerHandler</span><span class="o">(</span><span class="n">Purchase</span><span class="o">::</span><span class="n">onUnhandledTrigger</span><span class="o">).</span><span class="na">exceptionHandler</span><span class="o">(</span><span class="n">Purchase</span><span class="o">::</span><span class="n">onException</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">stateMachine</span> <span class="o">=</span> <span class="n">smb</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">StateMachine</span><span class="o">&lt;</span><span class="n">State</span><span class="o">,</span> <span class="n">Trigger</span><span class="o">,</span> <span class="n">Purchase</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;&gt;</span> <span class="n">stateMachine</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="n">BigDecimal</span> <span class="n">PREMIUM_DELIVERY</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;100&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">LocalDateTime</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">State</span> <span class="n">state</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">int</span> <span class="n">items</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Purchase</span><span class="o">(</span><span class="kt">int</span> <span class="n">items</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">State</span><span class="o">.</span><span class="na">CREATED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">items</span> <span class="o">=</span> <span class="n">items</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">amount</span> <span class="o">=</span> <span class="n">amount</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">StateMachine</span><span class="o">&lt;</span><span class="n">State</span><span class="o">,</span> <span class="n">Trigger</span><span class="o">,</span> <span class="n">Purchase</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">getStateMachine</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">stateMachine</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">State</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">state</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">LocalDateTime</span> <span class="nf">getDate</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDate</span><span class="o">(</span><span class="n">LocalDateTime</span> <span class="n">date</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">date</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// StateMachine methods&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isState</span><span class="o">(</span><span class="n">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getStateMachine</span><span class="o">().</span><span class="na">isState</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">state</span><span class="o">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Trigger</span><span class="o">&gt;</span> <span class="nf">getTriggers</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getStateMachine</span><span class="o">().</span><span class="na">getTriggers</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasTrigger</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getStateMachine</span><span class="o">().</span><span class="na">hasTrigger</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">trigger</span><span class="o">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canFire</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getStateMachine</span><span class="o">().</span><span class="na">canFire</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canFire</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">getStateMachine</span><span class="o">().</span><span class="na">canFire</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fire</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">getStateMachine</span><span class="o">().</span><span class="na">fire</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fire</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">getStateMachine</span><span class="o">().</span><span class="na">fire</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">onUnhandledTrigger</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;UnhandledTrigger %s\n&#34;</span><span class="o">,</span> <span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">onException</span><span class="o">(</span><span class="n">Trigger</span> <span class="n">trigger</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Execption %s\n&#34;</span><span class="o">,</span> <span class="n">trigger</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Business StateMachine methods&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDeliverable</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">date</span><span class="o">.</span><span class="na">plusMinutes</span><span class="o">(</span><span class="n">60</span><span class="o">).</span><span class="na">isAfter</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasStock</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">items</span> <span class="o">&lt;=</span> <span class="n">5</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">State</span> <span class="nf">reserve</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="o">(</span><span class="n">hasStock</span><span class="o">(</span><span class="n">m</span><span class="o">))?</span><span class="n">State</span><span class="o">.</span><span class="na">RESERVED</span><span class="o">:</span><span class="n">State</span><span class="o">.</span><span class="na">CANCELED</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">void</span> <span class="nf">deliveried</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Deliveried&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Purchase.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import static</span> <span class="nn">org.junit.Assert.assertEquals</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Assert</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.machinarum.Purchase.State</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.github.picodotdev.machinarum.Purchase.Trigger</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PurchaseTest</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNormal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Purchase</span> <span class="n">purchase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Purchase</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;150&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">assertEquals</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">RESERVED</span><span class="o">,</span> <span class="n">purchase</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">DELIVERY</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">assertEquals</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">TRANSIT</span><span class="o">,</span> <span class="n">purchase</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">DELIVERIED</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">assertEquals</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">DELIVERIED</span><span class="o">,</span> <span class="n">purchase</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCancel</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Purchase</span> <span class="n">purchase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Purchase</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;150&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">assertEquals</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">RESERVED</span><span class="o">,</span> <span class="n">purchase</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">CANCEL</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">assertEquals</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">CANCELED</span><span class="o">,</span> <span class="n">purchase</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMethods</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Purchase</span> <span class="n">purchase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Purchase</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;150&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">isState</span><span class="o">(</span><span class="n">Purchase</span><span class="o">.</span><span class="na">State</span><span class="o">.</span><span class="na">CREATED</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">,</span> <span class="n">Trigger</span><span class="o">.</span><span class="na">CANCEL</span><span class="o">).</span><span class="na">containsAll</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">getTriggers</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">hasTrigger</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">canFire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">purchase</span><span class="o">.</span><span class="na">canFire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">RESERVE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">CANCEL</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">assertEquals</span><span class="o">(</span><span class="n">State</span><span class="o">.</span><span class="na">CANCELED</span><span class="o">,</span> <span class="n">purchase</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Test</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHandlers</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Purchase</span> <span class="n">purchase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Purchase</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;150&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">purchase</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="n">Trigger</span><span class="o">.</span><span class="na">DELIVERIED</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PurchaseTest.java</span>
    </div>
</div>
<p>La interfaz <em>Subject</em> proporciona las operaciones para que la máquina de estados pueda obtener y modificar el estado del objeto manejado en una transición, en este caso de una instancia de <em>Purchase</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.github.picodotdev.machinarum</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">S</span> <span class="nf">getState</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">S</span> <span class="n">status</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Subject.java</span>
    </div>
</div>
<p>Otra posibilidad a las máquinas de estados son las herramientas de <a href="https://es.wikipedia.org/wiki/Proceso_de_negocio">procesos de negocio</a> o BPM (Business Process Management) pero salvo que tengamos algo muy complejo la máquina de estados de este ejemplo será más que suficiente para la mayoría de situaciones. Hace un tiempo escribir varios artículos sobre <a href="https://www.activiti.org/">Activiti</a> y <a href="https://www.drools.org/">Drools</a>:</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/09/conceptos-sobre-procesos-de-negocio-bp.html">Conceptos sobre procesos de negocio (BP, BPM, BPMS, &hellip;) </a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/09/procesos-de-negocio-con-activiti.html">Procesos de negocio con Activiti</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/10/reglas-de-negocio-con-drools-y-activiti.html">Reglas de negocio con Drools y Activiti</a></li>
</ul>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Machinarum">código fuente completo</a> está disponible en mi repositorio de ejemplos en GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://projects.spring.io/spring-statemachine/">Spring Statemachine</a></li>
<li><a href="https://github.com/oxo42/stateless4j">Stateless4j</a></li>
<li><a href="https://stackoverflow.com/questions/10875317/recommended-fsm-finite-state-machine-library-for-java">Recommended FSM (Finite State Machine) Library for Java</a></li>
<li><a href="http://www.java2s.com/Code/Java/Collections-Data-Structure/AprogrammableFiniteStateMachineimplementation.htm">A programmable Finite State Machine </a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/</id>
        <title>Cómo trabajar con importes, ratios y divisas en Java</title>
        <updated>2015-07-21T20:30:00+02:00</updated>
        <published>2015-07-21T20:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Aún en Java 8 no tenemos una API incluida en el JDK dedicada al manejo de importes, divisas y conversiones. Si la especificación JSR-354 se incluye en alguna versión podremos hacer uso de ella sin necesidad de ninguna dependencia adicional, pero si tenemos necesidad ahora podemos usar la librería que ha producido la especificación. Usando las clases y métodos de la API evitaremos hacer y mantener una implementación nosotros mismos que además seguro no llega al nivel de esta.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Las aplicaciones de comercio electrónico o que realizan operaciones financieras con importes seguro que necesitan una forma de representar un importe junto con una divisa. También si necesitan convertir importes en diferentes divisas necesitarán obtener los ratios de conversión de alguna fuente, en el artículo <a href="https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/">Servicio para obtener ratios de conversión entre divisas</a> comentaba uno que podemos usar, <a href="https://openexchangerates.org/">Open Exchange Rates</a>. Java incluye clases para datos numéricos y con ellos se pueden representar importes como por ejemplo <a href="https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html">BigDecimal</a>. Para importes no debemos usar en ningún caso un tipo de dato <em>float</em> o <em>double</em> ya que estos son incapaces de representar ciertos valores de forma exacta, usando <a href="https://elblogdepicodev.blogspot.com.es/2012/01/errores-de-precision-redondeo-y.htmlindex-amp.html"><em>float</em> y <em>double</em> tendremos errores de precisión, redondeo y representación</a>. En vez de crear un nuevo tipo de datos (una clase) que tenga como propiedades un BigDecimal para el importe y un String o similar para representar la divisa además de implementar las varias operaciones aritméticas y de comparación entre otras muchas cosas que necesitaremos podemos usar la librería que la <a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/asciidoc/JavaMoneySpecification.adoc">especificación JSR-354</a> proporciona una API dedicada a importes y divisas en Java. En Java 8 no se incluyó pero en una futura versión quizá si se incluya en el propio JDK. En este artículo comentaré como usando Java 8 podemos hacer uso de esta API desde ya y que ofrece.</p>
<p>Aunque la especificación no es parte de Java aún el grupo de trabajo encargado ha generado una dependencia que podemos usar. En el <a href="https://github.com/JavaMoney/">repositorio de GitHub</a> podemos encontrar el código de la librería. Incluyéndola como dependencia de un proyecto podemos usarla, usando <a href="https://gradle.org/">Gradle</a> con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">	<span class="n">compile</span> <span class="s1">&#39;org.javamoney:moneta:1.0&#39;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">...</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">...</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La librería hace uso de lambdas, una de las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">novedades que introdujo de Java 8 en el lenguaje</a>, y nos facilita varias funcionalidades. También permite usar <em>streams</em>. Veamos algunas de las posibilidades.</p>
<h3 id="representación-de-divisas-e-importes">Representación de divisas e importes</h3>
<p>Las divisas se representan con <a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/CurrencyUnit.java">CurrencyUnit</a> y los  importes se representan usando la clase <a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/MonetaryAmount.java">MoneyAmount</a>, tenemos varias formas de crear instancias de estas clases.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// getting CurrencyUnit by currency code and locale&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">CurrencyUnit</span> <span class="n">euro</span> <span class="o">=</span> <span class="n">Monetary</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(</span><span class="s">&#34;EUR&#34;</span><span class="o">);</span>		&#10;</span></span><span class="line"><span class="cl"><span class="n">CurrencyUnit</span> <span class="n">dollar</span> <span class="o">=</span> <span class="n">Monetary</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">US</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// getting MonetaryAmount by currency code and CurrencyUnit, without using Money (implementation class)&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmount</span> <span class="n">fiveEuro</span> <span class="o">=</span> <span class="n">Money</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="n">euro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">twelveEuro</span> <span class="o">=</span> <span class="n">Money</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&#34;12&#34;</span><span class="o">),</span> <span class="n">euro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">tenDollar</span> <span class="o">=</span> <span class="n">Money</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">10</span><span class="o">,</span> <span class="s">&#34;USD&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">tenPound</span> <span class="o">=</span> <span class="n">Monetary</span><span class="o">.</span><span class="na">getDefaultAmountFactory</span><span class="o">().</span><span class="na">setNumber</span><span class="o">(</span><span class="n">10</span><span class="o">).</span><span class="na">setCurrency</span><span class="o">(</span><span class="s">&#34;GBP&#34;</span><span class="o">).</span><span class="na">create</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;getting MonetaryAmount by currency code and CurrencyUnit, without using Money (implementation class)&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;5 EUR: %s\n&#34;</span><span class="o">,</span> <span class="n">fiveEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;12 EUR: %s\n&#34;</span><span class="o">,</span> <span class="n">twelveEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;10 USD: %s\n&#34;</span><span class="o">,</span> <span class="n">tenDollar</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;10 GBP: %s\n&#34;</span><span class="o">,</span> <span class="n">tenPound</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 5 EUR: EUR 5&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 12 EUR: EUR 12&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 10 USD: USD 10&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 10 GBP: GBP 10&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-1.java</span>
    </div>
</div>
<p>La API ofrece varios métodos para extraer los valores numéricos, la parte entera y decimal, que una instancia de MoneyAmount contiene así como obtener los valores en un tipo de datos más básico como BigDecimal.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// getting currency, the numeric amount and precision&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmount</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">Money</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">123</span><span class="o">.</span><span class="na">45</span><span class="o">,</span> <span class="n">euro</span><span class="o">);</span>		&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;123.45 EUR (currency): %s\n&#34;</span><span class="o">,</span> <span class="n">amount</span><span class="o">.</span><span class="na">getCurrency</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;123.45 EUR (long): %s\n&#34;</span><span class="o">,</span> <span class="n">amount</span><span class="o">.</span><span class="na">getNumber</span><span class="o">().</span><span class="na">longValue</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;123.45 EUR (number): %s\n&#34;</span><span class="o">,</span> <span class="n">amount</span><span class="o">.</span><span class="na">getNumber</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;123.45 EUR (fractionNumerator): %s\n&#34;</span><span class="o">,</span> <span class="n">amount</span><span class="o">.</span><span class="na">getNumber</span><span class="o">().</span><span class="na">getAmountFractionNumerator</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;123.45 EUR (fractionDenominator): %s\n&#34;</span><span class="o">,</span> <span class="n">amount</span><span class="o">.</span><span class="na">getNumber</span><span class="o">().</span><span class="na">getAmountFractionDenominator</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;123.45 EUR (amount, BigDecimal): %s\n&#34;</span><span class="o">,</span> <span class="n">amount</span><span class="o">.</span><span class="na">getNumber</span><span class="o">().</span><span class="na">numberValue</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 123.45 EUR (currency): EUR&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 123.45 EUR (long): 123&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 123.45 EUR (number): 123.45&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 123.45 EUR (fractionNumerator): 45&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 123.45 EUR (fractionDenominator): 100&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 123.45 EUR (amount, BigDecimal): 123.45&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-2.java</span>
    </div>
</div>
<h3 id="operaciones-aritméticas-de-comparación-y-operaciones-personalizadas">Operaciones aritméticas, de comparación y operaciones personalizadas</h3>
<p>Podemos hacer operaciones aritméticas (suma, resta, multiplicación y división) entre dos importes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// aritmetic&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmount</span> <span class="n">seventeenEuros</span> <span class="o">=</span> <span class="n">fiveEuro</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">twelveEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">sevenEuros</span> <span class="o">=</span> <span class="n">twelveEuro</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">fiveEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">tenEuro</span> <span class="o">=</span> <span class="n">fiveEuro</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">twoPointFiveEuro</span> <span class="o">=</span> <span class="n">fiveEuro</span><span class="o">.</span><span class="na">divide</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;5 EUR + 12 EUR: %s\n&#34;</span><span class="o">,</span> <span class="n">seventeenEuros</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;12 EUR - 5 EUR: %s\n&#34;</span><span class="o">,</span> <span class="n">sevenEuros</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;5 EUR * 2: %s\n&#34;</span><span class="o">,</span> <span class="n">tenEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;5 EUR / 2: %s\n&#34;</span><span class="o">,</span> <span class="n">twoPointFiveEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 5 EUR + 12 EUR: EUR 17&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 12 EUR - 5 EUR: EUR 7&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 5 EUR * 2: EUR 10&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 5 EUR / 2: EUR 2.5&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		 &#10;</span></span><span class="line"><span class="cl"><span class="c1">// negative&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmount</span> <span class="n">minusSevenEuro</span> <span class="o">=</span> <span class="n">fiveEuro</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">twelveEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;negative&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;5 EUR - 12 EUR: %s\n&#34;</span><span class="o">,</span> <span class="n">minusSevenEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 5 EUR - 12 EUR: EUR -7&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-3.java</span>
    </div>
</div>
<p>También podremos hacer comparaciones:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// comparing&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;7€ &lt; 10€: %s\n&#34;</span><span class="o">,</span> <span class="n">sevenEuros</span><span class="o">.</span><span class="na">isLessThan</span><span class="o">(</span><span class="n">tenEuro</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;7€ &gt; 10€: %s\n&#34;</span><span class="o">,</span> <span class="n">sevenEuros</span><span class="o">.</span><span class="na">isGreaterThan</span><span class="o">(</span><span class="n">tenEuro</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;10 &gt; 7€: %s\n&#34;</span><span class="o">,</span> <span class="n">tenEuro</span><span class="o">.</span><span class="na">isGreaterThan</span><span class="o">(</span><span class="n">sevenEuros</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 7€ &lt; 10€: true&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 7€ &gt; 10€: false&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// 10 &gt; 7€: true&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-4.java</span>
    </div>
</div>
<h3 id="redondear-importes">Redondear importes</h3>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// rounding&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmount</span> <span class="n">euros</span> <span class="o">=</span> <span class="n">Money</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">12</span><span class="o">.</span><span class="na">34567</span><span class="o">,</span> <span class="s">&#34;EUR&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">roundedEuros</span> <span class="o">=</span> <span class="n">euros</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">Monetary</span><span class="o">.</span><span class="na">getDefaultRounding</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;rounding&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;12.34567 EUR redondeados: %s\n&#34;</span><span class="o">,</span> <span class="n">roundedEuros</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 12.34567 EUR redondeados: EUR 12.35&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-9.java</span>
    </div>
</div>
<p>E incluso implementar operaciones más complejas y habituales personalizadas con la clase <a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/java/javax/money/MonetaryOperator.java">MonetaryOperator</a> que se puede aplicar usando el método <em>with</em> de <em>MonetaryAmount</em>.</p>
<h3 id="formateado-y-analizado">Formateado y analizado</h3>
<p>Dependiendo de país o la moneda los importes se representan de forma diferente, por ejemplo, en Estados Unidos se usa «,» como separador de millares y «.» como separador de los decimales, en España es diferente, se usa «.» para los millares y «,» para los decimales. También hay monedas que no tienen decimales como el Yen japonés. Disponemos de métodos y clases para formatear correctamente el importe.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// formating&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmountFormat</span> <span class="n">spainFormat</span> <span class="o">=</span> <span class="n">MonetaryFormats</span><span class="o">.</span><span class="na">getAmountFormat</span><span class="o">(</span><span class="k">new</span> <span class="n">Locale</span><span class="o">(</span><span class="s">&#34;es&#34;</span><span class="o">,</span> <span class="s">&#34;ES&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmountFormat</span> <span class="n">usFormat</span> <span class="o">=</span> <span class="n">MonetaryFormats</span><span class="o">.</span><span class="na">getAmountFormat</span><span class="o">(</span><span class="k">new</span> <span class="n">Locale</span><span class="o">(</span><span class="s">&#34;en&#34;</span><span class="o">,</span> <span class="s">&#34;US&#34;</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">fiveThousandEuro</span> <span class="o">=</span> <span class="n">Money</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">5000</span><span class="o">,</span> <span class="n">euro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;formating&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Formato de 5000 EUR localizado en España: %s\n&#34;</span><span class="o">,</span> <span class="n">spainFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">fiveThousandEuro</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Formato de 5000 EUR localizado en Estados Unidos: %s\n&#34;</span><span class="o">,</span> <span class="n">usFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">fiveThousandEuro</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Formato de 5000 EUR localizado en España: 5.000,00 EUR&#10;</span></span></span><span class="line"><span class="cl"><span class="c1">// Formato de 5000 EUR localizado en Estados Unidos: EUR5,000.00&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-5.java</span>
    </div>
</div>
<p>Podemos hacer la operación contraria <em>parseando</em> o analizando la cadena, obtener un objeto MoneyAmount desde su representación en String.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// parsing&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MonetaryAmount</span> <span class="n">twelvePointFiveEuro</span> <span class="o">=</span> <span class="n">spanishFormat</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;12,50 EUR&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Analizando «12,50 EUR» es %s\n&#34;</span><span class="o">,</span> <span class="n">spainFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">twelvePointFiveEuro</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Analizando «12,50 EUR» es 12,50 EUR&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-6.java</span>
    </div>
</div>
<h3 id="ratios-de-conversión-conversiones-entre-divisas">Ratios de conversión, conversiones entre divisas</h3>
<p>Si necesitamos convertir el importe de una moneda a otra necesitaremos el ratio de conversión entre las monedas, es decir, por cada dólar estadounidense cuántos euros son si queremos hacer una conversión de USD a euro. Se puede obtener el ratio de conversión o hacer la conversión directamente entre las dos monedas. En el siguiente código se muestra cuántos euros son 10 USD con la cotización entre las divisas en el momento de escribir el artículo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// exchange rates		&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ExchangeRateProvider</span> <span class="n">exchangeRateProvider</span> <span class="o">=</span> <span class="n">MonetaryConversions</span><span class="o">.</span><span class="na">getExchangeRateProvider</span><span class="o">(</span><span class="s">&#34;ECB&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl"><span class="n">ExchangeRate</span> <span class="n">exchangeRate</span> <span class="o">=</span> <span class="n">exchangeRateProvider</span><span class="o">.</span><span class="na">getExchangeRate</span><span class="o">(</span><span class="s">&#34;USD&#34;</span><span class="o">,</span> <span class="s">&#34;EUR&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Ratio de conversión de USD a EUR: %f\n&#34;</span><span class="o">,</span> <span class="n">exchangeRate</span><span class="o">.</span><span class="na">getFactor</span><span class="o">().</span><span class="na">doubleValue</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Ratio de conversión de USD a EUR: 0,921489&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		&#10;</span></span><span class="line"><span class="cl"><span class="c1">// conversion&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">CurrencyConversion</span> <span class="n">toEuro</span> <span class="o">=</span> <span class="n">MonetaryConversions</span><span class="o">.</span><span class="na">getConversion</span><span class="o">(</span><span class="s">&#34;EUR&#34;</span><span class="o">);</span>		&#10;</span></span><span class="line"><span class="cl"><span class="n">MonetaryAmount</span> <span class="n">tenDollarToEuro</span> <span class="o">=</span> <span class="n">tenDollar</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">toEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;10 USD son %s EUR\n&#34;</span><span class="o">,</span> <span class="n">tenDollarToEuro</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// 10 USD son EUR 9.214891264283081 EUR&#10;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-7.java</span>
    </div>
</div>
<p>La librería incluye varias fuentes para las cotizaciones de cada moneda, una de ellas es el Banco Central Europeo pero también podemos crear la implementación de una nueva fuente que por ejemplo use Open Exchange Rates.</p>
<h3 id="streams-y-filtros">Streams y filtros</h3>
<p>Por si todo esto fuera poco podemos usar las características de programación funcional de Java 8 ya que la librería ofrece soporte para streams para ejemplo filtrar o para agrupar.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// filter&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">MonetaryAmount</span><span class="o">&gt;</span> <span class="n">onlyDollars</span> <span class="o">=</span> <span class="n">amounts</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">MonetaryFunctions</span><span class="o">.</span><span class="na">isCurrency</span><span class="o">(</span><span class="n">dollar</span><span class="o">))</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Solo USD: %s\n&#34;</span><span class="o">,</span> <span class="n">onlyDollars</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">MonetaryAmount</span><span class="o">&gt;</span> <span class="n">euroAndDollar</span> <span class="o">=</span> <span class="n">amounts</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">MonetaryFunctions</span><span class="o">.</span><span class="na">isCurrency</span><span class="o">(</span><span class="n">euro</span><span class="o">,</span> <span class="n">dollar</span><span class="o">))</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// grouping&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Map</span><span class="o">&lt;</span><span class="n">CurrencyUnit</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MonetaryAmount</span><span class="o">&gt;&gt;</span> <span class="n">groupedByCurrency</span> <span class="o">=</span> <span class="n">amounts</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>&#10;</span></span><span class="line"><span class="cl">				<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">MonetaryFunctions</span><span class="o">.</span><span class="na">groupByCurrencyUnit</span><span class="o">());</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Agrupación por divisa: %s\n&#34;</span><span class="o">,</span> <span class="n">groupedByCurrency</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="c1">// Agrupación por divisa: {EUR=[EUR 2], GBP=[GBP 13.37], USD=[USD 7, USD 18, USD 42]}&#10;</span></span></span><span class="line"><span class="cl"><span class="c1"></span>&#10;</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main-8.java</span>
    </div>
</div>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaMoney">código fuente completo del ejemplo</a> está en uno de mis repositorios de GitHub.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://github.com/JavaMoney/jsr354-api">JSR 354 API</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-ri">JSR 354 RI</a></li>
<li><a href="https://java.net/projects/javamoney/pages/Home">JSR 354 - Currency and Money</a></li>
<li><a href="https://github.com/JavaMoney/jsr354-api/blob/master/src/main/asciidoc/JavaMoneySpecification.adoc">﻿JSR 354 Money and Currency — Specification</a></li>
<li><a href="https://java.dzone.com/articles/looking-java-9-money-and">Looking into the Java 9 Money and Currency API (JSR 354)</a></li>
<li><a href="https://weblogs.java.net/blog/otaviojava/archive/2014/08/25/java-9-coming-money-api">Java 9 is coming with money api</a></li>
<li><a href="http://www.joda.org/joda-money/">Joda Money</a></li>
<li><a href="http://es.slideshare.net/AnatoleTresch/adopt-jsr-354">Adopt JSR 354</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/</id>
        <title>Hemeroteca #7</title>
        <updated>2015-06-27T22:00:00+02:00</updated>
        <published>2015-06-27T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Pasado un nuevo semestre he escrito principalmente sobre temas de programación, Java y poco sobre Linux o software libre. Incluyo aquí el listado completo de los artículos que he escrito.</strong></p>]]>
        <![CDATA[<p>Otros seis meses que han pasado y estos especialmente para mi muy rápido. Como suelo hacer cada este periodo de tiempo recopilo en un artículo <em>Hemeroteca</em> los artículos que he publicado al ritmo que mantengo de uno por semana. Este ya es el séptimo contando los de <a href="https://elblogdepicodev.blogspot.com.es">El blog de pico.dev</a> y de <a href="https://picodotdev.github.io/blog-bitix/">Blog Bitix</a>.</p>
<p>Como resumen de estas 26 semanas he publicado 27 artículos destacando que he cambiado de herramienta con la que mantengo la bitácora pasando de usar <a href="http://octopress.org/">Octopress</a> a <a href="https://gohugo.io/">Hugo</a> que me ha permitido cambiar el diseño completamente personalizándolo enteramente a mi gusto y agregar algunas nuevas funcionalidades como un mejor previsualizador de imágenes, resúmenes al inicio de los artículos, o un nuevo menú con las categorías principales de las que escribo. De lo que más he escrito ha sido sobre programación y como no pueden faltar en este <em>blog</em> algún artículo sobre <a href="https://tapestry.apache.org/">Apache Tapestry</a>.</p>
<p>De los artículos que he escrito destacaré los siguientes, son con los que más a gusto he quedado después de escribirlos y me parece que merecen una lectura, por orden cronológico:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/conferencia-bilbostack-2015/">Conferencia BilboStack 2015</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/5-aniversario-del-blog/">5º aniversario del blog</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring/">Listener de eventos de Hibernate con servicios de Spring</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/">Datos de sesión externalizados con Spring Session</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/">Aplicación web Java autocontenida con Tomcat Embedded</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry/">Productividad y errores de compilación con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/">Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/nueva-visita-a-5-plus-opciones-de-hosting-para-aplicaciones/">Nueva visita a 5+ opciones de «hosting» para aplicaciones</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/">Certificado SSL de empresa wildcard y de validación extendida</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine/">Programación de juegos y 3D en Java con jMonkeyEngine</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/">Nuevo diseño en Blog Bitix</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/">10 razones para seguir usando Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">Alternativa a Hibernate u ORM y ejemplo de jOOQ</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java/">Nueva visita a herramientas para un proyecto Java</a></li>
</ul>
<p>El resto de artículos son los siguientes, también interesantes:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/instalar-y-usar-plugin-agil-en-redmine/">Instalar y usar plugin ágil en Redmine</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/introduccion-e-inicio-a-drupal/">Introducción e inicio a Drupal</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/como-hacer-un-substring-de-una-cadena-html/">Como hacer un substring de una cadena HTML</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/">Fechas y usos horarios en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/como-hacer-un-downgrade-de-un-paquete-en-arch-linux/">Cómo hacer un «downgrade» de un paquete en Arch Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/la-palabra-clave-assert-de-java-y-un-ejemplo/">La palabra clave assert de Java y un ejemplo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/02/ejemplo-de-listener-de-eventos-de-hibernate/">Ejemplo de listener de eventos de Hibernate</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/">Introducción y ejemplo de API RPC con Apache Thrift</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos/">Evitar iniciar varias veces la máquina virtual Java para procesos cortos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/escribir-en-varios-writer-a-la-vez/">Escribir en varios writer a la vez</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/">Patrón múltiples vistas de un mismo dato en Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/">Servicio para obtener ratios de conversión entre divisas</a></li>
</ul>
<p>Cada mes sigo aumentando ligeramente o manteniendo el número de visitas del mes anterior, la mayoría procedentes del buscador Google. En enero andaba en unas 1125 sesiones y 1400 páginas vistas semanales, hoy en unas 1450 sesiones y 2000 páginas vistas, siguen siendo pocas comparadas con algunos otras bitácoras de temática similar. De vez en cuando tengo algún nuevo seguidor en twitter y son pocos los comentarios que recibo probablemente esté haciendo algo que podría hacer mejor. Los artículos que publico suelen ser para un público de nivel medio y uno a la semana, <a href="http://www.marketingguerrilla.es">recomiendan escribir artículos de un nivel básico</a> y probablemente si siguiese esta recomendación recibiría más visitas o más comentarios pero me suele gustar escribir de algo que incluso yo aprenda algo y que no esté ya en un millardo de sitios y sea medianamente fácil de encontrar con una búsqueda sencilla, aunque igual me planteo de vez en cuando seguir esta recomendación.</p>
<div class="media">
<figure>
<p><a href="https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/images/analytics_hu1ac75864dcb350a7d40e492d9b491358_64582_2560x1440_fit_box_3.png" data-gallery="" title="Visitas semanales de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2015/06/hemeroteca-7/images/analytics_hu1ac75864dcb350a7d40e492d9b491358_64582_300x200_fit_box_3.png" width="300" height="111" alt="Visitas semanales de Blog Bitix" title="Visitas semanales de Blog Bitix"  class="lozad "></a></p>
<figcaption>Evolución de sesiones semanales en Blog Bitix</figcaption>
</figure>
</div>
<p>Sigo teniendo pendiente de publicar unos cuantos nuevos artículos que continúen la <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie sobre Docker</a> que ya publiqué, también tengo más artículos preparados sobre programación con Java y bastantes ideas ya listadas para seguir escribiendo. Pero si te interesa un determinado tema y quisieras que explicase o hablase de algo relacionado con lo que suelo escribir añade un comentario y trataré de ver si me es posible, ¡comenta, pregunta lo que quieras o hazme la recomendación que estés pensando!.</p>
<p>Para finalizar agradecer a varios usuarios de twitter que aunque no conozco suelen compartir muchos de los artículos que escribo y me ayudan enormemente a hacer que el contenido de Blog Bitix llegue a más personas. <a href="https://twitter.com/jbravo">Joaquin Bravo</a>, <a href="https://twitter.com/Statick_ds">Diego Saavedra</a>, <a href="https://twitter.com/Mr_Prometheus">Camilo Bernal</a>, <a href="https://twitter.com/pereyrada">A. Daniel Pereyra</a> y otros en la <a href="https://twitter.com/search?q=%22Blog%20Bitix%22&amp;src=typd">linea de tiempo de Blog Bitix</a>, ¡gracias!.</p>
]]>
        </content>
        
            
                <category term="blog"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/</id>
        <title>Servicio para obtener ratios de conversión entre divisas</title>
        <updated>2015-07-24T23:00:00+02:00</updated>
        <published>2015-06-20T10:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>¿Trabajas con importes en diferentes divisas y necesitas hacer conversiones entre ellas? Si es el caso necesitas obtener los ratios de conversión entre divisas de alguna fuente de forma regular y de forma automatizada ya que se varían constantemente (en minutos) según diversos factores. Hay diferentes fuentes para obtenerlos y empresas que ofrecen las cotizaciones como producto, en este artículo comentaré una con suficiente detalle como para integrarla en cualquier aplicación.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En una aplicación de comercio electrónico que venda sus productos o servicios a nivel internacional probablemente necesitará mostrar los precios en la moneda local del comprador. En estos casos será necesario hacer una conversión entre la divisa en la que está el importe del producto y la divisa del usuario con la que realizará el pago. Para hacer la conversión necesitaremos un ratio de conversión reciente entre la divisa origen y la divisa destino del importe o <em>pivotar</em> sobre una divisa entre ambas. Los <a href="http://www.investopedia.com/ask/answers/08/how-often-to-exchange-rates-fluctuate.asp">ratios se actualizan constantemente cada día</a> según diversos factores variando ligeramente su cotización en la economía global. En este artículo presentaré <a href="https://openexchangerates.org">Open Exchange Rates</a>, el mejor servicio de ratios de divisas que he encontrado.</p>
<p>Open Exchange Rates dispone de una API REST que podemos utilizar para automatizar la obtención de los ratios de conversión en nuestra aplicación, ofrecen los ratios para 165 divisas por supuesto incluyendo algunas dólares americanos (USD), euros (EUR), libras (GBP), yenes (JPY), rublos (RUB), países del este de europa, países asiáticos, latinoamericanos y del oriente medio. Para acceder a la API deberemos <a href="https://openexchangerates.org/signup">registrarnos</a> momento en el que se nos proporcionará un identificativo para nuestra aplicación que usaremos al realizar consultas.</p>
<p>En el plan gratuito nos ofrecen los ratios respecto a USD, esto es, una dólar norteamericano equivale al valor del ratio en la moneda en concreto, en el momento de escribir el artículo la API devuelve los siguientes datos, en la que se ve que un USD ($) equivale a 0.880435 EUR (€). Disponemos de varios <em>endpoints</em>:</p>
<ul>
<li><em>latest.json</em>: para obtener los ratios de conversión más recientes.</li>
<li>historical/YYYY-MM-DD.json: para obtener los ratios de un día específico.</li>
<li><em>currencies.json</em>: para obtener la lista de divisas y sus descripciones.</li>
<li><em>time-series.json</em>: para obtener datos históricos durante un periodo de varios días.</li>
</ul>
<p>Usando el primero de ellos junto con el <em>api-key</em> que nos han asignado <a href="https://openexchangerates.org/api/latest.json?app_id=[api-key]">https://openexchangerates.org/api/latest.json?app_id=[api-key]</a> obtenemos los ratios en formato JSON, en el dato <em>base</em> está la divisa de referencia, en este caso dólares estadounidenses (USD):</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">  <span class="nt">&#34;disclaimer&#34;</span><span class="p">:</span> <span class="s2">&#34;Exchange rates are provided for informational purposes only, and do not constitute financial advice of any kind. Although every attempt is made to ensure quality, NO guarantees are given whatsoever of accuracy, validity, availability, or fitness for any purpose - please use at your own risk. All usage is subject to your acceptance of the Terms and Conditions of Service, available at: https://openexchangerates.org/terms/&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;Data sourced from various providers with public-facing APIs; copyright may apply; resale is prohibited; no warranties given of any kind. Bitcoin data provided by http://coindesk.com. All usage is subject to your acceptance of the License Agreement available at: https://openexchangerates.org/license/&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="mi">1434740463</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">  <span class="nt">&#34;base&#34;</span><span class="p">:</span> <span class="s2">&#34;USD&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">  <span class="nt">&#34;rates&#34;</span><span class="p">:</span> <span class="p">{</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;EUR&#34;</span><span class="p">:</span> <span class="mf">0.880435</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;JPY&#34;</span><span class="p">:</span> <span class="mf">122.6964</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;RUB&#34;</span><span class="p">:</span> <span class="mf">53.99557</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;USD&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;...&#34;</span><span class="p">:</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span>&#10;</span></span><span class="line"><span class="cl">  <span class="p">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>latest.json</span>
    </div>
</div>
<p>Estas son las 165 divisas soportadas:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">{&#10;</span></span><span class="line"><span class="cl">	&#34;AED&#34;: &#34;United Arab Emirates Dirham&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;AFN&#34;: &#34;Afghan Afghani&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ALL&#34;: &#34;Albanian Lek&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;AMD&#34;: &#34;Armenian Dram&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ANG&#34;: &#34;Netherlands Antillean Guilder&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;AOA&#34;: &#34;Angolan Kwanza&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ARS&#34;: &#34;Argentine Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;AUD&#34;: &#34;Australian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;AWG&#34;: &#34;Aruban Florin&#34;, &#10;</span></span><span class="line"><span class="cl">	&#34;AZN&#34;: &#34;Azerbaijani Manat&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BAM&#34;: &#34;Bosnia-Herzegovina Convertible Mark&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BBD&#34;: &#34;Barbadian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BDT&#34;: &#34;Bangladeshi Taka&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BGN&#34;: &#34;Bulgarian Lev&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BHD&#34;: &#34;Bahraini Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BIF&#34;: &#34;Burundian Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BMD&#34;: &#34;Bermudan Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BND&#34;: &#34;Brunei Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BOB&#34;: &#34;Bolivian Boliviano&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BRL&#34;: &#34;Brazilian Real&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BSD&#34;: &#34;Bahamian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BTC&#34;: &#34;Bitcoin&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BTN&#34;: &#34;Bhutanese Ngultrum&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BWP&#34;: &#34;Botswanan Pula&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BYR&#34;: &#34;Belarusian Ruble&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;BZD&#34;: &#34;Belize Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CAD&#34;: &#34;Canadian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CDF&#34;: &#34;Congolese Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CHF&#34;: &#34;Swiss Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CLF&#34;: &#34;Chilean Unit of Account (UF)&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CLP&#34;: &#34;Chilean Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CNY&#34;: &#34;Chinese Yuan&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;COP&#34;: &#34;Colombian Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CRC&#34;: &#34;Costa Rican Colón&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CUC&#34;: &#34;Cuban Convertible Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CUP&#34;: &#34;Cuban Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CVE&#34;: &#34;Cape Verdean Escudo&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;CZK&#34;: &#34;Czech Republic Koruna&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;DJF&#34;: &#34;Djiboutian Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;DKK&#34;: &#34;Danish Krone&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;DOP&#34;: &#34;Dominican Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;DZD&#34;: &#34;Algerian Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;EEK&#34;: &#34;Estonian Kroon&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;EGP&#34;: &#34;Egyptian Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ERN&#34;: &#34;Eritrean Nakfa&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ETB&#34;: &#34;Ethiopian Birr&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;EUR&#34;: &#34;Euro&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;FJD&#34;: &#34;Fijian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;FKP&#34;: &#34;Falkland Islands Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GBP&#34;: &#34;British Pound Sterling&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GEL&#34;: &#34;Georgian Lari&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GGP&#34;: &#34;Guernsey Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GHS&#34;: &#34;Ghanaian Cedi&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GIP&#34;: &#34;Gibraltar Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GMD&#34;: &#34;Gambian Dalasi&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GNF&#34;: &#34;Guinean Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GTQ&#34;: &#34;Guatemalan Quetzal&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;GYD&#34;: &#34;Guyanaese Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;HKD&#34;: &#34;Hong Kong Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;HNL&#34;: &#34;Honduran Lempira&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;HRK&#34;: &#34;Croatian Kuna&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;HTG&#34;: &#34;Haitian Gourde&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;HUF&#34;: &#34;Hungarian Forint&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;IDR&#34;: &#34;Indonesian Rupiah&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ILS&#34;: &#34;Israeli New Sheqel&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;IMP&#34;: &#34;Manx pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;INR&#34;: &#34;Indian Rupee&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;IQD&#34;: &#34;Iraqi Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;IRR&#34;: &#34;Iranian Rial&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ISK&#34;: &#34;Icelandic Króna&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;JEP&#34;: &#34;Jersey Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;JMD&#34;: &#34;Jamaican Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;JOD&#34;: &#34;Jordanian Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;JPY&#34;: &#34;Japanese Yen&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KES&#34;: &#34;Kenyan Shilling&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KGS&#34;: &#34;Kyrgystani Som&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KHR&#34;: &#34;Cambodian Riel&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KMF&#34;: &#34;Comorian Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KPW&#34;: &#34;North Korean Won&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KRW&#34;: &#34;South Korean Won&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KWD&#34;: &#34;Kuwaiti Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KYD&#34;: &#34;Cayman Islands Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;KZT&#34;: &#34;Kazakhstani Tenge&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LAK&#34;: &#34;Laotian Kip&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LBP&#34;: &#34;Lebanese Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LKR&#34;: &#34;Sri Lankan Rupee&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LRD&#34;: &#34;Liberian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LSL&#34;: &#34;Lesotho Loti&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LTL&#34;: &#34;Lithuanian Litas&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LVL&#34;: &#34;Latvian Lats&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;LYD&#34;: &#34;Libyan Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MAD&#34;: &#34;Moroccan Dirham&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MDL&#34;: &#34;Moldovan Leu&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MGA&#34;: &#34;Malagasy Ariary&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MKD&#34;: &#34;Macedonian Denar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MMK&#34;: &#34;Myanma Kyat&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MNT&#34;: &#34;Mongolian Tugrik&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MOP&#34;: &#34;Macanese Pataca&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MRO&#34;: &#34;Mauritanian Ouguiya&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MTL&#34;: &#34;Maltese Lira&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MUR&#34;: &#34;Mauritian Rupee&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MVR&#34;: &#34;Maldivian Rufiyaa&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MWK&#34;: &#34;Malawian Kwacha&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MXN&#34;: &#34;Mexican Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MYR&#34;: &#34;Malaysian Ringgit&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;MZN&#34;: &#34;Mozambican Metical&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;NAD&#34;: &#34;Namibian Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;NGN&#34;: &#34;Nigerian Naira&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;NIO&#34;: &#34;Nicaraguan Córdoba&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;NOK&#34;: &#34;Norwegian Krone&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;NPR&#34;: &#34;Nepalese Rupee&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;NZD&#34;: &#34;New Zealand Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;OMR&#34;: &#34;Omani Rial&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PAB&#34;: &#34;Panamanian Balboa&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PEN&#34;: &#34;Peruvian Nuevo Sol&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PGK&#34;: &#34;Papua New Guinean Kina&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PHP&#34;: &#34;Philippine Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PKR&#34;: &#34;Pakistani Rupee&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PLN&#34;: &#34;Polish Zloty&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;PYG&#34;: &#34;Paraguayan Guarani&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;QAR&#34;: &#34;Qatari Rial&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;RON&#34;: &#34;Romanian Leu&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;RSD&#34;: &#34;Serbian Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;RUB&#34;: &#34;Russian Ruble&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;RWF&#34;: &#34;Rwandan Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SAR&#34;: &#34;Saudi Riyal&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SBD&#34;: &#34;Solomon Islands Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SCR&#34;: &#34;Seychellois Rupee&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SDG&#34;: &#34;Sudanese Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SEK&#34;: &#34;Swedish Krona&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SGD&#34;: &#34;Singapore Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SHP&#34;: &#34;Saint Helena Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SLL&#34;: &#34;Sierra Leonean Leone&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SOS&#34;: &#34;Somali Shilling&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SRD&#34;: &#34;Surinamese Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;STD&#34;: &#34;São Tomé and Príncipe Dobra&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SVC&#34;: &#34;Salvadoran Colón&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SYP&#34;: &#34;Syrian Pound&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;SZL&#34;: &#34;Swazi Lilangeni&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;THB&#34;: &#34;Thai Baht&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TJS&#34;: &#34;Tajikistani Somoni&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TMT&#34;: &#34;Turkmenistani Manat&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TND&#34;: &#34;Tunisian Dinar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TOP&#34;: &#34;Tongan Paʻanga&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TRY&#34;: &#34;Turkish Lira&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TTD&#34;: &#34;Trinidad and Tobago Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TWD&#34;: &#34;New Taiwan Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;TZS&#34;: &#34;Tanzanian Shilling&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;UAH&#34;: &#34;Ukrainian Hryvnia&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;UGX&#34;: &#34;Ugandan Shilling&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;USD&#34;: &#34;United States Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;UYU&#34;: &#34;Uruguayan Peso&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;UZS&#34;: &#34;Uzbekistan Som&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;VEF&#34;: &#34;Venezuelan Bolívar Fuerte&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;VND&#34;: &#34;Vietnamese Dong&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;VUV&#34;: &#34;Vanuatu Vatu&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;WST&#34;: &#34;Samoan Tala&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XAF&#34;: &#34;CFA Franc BEAC&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XAG&#34;: &#34;Silver (troy ounce)&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XAU&#34;: &#34;Gold (troy ounce)&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XCD&#34;: &#34;East Caribbean Dollar&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XDR&#34;: &#34;Special Drawing Rights&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XOF&#34;: &#34;CFA Franc BCEAO&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;XPF&#34;: &#34;CFP Franc&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;YER&#34;: &#34;Yemeni Rial&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ZAR&#34;: &#34;South African Rand&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ZMK&#34;: &#34;Zambian Kwacha (pre-2013)&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ZMW&#34;: &#34;Zambian Kwacha&#34;,&#10;</span></span><span class="line"><span class="cl">	&#34;ZWL&#34;: &#34;Zimbabwean Dollar&#34;&#10;</span></span><span class="line"><span class="cl">}</span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>divisas-soportadas.txt</span>
    </div>
</div>
<p>Teniendo esta API podemos automatizar en nuestra aplicación la obtención de los ratios con un límite de 1000 consultas al mes en el plan gratuito, por ejemplo una vez al día o cada seis horas dependiendo del grado de precisión que nos parezca suficiente para la aplicación. En los <a href="https://openexchangerates.org/signup">planes de pago disponibles</a> las posibilidades de la API son más permitiendo por ejemplo aumentar el límite de consultas, obtener los ratios referenciados a otra moneda distinta al dólar estadounidense u otras consultas y funcionalidades.</p>
<p>Basta usar la librería cliente de <a href="https://hc.apache.org/">Apache HttpComponents</a> para hacer la petición HTTP y un parseador JSON como <a href="http://www.json.org/java/index.html">JSON in Java</a> para acceder a los datos obtenidos.</p>
<p>Hay otras posibilidades como un <a href="http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml">servicio proporcionado por el banco central europeo</a> pero que ofrece únicamente los ratios de 28 monedas y que solo se actualiza diariamente. Otra posibilidad es <a href="http://finance.yahoo.com/d/quotes.csv?s=EURUSD=X&amp;f=l1">Yahoo Finance</a>, en el parámetro de este enlace indicamos primeramente el código de la moneda origen y el código de la divisa destino en este caso de EUR a USD pero Open Exchange Rates me ha parecido mejor y de mayor confianza.</p>
<p>Si te ha interesado este artículo puede que también te interese <a href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/">Cómo trabajar con importes, ratios y divisas en Java</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://openexchangerates.org">Open Exchange Rates</a></li>
<li><a href="https://stackoverflow.com/questions/3139879/how-do-i-get-currency-exchange-rates-via-an-api-such-as-google-finance">How do I get currency exchange rates via an API?</a></li>
<li><a href="http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml">European Central Bank Rates</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java/">Cómo trabajar con importes, ratios y divisas en Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java/</id>
        <title>Nueva visita a Herramientas para un proyecto Java</title>
        <updated>2020-08-24T19:30:00+02:00</updated>
        <published>2015-06-12T20:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Las tecnologías para desarrollar una aplicación son un medio para resolver las necesidades del negocio o un cliente, no un fin. Pero esto no quiere decir que la elección sea trivial o poco importante, realizar las elecciones adecuadas según lo requisitos puede evitar complicaciones en un futuro. Para un proyecto basado en la plataforma Java esta es mi selección de herramientas de las que conozco.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Hace 5 años escribí un <a href="https://elblogdepicodev.blogspot.com.es/2011/06/elegir-herramientas-para-un-proyecto.htmlindex-amp.html">artículo comentando que tecnologías elegiría</a> para un proyecto Java si tuviese posibilidad. Al ritmo que avanza la tecnología cuatro años es un tiempo bastante largo, también es un tiempo en el que he podido aprender y añadir a mi «caja de herramientas» nuevas opciones que después de evaluarlas me han gustado. En este artículo haré una nueva visita al artículo anterior y comentaré algunas nuevas herramientas.</p>
<h3 id="lenguaje-de-programación">Lenguaje de programación</h3>
<p>Como lenguaje de programación seguiría usando Java, en mi caso es el lenguaje que más conozco y sigue siendo una de las opciones más válidas. Pero con la salida de una nueva versión usaría Java 8. La <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">publicación de Java 8 incorporando varias novedades importantes</a> han mejorado varios aspectos de este lenguaje, por mencionar los más relevantes están la incorporación de <em>lambdas</em> que proporciona una cierta forma de programación funcional, también destaca los <em>streams</em> que permite describir los algoritmos que procesan datos de una forma más expresiva y legible además de aprovechar mejor los procesadores multinúcleo, métodos por defecto en interfaces que permite mantener compatibilidad hacia atrás (aunque esto interesa más a los desarrolladores que hacen APIs para que sean usadas por terceras partes), una nueva API para el manejo de fechas eliminando una de las críticas de versiones anteriores y algunas cosas más. El futuro con Java 9 es prometedor si presenta la interesante modularidad.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">Novedades y nuevas características de Java 8</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/09/novedades-y-nuevas-caracteristicas-de-java-11/">Novedades y nuevas características de Java 11</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/">10 razones para seguir usando Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/">Introducción y nuevas características de Java EE 7</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/series/java-platform/">Novedades de la plataforma Java</a></li>
</ul>
<h3 id="persistencia-en-base-de-datos">Persistencia en base de datos</h3>
<p>Las librerías más populares de persistencia en Java son <a href="https://hibernate.org/">Hibernate</a> aunque para algunos casos usaría o como complemento <a href="https://www.jooq.org/">jOOQ</a>, <a href="https://spring.io/projects/spring-data">Spring Data</a> ofrece varias utilidades para facilitar crear las clases repositorio usando Hibernate.</p>
<p>jOOQ es una librería que no tienen tanta magia como Hibernate que en muchas ocasiones produce errores complicados de resolver y no tenemos tanto control de lo que hace, por otro lado jOOQ devuelve a la base de datos y al lenguaje SQL la relevancia que con Hibernate queda abstraída con el mapeado del modelo de datos a objetos y el lenguaje HQL. jOOQ permite construir las sentencias SQL de forma programática con lo que el compilador nos indicará errores de compilación y nos validará los tipos que usemos, ambas cosas son importantes cuando hacemos un <em>refactor</em> en alguna parte de la aplicación. En el artículo <a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">alternativa a Hibernate y ejemplo jOOQ</a> entro en más detalles.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq/">Alternativa a Hibernate y ejemplo jOOQ</a></li>
</ul>
<p>Al persistir datos si es necesario realizar auditoría de datos dos posibilidades son <a href="https://hibernate.org/orm/envers/">Envers</a> específica para Hibernate y <a href="https://javers.org/">Javers</a> usable con cualquier librería de persistencia. Permiten guarda los típicos campos fecha creación, usuario creación, fecha modificación y última modificación asi como mantener un histórico completo de todos los cambios realizados a una entidad.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/">Histórico de datos, auditoría y diferencias entre objetos con Javers en Java</a></li>
</ul>
<h3 id="modificaciones-de-la-base-de-datos">Modificaciones de la base de datos</h3>
<p>En un proyecto de larga duración y en el que se realicen mejoras probablemente necesitaremos modificar el modelo de la base de datos. Empleando la herramienta <a href="https://www.liquibase.org/">Liquibase</a> podremos <a href="https://elblogdepicodev.blogspot.com.es/2013/05/modificar-la-base-de-datos-con-liquibase.htmlindex-amp.html">automatizar la actualización del esquema de la base de datos</a> ya necesitemos añadir campos, cambiarlos de nombre, eliminarlos, crear o eliminar tablas, insertar, eliminar o actualizar datos. Estas actualizaciones de la base de datos se indican en un archivo que podemos guardar en nuestro repositorio de control de versiones de forma que podamos ver y reproducir los cambios que se han hecho a la base de datos a lo largo del tiempo.</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/modificar-la-base-de-datos-con-liquibase.htmlindex-amp.html">Modificar la base de datos con Liquibase</a></li>
</ul>
<h3 id="pruebas">Pruebas</h3>
<p>Para pruebas unitarias dos buenas posibilidades son <a href="https://junit.org/junit5/">JUnit</a>, <a href="https://code.google.com/p/spock/">Spock</a> y <a href="https://gebish.org/">Geb</a>. Spock permite realizar los teses unitarias con un DSL bastante descriptivo que facilita la lectura posteriormente de la prueba, sin embargo, JUnit ofrece las mismas ventajas para los teses que el para el código de la aplicación al usar Java. Por otro lado Geb permite automatizar las pruebas de las aplicaciones web proporcionando facilidades, se puede integrar con Spock.</p>
<p>Otra herramienta muy útil es <a href="https://www.testcontainers.org/">Testcontainers</a> que permite hacer pruebas de integración usando el mismo software de producción como puede ser una base de datos <a href="https://www.mysql.com/">MySQL</a> o <a href="https://www.postgresql.org/">PostgreSQL</a> en vez de una base de datos en memoria.</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/07/pruebas-unitarias-con-spock-y-mockito.htmlindex-amp.html">Pruebas unitarias con Spock y Mockito</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/pruebas-funcionales-con-geb-en-una-aplicacion-web-java/">Pruebas funcionales con Geb en una aplicación web Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/10/cobertura-de-codigo-y-mutation-testing-en-pruebas-unitarias-con-jacoco-y-pit-en-java/">Cobertura de código y mutation testing en pruebas unitarias con JaCoCo y PIT en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/">Pruebas de carga y rendimiento de un servicio web con Apache Bench</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/06/teses-unitarios-parametrizados-con-junit/">Teses unitarios parametrizados con JUnit</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/pruebas-de-integracion-con-testcontainers-ejemplo-de-jpa-con-la-base-de-datos-postgresql/">Pruebas de integración con Testcontainers, ejemplo de JPA con la base de datos PostgreSQL</a></li>
</ul>
<h3 id="cliente">Cliente</h3>
<p>En el lado cliente de una aplicación web usaría la combinación de varias tecnologías, <a href="https://jquery.com/">jQuery</a> para acceder y manipular el DOM de la página web, <a href="https://requirejs.org/">RequireJS</a> para cargar los archivos necesarios en la página y evitar la polución del ámbito global JavaScript.</p>
<p>Si la aplicación tiene una carga importante en el lado cliente evaluaría usar <a href="https://www.typescriptlang.org/">TypeScript</a> como lenguaje por ser un compilado con sus ventajas en bases de código grandes, <a href="https://webpack.js.org/">Webpack</a> para gestionar los recursos, empaquetarlos y realizar transformaciones como alternativa a RequireJS y <a href="https://reactjs.org/">React</a> para crear componentes en el lado cliente. <a href="https://jestjs.io/">Jest</a> o <a href="https://jasmine.github.io/">Jasmine</a> para hacer pruebas unitarias en JavaScript.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/">Componentes en el cliente con Web Components usando JavaScript, HTML y CSS</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/03/usar-un-paquete-npm-con-webpack-creado-con-storybook-react-y-typescript/">Usar un paquete npm con Webpack creado con Storybook, React y TypeScript</a></li>
</ul>
<h3 id="_framework_-web"><em>Framework</em> web</h3>
<p>Para el desarrollo de una página o aplicación web seguiría usando <a href="https://tapestry.apache.org/">Apache Tapestry</a> por la productividad y alta reutilización que se puede conseguir, también por la flexibilidad, extensibilidad y adaptabilidad del <em>framework</em> si necesita recursos de cliente añadiendo dependencias con <a href="https://www.webjars.org/">Webjars</a>. Descargando el <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">libro PlugIn Tapesty</a> puedes conocer muchos más detalles.</p>
<p>Si se tratase de una aplicación REST evaluaría [Spring Boot][springboot] o <a href="https://graphql.org/">GraphQL</a> para proporcionar la interfaz exterior de los microservicios y quizá evaluaría <a href="https://thrift.apache.org/">Apache Thrift</a> o <a href="https://grpc.io/">gRPC</a> para consumirlos internamente, Thrift permite acceder a la API de una forma programática más sencillamente que consumir una interfaz REST o GraphQL cruda.</p>
<p>La tendencia actual es desarrollar microservicios y esto en las aplicaciones web supone que sean capaces de ofrecer su servicio por si mismas no usando un servidor de aplicaciones que hay que instalar previamente simplificando el despliegue a los administradores de sistemas, esto también se puede conseguir en parte usando <a href="https://www.docker.com/">Docker</a>. En vez de usar un <a href="https://tomcat.apache.org/">Tomcat</a> tradicional podemos usar la versión embebible o Spring Boot.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">Libro sobre desarrollo de aplicaciones con Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift/">Introducción y ejemplo de API RPC con Apache Thrift</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/introduccion-a-grpc-y-ejemplo-con-java/">Introducción a gRPC y ejemplo con Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/03/aplicacion-web-java-autocontenida-con-tomcat-embedded/">Aplicación web Java autocontenida con Tomcat Embedded</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/02/ejemplo-sencillo-de-web-service-con-resteasy.htmlindex-amp.html">Ejemplo sencillo de servicio web con RESTEasy</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">Aplicación Java autocontenida con Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/11/que-es-graphql-y-ejemplo-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/">Qué es GraphQL y ejemplo para una interfaz de un servicio con Spring Boot y Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/06/dependencias-sobre-librerias-de-lado-de-cliente-con-webjars-en-una-aplicacion-web-java/">Dependencias sobre librerías de lado de cliente con Webjars en una aplicación web Java</a></li>
</ul>
<h3 id="base-de-datos">Base de datos</h3>
<p>Para una base de datos relacional en vez de <a href="https://www.mysql.com/">MySQL</a> usaría <a href="https://www.postgresql.org/">PostgreSQL</a>. PostgreSQL posee numerosas opciones avanzadas y es una de las bases de datos libres más reconocidas. El futuro de MySQL con Oracle y su escisión en MariaDB es más incierto además de no poseer algunas características que PostgreSQL sí.</p>
<p>Dependiendo del causística de la aplicación otras opciones complementarias son <a href="https://redis.io/">Redis</a> y <a href="https://www.mongodb.com/">MongoDB</a>, una base de datos clave-valor, una base de datos de documentos y en caso de tener que hacer búsquedas de texto completo con <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-relacional-postgresql/">Introducción a la base de datos relacional PostgreSQL</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/">Introducción a la base de datos NoSQL MongoDB</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/">Introducción a Elasticsearch</a></li>
</ul>
<h3 id="entorno-de-desarrollo">Entorno de desarrollo</h3>
<p>Para el entorno de desarrollo o <em>devbox</em> usaría <a href="https://www.docker.com/">Docker</a> y <a href="https://docs.docker.com/compose/">Compose</a> que permiten disponer de un entorno más parecido al entorno de producción y en menos tiempo que instalando todo lo necesario en la máquina física. También podemos usar Docker para el entorno de producción. Para automatizar la tareas de configuración o despliegue usaría <a href="https://www.ansible.com/">Ansible</a> ya que al contrario de otras opciones no requiere instalar un agente en las máquinas a administrar, con un acceso SSH es suficiente.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/10/introduccion-y-caracteristicas-de-docker/">Introducción y características de Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/como-instalar-y-guia-de-inicio-basica-de-docker/">Inicio básico de Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/como-crear-una-imagen-para-docker-usando-un-dockerfile/">Cómo crear una imagen para Docker usando un Dockerfile</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/11/introduccion-a-ansible/">Introducción a Ansible</a></li>
</ul>
<h3 id="hospedaje">Hospedaje</h3>
<p>En cuanto al alojamiento para la aplicación la nube es otra tendencia por su flexibilidad. La <a href="https://aws.amazon.com/es/ec2/">nube de Amazon</a> proporciona muchos servicios que pueden sernos útiles sin embargo si nuestra aplicación no los necesita y no es demasiado complicada podemos optar por otras opciones más baratas. Dos opciones más baratas son <a href="https://www.linode.com/">Linode</a> o <a href="https://www.digitalocean.com/">Digital Ocean</a> con las que por unos 5 o 10 € al mes podemos disponer de una máquina con 1 GIB de RAM, unos 30 GiB de discos SSD y una amplia transferencia de datos entrantes y salientes.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/04/nueva-visita-a-5-plus-opciones-de-hosting-para-aplicaciones/">Nueva visita a 5+ opciones de «hosting» para aplicaciones</a></li>
</ul>
<p>Aún usando un servicio en la nube para no encadenarse a uno determinado y disponer un centro de datos están <a href="https://www.consul.io/">Consul</a> como sistema de registro, descubrimiento, gestión de configuración y conexión entre servicios, <a href="https://www.vaultproject.io/">Vault</a> para usar seguridad como servicio, <a href="https://www.nomadproject.io/">Nomad</a> como orquestador de las aplicaciones con posibilidad de hacer despliegues <em>blue/greeen</em> o <em>canary</em> asi com volver a una versión anterior fácilmente y <a href="https://www.terraform.io/">Terraform</a> para aprovisionar el entorno en la nube independiente del proveedor y haciendo que la infraestructura este bajo el control de versiones al usar infraestructura como código.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/">Microservicios con Spring Cloud, Consul, Nomad y Traefik</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/">Administrar secretos y proteger datos sensibles con Vault</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/">Estrategias de despliegue para microservicios con Nomad</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/07/revertir-a-una-version-anterior-de-un-servicio-con-nomad/">Revertir un servicio a una versión anterior con Nomad</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/arquitectura-de-referencia-de-consul-vault-y-nomad-para-un-centro-de-datos/">Arquitectura de referencia de Consul, Vault y Nomad para un centro de datos</a></li>
</ul>
<h3 id="otras">Otras</h3>
<p>Otras funcionalidades que necesita algunas aplicaciones son:</p>
<ul>
<li>Trazabilidad con <a href="https://spring.io/projects/spring-cloud-sleuth">Sleuth</a>.</li>
<li>Tolerancia a fallos con <a href="https://github.com/resilience4j/resilience4j">Resilience4j</a>.</li>
<li>Búsquedas a texto completo con <a href="https://www.elastic.co/es/elasticsearch/">Elasticsearch</a>.</li>
<li>Métricas y monitorización con <a href="https://micrometer.io/">Micrometer</a>, <a href="https://prometheus.io/">Prometheus</a> y <a href="https://grafana.com/">Grafana</a>.</li>
<li>Autenticación y autorización con <a href="https://www.keycloak.org/">Keycloak</a>, <a href="https://oauth.net/">OAuth</a>, <a href="https://jwt.io/">JWT</a> y <a href="https://www.pac4j.org/">pac4j</a>.</li>
<li>Bus de eventos con Spring Events o <a href="https://github.com/google/guava">Guava</a>.</li>
<li>Comunicación desacoplada entre aplicaciones basado en mensajes con <a href="https://www.rabbitmq.com/">RabbitMQ</a>.</li>
<li><a href="https://quartz-scheduler.org/">Quartz</a> para la programación de tareas de forma periódica.</li>
<li><a href="https://community.jaspersoft.com/project/jasperreports-library">JasperReports</a> y <a href="https://pdfbox.apache.org/">PDFBox</a> para informes complejos o documentos CSV, Excel o PDF sencillos.</li>
<li><a href="https://logging.apache.org/log4j/2.x/">Log4j 2</a> para emitir trazas.</li>
<li>Preprocesador CSS con <a href="https://lesscss.org/">Less</a> para facilitar la escritura de hojas de estilo CSS y <a href="https://getbootstrap.com/">Bootstrap</a> como estilos por defecto para una aplicación.</li>
<li><a href="https://pmd.github.io/">PMD</a> y <a href="https://checkstyle.sourceforge.net/">Checkstyle</a> para analizar el código fuente.</li>
<li>Repositorio de artefactos privado con <a href="https://www.sonatype.com/nexus/repository-oss">Nexus</a>.</li>
</ul>
<p>De algunas de estas herramientas he escrito de forma individualizada.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/trazabilidad-en-microservicios-con-spring-cloud-sleuth/">Trazabilidad en microservicios con Spring Cloud Sleuth</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/08/implementar-tolerancia-a-fallos-con-resilience4j/">Implementar tolerancia a fallos con Resilience4j</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/">Introducción a Elasticsearch</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/">Monitorizar una aplicación Java de Spring Boot con Micrometer, Prometheus y Grafana</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/">Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/02/servidor-oauth-gateway-y-servicio-rest-utilizando-tokens-jwt-con-spring/">Servidor OAuth, gateway y servicio REST utilizando tokens JWT con Spring</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/publicacion-y-suscripcion-de-eventos-con-guava-eventbus-en-una-aplicacion-java/">Publicación y suscripción de eventos con Guava EventBus en una aplicación Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/">Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/07/tareas-programadas-de-forma-periodica-con-quartz-y-spring-en-java/">Tareas programadas de forma periódica con Quartz y Spring en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/05/ejemplo-sencillo-de-como-crear-un-excel-o-csv-en-java-con-apache-poi-y-opencsv/">Ejemplo sencillo de como crear un Excel o CSV en Java con Apache POI y OpenCSV</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/08/ejemplo-sencillo-de-como-crear-un-documento-pdf-con-java-y-pdfbox/">Ejemplo sencillo de como crear un documento PDF con Java y PDFBox</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/12/generar-documentos-informes-y-facturas-en-formato-pdf-con-jasperreports-y-java/">Generar documentos, informes y facturas en formato PDF con JasperReports y Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/07/la-libreria-log4j-para-emitir-trazas-en-aplicaciones-java/">La librería Log4j para emitir trazas en aplicaciones Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/08/que-hace-y-ventajas-de-un-preprocesador-de-estilos-css/">Qué hace y ventajas de un preprocesador de estilos CSS</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2018/02/analisis-estatico-de-codigo-con-pmd-y-un-ejemplo/">Análisis estático de código con PMD y un ejemplo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2021/03/repositorio-de-artefactos-privado-con-nexus/">Repositorio de artefactos privado con Nexus</a></li>
</ul>
<p>Hay otras herramientas aún pasado este tiempo seguiría usando como <a href="https://git-scm.com/">Git</a> para el control de versiones, <a href="https://about.gitlab.com/">GitLab</a> como plataforma para desarrollo que incluye repositorio de git, gestión de peticiones e integración continua además de otras funcionalidades en una única herramienta. <a href="https://sdkman.io/">SDKMAN</a> para gestionar las versiones de librerías Java en el entorno de desarrollo, <a href="https://gradle.org/">Gradle</a> como herramienta de construcción, <a href="https://www.linux.com/">GNU/Linux</a> tanto para desarrollar como para el servidor en el que desplegar la aplicación, <a href="https://www.jetbrains.com/idea/">IntelliJ</a> como IDE para editar código Java o <a href="https://code.visualstudio.com/">Visual Studio Code</a> para editar archivos no Java.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/12/gitlab-la-completa-herramienta-integrada-para-desarrollo-de-software/">GitLab, la completa herramienta integrada para desarrollo de software</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.htmlindex-amp.html">Herramienta de construcción Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/la-herramienta-sdkman-para-instalar-varias-versiones-del-jdk-y-software-de-la-plataforma-java/">La herramienta SDKMAN para instalar varias versiones del JDK y software de la plataforma Java</a></li>
</ul>
<p>Usar herramientas adecuadas para un proyecto es importante aunque independientemente de las herramientas también es importante la metodología, <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Divern Design</a> o DDD propone numerosas pautas para organizar y modelar aplicaciones complejas con reglas de negocio de mofo que las diferentes partes estén desacopladas y el mantenimiento sea más sencillo. Los patrones de diseño aplicados de forma adecuada simplifican enormemente el código.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/generar-en-el-dominio-los-identificativos-de-las-entidades-aplicando-ddd-antes-de-persistirlas-en-la-base-de-datos/">Generar en el dominio los identificativos de las entidades aplicando DDD antes de persistirlas en la base de datos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2020/06/el-patron-de-diseno-specification-ejemplo-de-implementacion-y-uso-en-jpa-con-spring-data/">El patrón de diseño Specification, ejemplo de implementación y uso en JPA con Spring Data</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/">Ejemplo del patrón de diseño Builder</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/">Ejemplo del patrón de diseño No Operation</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/03/ejemplo-de-maquina-de-estados-con-spring-statemachine/">Ejemplo de máquina de estados con Spring Statemachine</a></li>
</ul>
<p>Para cada un de estas herramientas en muchos casos tendremos varias alternativas similares para elegir, a veces elegir una u otra es algo subjetivo. Estas herramientas en muchos casos son de lo mejor que hay disponible pero perfectamente se pueden usar alternativas similares.</p>
<p>¿Cuales serán las herramientas que formarán el «estado del arte» dentro de otros cuatro años? ¿Cuales sobrevivirán y cuales perecerán en el camino? ¡Apasionante!</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2011/06/elegir-herramientas-para-un-proyecto.htmlindex-amp.html">Elegir herramientas para un proyecto</a></li>
<li><a href="http://nealford.com/memeagora/2013/05/28/build_your_own_technology_radar.html">Build Your Own Technology Radar</a></li>
<li><a href="http://www.thoughtworks.com/radar">Technology Radar</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/</id>
        <title>Patrón múltiples vistas de un mismo dato en Tapestry</title>
        <updated>2015-12-11T23:00:00+01:00</updated>
        <published>2015-06-06T10:30:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2015/05/patron-multiples-vistas-de-un-mismo-dato-en-tapestry/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Un proyecto grande contendrá muchos archivos de código fuente, poseer gran cantidad de archivos puede ser una molestia al trabajar con ellos al tener que buscarlos o abrilos. En el caso de las aplicaciones web puede darse el caso de que un mismo dato tenga un archivo diferente por cada forma de visualizarlo, para reducir el número de archivos en estos casos uso el siguiente patrón cuando trabajo con Apache Tapestry con el soporte que ofrece pero que puede ser igualmente aplicado de forma similar a otros <em>frameworks</em>.</strong></p>]]>
        <![CDATA[<div class="logotypes"> 
<p><img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-icon-light.svg" width="250" height="250" alt="Apache Tapestry" title="Apache Tapestry"  class=""></p>
</div>
<p>Al desarrollar una aplicación web puede que necesitemos mostrar un mismo dato de diferentes formas. Una posibilidad es crear una vista por cada forma diferente que se haya de mostrar el dato. Sin embargo, de esta forma tendremos que crear un archivo diferente por cada forma a visualizar, si esto mismo nos ocurre en múltiples datos nos encontraremos en la situación de que el número de archivos del proyecto crecerá suponiendo una pequeña molestia tener que trabajar con tantos, también y peor aún es que múltiples archivos relacionados no lo estarán salvo que les demos una nomenclatura similar para mantenerlos ordenados por nombre y sean fáciles de encontrar si queremos abrir varios.</p>
<p>Tener tantos archivos puede ser una molestia que denomino de <em>microgestión</em>, esto es, tener muchos archivos pequeñitos. Para evitar <em>microgestionar</em> podemos tener una única vista que con un parámetro determine la forma de representar el dato, mientras que el contenido del archivo tenga alta cohesión me parece adecuado e incluso mejor ya que las diferentes vistas muy posiblemente serán parecidas con lo que quizá dupliquemos algo de código que será mejor tenerlo en un mismo archivo que en varios diferentes.</p>
<p>En este artículo comentaré una forma de como realizar esto usando el <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> con las posibilidad que ofrece que a mi me ha resultado muy práctica, algo similar podría usarse en otros <em>frameworks</em>.</p>
<p>En Tapestry en una vista se pueden tener múltiples <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/Block.html">componentes Block</a> cuya misión es agrupar otros componentes que como resultado de procesarse producirán el html. Por otra parte está el <a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Delegate.html">componente Delegate</a> que indicándole en el parámetro <em>to</em> un componente <em>Block</em> lo procesa emitiendo el contenido html que generen los componentes que contenga. Teniendo en el código Java asociado al componente que mostrará el dato de diferentes formas un método que con cierta lógica devuelva un componente <em>Block</em> a visualizar podemos conseguir el objetivo.</p>
<p>En la siguiente vista de un artículo usada en el <a href="https://twitter.com/blogstackinfo">agregador de bitácoras Blog Stack</a> se ve que en el archivo <em>tml</em> de la vista hay varios componentes <em>Block</em> y un componente <em>Delegate</em> tal y como he comentado que se puede hacer. El componente bloque <em>excerptBlock</em> es muy similar al componente <em>fullBlock</em> diferenciándose en que el primero emite un extracto del contenido del artículo con <em>${contentExcerpt} [&hellip;]</em> y el segundo el artículo completo con <em>&lt;t:outputraw value=&ldquo;content&rdquo;/&gt;</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">t:container</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&#34;http://www.w3.org/1999/xhtml&#34;</span> <span class="na">xmlns:t</span><span class="o">=</span><span class="s">&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34;</span> <span class="na">xmlns:p</span><span class="o">=</span><span class="s">&#34;tapestry:parameter&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">t:delegate</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;block&#34;</span><span class="p">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">t:block</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;excerptBlock&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">article</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">itemscope</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">itemtype</span><span class="o">=</span><span class="s">&#34;http://schema.org/BlogPosting&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;open&#39;)&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${post.url}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;sameAs&#34;</span><span class="p">&gt;</span>${post.title}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;close&#39;)&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;post-info&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;dateModified&#34;</span> <span class="na">datetime</span><span class="o">=</span><span class="s">&#34;${data.get(&#39;microdataDate&#39;)}&#34;</span><span class="p">&gt;</span>${data.get(&#39;date&#39;)}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>,&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>fuente <span class="p">&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${source.pageUrl}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span><span class="p">&gt;</span>${source.name}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>,<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">				etiquetas&#10;</span></span><span class="line"><span class="cl">				<span class="p">&lt;</span><span class="nt">t:loop</span> <span class="na">source</span><span class="o">=</span><span class="s">&#34;labels&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;label&#34;</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;pagelink&#34;</span> <span class="na">page</span><span class="o">=</span><span class="s">&#34;label&#34;</span> <span class="na">context</span><span class="o">=</span><span class="s">&#34;labelContext&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;articleSection&#34;</span><span class="p">&gt;</span>${label.name}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span><span class="ni">&amp;nbsp;</span><span class="p">&lt;/</span><span class="nt">t:loop</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;text-justify&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			${contentExcerpt} [...]&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${post.url}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;sameAs&#34;</span><span class="p">&gt;</span>Leer artículo completo<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">t:block</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">t:block</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;fullBlock&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">article</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">itemscope</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">itemtype</span><span class="o">=</span><span class="s">&#34;http://schema.org/BlogPosting&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;open&#39;)&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${post.url}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;sameAs&#34;</span><span class="p">&gt;</span>${post.title}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;getTag(&#39;close&#39;)&#34;</span><span class="p">/&gt;&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;post-info&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;font-weight: bold;&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;dateModified&#34;</span> <span class="na">datetime</span><span class="o">=</span><span class="s">&#34;${data.get(&#39;microdataDate&#39;)}&#34;</span><span class="p">&gt;</span>${data.get(&#39;date&#39;)}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>,&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>fuente <span class="p">&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${source.pageUrl}&#34;</span> <span class="na">target</span><span class="o">=</span><span class="s">&#34;target&#34;</span><span class="p">&gt;</span>${source.name}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>,<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">t:if</span> <span class="na">test</span><span class="o">=</span><span class="s">&#34;labels&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">				etiquetas&#10;</span></span><span class="line"><span class="cl">				<span class="p">&lt;</span><span class="nt">t:loop</span> <span class="na">source</span><span class="o">=</span><span class="s">&#34;labels&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;label&#34;</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;${labelAbsoluteUrl}&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;articleSection&#34;</span><span class="p">&gt;</span>${label.name}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span><span class="ni">&amp;nbsp;</span><span class="p">&lt;/</span><span class="nt">t:loop</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;/</span><span class="nt">t:if</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;</span><span class="nt">p</span> <span class="na">itemprop</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;text-justify&#34;</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="p">&lt;</span><span class="nt">t:outputraw</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="p">/&gt;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">t:block</span><span class="p">&gt;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">t:container</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PostComponent.tml</span>
    </div>
</div>
<p>En la clase Java asociada al componente está el método <em>getBlock</em> que determina el bloque a mostrar. En este caso la lógica es muy sencilla, en base a un parámetro que recibe el componente (<em>mode</em>) indicando la vista del dato que se quiere se devuelve el componente <em>Block</em> adecuado. Las referencias a los componentes <em>Block</em> presentes en la vista se puede inyectar usando la anotación <em>@Inject</em> junto con <em>@Component</em> usando el mismo identificativo en la vista y en el nombre de la propiedad para la referencia del componente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">info.blogstack.components</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.misc.Globals</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.misc.Utils</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.Keys</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.LabelRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.PostRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.persistence.jooq.tables.records.SourceRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.persistence.records.AppPostRecord</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">info.blogstack.services.MainService</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.BindingConstants</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.Block</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Cached</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Property</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.internal.services.LinkSource</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.joda.time.format.DateTimeFormat</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.joda.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostComponent</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">DateTimeFormatter</span> <span class="n">DATETIME_FORMATTER</span> <span class="o">=</span> <span class="n">DateTimeFormat</span><span class="o">.</span><span class="na">forPattern</span><span class="o">(</span><span class="s">&#34;EEEE, dd &#39;de&#39; MMMM &#39;de&#39; yyyy&#34;</span><span class="o">).</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">LOCALE</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">DateTimeFormatter</span> <span class="n">MICRODATA_DATETIME_FORMATTER</span> <span class="o">=</span> <span class="n">DateTimeFormat</span><span class="o">.</span><span class="na">forPattern</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd&#39;T&#39;HH:mm&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">enum</span> <span class="n">Mode</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">HOME</span><span class="o">,</span> <span class="n">POST</span><span class="o">,</span> <span class="n">ARCHIVE</span><span class="o">,</span> <span class="n">NEWSLETTER</span><span class="o">,</span> <span class="n">DEFAULT</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">NUMBER_LABELS</span> <span class="o">=</span> <span class="n">4</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">PostRecord</span> <span class="n">post</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;default&#34;</span><span class="o">,</span> <span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Mode</span> <span class="n">mode</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Property</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">LabelRecord</span> <span class="n">label</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Inject</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">MainService</span> <span class="n">service</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Inject</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">LinkSource</span> <span class="n">linkSource</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Inject</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Block</span> <span class="n">excerptBlock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Inject</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Block</span> <span class="n">fullBlock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getContext</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getContext</span><span class="o">(</span><span class="n">post</span><span class="o">,</span> <span class="n">post</span><span class="o">.</span><span class="na">fetchParent</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">POST_SOURCE_ID</span><span class="o">));</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Block</span> <span class="nf">getBlock</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="o">(</span><span class="n">mode</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">HOME</span><span class="o">:</span>			&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">ARCHIVE</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">POST</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">DEFAULT</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="n">excerptBlock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">NEWSLETTER</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="n">fullBlock</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTag</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h1:open&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;h1&gt;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h1:close&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;/h1&gt;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h2:open&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;h2&gt;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;h2:close&#34;</span><span class="o">,</span> <span class="s">&#34;&lt;/h2&gt;&#34;</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">tag</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="o">(</span><span class="n">mode</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">HOME</span><span class="o">:</span>			&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">ARCHIVE</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">NEWSLETTER</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">DEFAULT</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">tag</span> <span class="o">=</span> <span class="s">&#34;h2&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">break</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="n">POST</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="n">tag</span> <span class="o">=</span> <span class="s">&#34;h1&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">break</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="o">:</span>&#10;</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">			&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		&#10;</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s:%s&#34;</span><span class="o">,</span> <span class="n">tag</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">LabelRecord</span><span class="o">&gt;</span> <span class="nf">getLabels</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getLabelDAO</span><span class="o">().</span><span class="na">findByPost</span><span class="o">(</span><span class="n">post</span><span class="o">,</span> <span class="n">NUMBER_LABELS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentExcerpt</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">AppPostRecord</span> <span class="n">apost</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">into</span><span class="o">(</span><span class="n">AppPostRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">apost</span><span class="o">.</span><span class="na">getContentExcerpt</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">AppPostRecord</span> <span class="n">apost</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">into</span><span class="o">(</span><span class="n">AppPostRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">apost</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">&#10;</span></span><span class="line"><span class="cl">	<span class="nd">@Cached</span><span class="o">(</span><span class="n">watch</span> <span class="o">=</span> <span class="s">&#34;post&#34;</span><span class="o">)</span>&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">AppPostRecord</span> <span class="n">apost</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="na">into</span><span class="o">(</span><span class="n">AppPostRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">datos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getPublishdate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="n">DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getPublishdate</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;microdataDate&#34;</span><span class="o">,</span> <span class="n">MICRODATA_DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getPublishdate</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getUpdatedate</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;date&#34;</span><span class="o">,</span> <span class="n">DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getUpdatedate</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">			<span class="n">datos</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;microdataDate&#34;</span><span class="o">,</span> <span class="n">MICRODATA_DATETIME_FORMATTER</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">apost</span><span class="o">.</span><span class="na">getUpdatedate</span><span class="o">()));</span>&#10;</span></span><span class="line"><span class="cl">		<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">datos</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getTarget</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">(</span><span class="n">mode</span> <span class="o">==</span> <span class="n">Mode</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">&#34;_blank&#34;</span><span class="o">;</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">SourceRecord</span> <span class="nf">getSource</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">post</span><span class="o">.</span><span class="na">fetchParent</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">POST_SOURCE_ID</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getLabelContext</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getContext</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl">	&#10;</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getLabelAbsoluteUrl</span><span class="o">()</span> <span class="o">{</span>&#10;</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">linkSource</span><span class="o">.</span><span class="na">createPageRenderLink</span><span class="o">(</span><span class="s">&#34;label&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">getLabelContext</span><span class="o">()).</span><span class="na">toAbsoluteURI</span><span class="o">();</span>		&#10;</span></span><span class="line"><span class="cl">	<span class="o">}</span>&#10;</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PostComponent.java</span>
    </div>
</div>
<div class="alert alert-warning">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/tags/tapestry/">Artículos sobre Tapestry en Blog Bitix</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/search/label/tapestry">Artículos sobre Tapestry en El blog de pico.dev</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
</feed>
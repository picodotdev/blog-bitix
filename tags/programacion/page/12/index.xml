<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/</id>
    <updated>2021-12-09T23:00:00+01:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/</id>
        <title>Ejemplo sensor de golpes y detector de movimiento en la Raspberry Pi con Java</title>
        <updated>2017-04-13T11:00:00+02:00</updated>
        <published>2017-04-13T11:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Otro par de sensores que incluye el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de introducción a la electrónica para la Raspberry Pi</a> son un sensor de golpes o <em>tilt</em> y un detector de movimiento. El funcionamiento de ambos es muy similar, utilizando un <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> como entrada se recibe si el sensor de golpes está activo o si el detector de movimiento ha detectado movimiento. El sensor de golpes es una bolita de mercurio encerrada en una ampolla de cristal. Como el mercurio a temperatura ambiente su estado es líquido puede moverse y como es un metal puede conducir la electricidad cuando está en una determinada posición entre dos filamentos.</p>
<p>El sensor de golpes necesita de tres cables uno para la corriente de 3.3V, otro para tierra y finalmente otro que se conecta como entrada a un <em>pin</em> GPIO. Usando varios cables hembra-hembra y macho-macho hacemos las conexiones entre el sensor y la placa de pruebas sin soldadura o <em>breadboard</em>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-1_hu72fde87c50037226c7e027f53998df11_148115_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Sensor de golpes y detector de movimiento"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-1_hu72fde87c50037226c7e027f53998df11_148115_300x200_fit_q90_box.jpg" width="300" height="121" alt="Sensor de golpes y detector de movimiento" title="Sensor de golpes y detector de movimiento"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-2_hub246cb2a41f0864b5a6f7e27b3a753b8_190121_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Sensor de golpes y detector de movimiento"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/sensores-2_hub246cb2a41f0864b5a6f7e27b3a753b8_190121_300x200_fit_q90_box.jpg" width="300" height="124" alt="Sensor de golpes y detector de movimiento" title="Sensor de golpes y detector de movimiento"  class="lozad "></a></p>
<figcaption>Sensor de golpes y detector de movimiento</figcaption>
</figure>
</div>
<p>Usando la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> para controlar los <em>pines</em> GPIO desde un programa implementado con Java detectamos si el sensor está activo o no según la posición de la bolita de mercurio. El ejemplo consiste en <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/">encender un diodo LED</a> que ya mostré en un artículo anterior de esta <a href="https://picodotdev.github.io/blog-bitix/series/electronica/">serie sobre electrónica</a> cuando el sensor <em>tilt</em> esté activo. Usaré el <em>pin</em> 18 para el diodo LED y el <em>pin</em> 21 para el sensor según la nomenclatura de Broadcom. Los <em>pines</em> serían el 12 según la nomenclatura del <em>header</em> y 1 según la nomenclatura de wiringPi para el diodo LED y 13 y 2 para el sensor <em>tilt</em>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-tilt_huc426378df3450d2db6296dceb7253079_298261_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Cableado sensor de golpes"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-tilt_huc426378df3450d2db6296dceb7253079_298261_300x200_fit_q90_box.jpg" width="300" height="198" alt="Cableado sensor de golpes" title="Cableado sensor de golpes"  class="lozad "></a></p>
<figcaption>Cableado sensor de golpes</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.api.*</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tilt</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="n">18</span><span class="o">);</span> <span class="n">DigitalInputDevice</span> <span class="n">tilt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DigitalInputDevice</span><span class="o">(</span><span class="n">21</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tilt</span><span class="o">.</span><span class="na">whenActivated</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">tilt</span><span class="o">.</span><span class="na">whenDeactivated</span><span class="o">(()</span> <span class="o">-&gt;</span>  <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">30000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Tilt.java</span>
    </div>
</div>
<p>En el siguiente vídeo se aprecia como cuando al cambiar de posición del sensor de movimiento se mueve la bolita de mercurio y el diodo LED de ejemplo se enciende y apaga.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/7Rkou-pJWFY" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>El detector de movimiento en teoría es similar en funcionamiento al <em>tilt</em> y la librería diozero proporciona la clase <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/MotionSensor.html">MotionSensor</a> para hacer más sencillo su uso. Digo en teoría porque no he conseguido hacerlo funcionar y he revisado varias veces las conexiones mostradas en otros ejemplos incluido el <a href="http://osoyoo.com/2016/07/14/motionsensor-pi/">ejemplo de osoyoo</a>, no se si es porque me falta algo más que debo tener en cuenta y que no conozco o el sensor no funciona viniéndome estropeado. Cuando el sensor detecta movimiento cambia el voltaje de su <em>pin</em> GPIO de datos. Los otros dos <em>pines</em> que utiliza son uno para el voltaje de 5V y el de tierra.</p>
<p>El programa Java para el sensor de movimiento es similar al sensor <em>tilt</em> e igualmente encendería o apagaría un diodo LED cuando detecta movimiento.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-motion_hu919daab0ca3f88d0ef311958bdf8b23b_230707_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Cableado sensor de movimiento"><img src="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/images/cableado-motion_hu919daab0ca3f88d0ef311958bdf8b23b_230707_300x200_fit_q90_box.jpg" width="300" height="157" alt="Cableado sensor de movimiento" title="Cableado sensor de movimiento"  class="lozad "></a></p>
<figcaption>Cableado sensor de movimiento</figcaption>
</figure>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.sandpit.MotionSensor</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Motion</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="n">18</span><span class="o">);</span> <span class="n">MotionSensor</span> <span class="n">motion</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MotionSensor</span><span class="o">(</span><span class="n">21</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">motion</span><span class="o">.</span><span class="na">whenActivated</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">motion</span><span class="o">.</span><span class="na">whenDeactivated</span><span class="o">(()</span> <span class="o">-&gt;</span>  <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">30000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Motion.java</span>
    </div>
</div>
<p>Ambos ejemplos pueden usarse con los siguientes comandos cambiando la dirección IP de la Raspberry Pi y el directorio de la misma a donde se suben los ejemplos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew upload&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Tilt&#39;</span>&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Motion&#39;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<p>El siguiente artículo de la sería será sobre cómo usar un <em>servo motor</em> que es diferente de un motor que gira constantemente.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub.</p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://pimylifeup.com/raspberry-pi-motion-sensor/">Raspberry Pi Motion Sensor using a PIR Sensor</a></li>
<li><a href="http://www.meccanismocomplesso.org/en/pir-motion-detector/">PIR motion detector – a sensor for Arduino and Raspberry Pi (1st part)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/</id>
        <title>Cómo usar un diodo LED, un pulsador y un zumbador con la Raspberry Pi y Java</title>
        <updated>2017-04-09T12:00:00+02:00</updated>
        <published>2017-04-09T12:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>El <em>kit</em> de electrónica para la Raspberry Pi incluye varios dispositivos controlables con lo <em>pines</em> GPIO. En el caso de este ejemplo usaré un diodo LED, un zumbador y un pulsador para crear un ejemplo en el que el diodo LED se enciendan y el zumbador emita un sonido cuando el pulsador se active.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En artículos anteriores ya he comentado <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/">como hacer parpadear un diodo LED</a>, <a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/">como usar un display LCD de 16 columnas y 2 filas</a> y <a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/">como obtener la temperatura y humedad de un sensor DHT11</a>, todo estos ejemplo usando varios elementos de <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi 3</a>. En este artículo en el que mostraré cómo usar un LED, un pulsador y un zumbador es mucho más sencillo que los casos del <em>display</em> LCD de 16 filas y 2 columnas y del sensor DHT11. Vistos los ejemplos de artículos anteriores lo más difícil de este es hacer el conexionado con los cables. Para controlar los <em>pines</em> usaré la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> que proporciona clases de alto nivel para cada uno de estos elementos para que desde código Java sea bastante sencillo controlarlos.</p>
<p>El ejemplo consistirá en que cuando se presione el pulsador se encienda el diodo LED y el zumbador se active emitiendo un zumbido audible. Cada uno de estos elementos requiere usar un <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> de los 17 que hay disponibles en la Raspberry Pi 1 que es el modelo que tengo yo o de los 26 <em>pines</em> que poseen versiones posteriores de la Raspberry Pi como la B+, 2 y 3.</p>
<p>Este sería el esquema de conexionado de los elementos. El diodo LED tiene una polaridad de modo que la patita larga que es la parte positiva se conectará al <em>pin</em> GPIO 1 según la nomenclatura de wiringPi o el 18 según la de Broadcom con una resistencia de 200 ohmios entre el <em>pin</em> GIPO y la patita de diodo para que la intensidad que atraviesa el diodo sea menor y no se desgaste. El zumbador también tiene una polaridad que en el caso del <em>kit</em> que he usado viene serigrafiado y con una etiqueta, la parte positiva se conectará a otro <em>pin</em> GPIO y usaré el <em>pin</em> GPIO 2. Para que el pulsador haga contacto bien en la placa de conexiones para hacer pruebas sin soldadura hay que presionar sin forzar pero hasta que quede bien encadado y sin fijo, usaré el <em>pin</em> GPIO 3.</p>
<p>Para el pulsador usaré el método <em>PULL UP</em> (el otro es <em>PULL DOWN</em>) donde conectaré una patita del pulsador a tierra y la adyacente al <em>pin</em> GPIO, en <a href="https://grantwinney.com/using-pullup-and-pulldown-resistors-on-the-raspberry-pi/">algunas páginas</a> se explica haciendo uso de resistencias, sin embargo, el uso de resistencias en la Raspberry Pi no es necesario ya que los <em>pines</em> ya <a href="https://projects.drogon.net/raspberry-pi/wiringpi/special-pin-functions/">las tienen incorporadas internamente</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/cableado_hubfa7419859bb46d6a314285baad9a7e6_233757_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="cableado en la breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/cableado_hubfa7419859bb46d6a314285baad9a7e6_233757_300x200_fit_q90_box.jpg" width="300" height="131" alt="cableado en la breadboard" title="cableado en la breadboard"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/esquema-cableado_hud3307a9dcf866997c14e92a84e64db8d_261061_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/esquema-cableado_hud3307a9dcf866997c14e92a84e64db8d_261061_300x200_fit_box_3.png" width="300" height="123" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Esquema del cableado</figcaption>
</figure>
</div>
<p>La librería diozeo para identificar los <em>pines</em> usa la nomenclatura de Broadcom, otras son las nomenclaturas del <em>header</em> o de wiringPi. Hay que tener en cuenta la nomenclatura que se use ya que el número del <em>pin</em> variará en cada una de ellas, también hay que tener en cuenta la versión de la Raspberry Pi ya que hay pequeñas variaciones según la versión. Por ejemplo, según la tabla de referencia siguiente, para la Raspberry Pi 1 y según la nomenclatura de Broadcom el <em>pin</em> GPIO 18 corresponde al número 12 de <em>header</em>, el GPIO 21 al número 13 y el GPIO 22 al número 15. Según la nomenclatura de wiringPi el GPIO 1 corresponde al número 1, el GPIO 2 al número 2 y el GPIO 3 al número 3.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de pines Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_300x200_fit_box_3.png" width="152" height="200" alt="Header de pines Raspberry Pi 1 B" title="Header de pines Raspberry Pi 1 B"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de pines Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_300x200_fit_box_3.png" width="110" height="200" alt="Header de pines Raspberry Pi 3 B" title="Header de pines Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Header de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de pines Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_300x200_fit_box_3.png" width="94" height="200" alt="Header de pines Raspberry Pi 1 B" title="Header de pines Raspberry Pi 1 B"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de pines Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_300x200_fit_box_3.png" width="67" height="200" alt="Header de pines Raspberry Pi 3 B" title="Header de pines Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Headers de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom</figcaption>
</figure>
</div>
<p>Usando la librería diozero el código Java para realizar el ejemplo no necesita excesiva explicación. Es posible hacer uso de las <a href="https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/">funciones lambdas que incorporó el lenguaje Java en la versión de Java 8</a> y con la sentencia <em>try-with-resources</em> del lenguaje los elementos se finalizará correctamente en caso de producirse alguna excepción, por ejemplo apagando el diodo en caso de que estuviese encendido o apagando el zumbador en su caso.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.diozero.Button</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.Buzzer</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.api.GpioPullUpDown</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LedButtonBuzzer</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="n">18</span><span class="o">);</span> <span class="n">Buzzer</span> <span class="n">buzzer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Buzzer</span><span class="o">(</span><span class="n">21</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="n">22</span><span class="o">,</span> <span class="n">GpioPullUpDown</span><span class="o">.</span><span class="na">PULL_UP</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">button</span><span class="o">.</span><span class="na">whenPressed</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">buzzer</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">button</span><span class="o">.</span><span class="na">whenReleased</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">buzzer</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">30000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>LedButtonBuzzer.java</span>
    </div>
</div>
<p>Este es un pequeño vídeo en el que muestro su funcionamiento.</p>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/jaqMi53pjf0" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeLedButtonBuzzer</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/</id>
        <title>Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java</title>
        <updated>2017-04-02T10:15:00+02:00</updated>
        <published>2017-03-31T19:00:00+02:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>El <em>kit</em> de iniciación a la electrónica para la Raspberry Pi tiene un sensor para la temperatura y humedad, el modelo DHT11. Obtener la información requiere restricciones de tiempo, este es un caso de uso justificado para usar lenguaje C y JNI para integrarlo con Java. En el ejemplo el código C llama a un método de una clase Java con dos valores enteros o lanza una excepción en caso de que al realizar la lectura haya habido algún error en la transmisión de los bits.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Entre los varios sensores incluídos en el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación para la Raspberry Pi</a> está el sensor de temperatura y humedad con el modelo DHT11. El DHT11 es un sensor muy básico pero suficiente y válido si el objetivo es trastear un poco con hardware.</p>
<p>En la <a href="http://www.micropik.com/PDF/dht11.pdf">especificación del sensor DHT11</a> está descrita su funcionamiento y forma de comunicación. Utiliza 3 cables, uno para la corriente de 3.3V, otro para tierra y finalmente uno de datos que se conecta a cualquier <em>pin</em> <abbr title="General Purpose Input Output">GPIO</abbr> de la Raspberry Pi. Según la especificación el sensor proporciona sus datos en unos 4 ms cuando se le emite un pulso bajo durante unos pocos microsegundos y a continuación uno alto durante otros pocos microsegundos, momento a partir del cual el sensor emite 40 bits de información empezando por un pulso bajo de inicio y a continuación el propio bit con un pulso alto, según sea la duración del pulso alto el bit se considera un 0 si es menor de unos 27μs y un 1 si dura más de ese tiempo hasta unos 80μs momento en el que se emite el siguiente bit de información. Los primeros 8 bits corresponden a la parte entera de la humedad, los siguientes 8 bits a la parte decimal de la humedad, el tercer grupo de 8 bits a la parte entera de la temperatura y 8 bits más para la parte decimal. El último grupo de 8 bits hasta completar los 40 bits son de <em>checksum</em> para detectar errores en la transmisión. El porcentaje de errores en la transmisión significativo en este sensor y quizá haya que realizar varias lecturas del sensor para obtener una correcta.</p>
<p>Dada las restricciones de tiempo que utiliza el sensor en el ejemplo usaré el lenguaje C para obtener los valores de temperatura y humedad y <abbr title="Java Native Interface">JNI</abbr> para acceder a ellos desde Java. Aún usando C se producen errores en la obtención de los valores ya que el método usado por el sensor y transmitir los datos basados en tiempo de microsegundos no es muy fiable. Usando Java la situación sería peor por las restricciones que impone la máquina virtual con sus paradas para la recolección de basura por ejemplo. Así que el ejemplo consistirá en una combinación de C y Java con JNI un poco más avanzado que el <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/">Ejemplo de JNI, usar código en C desde Java</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-1_huf15bd8a2768efd9c6ad1887c2eb98f8b_135926_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Sensor DHT11"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-1_huf15bd8a2768efd9c6ad1887c2eb98f8b_135926_300x200_fit_q90_box.jpg" width="300" height="118" alt="Sensor DHT11" title="Sensor DHT11"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-2_huc8d787f20ca8a7e91a1094d8f98d55f1_124881_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Sensor DHT11"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/dht11-2_huc8d787f20ca8a7e91a1094d8f98d55f1_124881_300x200_fit_q90_box.jpg" width="300" height="129" alt="Sensor DHT11" title="Sensor DHT11"  class="lozad "></a></p>
<figcaption>Sensor DHT11</figcaption>
</figure>
</div>
<p>Lo primero que deberemos hacer para acceder a la información del sensor desde Java es crear una clase que contenga un método nativo que realizará la lectura de la información en C. Con la utilidad <em>javah</em> obtendremos el archivo de cabecera que implementará el programa en C. Finalmente, siguiendo la especificación se escribe el código C que realice la lectura que en este caso usará la librería <a href="http://wiringpi.com/">wiringPi</a> para la interacción con los <em>pines</em> GPIO de la Raspberry Pi.</p>
<p>El código en C invocará el método <em>setTemperatureHumidity</em> pasando como parámetros los datos de temperatura y humedad leídos del sensor, el método nativo <em>read</em> es utilizado por el código Java que controla el sensor para realizar la lectura en el código C.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span><span class="lnt">71&#10;</span><span class="lnt">72&#10;</span><span class="lnt">73&#10;</span><span class="lnt">74&#10;</span><span class="lnt">75&#10;</span><span class="lnt">76&#10;</span><span class="lnt">77&#10;</span><span class="lnt">78&#10;</span><span class="lnt">79&#10;</span><span class="lnt">80&#10;</span><span class="lnt">81&#10;</span><span class="lnt">82&#10;</span><span class="lnt">83&#10;</span><span class="lnt">84&#10;</span><span class="lnt">85&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.nio.file.StandardCopyOption</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dht11</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">architecture</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;os.arch&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">library</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;/libdht11-%s.so&#34;</span><span class="o">,</span> <span class="n">architecture</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">Dht11</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">library</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">&#34;libdht11&#34;</span><span class="o">,</span> <span class="s">&#34;so&#34;</span><span class="o">).</span><span class="na">toPath</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">int</span> <span class="n">gpio</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">temperature</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">humidity</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="n">date</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">Dht11</span><span class="o">(</span><span class="kt">int</span> <span class="n">gpio</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">gpio</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">init</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">(</span><span class="kt">int</span> <span class="n">gpio</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">5</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">read</span><span class="o">(</span><span class="n">gpio</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">break</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getTemperature</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">temperature</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getHumidity</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">humidity</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">LocalDateTime</span><span class="o">&gt;</span> <span class="nf">getDate</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">date</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTemperatureHumidity</span><span class="o">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="o">,</span> <span class="kt">int</span> <span class="n">humidity</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">temperature</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">temperature</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">humidity</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">humidity</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Dht11</span> <span class="n">sensor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dht11</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sensor</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Temperature (C): %f, Humidity: %f%n&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;No temperature/humidity&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>&#10;<span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">&#10;</span><span class="cp"></span><span class="cm">/* Header for class io_github_picodotdev_blogbitix_javaraspberrypi_Dht11 */</span>&#10;&#10;<span class="cp">#ifndef _Included_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span><span class="cp">#define _Included_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span><span class="cp">#ifdef __cplusplus&#10;</span><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>&#10;<span class="cp">#endif&#10;</span><span class="cp"></span><span class="cm">/*&#10;</span><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;init&#10;</span><span class="cm"> * Signature: ()V&#10;</span><span class="cm"> */</span>&#10;<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="n">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_init</span>&#10;  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>&#10;&#10;<span class="cm">/*&#10;</span><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_Dht11&#10;</span><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;read&#10;</span><span class="cm"> * Signature: (I)V&#10;</span><span class="cm"> */</span>&#10;<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_read</span>&#10;  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jint</span><span class="p">);</span>&#10;&#10;<span class="cp">#ifdef __cplusplus&#10;</span><span class="cp"></span><span class="p">}</span>&#10;<span class="cp">#endif&#10;</span><span class="cp">#endif&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.h</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span><span class="lnt">59&#10;</span><span class="lnt">60&#10;</span><span class="lnt">61&#10;</span><span class="lnt">62&#10;</span><span class="lnt">63&#10;</span><span class="lnt">64&#10;</span><span class="lnt">65&#10;</span><span class="lnt">66&#10;</span><span class="lnt">67&#10;</span><span class="lnt">68&#10;</span><span class="lnt">69&#10;</span><span class="lnt">70&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">&#10;</span><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">&#10;</span><span class="cp">#include</span> <span class="cpf">&lt;wiringPi.h&gt;</span><span class="cp">&#10;</span><span class="cp"></span>  &#10;<span class="cp">#include</span> <span class="cpf">&#34;io_github_picodotdev_blogbitix_javaraspberrypi_Dht11.h&#34;</span><span class="cp">&#10;</span><span class="cp"></span>&#10;<span class="cp">#define MAXTIMINGS 85&#10;</span><span class="cp"></span><span class="kt">int</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>&#10;&#10;<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_init</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>&#10;<span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">wiringPiSetup</span><span class="p">();</span>&#10;<span class="p">}</span>&#10;&#10;<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_Dht11_read</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">gpio</span><span class="p">)</span>&#10;<span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">uint8_t</span> <span class="n">state</span>	<span class="o">=</span> <span class="n">HIGH</span><span class="p">;</span>&#10;	<span class="kt">uint8_t</span> <span class="n">counter</span>	<span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;	<span class="kt">uint8_t</span> <span class="n">j</span>		<span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>&#10;&#10;	<span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;&#10;	<span class="n">pinMode</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>&#10;	<span class="n">digitalWrite</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>&#10;	<span class="n">delay</span><span class="p">(</span><span class="mi">18</span><span class="p">);</span>&#10;	<span class="n">digitalWrite</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>&#10;	<span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>&#10;	<span class="n">pinMode</span><span class="p">(</span><span class="n">gpio</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>&#10;&#10;	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAXTIMINGS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>&#10;	<span class="p">{</span>&#10;		<span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;		<span class="k">while</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">gpio</span><span class="p">)</span> <span class="o">==</span> <span class="n">state</span><span class="p">)</span>&#10;		<span class="p">{</span>&#10;			<span class="n">counter</span><span class="o">++</span><span class="p">;</span>&#10;			<span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>&#10;			<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">255</span><span class="p">)</span>&#10;			<span class="p">{</span>&#10;				<span class="k">break</span><span class="p">;</span>&#10;			<span class="p">}</span>&#10;		<span class="p">}</span>&#10;		<span class="n">state</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">gpio</span><span class="p">);</span>&#10;&#10;		<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">255</span><span class="p">)</span>&#10;			<span class="k">break</span><span class="p">;</span>&#10;&#10;		<span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>&#10;		<span class="p">{</span>&#10;			<span class="n">dht11_dat</span><span class="p">[</span><span class="n">j</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>&#10;			<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">&gt;</span> <span class="mi">16</span><span class="p">)</span>&#10;				<span class="n">dht11_dat</span><span class="p">[</span><span class="n">j</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>&#10;			<span class="n">j</span><span class="o">++</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span>&#10;&#10;	<span class="k">if</span> <span class="p">((</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">40</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">dht11_dat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="p">((</span><span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)))</span>&#10;	<span class="p">{</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">jmethodID</span> <span class="n">method</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&#34;setTemperatureHumidity&#34;</span><span class="p">,</span> <span class="s">&#34;(II)V&#34;</span><span class="p">);</span>&#10;		<span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">dht11_dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>&#10;	<span class="p">}</span>&#10;	<span class="k">else</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;java/io/IOException&#34;</span><span class="p">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">clazz</span><span class="p">,</span> <span class="s">&#34;Failed read&#34;</span><span class="p">);</span>&#10;	<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Dht11.c</span>
    </div>
</div>
<p>El código en C del sensor hay que compilarlo en la Raspberry Pi con el compilador <a href="https://gcc.gnu.org/">gcc</a> obteniendo una librería con código nativo que Java y JNI cargará y enlazará de forma dinámica en el programa Java. Ya que el código C usa la librería wiringPi ha de instalarse previamente junto con el compilador gcc. Obtenida la librería la copiamos mediante FTP o SSH de la Raspberry Pi a nuestro equipo de desarrollo. El código C realiza la lectura usando la librería wiringPi siguiendo la especificación de como se transmiten los datos por el sensor, realizada una lectura correcta usa varias de las funciones de la estructura <a href="http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html">JNIEnv</a> para obtener la referencia a un método de la clase DHT11 e invocarlo con los valores obtenidos del sensor o lanza una excepción si la lectura ha sido errónea.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># pacman -S wiringpi gcc</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>install-packages.sh</span>
    </div>
</div>
<p>El comando para compilar la librería de código nativo a partir del código en C y el archivo de cabecera generado con <em>javah</em> es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ gcc -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include&#34;</span> -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span> -shared -fPIC -L/usr/lib -lwiringPi -o libdht11-arm.so Dht11.c&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>compile.sh</span>
    </div>
</div>
<p>Para facilitar la ejecución la librería la proporcionó ya compilada y ubicada en el directorio <em>src/main/resources</em> de modo que será incluida en el archivo <em>jar</em> generado por <a href="https://gradle.org/">Gradle</a> en el ejemplo y que la clase DHT11 extraerá al directorio temporal del sistema y cargará para su uso.</p>
<p>La clase Java del ejemplo que hace uso del sensor realiza una lectura cada 3 segundos e imprime en la terminal y en el <em>display</em> 1602 el último valor obtenido correctamente de la temperatura y humedad.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.diozero.I2CLcd</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.api.I2CConstants</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.nio.ByteOrder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.concurrent.ScheduledExecutorService</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TemperatureHumidity</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Dht11</span> <span class="n">sensor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dht11</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ScheduledExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">I2CLcd</span> <span class="n">lcd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">I2CLcd</span><span class="o">(</span><span class="n">I2CConstants</span><span class="o">.</span><span class="na">BUS_0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">DEFAULT_DEVICE_ADDRESS</span><span class="o">,</span> <span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="n">2</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Runnable</span> <span class="n">monitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">sensor</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Temperature: %dºC, Humidity: %d%%, Date: %s%n&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">get</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_DATE_TIME</span><span class="o">));</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;T: %dC, H: %d%% &#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">().</span><span class="na">get</span><span class="o">(),</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getHumidity</span><span class="o">().</span><span class="na">get</span><span class="o">()));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s&#34;</span><span class="o">,</span> <span class="n">sensor</span><span class="o">.</span><span class="na">getDate</span><span class="o">().</span><span class="na">get</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;HH:mm:ss&#34;</span><span class="o">))));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;No data&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">service</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">monitor</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">60000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>TemperatureHumidity.java</span>
    </div>
</div>
<p>Este es el esquema de conexiones que he utilizado para el ejemplo y una foto del cableado real, he usado del <em>pin</em> GPIO número 2 según la nomenclatura de wiringPi para el cable de datos del sensor DHT11 que se corresponde con pin número 13 según la nomenclatura del <em>header</em> de la Raspberry Pi. Para ver el cableado del <em>display</em> 1602 más detalladamente y la activación del bus de comunicación I2C que necesita consulta el artículo <a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/">Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/cableado_hu0d8a80d75f578f66ed41ed680a8be94b_791258_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Cableado sensor DHT11 y display 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/cableado_hu0d8a80d75f578f66ed41ed680a8be94b_791258_300x200_fit_q90_box.jpg" width="263" height="200" alt="Cableado sensor DHT11 y display 1602" title="Cableado sensor DHT11 y display 1602"  class="lozad "></a></p>
<figcaption>Cableado sensor DHT11 y display 1602</figcaption>
</figure>
</div>
<p>Ejecutando el programa del ejemplo y usando el display 1602 (16 columnas y 2 filas) se muestra la temperatura y humedad obtenida del sensor.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/temperature-humidity_hu134d612f6f9e28cd0b81ff333d54b875_1380733_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Cableado ejemplo y funcionando"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/temperature-humidity_hu134d612f6f9e28cd0b81ff333d54b875_1380733_300x200_fit_q90_box.jpg" width="294" height="200" alt="Cableado ejemplo y funcionando" title="Cableado ejemplo y funcionando"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/display_hu1f1e292a1d4cb70e5c9f82a94dd9173b_251674_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Cableado ejemplo y funcionando"><img src="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/images/display_hu1f1e292a1d4cb70e5c9f82a94dd9173b_251674_300x200_fit_q90_box.jpg" width="300" height="162" alt="Cableado ejemplo y funcionando" title="Cableado ejemplo y funcionando"  class="lozad "></a></p>
<figcaption>Cableado ejemplo y funcionando</figcaption>
</figure>
</div>
<p>En el kernel de Linux hay un módulo que proporciona también los valores del sensor, sin embargo, no he conseguido obtener la temperatura y humedad usándolo. Lo he probado con el kernel 4.4 de Arch Linux ARM y en la versión 4.9 veo que hay cambios en este módulo que quizá lo hagan funcionar. Para usar el módulo del kernel hay que añadir un poco de configuración para el inicio de la Raspberry Pi. En los archivos <em>/sys/devices/platform/dht11@0/iio:device0/in_temp_input</em> y <em>/sys/devices/platform/dht11@0/iio:device0/in_temp_input</em> estarán la temperatura y humedad respectivamente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">dtoverlay=dht11,gpiopin=2&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>kernel-module-config.txt</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ cat /sys/bus/iio/devices/iio:device0/in_temp_input&#10;$ cat /sys/devices/platform/dht11@0/iio:device0/in_temp_input&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>cat.sh</span>
    </div>
</div>
<p>Para ejecutar el ejemplo con ya todo instalado uso uno de los siguientes dos comandos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew upload&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.TemperatureHumidity&#39;</span>&#10;&#10;$ ./gradlew executeTemperatureHumidity</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeTemperatureHumidity</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html">Java programming with JNI</a></li>
<li><a href="http://hirt.se/blog/?p=493">Accessing 1-wire Protocol Devices from Java</a></li>
<li><a href="http://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-the-raspberry-pi/">How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi</a></li>
<li><a href="http://www.prometec.net/sensores-dht11/">Sensores de temperatura DHT11</a></li>
<li><a href="https://github.com/Hexalyse/RPi-weather-log/blob/master/dht11.c">dht11.c</a></li>
<li><a href="http://www.uugear.com/portfolio/read-dht1122-temperature-humidity-sensor-from-raspberry-pi/">Read DHT11/22 Temperature &amp; Humidity Sensor from Raspberry Pi</a></li>
<li><a href="https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor">Digital output temperature and humidity sensor DHT11 - DHT22</a></li>
<li><a href="http://playground.arduino.cc/Main/DHT11Lib">A DHT11 Class for Arduino</a></li>
<li><a href="https://github.com/torvalds/linux/blob/master/drivers/iio/humidity/dht11.c">torvalds/linux/blob/master/drivers/iio/humidity/dht11.c</a></li>
<li><a href="http://www.tortosaforum.com/raspberrypi/dht11driver.htm">RaspberryPi DHT11 temperature and humidity sensor driver</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/</id>
        <title>Ejemplo de JNI, usar código en C desde Java</title>
        <updated>2017-03-25T10:05:00+01:00</updated>
        <published>2017-03-25T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Para tareas muy específicas que requieran alto rendimiento, baja latencia, tiempo real o haya restricciones de tiempo el lenguaje Java y la JVM pueden mostrar algunas limitaciones obligando a escribir alguna sección crítica de un programa en un lenguaje nativo como C o C++. Para hacer posible la integración entre Java y C existe en Java la API JNI. En este artículo mostraré como realizar un programa Java que emite el mensaje Hola Mundo desde una biblioteca compartida en C y usando JNI.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/gnu.svg" width="200" height="196" alt="GNU" title="GNU"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/linux.svg" width="200" height="232" alt="Linux" title="Linux"  class=""></p>
</div>
<p>Nunca hasta ahora había tenido necesidad de crear un programa que no estuviese completamente escrito en el lenguaje Java. La <a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">API de Java</a> ofrece multitud de clases para cualquier funcionalidad que necesitemos desde estructuras de datos hasta algoritmos de búsqueda o criptografía. También porque el rendimiento de un programa en Java es suficiente y similar a un programa equivalente escrito en C o C++ gracias a las optimizaciones que implementa la máquina virtual de Java o <abbr title="Java Virtual Machine">JVM</abbr> aún siendo los programas Java compilados a una representación intermedia de <em>bytecode</em> independiente de la arquitectura de procesador y sistema operativo en archivos de extensión <em>class</em> y posteriormente interpretados y traducidos a la arquitectura de ejecución, lo que le proporciona a Java la conocida frase <em>&ldquo;Write once, run anywhere&rdquo;</em>.</p>
<p>Sin embargo, en casos que se necesita un alto rendimiento para tareas muy específicas o evitar las imposiciones de la máquina virtual como las paradas que realiza para el recolector de basura una solución es escribir esa funcionalidad crítica en lenguaje C, C++ e incluso en <a href="https://golang.org/">Go</a>. El caso de necesidad que me he encontrado es acceder a un sensor de temperatura DHT11 del <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a> para leer de él la temperatura y humedad. La forma que tiene el sensor DHT11 de proporcionar los datos tiene restricciones de tiempo, cuando se le requieren los valores envía 80 bits de datos donde un pulso de 27μs significa un 0 y un pulso de más de ese tiempo hasta 70μs significa un 1. Estas restricciones de tiempo del sensor y el hecho de que es en una modesta en potencia <a href="https://www.raspberrypi.org/">Raspberry Pi</a> 1 donde lo usaré hace que Java no sea capaz de leer correctamente los valores del sensor.</p>
<p>Acceder desde Java a código nativo en C requiere usar <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface o por sus siglas JNI</a>. Lo primero que hay que realizar es crear una clase que declare los métodos que serán implementados de forma nativa declarando estos métodos usando la palabra reservada <em>native</em> y que serán enlazados por la JVM cargando una librería compartida con <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#loadLibrary-java.lang.String-">System.loadLibrary()</a>. Creada la clase Java se ha de generar el archivo de cabecera <em>.h</em> propia del lenguaje C con el programa de utilidad del JDK <em>javah</em>. Con el archivo de cabecera se implementa la función y se crea una librería compartida en <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> usando el <a href="https://gcc.gnu.org/">compilador gcc</a>. Con la librería compartida se puede iniciar el programa Java. Si la biblioteca compartida no se encuentra se lanzará una excepción del tipo <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/UnsatisfiedLinkError.html">UnsatisfiedLinkError</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/UnsatisfiedLinkError_huafbea2a660c5da4daa8f678c6e8bc0ac_46763_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/UnsatisfiedLinkError_huafbea2a660c5da4daa8f678c6e8bc0ac_46763_300x200_fit_box_3.png" width="300" height="193" alt="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo" title="Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo"  class="lozad "></a></p>
<figcaption>Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo</figcaption>
</figure>
</div>
<p>Algunas otras necesidades para hacer uso de JNI son:</p>
<ul>
<li>Acceder a características dependientes de la plataforma necesitadas por la aplicación que no están soportadas en la librería estándar de Java.</li>
<li>Ya hay una librería escrita en otro lenguaje y se quiere hacer accesible a código Java a través de JNI.</li>
<li>Se quiere implementar una pequeña parte de código crítico en un lenguaje de bajo nivel como ensamblador.</li>
</ul>
<p>Desde los métodos de código nativo se puede:</p>
<ul>
<li>Crear, inspeccionar y actualizar objetos Java (incluyendo arrays y strings).</li>
<li>Llamar a métodos Java.</li>
<li>Capturar y lanzar excepciones.</li>
<li>Cargar y obtener información de clases.</li>
<li>Realizar validación de tipos en tiempo de ejecución.</li>
</ul>
<p>Los comandos para generar el archivo de cabecera de C y compilarlo con el código nativo en una librería compartida con gcc son:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ javah -d src/main/c -classpath buil/classes/main io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#10;$ gcc -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include&#34;</span> -I<span class="s2">&#34;/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span> -shared -fPIC -L/usr/lib -o src/main/resources/libjnihelloworld-amd64.so src/main/c/JniHelloWorld.c&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;&#10;<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;<span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="n">task</span> <span class="nf">javah1</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s2">&#34;javah&#34;</span><span class="o">,</span> <span class="s2">&#34;-d&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/c&#34;</span><span class="o">,</span> <span class="s2">&#34;-classpath&#34;</span><span class="o">,</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span><span class="o">,</span> <span class="s2">&#34;io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#34;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="n">task</span> <span class="nf">javah</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;javah1&#39;</span><span class="o">,</span> <span class="s1">&#39;javah2&#39;</span><span class="o">]){</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">gcc1</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;javah&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s2">&#34;gcc&#34;</span><span class="o">,</span> <span class="s2">&#34;-shared&#34;</span><span class="o">,</span> <span class="s2">&#34;-fPIC&#34;</span><span class="o">,</span> <span class="s2">&#34;-I/usr/lib/jvm/java-8-openjdk/include&#34;</span><span class="o">,</span> <span class="s2">&#34;-I/usr/lib/jvm/java-8-openjdk/include/linux&#34;</span><span class="o">,</span> <span class="s2">&#34;-o&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/resources/libjnihelloworld-amd64.so&#34;</span><span class="o">,</span> <span class="s2">&#34;src/main/c/JniHelloWorld.c&#34;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">gcc</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;gcc1&#39;</span><span class="o">]){</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="n">task</span> <span class="nf">executeJniHelloWorldLocal</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;build&#39;</span><span class="o">,</span> <span class="s1">&#39;gcc&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>La cabecera usa varias definiciones de tipos definidas en los archivos <em>jni.h</em> y el archivo que variará según el sistema operativo <em>jni_md.h</em>. En la <a href="http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html">estructura JNIEnv</a> con múltiples funciones de integración en C y Java, también varias definiciones de los tipos Java para usarlos en C como <em>jobject</em>, <em>jstring</em>, <em>jint</em>, <em>jboolean</em>, <em>jlong</em>, <em>jdouble</em>, <em>jchar</em>, etc.</p>
<p>El programa que emite el mensaje <em>Hello World!</em> desde código nativo en C debe cargar y enlazar la librería de código nativo con el código de la clase Java. Esto se muestra en el bloque de inicialización <em>static</em> de la clase, en este caso usándo el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#load-java.lang.String-">System.load()</a>, la librería de código nativo de extensión <em>.so</em> en GNU/Linux como en este caso al construirse el proyecto se incluye en el archivo <em>.jar</em> del artefacto resultante se extráe al directorio temporal y se carga desde esa ubicación temporal. En el programa se llama al método <em>print</em> implementado en código nativo y en el código C se usa la función <em>printf</em> de la librería <em>stdio</em> para emitir el mensaje:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.nio.file.StandardCopyOption</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JniHelloWorld</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">static</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">architecture</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;os.arch&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">library</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;/libjnihelloworld-%s.so&#34;</span><span class="o">,</span> <span class="n">architecture</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">JniHelloWorld</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">library</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">&#34;libjnihelloworld&#34;</span><span class="o">,</span> <span class="s">&#34;so&#34;</span><span class="o">).</span><span class="na">toPath</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toAbsolutePath</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="n">JniHelloWorld</span><span class="o">().</span><span class="na">print</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">&#10;</span><span class="cp">#include</span> <span class="cpf">&#34;io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld.h&#34;</span><span class="cp">&#10;</span><span class="cp"></span>&#10;<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld_print</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>&#10;<span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.c</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>&#10;<span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">&#10;</span><span class="cp"></span><span class="cm">/* Header for class io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld */</span>&#10;&#10;<span class="cp">#ifndef _Included_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span><span class="cp">#define _Included_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span><span class="cp">#ifdef __cplusplus&#10;</span><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>&#10;<span class="cp">#endif&#10;</span><span class="cp"></span><span class="cm">/*&#10;</span><span class="cm"> * Class:&nbsp;&nbsp;&nbsp;&nbsp; io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld&#10;</span><span class="cm"> * Method:&nbsp;&nbsp;&nbsp;&nbsp;print&#10;</span><span class="cm"> * Signature: ()V&#10;</span><span class="cm"> */</span>&#10;<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="n">Java_io_github_picodotdev_blogbitix_javaraspberrypi_JniHelloWorld_print</span>&#10;  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span>&#10;&#10;<span class="cp">#ifdef __cplusplus&#10;</span><span class="cp"></span><span class="p">}</span>&#10;<span class="cp">#endif&#10;</span><span class="cp">#endif&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>JniHelloWorld.h</span>
    </div>
</div>
<p>La librería compartida para un sistema <em>amd64</em> la he compilado en mi equipo de escritorio y para la versión <em>arm</em> en la Raspberry Pi e incluido en el directorio <em>src/main/resources</em> de código fuente del ejemplo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew build&#10;$ java -classpath build/classes/main:build/resources/main io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.JniHelloWorld&#39;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>execute.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-amd64_hub2b4c641f5fe198f142e57637f8a6ec4_27206_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Mensaje en la terminal emitido desde código nativo (amd64)"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-amd64_hub2b4c641f5fe198f142e57637f8a6ec4_27206_300x200_fit_box_3.png" width="300" height="193" alt="Mensaje en la terminal emitido desde código nativo (amd64)" title="Mensaje en la terminal emitido desde código nativo (amd64)"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-arm_hu6c56be07a094fe8914ade92188032253_34069_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Mensaje en la terminal emitido desde código nativo (ARM)"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/images/JniHelloWorld-arm_hu6c56be07a094fe8914ade92188032253_34069_300x200_fit_box_3.png" width="300" height="193" alt="Mensaje en la terminal emitido desde código nativo (ARM)" title="Mensaje en la terminal emitido desde código nativo (ARM)"  class="lozad "></a></p>
<figcaption>Mensaje en la terminal emitido desde código nativo en un sistema amd64 y ARM</figcaption>
</figure>
</div>
<p>Ente ejemplo usa Java 8 y requiere instalar el compilador gcc para compilar la librería con código nativo. <a href="https://gradle.org/">Gradle</a> ofrece soporte para <a href="https://docs.gradle.org/3.4.1/userguide/native_software.html">compilar código nativo con su plugin</a>, sin embargo, he preferido usar y conocer los comandos javah y gcc sin usar Gradle. En el siguiente artículo mostraré el ejemplo del sensor DHT11 usando JNI y código nativo en C llamando a métodos de un objeto Java desde código C.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeJniHelloWorldLocal</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://blog.dogan.io/2015/08/15/java-jni-jnr-go/">GO: Call me maybe, Java!</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</a></li>
<li><a href="http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html">Java Programming Tutorial, Java Native Interface (JNI)</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</title>
        <updated>2017-03-19T02:00:00+01:00</updated>
        <published>2017-03-18T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Uno de los motivos por los que compré el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a>, además de cacharrear un poco, era en concreto controlar el <em>display</em> LCD de 16 columnas y 2 filas. En el <em>kit</em> el <em>display</em> viene con un adaptador con el bus de comunicación I2C. El <em>display</em> se puede usar sin este bus pero requiere utilizar muchos más <em>pines</em> GPIO de datos de los limitados 17 que ofrece la Raspberry Pi 1 y los 26 de las Raspberry Pi B+, 2  y 3. Controlar el <em>display</em> con I2C requiere únicamente 2 pines, por contra sin usar I2C requiere un número significativamente mayor 4 u 8 pines.</p>
<p>El <em>display</em> 1602 con su adaptador para el bus I2C que viene con el <em>kit</em> ya incorporado en la parte trasera es el siguiente.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/display-lcd-1602_hudec7d325162bd5734a4764f0f652bdc1_213977_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Display LCD 16 columnas y 2 filas"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/display-lcd-1602_hudec7d325162bd5734a4764f0f652bdc1_213977_300x200_fit_q90_box.jpg" width="300" height="141" alt="Display LCD 16 columnas y 2 filas" title="Display LCD 16 columnas y 2 filas"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/adaptador-bus-i2c-1602_hu088a2091b37df42dbf508d1cbdc80ce3_242376_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Adaptador bus I2C para display 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/adaptador-bus-i2c-1602_hu088a2091b37df42dbf508d1cbdc80ce3_242376_300x200_fit_q90_box.jpg" width="300" height="134" alt="Adaptador bus I2C para display 1602" title="Adaptador bus I2C para display 1602"  class="lozad "></a></p>
<figcaption>Display LCD 1602 y adaptador bus I2C</figcaption>
</figure>
</div>
<p>El esquema de conexionado para controlar el <em>display</em> requiere usar los <em>pines</em> de la Raspberry Pi <em>SDA</em> y <em>SDL</em> además de un <em>pin</em> para proporcionar un voltaje de 5V y otro <em>pin</em> para la tierra. El <em>pin</em> <em>SDA</em> es el número 2 según la numeración de <em>pines</em> de la Raspberry Pi y el <em>SDL</em> es el 5. El <em>pin</em> <em>SDA</em> es utilizado en el bus I2C para transmitir los datos y el <em>SDL</em> para la señal de reloj o sincronización. Utilizando la placa de extensión wiringPi de 26 <em>pines</em> los <em>pines</em> <em>SDA</em> y <em>SDL</em> se encuentran identificados por su nombre y el de la placa de extensión de 40 <em>pines</em> que viene con el <em>kit</em> de iniciación también, deberemos identificar estos <em>pines</em> y realizar las conexiones adecuadamente.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/breadboard-cableado_hu9efc39f5b6a5663511ff278421cfc4fc_554266_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Cableado en la breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/breadboard-cableado_hu9efc39f5b6a5663511ff278421cfc4fc_554266_300x200_fit_q90_box.jpg" width="164" height="200" alt="Cableado en la breadboard" title="Cableado en la breadboard"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/esquema-cableado_hu78b02982f519ac875b343bc71e481476_96429_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/esquema-cableado_hu78b02982f519ac875b343bc71e481476_96429_300x200_fit_box_3.png" width="300" height="143" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Cableado en la breadboard</figcaption>
</figure>
</div>
<p>Hay que emplear varios cables macho-macho y hembra-hembra para conectar a los <em>pines</em> del adaptador I2C del <em>display</em>  a los <em>pines</em> del voltaje de 5V, tierra, <em>SDA</em> y <em>SDL</em> de la placa de pruebas sin soldadura.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/cables-macho-macho-hembra-hembra_hu5bd502ece26df8c90c0240f7b6e4e0af_344589_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Unión cables macho-macho y hembra-hembra"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/cables-macho-macho-hembra-hembra_hu5bd502ece26df8c90c0240f7b6e4e0af_344589_300x200_fit_q90_box.jpg" width="252" height="200" alt="Unión cables macho-macho y hembra-hembra" title="Unión cables macho-macho y hembra-hembra"  class="lozad "></a></p>
<figcaption>Unión cables macho-hembra</figcaption>
</figure>
</div>
<p>El siguiente paso será activar el bus I2C en la Raspberry Pi que por defecto está desactivado. Esto requiere añadir unos parámetros en la configuración de arranque y cargar unos módulos del kernel que finalmente crearán un dispositivo tal que en <em>/dev/i2c-0</em> o <em>/dev/i2c-0</em>. Si instalamos el paquete <em>i2c-tools</em> podremos detectar el <em>display</em> en el bus I2C, en la captura de pantalla en la dirección 27 que hay que usar al construir la instancia del controlador del <em>display</em>. Estos cambios en la configuración de inicio requieren reiniciar la Raspberry Pi. En un sistema con la distribución <a href="https://archlinuxarm.org/">Arch Linux ARM</a> los cambios son los siguientes.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"># /boot/config.txt&#10;device_tree_param=i2c_arm=on&#10;&#10;# sudo vim /boot/cmdline.txt&#10;bcm2708.vc_i2c_override=1&#10;&#10;$ sudo systemctl reboot&#10;&#10;$ sudo modprobe i2c-bcm2708&#10;$ sudo modprobe i2c-dev&#10;&#10;$ sudo pacman -S i2c-tools&#10;$ sudo i2cdetect -y 0</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>configuration.txt</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/i2cdetect_huf6262b8283cadf398a1aab0f9279ada0_22811_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Detección del display 1602 en el bus I2C"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/i2cdetect_huf6262b8283cadf398a1aab0f9279ada0_22811_300x200_fit_box_3.png" width="300" height="187" alt="Detección del display 1602 en el bus I2C" title="Detección del display 1602 en el bus I2C"  class="lozad "></a></p>
<figcaption>Detección del display 1602 en el bus I2C</figcaption>
</figure>
</div>
<p>Según la <a href="https://www.sparkfun.com/datasheets/LCD/HD44780.pdf">especificación del <em>display</em> 1602</a> este componente soporta varios comandos para controlarlo, algunos son para limpiar el texto, cambiar la dirección de escritura, añadir caracteres personalizados y emitir texto en la línea o posición del <em>display</em> que queramos. No es simple el controlar el <em>display</em> a bajo nivel ya que hay que trabajar en momentos con binario y usar bytes, por ello para el ejemplo usaré la librería <a href="http://rtd.diozero.com/en/latest/">diozero</a> que ya trae una implementación de controlador con funciones de alto nivel <em>I2CLcd</em> que en versiones más recientes de la librería ha sido renombrada a <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html">HD44780Lcd</a> mucho más cómoda que enviar <em>bytes</em> a bajo nivel al bus I2C, el <a href="https://github.com/mattjlewis/diozero/blob/master/diozero-core/src/main/java/com/diozero/HD44780Lcd.java">código fuente de la clase HD44780Lcd</a> está disponible y podemos verlo si hay curiosidad.</p>
<p>En mi caso con la Raspberry Pi 1 he tenido que utilizar la versión 0.9 de la librería diozero porque la 0.8 me generaba un <em>stacktrace</em> de una excepción <em>java.lang.UnsupportedOperationException</em>. Obtener esta versión de la librería como aún era de desarrollo y no estaba publicada en <a href="https://search.maven.org/">Maven Central</a> la he descargado de un <a href="https://drive.google.com/drive/u/0/folders/0B2Kd_bs3CEYaZ3NiRkd4OXhYd3c">google drive que ha creado el autor</a> y usado en <a href="https://gradle.org/">Gradle</a> como una dependencia del sistema de ficheros. Como librería subyacente de diozero para controlar los <em>pines</em> GPIO he usado <a href="http://abyz.co.uk/rpi/pigpio/">pigpio</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">Caused by: java.lang.UnsupportedOperationException&#10;	at java.util.AbstractList.add(AbstractList.java:148)&#10;	at java.util.AbstractList.add(AbstractList.java:108)&#10;	at com.diozero.internal.board.raspberrypi.RaspberryPiBoardInfoProvider$PiBRev1BoardInfo.&lt;clinit&gt;(RaspberryPiBoardInfoProvider.java:281)&#10;	... 14 more</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>java.lang.UnsupportedOperationException</span>
    </div>
</div>
<p>En el ejemplo mostraré un texto en cada una de las lineas del <em>display</em> y usaré una de las funciones del para mostrar caracteres personalizados con los que es posible crear <em>emojis</em> o caracteres nuevos. El controlador de diozero ya contiene una buena colección de caracteres personalizados que definen el patrón de 5x8 puntos que siguen, los nombres de estos caracteres personalizados están en la clase interna <em>Characters</em> de <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html">HD44780Lcd</a> aunque también podemos definir nuevos. El ejemplo es el siguiente donde se muestra el uso de los métodos <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setText-int-java.lang.String-">setText</a> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-">setCharacter</a>, también el constructor donde hay que indicar la dirección asignada al dispositivo en el bus I2C que siendo la 27 corresponde con el valor definido en una constante. Pero también hay otros métodos como <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#clear--">clear</a>, <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOff--">cursorOff</a> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOn--">cursorOn</a> para apagar y encender el cursor, <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOff--">displayOff</a>
<a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOn--">displayOn</a> para apgar y encender el <em>display</em> y <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#createChar-int-byte:A-">createChar</a> para crear nuevos caracteres definidos como una <em>array</em> de 8 posiciones donde cada <em>byte</em> indica los pixeles encendidos de cada fila del caracter de 5x8 y con <a href="http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-">setCharacter</a> para emitir uno de los 8 posibles que se pueden usar al mismo tiempo. Además de estos también hay otros pocos métodos más relacionados con el cursor.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.diozero.I2CLcd</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.diozero.api.I2CConstants</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.nio.ByteOrder</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lcd</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">I2CLcd</span> <span class="n">lcd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">I2CLcd</span><span class="o">(</span><span class="n">I2CConstants</span><span class="o">.</span><span class="na">BUS_0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">DEFAULT_DEVICE_ADDRESS</span><span class="o">,</span> <span class="n">ByteOrder</span><span class="o">.</span><span class="na">LITTLE_ENDIAN</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="n">2</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;heart&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;smilie&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">createChar</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">I2CLcd</span><span class="o">.</span><span class="na">Characters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;space_invader&#34;</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="n">13</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">0</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="n">14</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">1</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setCharacter</span><span class="o">(</span><span class="n">15</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">2</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span> <span class="n">messager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="s">&#34; powered by Java&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lcd</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Europe/Madrid&#34;</span><span class="o">)).</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd HH:mm&#34;</span><span class="o">)));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">messager</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">messager</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Lcd.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;&#10;<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;<span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/diozero-core-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/diozero-provider-pigpio-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/pigpioj-java-1.0.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/commons-math3-3.6.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/tinylog-1.1.jar&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="n">task</span> <span class="nf">copyDependencies</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">into</span> <span class="s2">&#34;$buildDir/libs&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">runtime</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">jar</span> <span class="o">{</span> <span class="n">dependsOn</span> <span class="n">copyDependencies</span> <span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">upload</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;jar&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;rsync&#39;</span><span class="o">,</span> <span class="s1">&#39;-arPL&#39;</span><span class="o">,</span> <span class="s1">&#39;--delete&#39;</span><span class="o">,</span> <span class="s1">&#39;-e&#39;</span><span class="o">,</span> <span class="s1">&#39;ssh&#39;</span><span class="o">,</span> <span class="s1">&#39;build/libs/&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi@192.168.1.101:/home/raspberrypi/scripts/javaraspberrypi/&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span>&#10;&#10;<span class="n">task</span> <span class="nf">executeLcd</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;upload&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;ansible&#39;</span><span class="o">,</span> <span class="s1">&#39;-i&#39;</span><span class="o">,</span> <span class="s1">&#39;hosts&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi&#39;</span><span class="o">,</span> <span class="s1">&#39;--sudo&#39;</span><span class="o">,</span> <span class="s1">&#39;--ask-sudo-pass&#39;</span><span class="o">,</span> <span class="s1">&#39;-m&#39;</span><span class="o">,</span> <span class="s1">&#39;command&#39;</span><span class="o">,</span> <span class="s1">&#39;-a&#39;</span><span class="o">,</span> <span class="s1">&#39;chdir=/home/raspberrypi/scripts/javaraspberrypi java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Lcd&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">standardInput</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">...</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew upload&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.Lcd&#39;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew executeLcd&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/mensaje-lcd-1602_hu62a298306b4eecc0b9f527b7686a5a47_205348_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Mensaje en LCD 1602"><img src="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/images/mensaje-lcd-1602_hu62a298306b4eecc0b9f527b7686a5a47_205348_300x200_fit_q90_box.jpg" width="300" height="140" alt="Mensaje en LCD 1602" title="Mensaje en LCD 1602"  class="lozad "></a></p>
<figcaption>Mensaje en LCD 1602</figcaption>
</figure>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/V6msjQNDPuU" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>Pudiendo mostrar mensajes en <em>display</em> es posible mostrar cualquier información que un programa sea capaz de capturar como temperatura y humedad del correspondiente sensor en el mismo <em>kit</em>, estado de un pulsador, espacio disponible en el disco del sistema, y memoria libre, <em>uptime</em> del sistema, fecha y hora, &hellip; cualquier cosa que se nos ocurra.</p>
<p>El ejemplo parece simple, y el programa Java lo es, pero requiere conocer varias cosas que en internet está dispersas como activar el bus I2C o conocer la librería diozero para controlar el <em>display</em> que simplifica enormemente el código y nos evita comunicarnos a más bajo nivel con el <em>display</em>, realizar las conexiones eléctricas también requiere algo de conocimiento. Averiguar todo esto me costó una buena cantidad de tiempo.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeLcd</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/</id>
        <title>Ejemplo encender y apagar diodo LED con la Raspberry Pi en Java</title>
        <updated>2017-03-12T00:15:00+01:00</updated>
        <published>2017-03-11T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>El primer ejemplo que haré de un programa Java que usa los <em>pines</em> GPIO para realizar algo con el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de inicialización a la electrónica con la Raspberry Pi</a> consiste en un pequeño programa Java que hace parpadear un diodo LED. La librería <a href="http://rtd.diozero.com/en/latest/">Diozero</a> ofrece a los programas Java el acceso a los <em>pines</em> GPIO de la diferentes versiones de la Raspberry Pi desde la 1 (rev 1 y rev 2) pasando por los modelos B+, 2 y 3. Otra librería que se puede usar con el lenguaje de programación Java es <a href="https://pi4j.com/">Pi4J</a> aunque personalmente Diozero me ha gustado más por ser de más alto nivel.</p>
<p>Algunas de las características que ofrece la librería Diozero son:</p>
<ul>
<li>Soporta dispositivos GPIO / I2C / SPI (LEDs, botones, sensores, motores, pantallas, etc).</li>
<li>Soporta todos los modelos de las placas Raspberry Pi, Odroid C2, BeagleBone Black, C.H.I.P y Asus Tinker.</li>
<li>Usa caracterśiticas de Java como <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">gestión automática de recursos</a>, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">expresiones lambda</a> y <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">referencias a métodos</a> que simplifican el desarrollo y mejoran la legibilidad.</li>
<li><a href="http://rtd.diozero.com/en/latest/#devices">Lista de deipositivos</a>.</li>
<li>Soporta varios proveedores para el acceso al los dispositivos con <a href="http://rtd.diozero.com/en/latest/#performance">diferentes grados de rendimiento</a>.</li>
</ul>
<p>Una de las primeras cosas a conocer es como se numeran los <em>pines</em> en la Raspberry Pi ya que hay varias nomenclaturas (<em>header</em>, wiringPi y Broadcom) y que nomenclatura utiliza la librería Diozero. También deberemos tener en cuenta el modelo de la Raspberry Pi que poseamos ya que según el modelo hay pequeñas diferencias en algunos <em>pines</em>. Además si usamos una placa de extensión para pruebas sin soldadura como la <a href="http://wiringpi.com/">wiringPi</a> deberemos identificarlos por su nombre. Yo que poseo una de las primeras Raspberry Pi (la 1, rev1) el correspondiente su <a href="https://www.raspberrypi.org/documentation/usage/gpio/">esquema de <em>pines</em> Raspberry Pi 1 (rev. 1)</a> es el del enlace. En ese esquema se define que el <em>pin</em> número 12 según el conteo del <em>header</em> corresponde a GPIO 18 según la nomenclatura Broadcom y la librería Diozero y al GPIO 1 en la librería Pi4J y en la placa de extensión wiringPi.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_300x200_fit_q90_box.jpg" width="268" height="200" alt="Raspberry Pi 1 B" title="Raspberry Pi 1 B"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_300x200_fit_q90_box.jpg" width="287" height="200" alt="Raspberry Pi 3 B" title="Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Placas modelos Raspberry Pi 1 B y 3 B</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/breadboard-cableado_hu4408ad1d84b4f4d48570a363c8652fed_871766_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Breadboard y placa extensión GPIO wiringPi de 26 pines"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/breadboard-cableado_hu4408ad1d84b4f4d48570a363c8652fed_871766_300x200_fit_q90_box.jpg" width="267" height="200" alt="Breadboard y placa extensión GPIO wiringPi de 26 pines" title="Breadboard y placa extensión GPIO wiringPi de 26 pines"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/gpio-extension-40-pines-board_hua16e258eafc6d06cef89d52014497ddd_604238_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Placa extensión GPIO de 40 pines"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/gpio-extension-40-pines-board_hua16e258eafc6d06cef89d52014497ddd_604238_300x200_fit_q90_box.jpg" width="150" height="200" alt="Placa extensión GPIO de 40 pines" title="Placa extensión GPIO de 40 pines"  class="lozad "></a></p>
<figcaption>Breadboard y placa extesión GPIO wiringPi de 26 _pines_ y 40 pines</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/esquema-cableado_hu198f1be709c561ea99bf0746642b0382_216071_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Esquema del cableado"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/esquema-cableado_hu198f1be709c561ea99bf0746642b0382_216071_300x200_fit_box_3.png" width="300" height="129" alt="Esquema del cableado" title="Esquema del cableado"  class="lozad "></a></p>
<figcaption>Esquema del cableado</figcaption>
</figure>
</div>
<p>Como uso la placa de extensión wiringPi para conectar los <em>pines</em> de la Raspberry Pi a otra placa para hacer pruebas sin soldadura también conocidas como <em>breadboard</em>  resultará que en el programa Java al usar Diozero uso la nomenclatura Broadcom para identificar los <em>pines</em> pero al conectar los cables en la placa de pruebas uso la nomenclatura de wiringPi.</p>
<p>Para el ejemplo utilizaré la placa de extensión sin soldadura, una resistencia de 200 ohmios (dadas sus bandas de colores rojo, negro, marrón y dorado) y un diodo LED además de un par de cables macho-macho para realizar las conexiones electrónicas entre el GPIO 18 (según la nomenclatura de la librería Diozero y Broadcom, 12 según la nomenclatura del <em>header</em> y 1 según la de wiringPi) y la resistencia además de entre el diodo y la línea de tierra. Los diodos LED poseen una orientación y hay que conectar la resistencia con el polo positivo del diodo LED, el polo positivo del diodo LED identifica porque es la patita larga y el negativo con tierra es la patita corta. Si realizamos la conexión al revés solo pasará que el diodo no se enciende pero no lo estropeará, la resistencia si es necesaria para no hacer que pase por el diodo una intensidad que lo estropee como se explica en
<a href="http://www.educachip.com/resistencia-led/">¿Qué resistencia ooner a un LED?</a>.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/diodo-resistencia_hub20135d37a090410847a8b3a8f4a3210_619557_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Diodo blanco y resistencia de 200 ohmios"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/diodo-resistencia_hub20135d37a090410847a8b3a8f4a3210_619557_300x200_fit_q90_box.jpg" width="182" height="200" alt="Diodo blanco y resistencia de 200 ohmios" title="Diodo blanco y resistencia de 200 ohmios"  class="lozad "></a></p>
<figcaption>Diodo blanco y resistencia de 200 ohmios</figcaption>
</figure>
</div>
<p>Las resistencias poseen cuatro bandas de colores que indican el valor en ohmios de esa resistencia, la tabla de colores es el siguiente:</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Código de colores de las resistencias"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_300x200_fit_q90_box.jpg" width="237" height="200" alt="Código de colores de las resistencias" title="Código de colores de las resistencias"  class="lozad "></a></p>
<figcaption>Código de colores de las resistencias</figcaption>
</figure>
</div>
<p>El programa Java para hacer parpadear el diodo LED con la librería Diozero con el proveedor <a href="http://abyz.co.uk/rpi/pigpio/">pigpio</a>. El ejemplo consiste en activar y apagar el <em>pin</em> sucesivamente en un bucle y usar el método <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-">Thread.sleep</a> para que pase unos segundos entre uno y otro y nos de tiempo a ver el encendido y apagado. El nada complejo programa Java para controlar el diodo y un vídeo de su funcionamiento están a continuación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.diozero.LED</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PinBlink</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">(</span><span class="n">LED</span> <span class="n">led</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LED</span><span class="o">(</span><span class="n">18</span><span class="o">))</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">led</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PinBlink.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew upload&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.PinBlink&#39;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew executePinBlink&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<div class="media media-video">
  <iframe width="640" height="360" src="https://www.youtube.com/embed/NX5tBxWuzFA" frameborder="0" class="lozad" allowfullscreen></iframe>
</div>
<p>En un artículo anterior comento <a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/">como disponer de un entorno para desarrollar, desplegar las librerías <em>jar</em> en la Raspberry Pi</a> y como ejecutar los ejemplos desde la línea de comandos usando una combinación de herramientas de <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="https://rsync.samba.org/">rsync</a> y <a href="https://www.ansible.com/">Ansible</a>.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executePinBlink</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/</id>
        <title>Ejemplo Hello World con Java en la Raspberry Pi</title>
        <updated>2017-03-04T23:00:00+01:00</updated>
        <published>2017-03-04T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Este artículo es introductorio a los siguientes que escribiré y publicaré sobre el <a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/">kit de iniciación a la electrónica para la Raspberry Pi</a>. Antes de empezar a cacharrear con los sensores y dispositivos de entrada y salida, con los <em>pines</em> GPIO y para hacerlo de forma cómoda crearé un entorno de desarrollo y despliegue en la <a href="https://www.raspberrypi.org/">Raspberry Pi</a> usando <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="https://rsync.samba.org/">rsync</a> para copiar los artefactos del equipo de desarrollo a la RPi y <a href="https://www.ansible.com/">Ansible</a> usándolo desde <a href="https://gradle.org/">Gradle</a> para lanzar comandos y ejecutar los ejemplos de forma remota aunque si no se quiere usar Ansible se pueden lanzar los comandos mediante SSH.</p>
<p>En la Raspberry Pi deberemos instalar por supuesto <a href="https://www.oracle.com/technetwork/java/index.html">Java</a> (es posible usar Java 8) junto con SSH y rsync, configurar el servidor SSH en la RPi modificando el archivo <em>/etc/ssh/sshd_config</em>, habilitar el servidor SSH, copiar nuestra <a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">clave pública ssh generada previamente</a> al archivo <em>~/.ssh/authorized_keys</em> del usuario e instalar <a href="https://www.python.org/">Python</a> como requerimiento de Ansible. Los programas Java los escribiremos en un equipo más potente que la Raspberry Pi ya sea un portátil o un equipo de sobremesa con un IDE ya sea <a href="https://www.jetbrains.com/idea/">IntelliJ</a>, <a href="https://eclipse.org">eclipse</a> u otro, también deberemos instalar Gradle, Ansible y rsync. En Arch Linux con los siguientes comandos del gestor de paquetes:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># pacman -S jdk8-openjdk python rsync</span>&#10;<span class="c1"># vim /etc/ssh/sshd\_config</span>&#10;<span class="c1"># systemctl enable sshd.service</span>&#10;<span class="c1"># systemctl start sshd.service</span>&#10;<span class="c1"># vim .ssh/authorized_keys</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pacman-raspberrypi.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQDHK4xOEPe+8/C7+BmSQOjrMJRcjqTCg0HMWIsgOxas0mvjv7feCzW1kB5QPkQDuTSauRDvbAhHakNfa8tE7l2y6QtnuPwQUP6ml79Zzqiwo5Dkjv0ig09U5QPUs6dDbAvYc+EWeSVvIBll+zpxjSM/AtQrPy3YWuDxTcsUdmrZm5M7miQZ+XI18ICc/ehgewOTUAkMdpEJGXXEFiWYK1iazTrT6fo8y3JZmS3mFTQ9QAifkPvk47XbCWktc4VTVZXzPR8dy+cxMb4SMuxCvLA72qUANvsaHCdei9e4dtvWOGL2v2jC7vFQU+gEaZ77ezxrNzGzt2MdPUcoAAfk2T3KFbnE6L5NBZ+8kVTtOIK6rDJsZaFPZN75orqFa5GG9WMRtpQTldvMkCvoIYttGSDW00ojLbKDY0qYLlEYjBC9hOnQsBN8sYD8sVBwjOLkvvNnetzYqtVu1ij3eB59NEKV3MhPwFRLomk+TGSfHKEhhS5cHntvlm/syJ0/KKuTCBA0kOMH8eJ4MQTV3dqy2vhUBo9sBYo728kHv0JwWBD/CJWdNgoG9lfkZbmqJ9ZSJ89vsDHqJi9m59i6rqWnahhtuTdIzya2asDMjCTozRonBNFC6Eo5mX2ydL6OFOaC2mrdIAHYjJGugWmqBCkhfIh6nh1XJjnsysTgGxtjW79d6o/9WEPYeIF8F2EH77oehjVmJNQeuIgvmZSdhW+dlAgan6WjZT7jBNBDwJH4kH31dNDB8LEVijS7E6J//d4aYfMmUzQUgd0PjyabNZJaCmcWGsv22ggGlCKz3D6putzO0nJrsATWoLCt8wG+zidCSQ/PaZ4uEW0Cbkfhb76jGfSRfywCmyhe7OmCgyvuhE8IZbeaYfjYsHYYto0rd6MQmx5m0d6+ylUfYmCxst2uu/BQPVE/tj/hmNeUvDh1O9qslTFk/tdDY2MRbEWBoNrX56YXIksargth2DCvlPltzKeK8cL46md9P6hC6DXxGR9GcqiPnf7puGIu7BLWK8yQCp2dgnqugye9f1uGrnP3w5MB28MWRCPi7lCjACiIva1U5wPmMwD2HEaIIVNAkX5VTO7xp2JtymA4wWnTreSXBMfvQP9yR6Ao9Zx9Hu8NywRHOJfUalyY868/ISag9tR/9qHxRsyfnv5XtDUJ/+sFgYzn+OYsvSW6na/sRVO1seX5I0Gf+d0xF8LZfeB6DMRUwy5BTJbv8KlTGFEh3vG1+jYLGwX65d9f7LGRSlSXHR+NI6MEezT7CV+UD7YM1T2ki9ezkpiZLRvZ+UUh46j/+xM9ed3LVxUbj1tfgDP42tyiHIfDf+SiHtOsZX3Avedy4SbV96K3lCyH2HcJHqpW7+YT pico.dev@gmail.com&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>authorized_keys</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># pacman intellij-idea-community-edition jdk8-openjdk ansible rsync gradle</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>pacman.sh</span>
    </div>
</div>
<p>Con la ayuda de unas tareas para la herramienta de construcción Gradle haremos el despliegue y la ejecución de la librería <em>jar</em> del proyecto de los ejemplos y de las dependencias que necesiten. El archivo de construcción de Gradle sería el siguiente en el que la tarea <em>copyDependencies</em> copia las dependencias al directorio <em>build/libs</em>. La tarea <em>upload</em> ejecutan el comando <code>rsync</code> para subir el archivo <em>jar</em> y las dependencias del proyecto a la Raspberry Pi. Finalmente, una tarea como <em>executeHelloWorld</em> ejecutará el comando en la Raspberry Pi para lanzar el programa Java. Con SSH también se puede lanzar el comando de forma remota cambiando la dirección IP de la Raspberry Pi por la que tenga asignada.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>&#10;&#10;<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;<span class="n">targetCompatibility</span> <span class="o">=</span> <span class="mf">1.8</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="s1">&#39;misc/libs/diozero-core-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/diozero-provider-pigpio-0.9-SNAPSHOT.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/pigpioj-java-1.0.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/commons-math3-3.6.1.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;misc/libs/tinylog-1.1.jar&#39;</span><span class="o">)</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">copyDependencies</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">into</span> <span class="s2">&#34;$buildDir/libs&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">runtime</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">jar</span> <span class="o">{</span> <span class="n">dependsOn</span> <span class="n">copyDependencies</span> <span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">upload</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="o">[</span><span class="s1">&#39;jar&#39;</span><span class="o">])</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;rsync&#39;</span><span class="o">,</span> <span class="s1">&#39;-arPL&#39;</span><span class="o">,</span> <span class="s1">&#39;--delete&#39;</span><span class="o">,</span> <span class="s1">&#39;-e&#39;</span><span class="o">,</span> <span class="s1">&#39;ssh&#39;</span><span class="o">,</span> <span class="s1">&#39;build/libs/&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi@192.168.1.101:/home/raspberrypi/scripts/javaraspberrypi/&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">executeHelloWorld</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s1">&#39;upload&#39;</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">commandLine</span> <span class="s1">&#39;ansible&#39;</span><span class="o">,</span> <span class="s1">&#39;-i&#39;</span><span class="o">,</span> <span class="s1">&#39;hosts&#39;</span><span class="o">,</span> <span class="s1">&#39;raspberrypi&#39;</span><span class="o">,</span> <span class="s1">&#39;-m&#39;</span><span class="o">,</span> <span class="s1">&#39;command&#39;</span><span class="o">,</span> <span class="s1">&#39;-a&#39;</span><span class="o">,</span> <span class="s1">&#39;chdir=/home/raspberrypi/scripts/javaraspberrypi java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.HelloWorld&#39;</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew upload&#10;$ ssh -t 192.168.1.101 <span class="s1">&#39;cd /home/raspberrypi/scripts/javaraspberrypi &amp;&amp; sudo java -classpath &#34;*&#34; io.github.picodotdev.blogbitix.javaraspberrypi.HelloWorld&#39;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeSSH.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew executeHelloWorld&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>executeGradle.sh</span>
    </div>
</div>
<p>El programa de ejemplo es universal gracias a la idea <em>«Write once, run anywhere»</em> posibilitado por la máquina virtual o <abbr title="Java Virtual Machine"><a href="https://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java">JVM</a></abbr> y el <em>bytecode</em>, está compilado en un sistema con arquitectura x64 (el de mi equipo) y ejecutado en un sistema con arquitectura arm (el de la RPi). No se diferencia en nada al que usaríamos para lo mismo en cualquier otro sistema distinto de la Raspberry Pi.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.javaraspberrypi</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HelloWorld.java</span>
    </div>
</div>
<p>El resultado de este ejemplo es un mensaje en la terminal que es emitido por un programa Java ejecutado en la Raspberry Pi y lanzado de forma remota.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/images/java-raspberrypi-hello-world_hu585c23adafa45cad29f054ba5093037a_44814_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Ejemplo Hello World con Java en la Raspberry Pi"><img src="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/images/java-raspberrypi-hello-world_hu585c23adafa45cad29f054ba5093037a_44814_300x200_fit_box_3.png" width="300" height="165" alt="Ejemplo Hello World con Java en la Raspberry Pi" title="Ejemplo Hello World con Java en la Raspberry Pi"  class="lozad "></a></p>
<figcaption>Ejemplo Hello World con Java en la Raspberry Pi</figcaption>
</figure>
</div>
<p>En los siguientes artículos de la serie mostraré ya como usar diferentes elementos de salida como diodos LED, zumbador, <em>display</em> LCD 1602 o de entrada como un pulsador.</p>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./gradlew executeHelloWorld</code></p>
</div>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/</id>
        <title>Desempaquetado del kit de iniciación a la electrónica para la Raspberry Pi</title>
        <updated>2017-02-25T23:30:00+01:00</updated>
        <published>2017-02-25T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/raspberrypi.svg" width="200" height="255" alt="Raspberry Pi" title="Raspberry Pi"  class=""></p>
</div>
<p>En el año 2012 compré una de las primeras Raspberry Pi que estuvieron disponibles a la venta, una placa modelo B de 256 MiB. La Raspberry Pi es un pequeño computador en una placa del tamaño de una tarjeta de crédito a un precio que aún se sigue manteniendo en las nuevas versiones de unos 40 € a los que hay que sumar algunos complementos necesarios como una tarjeta SD o microSD y un cargador con conector miniUSB. Las versiones iniciales que es la que tengo se componían de:</p>
<ul>
<li>CPU 700 Mhz, un núcleo ARM11 de 32 bits</li>
<li>Memoria de 256 MiB</li>
<li>Ethernet 100 MB</li>
<li>Lector tarjeta SD</li>
<li>2 x USB 2.0</li>
<li>HDMI</li>
<li>26 pines, 17 de propósito general o GPIO</li>
<li>Salida de audio</li>
<li>Salida de vídeo</li>
</ul>
<p>Después de unos años se han lanzado versiones notablemente mejoradas, hasta la fecha la última es la <a href="https://amzn.to/2MXH57Q">Raspberry Pi 4</a> de esta placa que multiplica por 4 la cantidad de memoria RAM hasta 1 GiB y con una CPU de 4 núcleos a una frecuencia de 1.2 Ghz basados en los procesadores ARM Cortex-A53 de 64 bits, incluyendo WIFI N y Bluetooth 4.1, 4 conectores USB, lector microSD y 26 <em>pines</em> GPIO. Aunque la finalidad original de este computador es el aprendizaje de programación y electrónica el uso principal que le he dado hasta ahora ha sido para hacer descargas P2P via torrent. Esta placa es muy popular debido a su bajo coste aunque hay que sumarle posteriormente el precio de una tarjeta microSD y el cargador para proporcionarle energía, su éxito no solo es debido a su coste ya que hay opciones aún más potentes en algunos aspectos a precio similar que no son tan populares, el valor diferenciador de la Raspberry Pi es el apoyo y soporte de la comunidad.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b_hu22add5b66897716681957394465b4bd3_829999_300x200_fit_q90_box.jpg" width="268" height="200" alt="Raspberry Pi 1 B" title="Raspberry Pi 1 B"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b_huf7bddd99ea74c1ddc0c5b8580dd4a8c5_327265_300x200_fit_q90_box.jpg" width="287" height="200" alt="Raspberry Pi 3 B" title="Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Placas modelos Raspberry Pi 1 B y 3 B</figcaption>
</figure>
</div>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0899VXM8F&amp;linkId=d5f0684371c6b5b8fa5cbd472b276ba4" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VD5L1VY&amp;linkId=f7a5d402571fb5dd48fa2311dc169469" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01566WOAG&amp;linkId=1c7d89fa46e38c81f0e35cb1518e80ea" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07CXXBTST&amp;linkId=aee5521403e014f5b256191d116ac4b3" title="Amazon" class="lozad"></iframe>
</div>
<p>Hace unas semanas compré un <a href="https://amzn.to/30Fpsle">kit de electrónica básico para la Raspberry Pi</a> pero que incluye una buena cantidad de sensores y elementos de electrónica y sirve para cualquier placa con <em>pines</em> GPIO. Como el <em>kit</em> es para la Raspberry Pi 3 y viene con un cable de extensión de 40 <em>pines</em> (cantidad de <em>pines</em> que tiene la Raspberry Pi 3) y yo tengo la 1 debí comprar también un <a href="https://amzn.to/2lSYiDF">cable de extensión de 26 pines</a> (los que tiene la Raspberry Pi 1) para la matriz de puntos con la que hacer pruebas sin soldar los elementos. El precio del <em>kit</em> no es muy caro, de unos 30 € y el barómetro no venía soldado con sus <em>pines</em> por lo que si queremos usarlo deberemos hacer la soldadura primero con un <a href="https://amzn.to/3fk9AsE">soldador de electrónica</a> y <a href="https://amzn.to/30FRYmQ">estaño</a>.</p>
<p>El contenido del <em>kit</em> es el siguiente que viene en una estupenda caja de plástico para guardar todos los componentes de forma ordenada:</p>
<ul>
<li>1 x GPIO to breadboard 40-pin breakout interface</li>
<li>1 x solderless prototype breadboard</li>
<li>40 x pin jumper wires (male to male 15cm)</li>
<li>2 x 8 pin Jumper Wires (female to female 20cm)</li>
<li>24 x LED (6 x Bright White, 6 x Red, 6 x Yellow, 6 x Green)</li>
<li>65 x resistors (200ohm x 20pcs, 1Kohm x 20pcs, 10Kohm x 20pcs, 1Mohm x 5pcs)</li>
<li>3 x photoresistor (light sensor)</li>
<li>5 x push buttons</li>
<li>3 x potentiometer (10kilohm adjustable resistor)</li>
<li>1 x A/D converter</li>
<li>1 x DHT11 Temperature/Humidity sensor</li>
<li>1 x motion sensor</li>
<li>1 x mercury tilt switch sensor</li>
<li>1 x I2C 1602 alphanumeric LCD</li>
<li>1 x servo motor</li>
<li>1 x piezo Buzzer</li>
<li>1 x BMP180 Pressure/Temperature Sensor</li>
<li>1 x relay</li>
<li>1 x Infrared Remote Controller and Receiver(VS1838B)</li>
<li>1 x Raspberry Pi/Arduino 8-Channel TTL Logic Level Converter</li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/caja_hu3596c9084db953561c34d5fa63f96852_745001_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Caja"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/caja_hu3596c9084db953561c34d5fa63f96852_745001_300x200_fit_q90_box.jpg" width="286" height="200" alt="Caja" title="Caja"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/componentes-1_huc75081f4ac371f81b28997cd203d4953_427646_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Componentes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/componentes-1_huc75081f4ac371f81b28997cd203d4953_427646_300x200_fit_q90_box.jpg" width="206" height="200" alt="Componentes" title="Componentes"  class="lozad "></a></p>
<figcaption>Caja, componentes y sensores</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-1_hub14ff8c81187c5e145ddf11e239b8231_309863_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Display 16x02"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-1_hub14ff8c81187c5e145ddf11e239b8231_309863_300x200_fit_q90_box.jpg" width="300" height="144" alt="Display 16x02" title="Display 16x02"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-2_hue4cfea05d9f7f4252160536822ad491e_383854_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Display 16x02 con adaptador I2C"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/display-2_hue4cfea05d9f7f4252160536822ad491e_383854_300x200_fit_q90_box.jpg" width="300" height="149" alt="Display 16x02 con adaptador I2C" title="Display 16x02 con adaptador I2C"  class="lozad "></a></p>
<figcaption>Display 16x02 y adaptador I2C</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-1_hu3efe8567a7b416d531d261a80a1cc85e_514695_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-1_hu3efe8567a7b416d531d261a80a1cc85e_514695_300x200_fit_q90_box.jpg" width="133" height="200" alt="Breadboard" title="Breadboard"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-2_hu3d91c2bbfeab24926d5ec279b5098550_627608_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Breadboard y adaptador"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/breadboard-2_hu3d91c2bbfeab24926d5ec279b5098550_627608_300x200_fit_q90_box.jpg" width="150" height="200" alt="Breadboard y adaptador" title="Breadboard y adaptador"  class="lozad "></a></p>
<figcaption>Breadboard y adaptador</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/adaptador-breadboard_hud45c01438163af7fa5a93b416fbb20ed_528914_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Breadboard"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/adaptador-breadboard_hud45c01438163af7fa5a93b416fbb20ed_528914_300x200_fit_q90_box.jpg" width="239" height="200" alt="Breadboard" title="Breadboard"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/diodos-resistencias_hua1bf1745946a4e4e0815cd1c7cbcd39b_290583_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Diodos, botones, resistencias y fotorresistores"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/diodos-resistencias_hua1bf1745946a4e4e0815cd1c7cbcd39b_290583_300x200_fit_q90_box.jpg" width="203" height="200" alt="Diodos, botones, resistencias y fotorresistores" title="Diodos, botones, resistencias y fotorresistores"  class="lozad "></a></p>
<figcaption>Adaptador breadboard, diodos, botones, resistencias y fotorresistores</figcaption>
</figure>
</div>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06VTH7L28&amp;linkId=415695f2e7f3ef590a8f4c93b8bda126" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06W54L7B5&amp;linkId=37e721eaa0be8ec062eef5ee18a5eae8" title="Amazon" class="lozad"></iframe>
</div>
<p>La matriz de conexiones o <em>breadboard</em> es una forma cómoda de hacer pruebas sin tener que hacer soldaduras, los puntos en vertical de la mitad superior e inferior están conectados entre si de modo que con los cables macho-macho podamos poner y quitar conexiones. La matriz está numerada horizontalmente con números y verticalmente con letras de forma que cada punto sea identificable individualmente. Las dos filas de puntos superiores suelen usarse para proporcionar un voltaje de 5V y la conexión de tierra, las dos filas de puntos inferiores para proporcionar un voltaje de 3.3V y tierra. La placa está dividida en dos mitades verticalmente de las letras A-D y E-F formando columnas verticales de puntos conectadas en grupos de 5.</p>
<p>Mi intención para este <em>kit</em> es hacer unos pequeños ejemplos usando en cada uno de ellos uno o varios elementos y con el lenguaje de programación Java y la librería <a href="http://rtd.diozero.com/en/latest/">Diozero</a>. Entre los ejemplos estará encender y apagar un LED, usar el <em>display</em> de 16x2 caracteres, el sensor de temperatura y humedad, el sensor de infrarrojos, el motor, los pulsadores, el sensor de movimiento, los detectores de luz, el detector de golpes, etc&hellip;</p>
<p>En la página del fabricante o distribuidor mayorista <a href="http://osoyoo.com/">Osoyoo</a> hay colgados varios ejemplos usando varios de estos elementos. También deberemos hacernos con las referencias de los <em>pines</em> para saber las conexiones que debemos hacer con los cables junto con la tabla de referencia de colores de las resistencias. Para usar las tablas de referencia debemos saber que hay varias formas de numerar los pines. Está la del <em>header</em> del 1 al 26 o del 1 al 40 secuencialmente según la disposición en el <em>header</em>, la que utiliza la librería <a href="http://wiringpi.com/">wiringPi</a> y <a href="https://pi4j.com/">Pi4J</a> para numerar los <em>pines</em> GPIO y la de Broadcom que utiliza la librería Diozero. Estas tablas de referencia de nomenclatura son importantes porque cada una numera los <em>pines</em> de forma diferente, por ejemplo, según la numeración de wiringPi el pin número 3 corresponde al GPIO 8 cuando según la nomenclatura de Broadcom el mismo pin corresponde al GPIO 0 en el modelo RPi 1 modelo B rev1 y al GPIO 2 en la RPi 3.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de _pines_ Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1_hu8bf9b24afa231ad441dbe8fdbc63c220_119775_300x200_fit_box_3.png" width="152" height="200" alt="Header de _pines_ Raspberry Pi 1 B" title="Header de _pines_ Raspberry Pi 1 B"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de _pines_ Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header_hud6151eede253e79d5e15e359d0d59e81_225562_300x200_fit_box_3.png" width="110" height="200" alt="Header de _pines_ Raspberry Pi 3 B" title="Header de _pines_ Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Header de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de _pines_ Raspberry Pi 1 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi1b-header-rev1-broadcom_hu9cda4f7b94e133dcd607c112a1320d40_82272_300x200_fit_box_3.png" width="94" height="200" alt="Header de _pines_ Raspberry Pi 1 B" title="Header de _pines_ Raspberry Pi 1 B"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Header de _pines_ Raspberry Pi 3 B"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi3b-header-broadcom_hu28d9cace232d47806a98cee14caf35d3_337492_300x200_fit_box_3.png" width="67" height="200" alt="Header de _pines_ Raspberry Pi 3 B" title="Header de _pines_ Raspberry Pi 3 B"  class="lozad "></a></p>
<figcaption>Headers de _pines_ Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom</figcaption>
</figure>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Código de colores de las resistencias"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/codigo-colores-resistencias_hu5db5ce401ecad0185bbb761fca917610_42780_300x200_fit_q90_box.jpg" width="237" height="200" alt="Código de colores de las resistencias" title="Código de colores de las resistencias"  class="lozad "></a></p>
<figcaption>Código de colores de las resistencias</figcaption>
</figure>
</div>
<p>Un ejemplo básico sin necesidad de programar nada es encender un diodo LED. Los elementos a usar son el diodo LED, una resistencia, los cables macho-macho, el cable de extensión y la matriz de puntos. Para ello conectamos el cable de extensión a la matriz de puntos donde con los cables macho-macho haremos las conexiones en los agujeros de la matriz de puntos. Usaremos la conexión de voltaje de 3.3V y una resistencia de 200 ohmios para que el LED no reciba demasiada intensidad. Los diodos LED tienen dos patitas, una más corta que la otra que indican la polaridad, la corta es el polo negativo y se conecta a tierra, la larga es el polo positivo que se conecta a uno de los extremos de la resistencia y el otro extremo de esta la voltaje de 3.3V.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/hola-mundo-led_hu1a2dd2235c9bd66a08fd5a9332b95cbf_497151_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Ejemplo conexión LEDs"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/hola-mundo-led_hu1a2dd2235c9bd66a08fd5a9332b95cbf_497151_300x200_fit_q90_box.jpg" width="300" height="104" alt="Ejemplo conexión LEDs" title="Ejemplo conexión LEDs"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi_hu18596dc28606271666dd08645efbd69d_1293386_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="Raspberry Pi"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/raspberrypi_hu18596dc28606271666dd08645efbd69d_1293386_300x200_fit_q90_box.jpg" width="141" height="200" alt="Raspberry Pi" title="Raspberry Pi"  class="lozad "></a></p>
<figcaption>Ejemplo conexión LEDs y Raspberry Pi</figcaption>
</figure>
</div>
<p>Con el programa <a href="http://fritzing.org/home/">Fritzing</a> podremos prototipar y documentar el esquema de  conexiones que realicemos de los proyectos. Posee numerosos modelos, elementos electrónicos y dispositivos de entrada y salida aunque no he encontrado el correspondiente la placa de extensión de wiringPi.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/fritzing_huaedcbe26e3518db7a04119b9abf364f3_228766_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Fritzing"><img src="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/images/fritzing_huaedcbe26e3518db7a04119b9abf364f3_228766_300x200_fit_box_3.png" width="300" height="164" alt="Fritzing" title="Fritzing"  class="lozad "></a></p>
<figcaption>Fritzing</figcaption>
</figure>
</div>
<p>En el siguiente artículo explicaré como crear un programa Java para encender y apagar varias veces un diodo LED con la librería Doizero. Además explicaré como con <a href="https://gradle.org/">Gradle</a>, <a href="https://es.wikipedia.org/wiki/Secure_Shell">SSH</a> y <a href="https://www.ansible.com/">Ansible</a> hacerlo de forma cómoda desde nuestra máquina de desarrollo y no directamente desde la más lenta Raspberry Pi.</p>
<p><em>Software. Hardware. Complete.</em></p>
]]>
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/</id>
        <title>Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</title>
        <updated>2017-02-18T10:00:00+01:00</updated>
        <published>2017-02-18T10:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Entre las ventajas de integrar dos aplicaciones mediante el envío de mensajes están que evita que estén acopladas y la comunicación es asíncrona. Con RabbitMQ también podremos implementar cada uno de ellas con el lenguaje de programación que prefiramos de entre las varias posibilidades para las que ofrece clientes y por esto último podemos preferir usarlo en vez de las especificación JMS propia de Java EE que nos obligaría a usar un servidor de aplicaciones que lo implemente, posiblemente JBoss/Wildfly o Weblogic en vez de Tomcat o Jetty. En el artículo incluyo un ejemplo para el lenguaje Java mostrando el envío y recepción de mensajes junto con la aplicación de administración que nos proporcionará información útil.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/rabbitmq.svg" width="200" height="211" alt="RabbitMQ" title="RabbitMQ"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>Las aplicaciones que se integran mediante el envío y recepción de mensajes evitan el acoplamiento y sincronía junto con la posibilidad de implementar cada una de ellas con diferentes lenguajes o plataformas. Entre las especificaciones que componen Java EE está &lt;abbr title=”Java Message Service”&gt;JMS</abbr> pero tanto la aplicación que envía como la que recibe mensajes deben estar programadas en el lenguaje Java, a menos que incluyamos un adaptador que permita a la aplicación no Java interactuar con JMS.</p>
<p><a href="https://www.rabbitmq.com/">RabbitMQ</a> es un software de servidor que actúa como intermediario o <em>broker</em> de mensajería entre dos o más aplicaciones que se comunican o envían notificaciones con mensajes, proporciona una funcionalidad similar a JMS pero con la ventaja que ofrece soporte para los lenguajes más populares incluido <a href="https://www.oracle.com/technetwork/java/index.html">Java</a> y <a href="https://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java"><abbr title="Java Virtual Machine">JVM</abbr></a>, <a href="https://www.ruby-lang.org/es/">Ruby</a>, <a href="https://www.python.org/">Python</a>, <a href="https://www.microsoft.com/net">.NET</a>, <a href="https://secure.php.net/">PHP</a>, <a href="https://nodejs.org/en/">Node.js</a>, <a href="https://golang.org/">Go</a> y varios más. Usa varios conceptos similares a los presentes en JMS como que el emisor envía los mensajes a una cola y el receptor los lee.</p>
<p>La comunicación con mensajes entre aplicaciones es útil porque ni el emisor ni receptor se conocen directamente ni han de estar funcionando simultáneamente para comunicarse consiguiendo de este modo el desacoplamiento entre las aplicaciones. Además la comunicación puede ser de uno a varios, los mensajes son leídos de las colas con la posibilidad de que cada mensaje sea recibido por un único receptor o por cada uno de ellos.</p>
<p>Realmente en RabbitMQ los mensajes no son enviados directamente por el emisor a las colas sino que se envían a un <em>exchange</em> que finalmente lo enruta y encola en la cola destino. Los <em>exchanges</em> pueden ser directos basando su lógica de encolado según el valor del <em>binding key</em> enviada junto con el mensaje y un <em>routing key</em> asociada con la cola o basados en temas en los que se usa una cadena formada por una lista de palabras separada por puntos, la lógica de enrutado se toma según si el <em>binding key</em> cumple el patrón del <em>routing key</em> que puede contener sustituidores de palabras, siendo un <em>*</em> una palabra exacta y <em>#</em> varias palabras contiguas.</p>
<p>En la <a href="http://www.rabbitmq.com/documentation.html">documentación de RabbitMQ</a> hay 6 tutoriales en diferentes lenguajes para el envío y recepción de mensajes.</p>
<ul>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-one-java.html">Tutorial 1, Hello World</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-two-java.html">Tutorial 2, Work Queues</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-three-java.html">Tutorial  3, Publish/Subscribe</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-four-java.html">Tutorial 4, Routing</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-five-java.html">Tutorial 5, Topics</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-six-java.html">Tutorial 6, Remote procedure call (RPC)</a></li>
</ul>
<p>Basándome en estos ejemplos he creado un proyecto uno muy similar al Tutorial 1, ejecutable más fácilmente con <a href="https://www.docker.com/">Docker</a> y <a href="https://gradle.org/">Gradle</a>.</p>
<p>Tanto en el emisor como en el receptor deberemos declarar las colas que van a usar (si una no existe se creará y si existe se usará), a la cola se le asigna un nombre y el receptor define un manejador para recibir los mensajes según se envían.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.holamundorabbitmq</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.rabbitmq.client.Channel</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.rabbitmq.client.Connection</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.rabbitmq.client.ConnectionFactory</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.time.format.DateTimeFormatter</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Send</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello World at %s&#34;</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_DATE_TIME</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">basicPublish</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Sent «%s»&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1500</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Send.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.holamundorabbitmq</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.rabbitmq.client.*</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Receive</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34; [*] Waiting for messages. To exit press CTRL+C&#34;</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Consumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleDelivery</span><span class="o">(</span><span class="n">String</span> <span class="n">consumerTag</span><span class="o">,</span> <span class="n">Envelope</span> <span class="n">envelope</span><span class="o">,</span> <span class="n">AMQP</span><span class="o">.</span><span class="na">BasicProperties</span> <span class="n">properties</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">body</span><span class="o">,</span> <span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Received  «%s»&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">};</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">basicConsume</span><span class="o">(</span><span class="n">QUEUE_NAME</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">);</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">20000</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Receive.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;HolaMundoRabbitMQ&#39;</span>&#10;<span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.1&#39;</span>&#10;&#10;<span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>&#10;&#10;<span class="n">repositories</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mavenCentral</span><span class="o">()</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">compile</span> <span class="s1">&#39;com.rabbitmq:amqp-client:4.0.2&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">receive</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.holamundorabbitmq.Receive&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">task</span> <span class="nf">send</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JavaExec</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.holamundorabbitmq.Send&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Para ejecutar el ejemplo usaré el <a href="https://hub.docker.com/_/rabbitmq/">contenedor de Docker para RabbitMQ</a> iniciándolo con <a href="https://docs.docker.com/compose/">Docker Compose</a> y el siguiente archivo descriptor. Puedes consultar la <a href="https://picodotdev.github.io/blog-bitix/series/docker/">serie de artículos sobre Docker</a> que escribí para conocer cómo usarlo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">rabbitmq:management-alpine</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">data:/var/lib/rabbitmq</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">ports</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;5672:5672&#34;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="s2">&#34;15672:15672&#34;</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">environment</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span>- <span class="l">RABBITMQ_NODENAME=rabbitmq</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w">&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-compose.yml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker-compose up&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>docker-run.sh</span>
    </div>
</div>
<p>Una vez iniciado el contenedor y con el código fuente del ejemplo, iniciamos en cualquier orden la parte receptora de los mensajes y la parte emisora de mensajes con los comandos <code>./gradlew receive</code> y <code>./gradlew send</code> respectivamente, momento en el cual veremos que en la consola salen las notificaciones de recepción y envío.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/send_huf8ebe18827887e014241fb82fa202cfd_68838_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Aplicación de ejemplo enviando mensajes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/send_huf8ebe18827887e014241fb82fa202cfd_68838_300x200_fit_box_3.png" width="300" height="165" alt="Aplicación de ejemplo enviando mensajes" title="Aplicación de ejemplo enviando mensajes"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/receive_hu74d142a9c5988e8761ef4d64b6fedb89_70279_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Aplicación de ejemplo recibiendo mensajes"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/receive_hu74d142a9c5988e8761ef4d64b6fedb89_70279_300x200_fit_box_3.png" width="300" height="165" alt="Aplicación de ejemplo recibiendo mensajes" title="Aplicación de ejemplo recibiendo mensajes"  class="lozad "></a></p>
</figure>
</div>
<p>En la comunicación con RabbitMQ se puede usar <a href="http://www.rabbitmq.com/ssl.html">TLS/SSL</a> así como mecanismos de <a href="http://www.rabbitmq.com/authentication.html">autenticación</a> y <a href="http://www.rabbitmq.com/access-control.html">autorización</a> para mayor seguridad. Usando confirmaciones si el receptor falla en el procesado el mensaje no se pierde ya que no se habrá declarado como <em>acknowledge</em> aún así si RabbitMQ falla los mensajes se perderán a menos que las colas se declaren como persistentes las cuales se guardarán en disco perdurando a una catástrofe.</p>
<p>RabbitMQ posee un <a href="https://www.rabbitmq.com/management.html"><em>plugin</em> para la administración</a> con el que podemos administrar permisos, tener una vista global, ver ratios de mensajes, estadísticas, colas, <em>exchanges</em> y más información, nos da información muy interesante sobre el estado del procesamiento de mensajes. Es accesible mediante el navegador y la URL <em>http://localhost:15672/</em>. En la captura del estado de la cola <em>hello</em> hay 10 mensajes encolados pendientes de entregar a algún receptor.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-management_huec6c3e7834fb461d5accc97854c9ff68_101295_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Aplicación web de administración de RabbitMQ"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-management_huec6c3e7834fb461d5accc97854c9ff68_101295_300x200_fit_box_3.png" width="300" height="164" alt="Aplicación web de administración de RabbitMQ" title="Aplicación web de administración de RabbitMQ"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-queue_hu4e54c3cb2be4db8f762ad98e132b349b_66191_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Información de estado de una cola"><img src="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/images/rabbitmq-queue_hu4e54c3cb2be4db8f762ad98e132b349b_66191_300x200_fit_box_3.png" width="274" height="200" alt="Información de estado de una cola" title="Información de estado de una cola"  class="lozad "></a></p>
</figure>
</div>
<p>Para profundizar más en las aplicaciones basadas en mensajes con RabbitMQ dos buenos libros son <a href="https://amzn.to/2lTGMQc">Learning RabbitMQ</a> y <a href="https://amzn.to/2lW9qwF">Matering RabbitMQ</a> cubriendo temas más avanzados como <em>clustering</em>, alta disponibilidad, arquitectura, patrones de diseño, seguridad y rendimiento.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=9bb0705e8a34f246d5530b141b0a690e" title="Amazon" class="lozad"></iframe>
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=e87eebb622314cdf0c2c14fc32940264" title="Amazon" class="lozad"></iframe>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoRabbitMQ">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>docker-compose up, ./gradlew receive, ./gradle send</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a></li>
<li><a href="http://www.rabbitmq.com/documentation.html">Documentación RabbitMQ</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/series/docker/">Serie de artículos sobre Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/">Introducción y ejemplo sencillo de Java Message Service (JMS)</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/07/publicacion-y-suscripcion-de-eventos-con-guava-eventbus-en-una-aplicacion-java/">Publicación y suscripción de eventos con Guava EventBus en una aplicación Java</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/</id>
        <title>Cursos de formación de KeepCoding</title>
        <updated>2019-06-01T00:00:00+02:00</updated>
        <published>2017-02-03T23:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/keepcoding.png" width="300" height="210" alt="KeepCoding" title="KeepCoding"  class=""></p>
</div>
<p>En internet hay cantidad de recursos disponibles para aprender de prácticamente cualquier cosas que queramos. También con libros técnicos como los <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8 libros que recomiendo para mejorar como programadores</a> de los que es posible aprender de forma profunda sobre un tema en concreto. Estando suscritos a blogs como este también se pueden aprender ciertos detalles sobre un tema o obtener una pequeña introducción con en ocasiones un ejemplo de código funcional.</p>
<p>Sin embargo, algunos recursos de los que se encuentran disponibles en internet no están bien estructurados y de forma didáctica para aprender, los libros requieren de bastante atención y de una buena cantidad de tiempo además no tienen un tutor al que preguntar, los blogs como el mío son muy específicos en el tema de los artículos o introductorios sin cubrir tampoco un tema de forma completa y profunda. Asistir a conferencias también es una buena forma de obtener una introducción sobre el tema que se trate, en algunas conferencias sus entradas son gratuitas y otras tienen un coste de algunos cientos de euros a los que hay que sumar el transporte y alojamiento si son de varios días y en ocasiones no coinciden en fechas en las que poder asistir.</p>
<p>Hay webs en las que se ofrecen cursos de formación a distancia que se pueden completar según el tiempo disponible y aprender al ritmo de cada uno. Además, cuentan con tutores a los que hacer preguntas para resolver las dudas. Una de ellas es <a href="https://plataforma.keepcoding.io/?affcode=897_eznkgvrg">KeepCoding</a> que ofrece varios cursos con un temario bastante completo y de varias decenas de horas de formación. Algunos cursos de los que en este momento tienen disponibles son sobre varias de las tecnologías más demandadas actualmente y conocerlas son un buen punto a incluir en el <em>curriculum vitae</em> con el objetivo de acceder a un puesto de trabajo o desarrollar una carrera profesional como desarrollador. Algunos cursos de los que ofrecen que posiblemente en el futuro amplíen son los siguientes de los que puedes consultar su temario.</p>
<p>Hay disponibles una buena cantidad de <a href="https://plataforma.keepcoding.io/courses/category/Cursos%20Gratuitos?affcode=897_eznkgvrg">cursos gratuitos</a> introductorios a la programación, sin ningún coste ni compromiso bastando únicamente registrarse para tener acceso inmediato a ellos <em>online</em> desde el navegador.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-introduccion-programacion?affcode=897_eznkgvrg">Curso de Introducción a la Programación</a></li>
<li><a href="https://plataforma.keepcoding.io/p/introduccion-programacion-python?affcode=897_eznkgvrg">Fundamentos de la programación con Python</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-php?affcode=897_eznkgvrg">Mini Curso introducción a PHP 7</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-go?affcode=897_eznkgvrg">Mini Curso introducción a Go</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-kotlin?affcode=897_eznkgvrg">Mini Curso Kotlin - Ventajas y características</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-bbdd-mysql?affcode=897_eznkgvrg">Mini curso Introductorio a BBDD y MySQL</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso_arquitectura_aplicaciones_android?affcode=897_eznkgvrg">Mini curso Arquitectura en aplicaciones Android</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso-introduccion-microservicios?affcode=897_eznkgvrg">Mini Curso introducción a Microservicios</a></li>
<li><a href="https://plataforma.keepcoding.io/p/mini-curso_docker_contenedores_101?affcode=897_eznkgvrg">Mini Curso introducción a Docker y Contenedores 101</a></li>
</ul>
<p>Cursos desde cero sobre varios de los lenguajes más empleados y demandados en ofertas de trabajo.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-programacion-javascript-desde-cero?affcode=897_eznkgvrg">Curso JavaScript desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-kotlin-desde-cero?affcode=897_eznkgvrg">Curso Kotlin desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-koltin-avanzado?affcode=897_eznkgvrg">Curso Kotlin Avanzado</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-go-desde-cero?affcode=897_eznkgvrg">Curso Go desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/scala-spark-desde-cero?affcode=897_eznkgvrg">Curso Scala desde Cero</a></li>
</ul>
<p><a href="https://git-scm.com/">Git</a> la herramienta de control de versiones para el código fuente utilizada mayoritariamente. <a href="https://www.docker.com/">Docker</a> se ha convertido en una de las mejores formas de aprovisionar aplicaciones y software tanto en el entorno de desarrollo como en producción.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-git-github-sourcetree?affcode=897_eznkgvrg">Curso Git, GitHub &amp; SourceTree</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-docker-desde-cero?affcode=897_eznkgvrg">Curso Docker desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/smart-contracts-ethereum-solidity?affcode=897_eznkgvrg">Curso Smart Contracts en Ethereum con Solidity</a></li>
</ul>
<p>Otros dedicados a la programación web <em>backend</em> en <a href="https://secure.php.net/">PHP</a>, <a href="https://www.python.org/">Python</a> y <a href="https://www.ruby-lang.org/es/">Ruby</a>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-php-7-y-laravel?affcode=897_eznkgvrg">Curso PHP 7 y Laravel</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-online-python-django-rest?affcode=897_eznkgvrg">Curso Django + Python &amp; REST</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-ruby-on-rails-y-servicios-rest?affcode=897_eznkgvrg">Curso Ruby on Rails y servicios REST desde Cero</a></li>
</ul>
<p>Otros a la programación web con varios <em>frameworks</em> populares de <em>frontend</em>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-polymer-web-components?affcode=897_eznkgvrg">Curso Polymer &amp; Web Components</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-completo-react-desde-cero?affcode=897_eznkgvrg">Curso React desde Cero</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-javascript-node-js-express-mongodb?affcode=897_eznkgvrg">Curso JavaScript + Node.js + Express + MongoDB</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-fundamentos-angular-html-css?affcode=897_eznkgvrg">Curso HTML5 + CSS3 + AngularJS</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-angular-6?affcode=897_eznkgvrg">Curso Angular 6</a></li>
</ul>
<p>La mayoría de aplicaciones necesitan de una base de datos relacional con lo que el conocimiento adquirido de ellas es muy aprovechado.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-de-bbdd-sql-mysql?affcode=897_eznkgvrg">Curso BBDD relacionales, SQL &amp; MySQL</a></li>
</ul>
<p>A la seguridad de una aplicación no siempre se le presta la atención que merece, es importante conocer los fundamentos para desarrollar aplicaciones seguras.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-desarrollo-seguro-aplicaciones?affcode=897_eznkgvrg">Curso de desarrollo seguro de aplicaciones</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-ciberseguridad-enfocada-pentesting?affcode=897_eznkgvrg">Curso Ciberseguridad enfocada en Pentesting</a></li>
</ul>
<p>Uno sobre <a href="https://www.android.com/">Android</a>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-programacion_android_desde_cero?affcode=897_eznkgvrg">Curso Programación Android desde Cero</a></li>
</ul>
<p>Varios dedicados a la programación en <a href="https://www.apple.com/es/ios/ios-12/">iOS</a>.</p>
<ul>
<li><a href="https://plataforma.keepcoding.io/p/curso-fundamentos-de-swift-3?affcode=897_eznkgvrg">Curso Fundamentos Swift 3.0</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-tdd-para-ios?affcode=897_eznkgvrg">Curso TDD en iOS</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-programacion-ios-avanzada?affcode=897_eznkgvrg">Curso iOS Avanzado</a></li>
<li><a href="https://plataforma.keepcoding.io/p/curso-fundamentos-ios?affcode=897_eznkgvrg">Curso Fundamentos iOS</a></li>
</ul>
<p>Los cursos constan de varias horas lectivas con vídeos explicativos narrados en español como si un profesor estuviese dándonos una clase magistral que podrás revisar siempre que desees. Cada vídeo del curso no suele exceder de diez minutos siendo la mayoría de entre tres minutos y cinco minutos de forma que se pueda visionarlos según el tiempo y momento disponible. Creada la cuenta en KeepCoding e inscritos a un curso se puede ver el progreso en el mismo.</p>
<p>Para aprender de forma intensiva durante 4 y 6 meses con mayor profundidad imparten 5 <em>bootcamps</em> diferentes según especialización.</p>
<ul>
<li><a href="https://keepcoding.io/es/bootcamp-aprende-a-programar-desde-cero/?affcode=897_eznkgvrg">Bootcamp Aprende a Programar desde Cero</a></li>
<li><a href="https://keepcoding.io/es/keepcoding-web-development-master-bootcamp/?affcode=897_eznkgvrg">Full Stack Web Bootcamp</a></li>
<li><a href="https://keepcoding.io/es/mobile-startup-coding-bootcamp/?affcode=897_eznkgvrg">Full Stack Mobile Bootcamp</a></li>
<li><a href="https://keepcoding.io/es/big-data-machine-learning-bootcamp/?affcode=897_eznkgvrg">Full Stack Big Data &amp; Machine Learning Bootcamp</a></li>
<li><a href="https://keepcoding.io/es/bootcamp-devops/?affcode=897_eznkgvrg">Full Stack DevOps Bootcamp</a></li>
</ul>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/images/keepcoding-course_hu252675a706fe078b74f07f5aa8faade0_178723_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Curso online de KeepCoding"><img src="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/images/keepcoding-course_hu252675a706fe078b74f07f5aa8faade0_178723_300x200_fit_box_3.png" width="300" height="143" alt="Curso online de KeepCoding" title="Curso online de KeepCoding"  class="lozad "></a></p>
<figcaption>Curso online de KeepCoding</figcaption>
</figure>
</div>
<p>Algunos cursos de que ofrece KeepCoding son gratis y puedes inscribirte en ellos libremente y permite conocer la metodología de los cursos. Los cursos de pago tienen un precio de entre 30 € y 300 €. Si la empresa en la que trabajas tiene interés en formar a sus empleados, y debería, posiblemente también esté interesada en costear el curso con un presupuesto destinado a formación, muchas empresas lo tiene, si no lo tiene puedes solicitarlo. Aunque la cantidad no sea grande ni de para todo al menos posibilitará adquirir algún curso individual, unos meses de suscripción o comprar algún libro técnico, si el trabajo que desarrollas coincide con la temática de los cursos, este puede ser el caso de los <a href="https://plataforma.keepcoding.io/p/curso-programacion_android_desde_cero?affcode=897_eznkgvrg">Curso Programación Android desde Cero</a>, del <a href="https://plataforma.keepcoding.io/p/curso-git-github-sourcetree?affcode=897_eznkgvrg">Curso Git, GitHub &amp; SourceTree</a>, del <a href="https://plataforma.keepcoding.io/p/curso-programacion-ios-avanzada?affcode=897_eznkgvrg">Curso iOS Avanzado</a> o de <a href="https://plataforma.keepcoding.io/p/curso-online-python-django-rest?affcode=897_eznkgvrg">Curso Django + Python &amp; REST</a>. También a nivel personal es una buena opción de formación para optar a puestos de trabajo de nuestro interés y demandados en el mercado laboral.</p>
<p>En los paquetes Premium todos los cursos individualmente tiene un coste de más de 5000 € pero con el modelo de suscripción se puede adquirir el acceso a todos sin restricciones a un precio significativamente más reducido de unos 49 €/mes. El pago se puede hacer mediante tarjeta de crédito y tienen un derecho de desistimiento de 14 días según las <a href="https://plataforma.keepcoding.io/p/condiciones-generales-contratacion/?affcode=897_eznkgvrg">Condiciones Generales de Contratación de KeepCoding</a>.</p>
<ul>
<li>En la página de <a href="https://plataforma.keepcoding.io/p/suscripcion-cursos-programacion-online/?affcode=897_eznkgvrg">Paquetes de suscripciones Premium</a> ocasionalmente hay cupones descuento con los que el precio es aún más reducido.</li>
<li><a href="https://plataforma.keepcoding.io/p/paquete-keepcoding-online/?affcode=897_eznkgvrg">Todos los cursos con KeepCoding Online Premium</a> que dan acceso al catálogo completo de cursos.</li>
</ul>
<p>Si quieres aprender reserva una hora algún día de entre semana o del fin de semana para dedicarle al curso que desees, de modo que tengas ese tiempo para completarlo y puedas empezarlos, terminarlos y que te resulten provechosos con posterioridad.</p>
]]>
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="patrocinado"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/</id>
        <title>Registro y descubrimiento de servicios con Spring Cloud y Consul</title>
        <updated>2017-01-28T11:00:00+01:00</updated>
        <published>2017-01-28T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Tradicionalmente el conectar un servicio con sus servicios dependientes se ha realizado por configuración, normalmente mediante un nombre de dominio y su puerto. Esta configuración estática es suficiente para unos pocos servicios y que no varían durante su funcionamiento. Con el advenimiento de los microservicios con su estado y número cambiantes en el tiempo han surgido varias herramientas para en vez de usar configuración usar descubrimiento. Una de estas herramientas Consul para la que Spring Cloud proporciona integración.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/spring.svg" width="200" height="200" alt="Spring" title="Spring"  class=""></p>
</div>
<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En una aplicación con una arquitectura de microservicios esta se compone de múltiples partes cambiantes. Los microservicios pueden aparecer, desaparecer, variar en número o cambiar de ubicación, la aplicación debe ser tolerante a esos cambios y seguir proporcionando su servicio. Por tanto, la configuración de red de los servicios no se puede realizar usando direcciones <abbr title="Internet Protocol">IP</abbr> ya que no se conocen las que utilizarán los microservicios y usar nombres de dominio de <abbr title="Domain Name System">DNS</abbr> puede no ser viable ya que los cambios tardan en propagarse. Conocer el nombre de <em>host</em> y puerto reales de los microservicios es proporcionado por la funcionalidad de descubrimiento de servicios o <em>service discovery</em> que proporcionan algunos servicios como <a href="https://github.com/Netflix/eureka">Eureka</a>, <a href="https://www.consul.io/">Consul</a> o <a href="https://zookeeper.apache.org/">Apache Zookeper</a>.</p>
<p>En este artículo explicaré como usar la parte de descubrimiento de servicios de Consul usando una aplicación con <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> y  con <a href="https://projects.spring.io/spring-cloud/">Spring Cloud</a>. Spring Cloud proporciona varias cosas comunes para aplicaciones basadas en microservicios. Si aún no conoces las herramientas en las que se basará el ejemplo puedes consultar los siguientes artículos específicos como introducción:</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html">Herramienta de construcción Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/">Ejemplo de multiproyecto con Gradle</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/">Aplicación Java autocontenida con Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config/">Configuración de una aplicación en diferentes entornos con Spring Cloud Config</a></li>
</ul>
<p>Consul además de descubrimiento de servicios proporciona otras funcionalidades como detección de fallos o caídas para prevenir enviar peticiones a máquinas fuera de servicio y almacenamiento básico clave/valor para configuración dinámica o activación de características. Dispone de una aplicación web en la que podemos ver el estado de los servicios, una <a href="https://www.consul.io/api/index.html">API REST</a> con la que comunicarse con Consul en una aplicación o en cada microservicio y un servidor de nombres <abbr>DNS</abbr>, podemos usar cualquiera de las dos interfaces de consulta, la basada en la <abbr>API</abbr> <abbr>REST</abbr> o la basada en DNS para obtener las direcciones IP con la ubicación de los servicios.</p>
<div class="media">
<figure>
<p>
<img src="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/consul_hu5e35c35c046c258a2599a40c947fcc52_11502_2560x1440_fit_box_3.png" width="200" height="199" alt="Consul" title="Consul"  class="lozad "></p>
</figure>
</div>
<p>Instalar Consul es muy sencillo basta con <a href="https://www.consul.io/downloads.html">descargar un binario</a> y descargar la interfaz web si queremos tener el <em>dashboard</em> con la información del servicio. Descargados y descomprimidos Consul se inicia con el siguiente comando. Podemos acceder al panel <em>dashboard</em> con la dirección <em>http://localhost:8500</em> con un navegador web. Inicialmente en el panel de servicios solo se encuentra el propio de Consul cuando aún no se ha registrado ningún servicio, aplicación o microservicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/usr/bin/env bash&#10;</span><span class="cp"></span>consul agent -server -client<span class="o">=</span>0.0.0.0 -data-dir /tmp/consul -ui-dir ./webui&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>consul.sh</span>
    </div>
</div>
<p>Una aplicación que use Spring Boot y que quiera hacer pública su disponibilidad en Consul basta con que use la anotación <code>@EnableDiscoveryClient</code> en la clase de inicio de la aplicación junto con las dependencias adecuadas. Con la declaración de esta anotación y la dependencia <em>spring-cloud-starter-consul-all</em> Spring se comunicará con Consul a través de la API REST para registrar cuando se inicie la aplicación, su nombre, nombre de máquina y puerto en el que estará disponible.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.cloud.client.ServiceInstance</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.DiscoveryClient</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.cloud.client.discovery.EnableDiscoveryClient</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;&#10;<span class="nd">@SpringBootApplication</span>&#10;<span class="nd">@EnableDiscoveryClient</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${config.key}&#34;</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Autowired</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">DiscoveryClient</span> <span class="n">discoveryClient</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Valor de propiedad de configuración (%s): %s%n&#34;</span><span class="o">,</span> <span class="s">&#34;config.key&#34;</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Servicios:&#34;</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">discoveryClient</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">service</span> <span class="o">-&gt;</span> <span class="o">{</span>	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">ServiceInstance</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="n">discoveryClient</span><span class="o">.</span><span class="na">getInstances</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ServiceInstance</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%s (%d): %s:%d %s%n&#34;</span><span class="o">,</span> <span class="n">service</span><span class="o">,</span> <span class="n">instances</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">instance</span><span class="o">.</span><span class="na">getHost</span><span class="o">(),</span> <span class="n">instance</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="n">instance</span><span class="o">.</span><span class="na">getUri</span><span class="o">());</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">});</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SpringApplication</span> <span class="n">application</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringApplication</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">application</span><span class="o">.</span><span class="na">setApplicationContextClass</span><span class="o">(</span><span class="n">AnnotationConfigApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">server</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">${port:8080}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">consul</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class="nt">discovery</span><span class="p">:</span><span class="w">&#10;</span><span class="w">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nt">instanceId</span><span class="p">:</span><span class="w"> </span><span class="l">${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}</span><span class="w">&#10;</span><span class="w">&#10;</span><span class="w"></span><span class="nt">config</span><span class="p">:</span><span class="w">&#10;</span><span class="w">  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>application.yml</span>
    </div>
</div>
<p>Spring Cloud proporciona además un servicio que podemos usar para conocer los servicios registrados en Consul, con la clase <em>DiscoveryClient</em> podemos conocer los nombres de los servicios, su nombre de máquina y puerto desde una aplicación Java. En el método <em>run</em> de la clase <em>Main</em> se usa en este ejemplo para imprimir en la salida el listado de servicios registrados en Consul. Uno de esos servicios esta aplicación de ejemplo, ya que se registra en Consul cuando se inicia.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/consul-services_hu7b6922ae49f41ee0813233022d6adc1c_56113_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Servicios registrados en Consul"><img src="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/consul-services_hu7b6922ae49f41ee0813233022d6adc1c_56113_300x200_fit_box_3.png" width="300" height="145" alt="Servicios registrados en Consul" title="Servicios registrados en Consul"  class="lozad "></a></p>
<figcaption>Servicios registrados en Consul</figcaption>
</figure>
</div>
<p>Consul para conocer que los servicios siguen en funcionamiento hace una petición <abbr>HTTP</abbr> cada ciertos segundos a una ruta de la aplicación, Spring Boot proporciona una dependencia, <em>spring-boot-starter-actuator</em>, que usada provee del <em>endpoint /health</em> para que Consul monitorice el estado del servicio.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">plugins</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;application&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;1.4.4.RELEASE&#39;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;io.github.picodotdev.blogbitix.springcloud.client.Main&#39;</span>&#10;&#10;<span class="n">dependencies</span> <span class="o">{</span>&#10;	<span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-context:4.3.6.RELEASE&#39;</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter:1.4.4.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-web:1.4.4.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator:1.4.4.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;	<span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-consul-all:1.1.2.RELEASE&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">exclude</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;ch.qos.logback&#39;</span><span class="o">)</span> <span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/service-health_hu2c85a088e3fa0b2999e15f12aba27016_73001_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Endpoint de estado de servicio"><img src="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/images/service-health_hu2c85a088e3fa0b2999e15f12aba27016_73001_300x200_fit_box_3.png" width="135" height="200" alt="Endpoint de estado de servicio" title="Endpoint de estado de servicio"  class="lozad "></a></p>
<figcaption>Endpoint de estado de servicio</figcaption>
</figure>
</div>
<p>Esta es la salida en la consola listando los servicios disponibles, siendo uno de ellos esta aplicación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">Valor de propiedad de configuración (config.key): prod&#10;Servicios:&#10;consul (1): 192.168.1.2:8300 http://192.168.1.2:8300&#10;springcloudclient (1): 192.168.1.2:8080 http://192.168.1.2:8080</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloudConsul">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>./consul/consul.sh y ./gradlew run</code></p>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://projects.spring.io/spring-cloud/">Spring Cloud</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-consul/">Spring Cloud Consul</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="spring"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/</id>
        <title>Hemeroteca #10</title>
        <updated>2016-12-24T12:00:00+01:00</updated>
        <published>2016-12-24T12:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Echando un vistazo a estos seis últimos meses han sido buenos, en número de artículos que he escrito y publicado como en el aumento de número de páginas vistas mensuales con respecto a inicios de 2016 y en similar proporción los ingresos mensuales por publicidad AdSense. De esta forma el esfuerzo en tiempo que supone escribir los artículos me es recompensado de alguna forma.</strong></p>]]>
        <![CDATA[<p>Otros seis meses acumulados de vida, ya son poco menos de 7 años desde que tengo un blog y 3 desde que empecé a escribir en Blog Bitix. A pesar de la gran cantidad de tiempo que me requiere escribir y publicar artículos, tanto como entre 3 y 10 horas de dedicación por artículo, es una de las cosas que más me alegro de haber empezado en el año 2010. Lo que aprendo con cada artículo de las cosas que me motivan y compartirlo por si a alguien más le resultan interesantes me resulta muy satisfactorio.</p>
<p>En estos seis meses en vez de publicar un solo artículo por semana he estado publicando dos artículos y algunas semanas incluso 3. El número de páginas vistas mensuales han aumentado hasta el punto de multiplicar por cuatro las páginas vistas que tenía a inicios de año siendo ahora unas 26K/mes. Y no son muchas, otros blogs personales tienen muchas más, dos o tres veces más. La mala noticia es que un porcentaje importante de las visitas provienen de unos pocos artículos bien posicionados en Google. En cualquier caso en una proporción similar que han aumentado las páginas vistas han aumentado los ingresos por publicidad de <a href="https://www.google.com/adsense/">Google AdSense</a> que incluyo en el blog, e incluso los últimos meses los ingresos han sido de alrededor de 20 € y 25 €, con lo que podré hacer más <a href="https://picodotdev.github.io/blog-bitix/series/donacion/">donaciones al software libre</a> y más frecuentemente. En definitiva este ha sido un buen año en este aspecto, si el siguiente fuera similar sería estupendo.</p>
<p>A pesar de la gran mejora en número de visitas mensuales durante este año cuesta un horror hacer crecer al blog y escribir y publicar al ritmo que lo he estado haciendo durante estos últimos meses. Hay que tener un poco de intuición y algo de suerte para acertar con artículos que se posicionen bien en los buscadores si lo que queremos es aumentar las visitas.</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/images/analytics-2016_hu52b97d14fdb79a9a1e591311aa490e6d_58595_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="Analytics 2016 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/images/analytics-2016_hu52b97d14fdb79a9a1e591311aa490e6d_58595_300x200_fit_box_3.png" width="300" height="111" alt="Analytics 2016 de Blog Bitix" title="Analytics 2016 de Blog Bitix"  class="lozad "></a>

<a href="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/images/gadsense-2016_hu2446445dc01efb419e83d5bf5a4644fa_34745_2560x1440_fit_box_3.png" data-gallery="data-gallery" title="AdSense 2016 de Blog Bitix"><img src="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/images/gadsense-2016_hu2446445dc01efb419e83d5bf5a4644fa_34745_300x200_fit_box_3.png" width="300" height="89" alt="AdSense 2016 de Blog Bitix" title="AdSense 2016 de Blog Bitix"  class="lozad "></a></p>
<figcaption>Evolución visitas e ingresos de AdSense en 2016</figcaption>
</figure>
</div>
<p>Una de las cosas que me estoy arrepintiendo ahora es no de tener dominio propio, no lo hice porque con <a href="https://pages.github.com/">GitHub Pages</a> me ofrecía el hospedaje gratis y sin complicaciones. Ahora me plantearía hospedar el blog en una máquina de <a href="https://www.linode.com/">Linode</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a> o en la reciente competencia de estos con <a href="https://amazonlightsail.com/">Amazon Lightsail</a>. Mas que por necesidad por practicar con <a href="https://www.ansible.com/">Ansible</a> e implementar en el blog HTTPS/2 o usar <a href="https://letsencrypt.org/">Let’s encrypt</a> asi como aprender sobre esos servicios en la nube. La migración es posible pero posiblemente no perfecta.</p>
<p>Durante este periodo de tiempo he realizado algunos cambios a nivel de diseño en el blog como el buscador de contenido con <a href="https://duckduckgo.com/">DuckDuckGo</a>, he quitado del panel lateral los artículos recientes, he creado una nueva página por si alguna organización quisiera contactarme por publicidad e incluido un mensaje para aquellos que tengan un bloqueador de anuncios. Para tratar de monetizar algo más el blog también he estado considerando en inscribirme en páginas como <a href="https://www.publisuites.com/">Publisuites</a> o <a href="https://coobis.com/">Coobis</a> para escribir artículos patrocinados esporádicamente y siempre con artículos escritos por mi, con mi opinión y de la forma más honesta que pueda. Finalmente, me decidí por Publisuites pero aún no he recibido ninguna proposición de artículo patrocinado.</p>
<p>Esta es la recapitulación de <a href="https://picodotdev.github.io/blog-bitix/2016/">artículos que he escrito durante el año 2016</a> y estos seis últimos meses organizados por temática empezando por unos pocos artículos más de la <a href="https://picodotdev.github.io/blog-bitix/series/web/">serie web</a>, algunos sobre <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> con varios artículos sobre juegos y otro sobre varias de las distribuciones más importantes y usadas, otros cuantos sobre programación relacionados con el lenguaje Java, por supuesto y de los que más gratificantes me resultan aunque no sean muy visitados relacionados de alguna forma con <a href="https://tapestry.apache.org/">Apache Tapestry</a> o algunos de opinión como repaso a las motivaciones que me llevaron a elegir a <a href="http://www.pepephone.com/">Pepephone</a> como proveedor de internet y otro de opinión sobre el rápido avance de la tecnología. En total han sido 47 artículos cuando en otros periodos de tiempo solo hubiese publicado unos 26.</p>
<p>He añadido a la serie de artículos sobre desarrollo web varios interesantes que forman parte de lo esencial a conocer.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/">Cómo optimizar un sitio web con compresión GZIP en Nginx y Apache HTTPD</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/">Configurar Nginx como balanceador de carga</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/">Cómo crear un proxy inverso entre el servidor web Nginx y un servidor de aplicaciones Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/">Las cabeceras de cache del protocolo HTTP</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/">Configurar Nginx para cachear respuestas del servidor de aplicaciones</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/">Cómo y por que redirigir tráfico web del dominio raíz al subdominio www (o viceversa)</a></li>
</ul>
<p>La sección de artículos sobre GNU/Linux destaca la <a href="https://picodotdev.github.io/blog-bitix/series/juegos/">serie sobre juegos</a> en el sistema del pingüino. He empezado a usar por obligación en el trabajo macOS que me ha servido como excusa para escribir un par de artículos sobre el sistema operativo de Apple.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/guia-basica-del-interprete-de-comandos-bash/">Guía básica del intérprete de comandos Bash</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/jugar-al-ajedrez-en-gnu-linux-con-gnome/">Jugar al ajedrez en GNU/Linux con GNOME</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/como-crear-miniaturas-o-vistas-previas-de-imagenes-con-imagemagick/">Cómo crear miniaturas o vistas previas de imágenes con ImageMagick</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/jugar-al-clasico-de-estrategia-de-tablero-go-en-gnu-linux/">Jugar al clásico de estrategia de tablero Go en GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/juegos-incluidos-en-el-entorno-de-escritorio-gnome/">Juegos incluidos en el entorno de escritorio GNOME</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/jugar-a-videojuegos-clasicos-y-miticos-de-arcade-con-mame-en-gnu-linux/">Jugar a videojuegos clásicos y míticos de arcade con Mame en GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/descargar-paquetes-a-actualizar-sin-instalarlos-en-arch-linux/">Descargar paquetes a actualizar sin instalarlos en Arch Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/22-plus-buenos-juegos-en-gnu-linux/">22+ buenos juegos en GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/varios-juegos-de-culto-con-scummvm-en-gnu-linux/">Varios juegos de culto con ScummVM en GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/como-configurar-una-impresora-hp-en-red-en-arch-linux/">Cómo configurar una impresora HP en red en Arch Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/localizacion-de-un-comando-y-paquete-propietario-de-un-archivo-en-gnu-linux/">Localización de un comando y paquete propietario de un archivo en GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/como-instalar-y-probar-macos-con-virtualbox-en-windows-o-gnu-linux/">Cómo instalar y probar macOS con VirtualBox en Windows o GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/">Elegir una distribución GNU/Linux según el usuario, uso o equipo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/guardar-contrasenas-de-forma-segura-con-keepassxc/">Guardar contraseñas de forma segura con KeePassX</a></li>
</ul>
<p>He escrito otros cuantos artículos de programación en algunos casos relacionados de alguna forma con <a href="https://tapestry.apache.org/">Apache Tapestry</a>, Java y JavaScript.</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/07/no-un-tag-jsp-o-un-tag-de-grails-no-es-equivalente-a-un-componente-de-tapestry/">No, un tag JSP o un tag de Grails no es equivalente a un componente de Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/por-que-guardar-las-fechas-en-utc-en-la-base-de-datos/">Por qué guardar las fechas en UTC en la base de datos</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/">Ejemplo de API REST en Java con JAX-RS y Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/monitorizar-con-eventos-de-google-analytics-una-pagina-web/">Monitorizar con eventos de Google Analytics una página web</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/">Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/">Cliente de un servicio REST autenticado con OAuth en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/">Generación de código en tiempo de ejecución con Byte Buddy</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/">Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/">Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/">Componente select múltiple en Apache Tapestry</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootstrap-select/">Añadir botones selectores de opciones a select múltiple de bootstrap-select</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/">Histórico de datos, auditoría y diferencias entre objetos con Javers en Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/usar-una-imagen-de-fondo-aleatoria-al-cargar-una-pagina-web/">Usar una imagen de fondo aleatoria al cargar una página web</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/">Introducción al JavaScript de ECMAScript 6</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/">Cómo implementar correctamente y por qué los métodos equals y hashCode de los objetos Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/">Transpiling de ECMAScript 6 a 5, Uglify y ESLint con Gulp</a></li>
</ul>
<p>En la categoría de artículos de opinion junto con otros de teḿatica variada han sido los siguientes:</p>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/eligiendo-proveedor-de-internet-finalmente-pepephone/">Eligiendo proveedor de internet, finalmente Pepephone</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/08/sobre-los-infimos-impuestos-que-paga-apple/">Sobre los ínfimos impuestos que paga Apple</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/articulo-2-de-yo-apoyo-al-software-libre/">Artículo #2 de Yo apoyo al software libre</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/">Gestionar los enlaces de una bitácora con Hugo</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/10/sobre-el-rapido-avance-de-la-tecnologia/">Sobre el rápido avance de la tecnología</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/3-formas-sencillas-de-monetizar-un-blog/">3 formas sencillas de monetizar un blog</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/mi-primer-mac-yo-usuario-de-gnu-linux/">Mi primer Mac, yo usuario de GNU/Linux</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/instalar-programas-con-homebrew-en-macos/">Instalar programas con Homebrew en macOS</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/11/desempaquetado-bombillas-led-de-philips/">Desempaquetado bombillas LED de PHILIPS</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/12/la-fabrica-de-blog-bitix/">La fábrica de Blog Bitix</a></li>
</ul>
<p>¡Felices fiestas! ¡A por el 2017!</p>
<div class="media">
<figure>
<p>
<a href="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/images/christmas-tux-2016_hu581dec6841cb818409efe552acb3f337_509006_2560x1440_fit_q90_box.jpg" data-gallery="data-gallery" title="¡Felices fiestas y buen 2017!"><img src="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/images/christmas-tux-2016_hu581dec6841cb818409efe552acb3f337_509006_600x450_fit_q90_box.jpg" width="600" height="338" alt="¡Felices fiestas y buen 2017!" title="¡Felices fiestas y buen 2017!"  class="lozad "></a></p>
<figcaption>¡Felices fiestas y buen 2017! <br>Fuente: klowner.com</figcaption>
</figure>
</div>
]]>
        </content>
        
            
                <category term="blog"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/</id>
        <title>Transpiling de ECMAScript 6 a 5, Uglify y ESLint con Gulp</title>
        <updated>2016-12-11T01:35:00+01:00</updated>
        <published>2016-12-09T12:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" width="200" height="200" alt="JavaScript" title="JavaScript"  class=""></p>
</div>
<p>Este artículo es una combinación de varias cosas que forman el actual estado del arte en JavaScript. <a href="https://gulpjs.com/">Gulp</a> como ejecutor de tareas, traducción o <em>transpiling</em> de ECMAScript 6 a ECMAcript 5 con <a href="https://babeljs.io/">Babel</a>, <a href="https://www.npmjs.com/package/uglify-js">Uglify</a> como minificador y ofuscador de código y <a href="https://eslint.org/">ESLint</a> como verificador del código.</p>
<p>Dos de los navegadores web más importantes como <a href="https://www.google.es/chrome/browser/desktop/">Chrome</a> y <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a> ya soportan gran parte de la especificación de ECMAScript 6 que añade nuevas funcionalidades al lenguaje JavaScript que comento en <a href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/">Introducción al JavaScript de ECMAScript 6</a>. Sin embargo, hasta que prácticamente toda la totalidad de dispositivos soporten ECMAScript 6, formada por la diversidad actual de dispositivos en las que se incluyen los dispositivos móviles es necesario traducir el código JavaScript a la especificación ECMAScript 5. Haciendo esta traducción podemos usar ES6 y al mismo tiempo soportar todos los dispositivos. Hacer <em>transpiling</em> es necesario si el código será accedido desde internet de forma pública para cualquiera y queremos usar las nuevas características de ECMAScript 6. Si se tratase de una aplicación en un entorno controlado de uso interno en el que se usasen los navegadores que soporten ES6 el <em>transpiling</em> no sería imprescindible.</p>
<p>El tamaño de una página afecta al tiempo de carga de la misma, dada las velocidades de incluso los dispositivos móviles la velocidad ya no es tan importante como cuando el ancho de banda era significativamente menor y ahora importa más la latencia que <a href="https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/">el protocolo HTTP/2</a> trata de mejorar. En cualquier caso tanto comprimir con gzip el contenido devuelto por el servidor como minificar se consigue la mayor reducción en el tamaño de una página.</p>
<p>Minificar el código y ofuscarlo hace que depurar sea más complicado al no tener el código fuente original. Para que los depuradores tengan la información de los nombres originales al minificar se pueden generar archivos <em>.map</em> que los contengan y que los depuradores obtienen y usan cuando es necesario.</p>
<p>ESLint es un verificador estático de código que nos informará de aquellas reglas que se no se respetan según las normas de estilos que definamos. En ESLint hay cantidad de <a href="https://eslint.org/docs/rules/">reglas</a> que podemos aplicar al código y personalizar según nuestras preferencias, por ejemplo, requerir que las cadenas de texto se usen mediante comillas simples o que las llaves de bloques de código estén en la misma linea que la expresión <em>if</em>, <em>else</em>, <em>while</em>, etc.</p>
<p>Gulp define las tareas de un proyecto en un archivo de nombre <em>gulpfile.js</em> que usando <em>gulp-balbel</em>, <em>eslint</em>, <em>gulp-uglify</em> y <em>gulp-sourcemaps</em> obtenemos todas las funcionalidades anteriores. Con Gulp los archivos son transformados en varios pasos y finalmente enviados a un directorio destino del sistema de archivos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>&#10;<span class="kr">const</span> <span class="nx">babel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-babel&#39;</span><span class="p">);</span>&#10;<span class="kr">const</span> <span class="nx">eslint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-eslint&#39;</span><span class="p">);</span>&#10;<span class="kr">const</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>&#10;<span class="kr">const</span> <span class="nx">sourcemaps</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sourcemaps&#39;</span><span class="p">);</span>&#10;&#10;<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;	<span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;src/main/js/**/*.js&#34;</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">())</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">.</span><span class="nx">format</span><span class="p">())</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">babel</span><span class="p">())</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;build/dist/babel&#34;</span><span class="p">))</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span><span class="nx">loadMaps</span><span class="o">:</span> <span class="kc">true</span><span class="p">}))</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">())</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;build/dist/uglify&#34;</span><span class="p">))</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;./&#39;</span><span class="p">))</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;build/dist&#34;</span><span class="p">));</span>&#10;<span class="p">});</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gulpfile.js</span>
    </div>
</div>
<p>Para usar Gulp deberemos tener instalado <a href="https://www.npmjs.com/">npm</a> que en Arch Linux sería instalar su paquete:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># pacman -S npm</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>npm.sh</span>
    </div>
</div>
<p>Instalar Gulp a nivel global en el sistema:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># npm install -g gulp</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gulp.sh</span>
    </div>
</div>
<p>Y finalmente instalar en el proyecto las dependencias definidas en el archivo <em>package.json</em>:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ npm install --save-dev gulp-babel&#10;$ npm install --save-dev gulp-eslint&#10;$ npm install --save-dev gulp-uglify gulp-sourcemaps&#10;$ npm install</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>npm-install.sh</span>
    </div>
</div>
<p>El archivo JavaScript original con ECMAScript 6 es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">sentences</span> <span class="o">=</span> <span class="p">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;great&#39;</span> <span class="p">},</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;Elephants&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;large&#39;</span> <span class="p">}</span>&#10;<span class="p">];</span>&#10;&#10;<span class="kd">function</span> <span class="nx">say</span> <span class="p">({</span> <span class="nx">subject</span><span class="p">,</span> <span class="nx">verb</span><span class="p">,</span> <span class="nx">object</span> <span class="p">})</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">subject</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">verb</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">object</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="p">}</span>&#10;&#10;<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">s</span> <span class="k">of</span> <span class="nx">sentences</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">say</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main.js</span>
    </div>
</div>
<p>Transformado a ECMAScript 5 queda lo siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>&#10;&#10;<span class="kd">var</span> <span class="nx">sentences</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;great&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;Elephants&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;large&#39;</span> <span class="p">}];</span>&#10;&#10;<span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">_ref</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">subject</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">subject</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">verb</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">verb</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">subject</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">verb</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">object</span><span class="p">);</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kd">var</span> <span class="nx">_iteratorNormalCompletion</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>&#10;<span class="kd">var</span> <span class="nx">_didIteratorError</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>&#10;<span class="kd">var</span> <span class="nx">_iteratorError</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>&#10;&#10;<span class="k">try</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">_iterator</span> <span class="o">=</span> <span class="nx">sentences</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">](),</span> <span class="nx">_step</span><span class="p">;</span> <span class="o">!</span><span class="p">(</span><span class="nx">_iteratorNormalCompletion</span> <span class="o">=</span> <span class="p">(</span><span class="nx">_step</span> <span class="o">=</span> <span class="nx">_iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">()).</span><span class="nx">done</span><span class="p">);</span> <span class="nx">_iteratorNormalCompletion</span> <span class="o">=</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">_step</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">say</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">_didIteratorError</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">_iteratorError</span> <span class="o">=</span> <span class="nx">err</span><span class="p">;</span>&#10;<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_iteratorNormalCompletion</span> <span class="o">&amp;&amp;</span> <span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="p">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="nx">_didIteratorError</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="nx">_iteratorError</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main-babel.js</span>
    </div>
</div>
<p>Estos son los archivos de configuración para ESLint donde indicaremos las reglas que queremos aplicar al código JavaScript y la configuración para Babel donde indicamos a que versión de JavaScript haremos la transformación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;extends&#34;</span><span class="o">:</span> <span class="s2">&#34;standard&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;plugins&#34;</span><span class="o">:</span> <span class="p">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;standard&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;promise&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">],</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;rules&#34;</span><span class="o">:</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;semi&#34;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="s2">&#34;always&#34;</span><span class="p">],</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;indent&#34;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">};</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>eslintrc.js</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">{&#10;  &#34;presets&#34;: [&#34;es2015&#34;]&#10;}</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>babelrc</span>
    </div>
</div>
<p>Transformado con Uglify queda algo ilegible pero con el archivo <em>.map</em> podremos depurar en el navegador mostrándose los nombres de las variables originales.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">subject</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">verb</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34; &#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34; &#34;</span><span class="o">+</span><span class="nx">o</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">sentences</span><span class="o">=</span><span class="p">[{</span><span class="nx">subject</span><span class="o">:</span><span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span><span class="nx">verb</span><span class="o">:</span><span class="s2">&#34;is&#34;</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="s2">&#34;great&#34;</span><span class="p">},{</span><span class="nx">subject</span><span class="o">:</span><span class="s2">&#34;Elephants&#34;</span><span class="p">,</span><span class="nx">verb</span><span class="o">:</span><span class="s2">&#34;are&#34;</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="s2">&#34;large&#34;</span><span class="p">}],</span><span class="nx">_iteratorNormalCompletion</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">_didIteratorError</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">_iteratorError</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">_iterator</span><span class="o">=</span><span class="nx">sentences</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">](),</span><span class="nx">_step</span><span class="p">;</span><span class="o">!</span><span class="p">(</span><span class="nx">_iteratorNormalCompletion</span><span class="o">=</span><span class="p">(</span><span class="nx">_step</span><span class="o">=</span><span class="nx">_iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">()).</span><span class="nx">done</span><span class="p">);</span><span class="nx">_iteratorNormalCompletion</span><span class="o">=!</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">_step</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">say</span><span class="p">(</span><span class="nx">s</span><span class="p">)}}</span><span class="k">catch</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="nx">_didIteratorError</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">_iteratorError</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="k">finally</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="o">!</span><span class="nx">_iteratorNormalCompletion</span><span class="o">&amp;&amp;</span><span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="o">&amp;&amp;</span><span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="p">()}</span><span class="k">finally</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">_didIteratorError</span><span class="p">)</span><span class="k">throw</span> <span class="nx">_iteratorError</span><span class="p">}}</span>&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main-uglify.js</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">{&#34;version&#34;:3,&#34;sources&#34;:[&#34;main.js&#34;],&#34;names&#34;:[&#34;say&#34;,&#34;_ref&#34;,&#34;subject&#34;,&#34;verb&#34;,&#34;object&#34;,&#34;console&#34;,&#34;log&#34;,&#34;sentences&#34;,&#34;_iteratorNormalCompletion&#34;,&#34;_didIteratorError&#34;,&#34;_iteratorError&#34;,&#34;undefined&#34;,&#34;_iterator&#34;,&#34;Symbol&#34;,&#34;iterator&#34;,&#34;_step&#34;,&#34;next&#34;,&#34;done&#34;,&#34;s&#34;,&#34;value&#34;,&#34;err&#34;,&#34;return&#34;],&#34;mappings&#34;:&#34;AAAA,YAIA,SAASA,KAAIC,GACT,GAAIC,GAAUD,EAAKC,QACfC,EAAOF,EAAKE,KACZC,EAASH,EAAKG,MAElBC,SAAQC,IAAIJ,EAAU,IAAMC,EAAO,IAAMC,GAP7C,GAAIG,aAAeL,QAAS,aAAcC,KAAM,KAAMC,OAAQ,UAAaF,QAAS,YAAaC,KAAM,MAAOC,OAAQ,UAUlHI,2BAA4B,EAC5BC,mBAAoB,EACpBC,eAAiBC,MAErB,KACI,IAAK,GAAIC,WAAYL,UAAUM,OAAOC,YAAaC,QAASP,2BAA6BO,MAAQH,UAAUI,QAAQC,MAAOT,2BAA4B,EAAM,CACxJ,GAAIU,GAAIH,MAAMI,KAEdnB,KAAIkB,IAEV,MAAOE,GACLX,mBAAoB,EACpBC,eAAiBU,EACnB,QACE,KACSZ,2BAA6BI,UAAUS,QACxCT,UAAUS,SAEhB,QACE,GAAIZ,kBACA,KAAMC&#34;,&#34;file&#34;:&#34;main.js&#34;,&#34;sourcesContent&#34;:[&#34;&#39;use strict&#39;;\n\nvar sentences = [{ subject: &#39;JavaScript&#39;, verb: &#39;is&#39;, object: &#39;great&#39; }, { subject: &#39;Elephants&#39;, verb: &#39;are&#39;, object: &#39;large&#39; }];\n\nfunction say(_ref) {\n&nbsp;&nbsp;&nbsp;&nbsp;var subject = _ref.subject;\n&nbsp;&nbsp;&nbsp;&nbsp;var verb = _ref.verb;\n&nbsp;&nbsp;&nbsp;&nbsp;var object = _ref.object;\n\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(subject + &#39; &#39; + verb + &#39; &#39; + object);\n}\n\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n&nbsp;&nbsp;&nbsp;&nbsp;for (var _iterator = sentences[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var s = _step.value;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;say(s);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n} catch (err) {\n&nbsp;&nbsp;&nbsp;&nbsp;_didIteratorError = true;\n&nbsp;&nbsp;&nbsp;&nbsp;_iteratorError = err;\n} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_iterator.return();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (_didIteratorError) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw _iteratorError;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}&#34;]}&#10;&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main.js.map</span>
    </div>
</div>
<div class="alert alert-secondary sourcecode">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/icons/terminal.svg" width="64" height="64" alt="Terminal" title="Terminal" class="lozad sourcecode-icon">
    <p>
            El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ECMAScript6">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en GitHub y probarlo en tu equipo ejecutando siguiente comando:<br><code>npm install, gulp, node ./build/dist/main.js</code></p>
</div>
<p>El resultado son los siguientes mensajes en la terminal tanto para la ejecución del archivo ECMAScript 6 original con <code>node src/main/js/main.js</code> como para el <em>transpilado</em> con <code>node ./build/dist/main.js</code>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">JavaScript is great&#10;Elephants are large&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
]]>
        </content>
        
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/</id>
        <title>Cómo implementar correctamente y por qué los métodos equals y hashCode de los objetos Java</title>
        <updated>2019-11-12T19:30:00+01:00</updated>
        <published>2016-12-07T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los métodos <em>equals</em> y <em>hashCode</em> son esenciales en las colecciones de objetos. Para su correcta implementación es necesario conocer unas cuantas propiedades que han de cumplir estos métodos. Pueden parecer sencillos pero no lo son tanto y una mala implementación posiblemente produzca algún tipo de error o comportamiento anómalo indeseado. En el siguiente artículo comento varias formas de implementarlos de forma sencilla y correcta.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" width="200" height="366" alt="Java" title="Java"  class=""></p>
</div>
<p>En Java los métodos <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">equals</a> y <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--">hashCode</a> están definidos en la raíz de la jerarquía de clases, esto es en la clase <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html">Object</a>, lo que significa que todas las instancias de objetos los poseen. Estos métodos son especialmente importantes ya que afectan al correcto funcionamiento de las colecciones como <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html">Collection</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">List</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html">Set</a> y <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html">Map</a>, colecciones, listas, conjuntos y mapas que es difícil que cualquier programa no use alguna implementación de ellas.</p>
<p>El método <em>equals</em> es usado en las colecciones de tipo <em>List</em>, <em>Set</em>, y también <em>Map</em> para determinar si un objeto ya está incluida en la colección, el método <em>hashCode</em> es usado en los <em>Map</em> para encontrar el objeto asociado a la clave. Dado que las colecciones son ampliamente usadas en cualquier programa la correcta implementación implementación de los métodos <em>equals</em> y <em>hashCode</em> es fundamental ya que de lo contrario descubriremos errores poco agradables.</p>
<p>Una de las cosas que tenemos que tener cuenta es que siempre que sobrescribamos el método <em>equals</em> también debemos sobrescribir el método <em>hashCode</em>. Según el <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html">contrato definido en la clase Object</a> deberemos saber que:</p>
<ul>
<li>Durante la ejecución del programa el método <em>hashCode</em> debe retornar el mismo valor siempre que no se modifique la información usada en el método <em>equals</em>.</li>
<li>Si dos objetos son iguales según sus métodos <em>equals</em> entonces el valor devuelto por <em>hashCode</em> en cada uno de los dos objetos debe devolver el mismo valor.</li>
<li>Si dos objetos son distintos según sus métodos <em>equals</em> el valor devuelto no ha de ser necesariamente distinto aunque se recomienda para mejorar el rendimiento de las colecciones <em>Map</em>.</li>
</ul>
<h3 id="cómo-implementar-el-método-_equals_">Cómo implementar el método <em>equals</em></h3>
<p>Según la <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">especificación del método equals</a> definido en la clase <em>Object</em> debe tener las siguientes propiedades:</p>
<ul>
<li>Es reflexiva: para cualquier referencia no nula de <code>x</code>, <code>x.equals(x)</code> debe retornar <em>true</em>.</li>
<li>Es simétrica: para cualquier referencia no nula de <code>x</code> e <code>y</code>, <code>x.equals(y)</code> debe retornar <em>true</em> si y solo si <code>y.equals(x)</code> retorna <em>true</em>.</li>
<li>Es transitiva: para cualquier referencia no nula de <code>x</code>, <code>y</code> y <code>z</code>, si <code>x.equals(y)</code> retorna <em>true</em> y <code>y.equals(z)</code> retorna <em>true</em> entonces <code>x.equals(z)</code> debe retornar <em>true</em>.</li>
<li>Es consistente: para cualquier referencia no nula de <code>x</code> e <code>y</code>, múltiples invocaciones de <code>x.equals(y)</code> consistentemente debe retornar <em>true</em> o <em>false</em>, si no se ha modificado la información utilizada en la comparación.</li>
<li>Para para cualquier referencia no nula de <code>x</code>, <code>x.equals(null)</code> debe retornar <em>false</em>.</li>
</ul>
<p>La implementación del método <em>equals</em> de la clase <em>Object</em> usa la equivalencia más restrictiva posible, esto es, para cualquier referencia no nula de <em>x</em> e <em>y</em> este método retorna <em>true</em> si y solo si son el mismo objeto (<em>x == y</em> tienen la misma referencia).</p>
<p>Hay dos formas comunes de implementar el método <em>equals</em>, una más restrictiva pero que cumple las propiedades y otra que no cumple completamente las propiedades pero es de utilidad en ciertos casos. Son las siguientes en las que cambia la sentencia que comprueba el tipo de la instancia del objeto con el que se está evaluando la igualdad. En el artículo <a href="https://www.sitepoint.com/implement-javas-equals-method-correctly/">How to Implement Java’s equals Method Correctly</a> están descritas las implicaciones y motivo de existir de ambas variantes además de explicar que garantiza cada sentencia del método <em>equals</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">lineNumber</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">prefix</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">areaCode</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">PhoneNumber</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">that</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lineNumber</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">lineNumber</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">prefix</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">prefix</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">areaCode</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">areaCode</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PhoneNumber-equals-1.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">lineNumber</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">prefix</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">areaCode</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">PhoneNumber</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">PhoneNumber</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">that</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lineNumber</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">lineNumber</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">prefix</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">prefix</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">areaCode</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">areaCode</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PhoneNumber-equals-2.java</span>
    </div>
</div>
<p>Usando la clase <a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html">EqualsBuilder</a> de la librería <a href="https://commons.apache.org/proper/commons-lang/">commons-lang</a> la implementación es aparentemente similar pero en el caso de necesitar hacer comparaciones con datos de tipo <em>float</em>, <em>double</em>, <em>arrays</em> u objetos hace la implementación un poco más sencilla. En los <em>float</em> y <em>double</em> para hacer la comparación deberíamos usar los métodos <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Float.html#compare-float-float-">Float.compare</a> y <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#compare-double-double-">Double.compare</a> y en los objetos deberemos tener en cuenta si la referencia es posible que se a nula para evitar la excepción <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html">NullPointerException</a> cosas que la clase <em>EqualsBuilder</em> ya tiene en cuenta.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">lineNumber</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">prefix</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Integer</span> <span class="n">areaCode</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">PhoneNumber</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">PhoneNumber</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">EqualsBuilder</span><span class="o">()</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">appendSuper</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">that</span><span class="o">))</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lineNumber</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">lineNumber</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">prefix</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">prefix</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">areaCode</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">areaCode</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="na">isEquals</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PhoneNumber-equals-commons-lang.java</span>
    </div>
</div>
<h3 id="como-implementar-el-método-_hashcode_">Como implementar el método <em>hashCode</em></h3>
<p>La implementación del <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--">método hashCode</a> se debe realizar según los siguientes pasos:</p>
<ul>
<li>Almacenar un valor constante distinto de 0 en una variable int, por ejemplo 17.</li>
<li>Por cada campo usado en el método <em>equals</em> se debe obtener un <em>hash code</em> (int) realizando:
<ul>
<li>Si el campo es un <em>boolean</em> se debe calcular <code>(f ? 1 : 0)</code>.</li>
<li>Si el campo es un <em>byte</em>, <em>char</em>, <em>short</em> o <em>int</em> se debe calcular <code>(int) f</code>.</li>
<li>Si el campo es un <em>long</em> se debe calcular <code>(int) (f ^ (f &gt;&gt;&gt; 32))</code>.</li>
<li>Si el campo es un <em>float</em> se debe calcular <code>Float.floatToIntBits(f)</code>.</li>
<li>Si el campo es un <em>double</em> se debe calcular <code>Double.doubleToLongBits(f)</code> y calcular el <em>hash</em> del <em>long</em> obtenido en el paso para los tipos <em>long</em>.</li>
<li>Si el campo es una referencia a un objeto y el método <em>equals</em> de esta clase compara recursivamente invocando el método <em>equals</em> del campo, invocar su método <em>hashCode</em>. si el valor de campo es nulo se debe retornar una constante que tradicionalmente es 0.</li>
<li>Si el campo es un <em>array</em> se debe tratar individualmente cada elemento aplicando estas reglas a cada elemento. Si cada elemento del array es significativo se puede usar <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#hashCode-java.lang.Object">Arrays.hashCode</a>.</li>
<li>Combinar los <em>hash code</em> obtenidos de la siguiente forma, <code>result = 31 * result + c</code>.</li>
</ul>
</li>
</ul>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">17</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">result</span> <span class="o">=</span> <span class="n">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">areaCode</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">result</span> <span class="o">=</span> <span class="n">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">prefix</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">result</span> <span class="o">=</span> <span class="n">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">lineNumber</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">result</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PhoneNumber-hashcode.java</span>
    </div>
</div>
<p>Implementar este método en cada clase de una aplicación es tedioso, repetitivo y propenso a errores, para hacer más sencilla su implementación existe el método <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#hash-java.lang.Object...-">Objects.hash</a> desde la versión 7 de Java. Si usamos una versión anterior a Java 7 disponemos de la clase <a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html">HashCodeBuilder</a> en la librería <em>commons-lang</em>. La misma implementación anterior quedaría.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">areaCode</span><span class="o">,</span> <span class="n">prefix</span><span class="o">,</span> <span class="n">lineNumber</span><span class="o">);</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PhoneNumber-hashcode-java.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">...</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">HashCodeBuilder</span><span class="o">(</span><span class="n">17</span><span class="o">,</span> <span class="n">31</span><span class="o">).</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">append</span><span class="o">(</span><span class="n">areaCode</span><span class="o">).</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">append</span><span class="o">(</span><span class="n">prefix</span><span class="o">).</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">append</span><span class="o">(</span><span class="n">lineNumber</span><span class="o">).</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">toHashCode</span><span class="o">();</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PhoneNumber-hashcode-commons-lang.java</span>
    </div>
</div>
<p>En el libro <a href="https://amzn.to/2g9N1bi">Effective Java</a> se explican con un poco más detalle estas dos cosas y muchas otras otras sobre Java que son muy interesantes conocer, el libro es una buena y recomendada lectura para todo programador Java que está entre los <a href="https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/">8+ libros para mejorar como programadores</a> que recomiendo.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0321356683&amp;linkId=9145a271e7886cea526d9fcbe9edb707&amp;internal=1" title="Amazon" class="lozad"></iframe>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/02/las-colecciones-de-java-estructuras-de-datos-para-guardar-referencias-a-objetos/">Las colecciones de Java, estructuras de datos para guardar referencias a objetos</a></li>
<li><a href="https://www.javaworld.com/article/2074996/hashcode-and-equals-method-in-java-object---a-pragmatic-concept.html">HashCode and Equals method in Java object</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/</id>
        <title>Introducción al JavaScript de ECMAScript 6</title>
        <updated>2016-12-09T13:50:00+01:00</updated>
        <published>2016-12-03T12:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con ECMAScript 6 se han incorporado al lenguaje varias novedades como nuevas palabras reservadas para definir variables y constantes, símbolos, interpolación de variables en cadenas, desestructuración, forma abreviada para declarar funciones, nueva sintaxis más sencilla para definir clases, objetos de tipo <em>Map</em> y <em>Set</em>, <em>Promises</em> como alternativa a <em>callbacks</em>, el protocolo <em>Iterator</em> y generadores, además de algunas otras cosas que si como yo no habías dedicado tiempo a aprender mejor JavaScript aún te resulten novedosas.</strong></p>]]>
        <![CDATA[<div class="logotypes">
<p>
<img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" width="200" height="200" alt="JavaScript" title="JavaScript"  class=""></p>
</div>
<p>Hasta ahora como desarrollador web durante prácticamente toda mi vida laboral no había dedicado tiempo a conocer en más detalle el lenguaje de programación <a href="https://es.wikipedia.org/wiki/JavaScript">JavaScript</a> usado en los navegadores web. Mucho de lo que necesitaba me era suficiente con librerías como <a href="https://jquery.com/">jQuery</a> o <a href="https://underscorejs.org/">underscore</a>. Ahora algunas páginas web tienen un peso importante en el lado cliente y ante esta necesidad el lenguaje JavaScript está evolucionando e incorporando nuevas características como las definidas en sus especificaciones de <a href="https://es.wikipedia.org/wiki/ECMAScript">ECMAScript</a>.</p>
<p>Para aprender en mucho más en detalle lo poco que conocía de JavaScript he leído el libro <a href="https://amzn.to/2g3TV52">Learning JavaScript</a> que cubre las novedades de ECMAScript 2015 también conocido como ECMAScript 6 (ES6). Después de leerlo diré que es un libro que me ha gustado mucho y considero que es adecuado tanto para alguien que pueda estar aprendiendo a programar como para alguien que ya conoce otros lenguajes de programación explicando los conceptos sin complicaciones.</p>
<div class="media media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;language=es_ES&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491914912&amp;linkId=3ea3a8ae787fc5f9cdd9ca6934c7d635&amp;internal=1" title="Amazon" class="lozad"></iframe>
</div>
<p>Las últimas versiones de los navegadores <a href="https://www.google.es/chrome/browser/desktop/">Chrome</a> y <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a> ya soportan todo lo que describo a continuación y que está más detalladamente explicado en el libro. Para los navegadores que aún no soportan todo como en los dispositivos móviles hay compiladores o <em>transpilers</em> para <a href="https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/">traducir de ECMAScript 6 a ECMAScript 5</a>. En un entorno en el que sepamos se usa solo Chrome o Firefox como en una intranet o una aplicación de uso interno en una organización podemos utilizar estas novedades y si es una aplicación accesible por cualquier usuario desde internet podemos hacer la conversión de ECMAScript 6 a ECMAScript 5 con <a href="https://gulpjs.com/">gulp</a> o <a href="https://gruntjs.com/">grunt</a>.</p>
<p>Estas son gran parte de las novedades que he anotado al leer el libro Learning JavaScript. Para profundizar sobre JavaScript la documentación de <a href="https://developer.mozilla.org/es/">Mozilla Developer Network</a> está muy bien como manual de referencia donde hay más ejemplos y comentarios más extensos de los que hago en cada sección.</p>
<div class="alert alert-warning tableofcontents">
    <h2>Contenido del artículo</h2>
    <toc></toc>
</div>
<h3 id="definición-de-variables">Definición de variables</h3>
<p>Para solventar las deficiencias de las variables declaradas con <em>var</em> hay dos nuevas palabras reservadas <em>let</em> para <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Declarations">declarar variables</a> que cambian de valor y <em>const</em> para constantes. También se pueden declarar símbolos que son identificadores de tipos únicos e inmutables.</p>
<p>El problema de las variables declaradas con <em>var</em> está en que tienen ámbito de función con <em>let</em> no existe hasta que es declarada. Las variables con <em>var</em> son declaradas al principio del ámbito de la función o en el ámbito global.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;¡Hola mundo!&#39;</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">symbol</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">(</span><span class="s1">&#39;descripcion&#39;</span><span class="p">);</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>variables.js</span>
    </div>
</div>
<h3 id="interpolación-de-variables-en-cadenas">Interpolación de variables en cadenas</h3>
<p>La <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">interpolación de variables en cadenas</a> facilita la construcción de <em>strings</em> y hace el código más legible. Las plantillas se definen con comillas de acento grave `.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>&#10;<span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="sb">`¡Hola </span><span class="si">${</span><span class="nx">now</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span><span class="si">}</span><span class="sb">!`</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>&#10;<span class="c1">// ¡Hola 2016!&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>interpolation.js</span>
    </div>
</div>
<h3 id="desestructuración">Desestructuración</h3>
<p>Se ha incorporado la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">asignación desestructurada</a> pudiendo hacer cosas como las siguientes en las asignaciones y en las llamadas a las funciones.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="c1">// Arrays&#10;</span><span class="c1"></span><span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>&#10;<span class="kr">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">b</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="c1">// 1, 2&#10;</span><span class="c1"></span>&#10;<span class="c1">// Objects&#10;</span><span class="c1"></span><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Juan&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span> <span class="p">};</span>&#10;<span class="kr">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span> <span class="o">=</span> <span class="nx">object</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">age</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="c1">// Juan, 30&#10;</span><span class="c1"></span>&#10;<span class="c1">// Functions&#10;</span><span class="c1"></span><span class="kd">function</span> <span class="nx">whois</span><span class="p">({</span><span class="nx">displayName</span><span class="o">:</span> <span class="nx">displayName</span><span class="p">,</span> <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span> <span class="nx">firstName</span><span class="o">:</span> <span class="nx">name</span> <span class="p">}}){</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">displayName</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>&#10;  <span class="nx">id</span><span class="o">:</span> <span class="mi">42</span><span class="p">,</span>&#10;  <span class="nx">displayName</span><span class="o">:</span> <span class="s2">&#34;jgarcia&#34;</span><span class="p">,</span>&#10;  <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Juan&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;García&#34;</span>&#10;  <span class="p">}</span>&#10;<span class="p">};</span>&#10;&#10;<span class="nx">whois</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>&#10;<span class="c1">// Juan Garcia is jgarcia &#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>destructuring.js</span>
    </div>
</div>
<h3 id="operador-_spread_">Operador <em>spread</em></h3>
<p>El <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">operador <em>spread</em></a> permite a una expresión se expandida en lugares donde se esperan múltiples argumentos como en llamadas a funciones, múltiples elementos para literales de <em>arrays</em> o múltiples variables para asignación desestructurada.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>&#10;<span class="kr">const</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">array1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array2</span><span class="p">);</span>&#10;<span class="c1">// Array [ 1, 2, 3, 4, 5, 6 ]&#10;</span><span class="c1"></span>&#10;<span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">x</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">y</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">z</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="p">}</span>&#10;<span class="nx">func</span><span class="p">(...</span><span class="nx">array1</span><span class="p">);</span>&#10;<span class="c1">// 1, 2, 3&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>spread.js</span>
    </div>
</div>
<h3 id="bucles-con-_in_-y-_of_">Bucles con <em>in</em> y <em>of</em></h3>
<p>Usando el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in">iterador <em>in</em></a> en un bucle recorremos las propiedades de un objeto y con el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of">iterador <em>of</em></a> podemos recorrer cualquier objeto iterable. Cualquier objeto que definamos podemos hacerlo iterable cumpliendo el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">protocolo Iterable</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Juan&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span> <span class="p">};</span>&#10;<span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>&#10;&#10;<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">property</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">property</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">object</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="p">}</span>&#10;<span class="c1">// name: Juan &#10;</span><span class="c1">// age: 30&#10;</span><span class="c1"></span>&#10;<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">property</span> <span class="k">of</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">property</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>&#10;<span class="p">}</span>&#10;<span class="c1">// 1&#10;</span><span class="c1">// 2&#10;</span><span class="c1">// 3&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>iterator-in-of.js</span>
    </div>
</div>
<h3 id="funciones">Funciones</h3>
<p>En JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions">definir funciones</a> es una parte muy importante de la esencia del lenguaje, ahora hay una forma corta de definir funciones.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;¡Hola mundo!&#39;</span><span class="p">);</span> <span class="p">}</span>&#10;<span class="nx">func</span><span class="p">();</span>&#10;<span class="c1">// ¡Hola mundo!&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>arrow-functions.js</span>
    </div>
</div>
<h3 id="arrays">Arrays</h3>
<p>El <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">tipo Array</a> tiene muchos métodos y funciones adecuadas para la programación funcional como <em>map</em>, <em>filter</em> o <em>reduce</em> y también <em>push</em>, <em>pop</em>, <em>shift</em>, <em>unshift</em>, <em>forEach</em>, <em>slice</em>, <em>splice</em>, <em>fill</em>, <em>copyWithin</em>, <em>findIndex</em>, <em>lastIndexOf</em>, <em>indexOf</em>, <em>reverse</em>, <em>sort</em>, <em>some</em>, <em>every</em>, <em>join</em> o <em>concat</em>. Funciones que antes no estaban presentes y para suplir su ausencia usábamos la librería <em>underscore</em>.</p>
<h3 id="métodos-de-la-clase-_function_">Métodos de la clase <em>Function</em></h3>
<p>Teniendo en una variable de <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">tipo Function</a> podemos llamarla con <em>call</em> incluyendo un parámetro que se considerará el valor de la referencia <em>this</em> dentro de la función. Con <em>apply</em> los argumentos serán los definidos en un array aunque con la sintaxis <em>spread</em> esta función puede caer en desuso. Con <em>bind</em> podemos asociar a la función la referencia que siempre se tomará como <em>this</em>.</p>
<h3 id="nueva-sintaxis-para-clases">Nueva sintaxis para clases</h3>
<p>Anteriormente en JavaScript ya se podían <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">definir clases</a> haciendo uso de la propiedad <em>prototype</em> aunque su sintaxis ahora se ha simplificado y hecho más parecida a otros lenguajes además de definir propiedades con su método <em>getter</em> y <em>setter</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">class</span> <span class="nx">Vehiculo</span> <span class="p">{</span>&#10;  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_marca</span> <span class="o">=</span> <span class="s1">&#39;Seat&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_color</span> <span class="o">=</span> <span class="s1">&#39;rojo&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_kilometros</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;  <span class="nx">get</span> <span class="nx">color</span><span class="p">()</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_color</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;  <span class="nx">set</span> <span class="nx">color</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_color</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kr">class</span> <span class="nx">Coche</span> <span class="kr">extends</span> <span class="nx">Vehiculo</span> <span class="p">{</span>&#10;  <span class="nx">get</span> <span class="nx">kilometros</span><span class="p">()</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_kilometros</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;  <span class="nx">set</span> <span class="nx">kilometros</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_kilometros</span> <span class="o">=</span> <span class="nx">k</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kr">const</span> <span class="nx">coche</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Coche</span><span class="p">();</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">coche</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span>&#10;<span class="c1">// rojo&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>classes.js</span>
    </div>
</div>
<h3 id="objetos-map-y-set">Objetos Map y Set</h3>
<p>Los objetos pueden ser utilizados como mapas pero a veces utilizar un objeto no es deseable como contenedor de datos, para ello se definen los <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> que son clases que a través de una clave se accede a un valor y <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> para colecciones sin elementos repetidos.</p>
<p>Algunas funciones de la clase Map son <em>get</em>, <em>set</em>, <em>has</em>, <em>size</em>, <em>keys</em>, <em>values</em>, <em>entries</em>, <em>forEach</em>, <em>delete</em>, <em>clear</em> y <em>size</em>. Algunas de la clase Set son <em>add</em>, <em>has</em>, <em>forEach</em>, <em>delete</em> y <em>size</em>.</p>
<h3 id="operadores-_instanceof_-y-_typeof_">Operadores <em>instanceof</em> y <em>typeof</em></h3>
<p>Con <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a> se puede comprobar si una variable es de un cierto tipo, si su cadena de prototipos incluye la función indicada. Con <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a> se puede conocer el tipo de dato de una variable.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">coche</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">coche</span> <span class="k">instanceof</span> <span class="nx">Coche</span><span class="p">);</span>  <span class="c1">// true&#10;</span><span class="c1"></span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">coche</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// object&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mi">1</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// number&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="s1">&#39;¡Hola mundo!&#39;</span><span class="p">);</span>   <span class="c1">// string&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">true</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// boolean&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">symbol</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="c1">// symbol&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">fibonacci</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// function&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>instanceof-typeof.js</span>
    </div>
</div>
<h3 id="excepciones">Excepciones</h3>
<p>JavaScript soporta gestionar ciertas circunstancias de error con excepciones y con la construcción <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">try catch finally</a> similar a la existente en lenguajes como Java.</p>
<h3 id="_callback_-y-_promise_"><em>Callback</em> y <em>Promise</em></h3>
<p>Algunas tareas las manejamos usando <a href="https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks">funciones <em>callback</em></a>, funciones que se pasan como argumento y que son llamadas en algún momento. La programación con <em>callback</em> se hace complicada en la programación asíncrona cuando se anidan varias funciones. Con los <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">objetos Promise</a> el código de la programación asíncrona es más legible.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">resolve</span><span class="p">();</span>&#10;<span class="p">});</span>&#10;&#10;<span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;then&#39;</span><span class="p">);</span>&#10;<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;catch&#39;</span><span class="p">);</span>&#10;<span class="p">});</span>&#10;<span class="c1">// then&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>callback-promise.js</span>
    </div>
</div>
<h3 id="_generators_"><em>Generators</em></h3>
<p>Los <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator">objetos Generator</a> que se basan en el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">protocolo <em>Iterator</em></a> pueden establecer una comunicación entre el generador y el código que lo llama con la palabra reservada <em>yield</em> que retorna el valor del generador y la función <em>next()</em> del iterador que puede proporcionar una parámetro usable en el generador. Las funciones generadoras se declaran poniendo un * después de la palabra <em>function</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre tabindex="0" class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacci</span><span class="p">()</span> <span class="p">{</span>&#10;  <span class="kd">var</span> <span class="nx">fn1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;  <span class="kd">var</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>&#10;  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">fn1</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn1</span> <span class="o">=</span> <span class="nx">fn2</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn2</span> <span class="o">=</span> <span class="nx">current</span> <span class="o">+</span> <span class="nx">fn1</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">reset</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">current</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="nx">reset</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span>&#10;&#10;&#10;<span class="kd">var</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">();</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 0&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 2&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 3&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 5&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 8&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 0&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 2&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>generator.js</span>
    </div>
</div>
<p>Otros métodos nuevos de la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">clase <em>Object</em></a> son <em>freeze</em> que impide añadir nuevas propiedades al objeto, eliminar existentes o modificar sus valores haciendo al objeto inmutable. Con <em>seal</em> se previene únicamente añadir nuevas propiedades.</p>
<h3 id="misc">Misc</h3>
<p>Declarando el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">modo esctricto</a> con <em>&lsquo;use strict&rsquo;;</em> evitamos algunos de los errores que podemos cometer al usar JavaScript como declarar una variable en un ámbito global cuando no es nuestra intención. Con el método <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">toString()</a> de los objetos podremos proporcionar una representación de un objeto más descriptiva.</p>
<h3 id="manipulación-dom">Manipulación DOM</h3>
<p>Es raro que para manipular el árbol <a href="https://es.wikipedia.org/wiki/Document_Object_Model">DOM</a> que representa el HTML cargado en el navegador no usemos la librería jQuery pero para casos básicos o cuando no podemos usar esa librería o queremos esa dependencia podemos hacer uso de las funciones incorporadas en el propio navegador y algunas funciones declaradas en el <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">objeto Document</a>. Algunos métodos del objeto Documento son <em>getElementById</em>, <em>getElementsByClassName</em>, <em>getElementsByTagName</em>, <em>querySelector</em> y <em>querySelectorAll</em>.</p>
<p>Para manipular el texto de un nodo se usa la propiedad <em>textContent</em> de la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">interfaz Node</a> y para incluir en el nodo contenido HTML la propiedad <em>innerHTML</em> de la <a href="https://developer.mozilla.org/en-US/docs/Web/API/element">interfaz Element</a>.</p>
<p>Con <em>createElement</em> de Document mediante código podemos crear nuevos elementos y con <em>appendChild</em> o <em>insertBefore</em> de Node insertarlos en el árbol DOM. Con la propiedad <em>classList</em> y los métodos <em>add</em> y <em>remove</em> podemos añadir clases a un nodo y con <em>dataset</em> acceder a los atributos <em>data-</em> de la etiqueta.</p>
<h3 id="eventos">Eventos</h3>
<p>Los navegadores definen más de 200 eventos ante los que podemos reaccionar, uno de los más típicos es el <em>click</em> en un botón. A un <a href="https://developer.mozilla.org/en-US/docs/Web/API/element">Element</a> de la página y con el método <em>addEventListener()</em> se pueden asociar eventos.</p>
<p>Eventos como el <em>click</em> en algunos elementos tienen definido un comportamiento por defecto, para evitar ejecutar ese comportamiento por defecto disponemos de la función <em>preventDefault</em>.</p>
<p>Los manejadores de eventos se van recorriendo primero en modo captura desde la raíz hasta el nodo del árbol DOM donde se ha producido el evento y posteriormente en modo burbuja desde el nodo donde se ha producido el evento hasta la raíz. Con <em>stopPropagation</em> se puede cancelar la propagación del evento, realmente la propagación se sigue realizando pero el evento se marca como cancelado. Con <em>stopImmediatePropagation</em> se puede parar la propagación completamente, parando incluso la propagación con el evento cancelado.</p>
<p>Todos estos ejemplos funcionan en los navegadores Firefox y Chrome pudiendo probarlos en la consola JavaScript que incorporan para los desarrolladores. En la página <a href="http://es6-features.org/">es6-features</a> hay una lista completa de todas las nuevas características de ECMAScript 6.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://developer.mozilla.org/es/">Mozilla Developer Network</a></li>
<li><a href="http://es6-features.org/">es6-features</a></li>
</ul>
</div>
]]>
        </content>
        
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>
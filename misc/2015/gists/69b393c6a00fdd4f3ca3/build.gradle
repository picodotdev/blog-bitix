import org.jooq.util.GenerationTool
import org.jooq.util.jaxb.Configuration
import org.jooq.util.jaxb.CustomType
import org.jooq.util.jaxb.Database
import org.jooq.util.jaxb.ForcedType
import org.jooq.util.jaxb.Generate
import org.jooq.util.jaxb.Generator
import org.jooq.util.jaxb.Jdbc
import org.jooq.util.jaxb.Target

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'spring-boot'

mainClassName = 'io.github.picodotdev.blogbitix.springboot.Main'

def versions = [
    'gradle':              '2.9',
    'tapestry':            '5.4-rc-1',
    'spring':              '4.2.3.RELEASE',
    'spring_boot':         '1.3.0.RELEASE',
    'hibernate_validator': '5.2.2.Final',
    'jooq':                '3.7.1',
    'guava':               '18.0',
    'h2':                  '1.4.190',
    'slf4j':               '1.7.13',
    'log4j2':              '2.4.1',
    'servlet_api':         '3.1.0'
]

buildscript {
    def versions = [
        'spring_boot':           '1.3.0.RELEASE',
        'jooq':                  '3.7.1',
        'h2':                    '1.4.190'
    ]

    repositories {
        mavenCentral()
    }
   
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$versions.spring_boot")
        classpath "org.jooq:jooq-codegen:$versions.jooq"
        classpath "com.h2database:h2:$versions.h2"
    }
}

repositories {
    mavenCentral()
    
    // For access to Apache Staging (Preview) packages
    maven {
        name 'Apache Staging'
        url 'https://repository.apache.org/content/groups/staging'
    }
}

dependencies {
    // Spring
    compile "org.springframework:spring-context:$versions.spring"
    compile "org.springframework:spring-jdbc:$versions.spring"
    compile "org.springframework:spring-tx:$versions.spring"
    compile("org.springframework.boot:spring-boot-starter:$versions.spring_boot") { exclude(group: 'ch.qos.logback') }
    compile("org.springframework.boot:spring-boot-starter-web:$versions.spring_boot") { exclude(group: 'ch.qos.logback') }
    compile("org.springframework.boot:spring-boot-starter-actuator:$versions.spring_boot") { exclude(group: 'ch.qos.logback') }
    compile "org.hibernate:hibernate-validator:$versions.hibernate_validator"
    
    // Tapestry
    compile "org.apache.tapestry:tapestry-core:$versions.tapestry"
    compile "org.apache.tapestry:tapestry-webresources:$versions.tapestry"
    compile "org.apache.tapestry:tapestry-javadoc:$versions.tapestry"
    compile "org.apache.tapestry:tapestry-beanvalidator:$versions.tapestry"
    compile("org.apache.tapestry:tapestry-spring:$versions.tapestry") { exclude(group: 'org.springframework') }
    
    // Database	
    compile "org.jooq:jooq:$versions.jooq"
    compile "org.jooq:jooq-meta:$versions.jooq"
    compile "commons-dbcp:commons-dbcp:1.4"
    runtime "com.h2database:h2:$versions.h2"
    
    // Logging
    compile "org.slf4j:slf4j-api:$versions.slf4j"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j2"
    compile "org.apache.logging.log4j:log4j-api:$versions.log4j2"
    compile "org.apache.logging.log4j:log4j-core:$versions.log4j2"
    
    // Misc
    compile "org.apache.commons:commons-lang3:3.4"
    compile "javax.servlet:javax.servlet-api:$versions.servlet_api"
}

task generateModels << {
    Configuration configuration = new Configuration()
        .withJdbc(new Jdbc()
            .withDriver('org.h2.Driver')
            .withUrl('jdbc:h2:./misc/database/app')
            .withUser('sa')
            .withPassword('sa'))
        .withGenerator(new Generator()
            .withGenerate(new Generate()
                .withInterfaces(true)
                .withPojos(true)
                .withRelations(true)
                .withValidationAnnotations(true))
            .withName('org.jooq.util.DefaultGenerator')
            .withDatabase(new Database()
                .withCustomTypes([
                    new CustomType()
                        .withName('java.time.LocalDateTime')
                        .withConverter('io.github.picodotdev.blogbitix.springboot.misc.TimestampConverter')
                        
                ])
                .withForcedTypes([
                    new ForcedType()
                        .withName('java.time.LocalDateTime')
                        .withTypes('TIMESTAMP')                     
                ])
                .withName('org.jooq.util.h2.H2Database')
                .withIncludes('.*')
                .withExcludes('')
                .withInputSchema('JOOQ'))
            .withTarget(new Target()
                .withPackageName('io.github.picodotdev.blogbitix.springboot.jooq')
                .withDirectory('src/main/java')));

    GenerationTool.main(configuration)
}

task updateDatabase(type:Exec) {
	commandLine "misc/liquibase-3.4.1/liquibase", '--classpath=misc/libs/h2-1.4.189.jar', '--driver=org.h2.Driver',
		'--changeLogFile=misc/database/changelog.xml', '--url=jdbc:h2:./misc/database/app', '--username=sa', '--password=sa', 'update'
}

task wrapper(type: Wrapper) {
    gradleVersion = versions.gradle
}

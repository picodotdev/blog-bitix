<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">Blog Bitix</title>
    <subtitle type="text">Blog sobre al lenguaje de programación Java y la distribución GNU/Linux que uso habitualmente, Arch Linux, lo que aprendo sobre el software libre, la programación web y otros temas relacionados con la tecnología y la informática. El contenido puede contener trazas de asuntos fuera de tema.</subtitle>
    <link rel="self" href="https://picodotdev.github.io/blog-bitix/index.xml"/>
    <link href="https://picodotdev.github.io/blog-bitix/" />
    <id>https://picodotdev.github.io/blog-bitix/posts/2022/</id>
    <updated>2022-12-29T21:00:00+01:00</updated>
    <author><name>picodotdev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix/assets/favicon.ico</icon>
    <logo>https://picodotdev.github.io/blog-bitix/assets/images/blog-bitix.svg</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/02/analisis-de-los-juegos-de-aventuras-uncharted-the-nathan-drake-collection/</id>
        <title>Análisis de los juegos de aventuras Uncharted The Nathan Drake Collection</title>
        <updated>2022-02-24T19:00:00+01:00</updated>
        <published>2022-02-24T19:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/02/analisis-de-los-juegos-de-aventuras-uncharted-the-nathan-drake-collection/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Uncharted The Nathan Drake Collection contiene el conjunto de los tres primeros Uncharted, juegos  de aventuras de historia lineal para la consola PlayStation, tesoros, disparos y peleas con algunos comentarios de humor y persecuciones en vehículos que son la seña de identidad de la saga. Aún siendo juegos lanzados para la PS3 siguen siendo unos buenos juegos de aventuras de historia lineal con una duración más asequible que normalmente exigen los juegos de mundo abierto. La colección remasterizada para PS4 tiene mejoras gráficas sobre los originales.</strong></p>]]>
        
        </content>
        
            
                <category term="juegos"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/02/que-son-los-archivos-dotfiles-y-como-gestionarlos-con-chezmoi/</id>
        <title>Qué son los archivos dotfiles y cómo gestionarlos con chezmoi</title>
        <updated>2022-02-17T20:00:00+01:00</updated>
        <published>2022-02-17T20:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/02/que-son-los-archivos-dotfiles-y-como-gestionarlos-con-chezmoi/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Los archivos <em>dotfiles</em> son utilizados para guardar información de configuración de las aplicaciones que se almacenan en el directorio del usuario. Se denominan <em>dotfiles</em> porque son archivos que empiezan por un punto o están en una carpeta que empieza por un punto, además en GNU/Linux los archivos que empiezan por un punto son archivos ocultos que por defecto los exploradores de archivos no muestran. Para no perder la configuración de estos archivos adaptada por el usuario a sus preferencias al migrar a otro sistema o compartir la configuración entre varios sistemas hay varios programas con la funcionalidad específica de gestionar los archivos <em>dotfiles</em>.</strong></p>]]>
        
        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/02/validar-las-propiedades-de-configuracion-de-spring-boot-al-iniciar-la-aplicacion/</id>
        <title>Validar las propiedades de configuración de Spring Boot al iniciar la aplicación</title>
        <updated>2022-02-03T18:00:00+01:00</updated>
        <published>2022-02-03T18:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/02/validar-las-propiedades-de-configuracion-de-spring-boot-al-iniciar-la-aplicacion/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Spring permite realizar validaciones sobre las propiedades de configuración antes de iniciar la aplicación, esto permite evitar errores en tiempo de ejecución más difíciles de depurar ya que la excepción que se origine quizá sea difícil de asociar a que el valor una variable de configuración es incorrecta, por ejemplo, que una variable de configuración no tiene valor y si fuese una contraseña de base de datos originar un fallo de conexión a la base de datos o que un servicio REST devolviese un error 403 por no proporcionar la credencial. Con las mismas anotaciones de validación sobre las propiedades de configuración del paquete <em>javax.validation</em> que se utilizan para validar <em>beans</em> de Java se pueden utilizar para validar los valores de configuración de Spring.</strong></p>]]>
        
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/01/desempaquetado-y-analisis-de-teclado-mecanico-compacto-dierya-dk61e/</id>
        <title>Desempaquetado y análisis de teclado mecánico compacto DIERYA DK61E</title>
        <updated>2022-01-27T19:00:00+01:00</updated>
        <published>2022-01-27T19:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/01/desempaquetado-y-analisis-de-teclado-mecanico-compacto-dierya-dk61e/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Desde hace un tiempo he cambiado un teclado de membrana completo por uno mecánico dado que quería que ocupase menos espacio. Otra ventaja es que los teclados mecánicos ofrecen mejor experiencia de escritura y personalización, y los TKL o 60% son más compactos y ocupan menos espacio, su contrapartida es que suelen ser algo más caros pero su mayor precio al usarlos a algunos usuarios es algo justificado para uno de los principales dispositivos del ordenador. La marca DIERYA me ha enviado un ejemplar del modelo DK61E con formato 60% y disposición en inglés, un teclado con unas especificaciones de teclado de gama alta pero con un precio muy ajustado que consigue ser un producto con una buena relación calidad/precio y una buena opción de compra a considerar. En este artículo hago el desempaquetado y análisis del teclado mecánico DIERYA DK61E.</strong></p>]]>
        
        </content>
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/01/las-clases-para-logging-del-paquete-jul-incluidas-en-la-api-de-java/</id>
        <title>Las clases para logging del paquete JUL incluidas en la API de Java</title>
        <updated>2022-01-20T22:00:00+01:00</updated>
        <published>2022-01-20T22:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/01/las-clases-para-logging-del-paquete-jul-incluidas-en-la-api-de-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Entre las clases de la API de Java hay clases para la tarea de trazas o <em>logging</em> disponibles desde la versión 1.4 del JDK que para muchos casos son suficientes. Una de las librerías más popular para <em>logging</em> en Java como Log4j proporcionan funcionalidades más avanzadas que las del paquete <em>java.util.logging</em> y la seguridad de que en caso de necesitar algo relativo a <em>logging</em> será raro que Log4j no lo soporte de alguna forma. Sin embargo, las clases del paquete JUL de Java son suficiente y no es imprescindible una librería external ni incluir su dependencia en el proyecto.</strong></p>]]>
        
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/01/articulo-9-de-yo-apoyo-al-software-libre/</id>
        <title>Artículo #9 de Yo apoyo al software libre</title>
        <updated>2022-01-13T23:00:00+01:00</updated>
        <published>2022-01-13T23:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/01/articulo-9-de-yo-apoyo-al-software-libre/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Con los ingresos por publicidad de AdSense, afiliado de Amazon y artículos patrocinados desde hace unos años hago una donación a los programas que utilizo habitualmente o me resultan interesantes. El gestor de contraseñas KeePassXC es uno de los programas que utilizo y me es muy útil para guardar de forma segura las credenciales de inicio de sesión en varios servicios.</strong></p>]]>
        
        </content>
        
            
                <category term="planeta-codigo"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2022/01/analizar-y-detectar-fallos-de-seguridad-en-las-dependencias-de-java/</id>
        <title>Analizar y detectar fallos de seguridad en las dependencias de Java</title>
        <updated>2022-01-06T11:00:00+01:00</updated>
        <published>2022-01-06T11:00:00+01:00</published>
        <link rel="alternate" type="text/html" href="https://picodotdev.github.io/blog-bitix/2022/01/analizar-y-detectar-fallos-de-seguridad-en-las-dependencias-de-java/"/>
        <author><name>picodotdev</name></author>
        <content type="html">
        <![CDATA[<p><strong>Dada la complejidad de muchas aplicaciones de software hace que estas usen gran cantidad de dependencias, muchas de proyectos de software libre o código abierto. Es muy probable que con el paso del tiempo en alguna de las dependencias de las aplicaciones se descubra un error de seguridad importante y requiera una actualización lo más pronto posible. No es posible estar completamente a salvo de estar afectado por un fallo de seguridad en el software por mucho que se intente, por este motivo la mejor estrategia es detectar proactivamente y temprana los errores de seguridad y actualizar las dependencias a nuevas versiones con el fallo corregido. Varias organizaciones identifican, definen, describen y catalogan los fallos de seguridad de forma pública en una base de datos y hay herramientas automatizadas que con las bases de datos de fallos de seguridad permiten analizar las dependencias de un proyecto. Un ejemplo ha sido el caso de la librería Log4j 2 que por su gravedad y y popularidad muchas organizaciones han estado afectadas.</strong></p>]]>
        
        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="seguridad"/>
            
        
    </entry>
    
</feed>